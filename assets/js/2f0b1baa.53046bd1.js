"use strict";(self.webpackChunkanthology_dev_docs=self.webpackChunkanthology_dev_docs||[]).push([[837],{4137:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var s=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,s)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,s,n=function(e,t){if(null==e)return{};var r,s,n={},o=Object.keys(e);for(s=0;s<o.length;s++)r=o[s],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)r=o[s],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=s.createContext({}),l=function(e){var t=s.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=l(e.components);return s.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},h=s.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(r),h=n,m=d["".concat(c,".").concat(h)]||d[h]||p[h]||o;return r?s.createElement(m,a(a({ref:t},u),{},{components:r})):s.createElement(m,a({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,a=new Array(o);a[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:n,a[1]=i;for(var l=2;l<o;l++)a[l]=r[l];return s.createElement.apply(null,a)}return s.createElement.apply(null,r)}h.displayName="MDXCreateElement"},9243:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var s=r(7462),n=(r(7294),r(4137));const o={layout:"post",title:"Merge and Crosslist courses","purple-text-title":"",id:"rest_apis-learn-advanced-crosslist_courses",categories:"Learn Rest",author:"Ryan Haber",doctitle:"Use APIs to Merge and Cross-list Courses"},a="Use APIs to Merge and Cross-list Courses",i={unversionedId:"REST APIs/Learn/Advanced/rest_apis-learn-advanced-crosslist_courses",id:"REST APIs/Learn/Advanced/rest_apis-learn-advanced-crosslist_courses",title:"Merge and Crosslist courses",description:"Overview",source:"@site/docs/REST APIs/Learn/Advanced/merge-and-crosslist-courses.md",sourceDirName:"REST APIs/Learn/Advanced",slug:"/REST APIs/Learn/Advanced/rest_apis-learn-advanced-crosslist_courses",permalink:"/docs/REST APIs/Learn/Advanced/rest_apis-learn-advanced-crosslist_courses",draft:!1,tags:[],version:"current",frontMatter:{layout:"post",title:"Merge and Crosslist courses","purple-text-title":"",id:"rest_apis-learn-advanced-crosslist_courses",categories:"Learn Rest",author:"Ryan Haber",doctitle:"Use APIs to Merge and Cross-list Courses"},sidebar:"documentationSidebar",previous:{title:"Template Variables: Dynamic Rendering",permalink:"/docs/REST APIs/Learn/Advanced/rest_apis-learn-advanced-dynamic_rendering"},next:{title:"SOAP-to-REST",permalink:"/docs/REST APIs/Learn/Advanced/rest_apis-learn-advanced-soap_to_rest"}},c={},l=[{value:"Overview",id:"overview",level:3},{value:"Before you begin",id:"before-you-begin",level:3},{value:"Merge a course",id:"merge-a-course",level:3},{value:"Get the children of a course",id:"get-the-children-of-a-course",level:3},{value:"Get the course set that a course belongs to",id:"get-the-course-set-that-a-course-belongs-to",level:3}],u={toc:l},d="wrapper";function p(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,s.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"use-apis-to-merge-and-cross-list-courses"},"Use APIs to Merge and Cross-list Courses"),(0,n.kt)("h3",{id:"overview"},"Overview"),(0,n.kt)("p",null,"Your institution often needs to manage many courses or sections together. The\nmechanism that Learn provides for doing this is referred to as\ncourse merging or cross-listing. Merged and cross-listed courses are, under\nthe hood, the same thing: two or more courses in a parent-child relationship.\nA course set is a parent course together with all its child courses. In\nphysical terms, these students might have different courses listed on their\nschedules. If their courses are merged in Learn, their schedules show the time\nand place as determined by the registrar and they receive instruction from the\nsame instructor(s). All students in the child courses have access to the same\nonline content."),(0,n.kt)("p",null,"Learn synchronizes enrollments in child courses with their parent\ncourse. Users enrolled in a child course thus have access to the content of\nthe parent course. Likewise, when you use management tools in a parent course,\nyou will also affect users enrolled in its children courses. Learn\npreserves user roles from the last time a user is enrolled into any of the\ncourses in the course set. A student can only exist in one course in a course\nset; Learn ignores duplicate enrollments."),(0,n.kt)("p",null,"Users with administrative entitlements can merge courses."),(0,n.kt)("h3",{id:"before-you-begin"},"Before you begin"),(0,n.kt)("p",null,"You need an authentication token from a user with administrative entitlements\nto merge courses. For a complete list of specific requirements for any\nparticular method, see the ",(0,n.kt)("a",{parentName:"p",href:"https://developer.anthology.com/portal/displayApi/Learn"},"Learn API\nreference"),"."),(0,n.kt)("h3",{id:"merge-a-course"},"Merge a course"),(0,n.kt)("p",null,"To merge one course as a child of another:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Find the courseId of the course that you want to be the parent."),(0,n.kt)("li",{parentName:"ol"},"Find the courseId of the course you want to be the child."),(0,n.kt)("li",{parentName:"ol"},"Make a PUT request to /learn/api/public/v1/courses/{courseId}/children/{childCourseId}.")),(0,n.kt)("h3",{id:"get-the-children-of-a-course"},"Get the children of a course"),(0,n.kt)("p",null,"To identify the children courses of a course:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Find the courseId of the parent course."),(0,n.kt)("li",{parentName:"ol"},"Make a GET request to /learn/api/public/v1/courses/{courseId}/children.")),(0,n.kt)("h3",{id:"get-the-course-set-that-a-course-belongs-to"},"Get the course set that a course belongs to"),(0,n.kt)("p",null,"To get a list of all the courses merged with a particular course, regardless\nof which are children and which is the parent, make a GET request to\n/learn/api/public/v1/courses/{courseId}/crossListSet."))}p.isMDXComponent=!0}}]);