"use strict";(self.webpackChunkanthology_dev_docs=self.webpackChunkanthology_dev_docs||[]).push([[5014],{15680:(e,t,a)=>{a.d(t,{xA:()=>c,yg:()=>y});var r=a(96540);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),p=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(a),m=n,y=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return a?r.createElement(y,i(i({ref:t},c),{},{components:a})):r.createElement(y,i({ref:t},c))}));function y(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:n,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},98145:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=a(58168),n=(a(96540),a(15680));const o={title:"Custom properties and parameter substitution",id:"lti-parameters",sidebar_position:5,published:"",edited:"2024-09-25"},i=void 0,s={unversionedId:"blackboard/lti/1.3/core/lti-parameters",id:"blackboard/lti/1.3/core/lti-parameters",title:"Custom properties and parameter substitution",description:"As defined in the Core LTI 1.3 specifications, Learn supports the addition of custom parameters to both the global tool configuration and a per-placement configuration. These can be defined as key-value pairs separated by equal signs (=). Additionally, Learn supports dynamic variables (also called parameter substitution in the specifications), where the value added in the launch will depend on the status of the environment at launch time.",source:"@site/docs/blackboard/lti/1.3/core/05-dynamic-values.md",sourceDirName:"blackboard/lti/1.3/core",slug:"/blackboard/lti/1.3/core/lti-parameters",permalink:"/docs/blackboard/lti/1.3/core/lti-parameters",draft:!1,editUrl:"https://github.com/OneComputerGuy/anthologydevdocs/tree/main/docs/blackboard/lti/1.3/core/05-dynamic-values.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Custom properties and parameter substitution",id:"lti-parameters",sidebar_position:5,published:"",edited:"2024-09-25"},sidebar:"documentationSidebar",previous:{title:"Optional authentication for additional services",permalink:"/docs/blackboard/lti/1.3/core/optional-requests"},next:{title:"Sample JWT content",permalink:"/docs/blackboard/lti/1.3/core/jwt-contents"}},l={},p=[{value:"Custom Parameters",id:"custom-parameters",level:2},{value:"Parameter substitution",id:"parameter-substitution",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...a}=e;return(0,n.yg)(u,(0,r.A)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("p",null,"As defined in the Core LTI 1.3 specifications, Learn supports the addition of custom parameters to both the global tool configuration and a per-placement configuration. These can be defined as key-value pairs separated by equal signs (=). Additionally, Learn supports dynamic variables (also called parameter substitution in the specifications), where the value added in the launch will depend on the status of the environment at launch time."),(0,n.yg)("h2",{id:"custom-parameters"},"Custom Parameters"),(0,n.yg)("p",null,"As mentioned, the custom parameters are key-value pairs that are added to the JWT token sent to your tool when the LTI Message Launch flow is completed. Each pair occupies a single line, and there is no limit on the amount of custom parameters that can be added. An example of the custom parameters is the following:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre"},"key1=some & value\n")),(0,n.yg)("p",null,"The resulting value in the JWT token sent to your tool is the following:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-json"},'"https://purl.imsglobal.org/spec/lti/claim/custom": {\n    "key1": "some & value",\n}\n')),(0,n.yg)("h2",{id:"parameter-substitution"},"Parameter substitution"),(0,n.yg)("p",null,"To enhance this functionality, you can also use the custom dynamic variables defined in ",(0,n.yg)("a",{parentName:"p",href:"docs/blackboard/rest-apis/advanced/dynamic-rendering"},"Dynamic Rendering with template Variables")," to get user, course or environment information at launch time."),(0,n.yg)("p",null,"Learn also supports the substitution variables defined in the LTI specification file here: ",(0,n.yg)("a",{parentName:"p",href:"https://www.imsglobal.org/spec/lti/v1p3#customproperty"},"https://www.imsglobal.org/spec/lti/v1p3#customproperty"),". The syntax is the same as a custom parameter (a key-value pair separated by an equal sign), but the variable from the specification must be preceded with a dollar sign, as seen here:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre"},"firstAvailable=$ResourceLink.available.startDateTime\nuserSysRoles=@X@user.role@X@\n")),(0,n.yg)("p",null,"The resulting values on the launch will be:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre"},'"https://purl.imsglobal.org/spec/lti/claim/custom": {\n    "firstAvailable": "2024-09-25T13:00:00Z",\n    "userSysRoles": "Z",\n}\n')),(0,n.yg)("admonition",{title:"No value to replace",type:"caution"},(0,n.yg)("p",{parentName:"admonition"},"In case the variable doesn't have a value stored for it (e.g: System role, enrollment start date, context history, etc), the system will send the string with the variable unaltered, as seen here:"),(0,n.yg)("p",{parentName:"admonition"},"The parameter:"),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",{parentName:"pre"},"groupId=$CourseGroup.id\n")),(0,n.yg)("p",{parentName:"admonition"},"The included value"),(0,n.yg)("pre",{parentName:"admonition"},(0,n.yg)("code",{parentName:"pre"},'"groupId": "$CourseGroup.id",\n'))))}d.isMDXComponent=!0}}]);