"use strict";(globalThis.webpackChunkanthology_dev_docs=globalThis.webpackChunkanthology_dev_docs||[]).push([[5014],{18022:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"blackboard/lti/1.3/core/lti-parameters","title":"Custom properties and parameter substitution","description":"As defined in the Core LTI 1.3 specifications, Learn supports the addition of custom parameters to both the global tool configuration and a per-placement configuration. These can be defined as key-value pairs separated by equal signs (=). Additionally, Learn supports dynamic variables (also called parameter substitution in the specifications), where the value added in the launch will depend on the status of the environment at launch time.","source":"@site/docs/blackboard/lti/1.3/core/05-dynamic-values.md","sourceDirName":"blackboard/lti/1.3/core","slug":"/blackboard/lti/1.3/core/lti-parameters","permalink":"/docs/blackboard/lti/1.3/core/lti-parameters","draft":false,"unlisted":false,"editUrl":"https://github.com/blackboard/anthologydevdocs/tree/main/docs/blackboard/lti/1.3/core/05-dynamic-values.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Custom properties and parameter substitution","id":"lti-parameters","sidebar_position":5,"published":"","edited":"2024-09-25"},"sidebar":"documentationSidebar","previous":{"title":"Optional authentication for additional services","permalink":"/docs/blackboard/lti/1.3/core/optional-requests"},"next":{"title":"Sample JWT content","permalink":"/docs/blackboard/lti/1.3/core/jwt-contents"}}');var s=a(74848),i=a(28453);const o={title:"Custom properties and parameter substitution",id:"lti-parameters",sidebar_position:5,published:"",edited:"2024-09-25"},r=void 0,l={},c=[{value:"Custom Parameters",id:"custom-parameters",level:2},{value:"Parameter substitution",id:"parameter-substitution",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"As defined in the Core LTI 1.3 specifications, Learn supports the addition of custom parameters to both the global tool configuration and a per-placement configuration. These can be defined as key-value pairs separated by equal signs (=). Additionally, Learn supports dynamic variables (also called parameter substitution in the specifications), where the value added in the launch will depend on the status of the environment at launch time."}),"\n",(0,s.jsx)(t.h2,{id:"custom-parameters",children:"Custom Parameters"}),"\n",(0,s.jsx)(t.p,{children:"As mentioned, the custom parameters are key-value pairs that are added to the JWT token sent to your tool when the LTI Message Launch flow is completed. Each pair occupies a single line, and there is no limit on the amount of custom parameters that can be added. An example of the custom parameters is the following:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"key1=some & value\n"})}),"\n",(0,s.jsx)(t.p,{children:"The resulting value in the JWT token sent to your tool is the following:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'"https://purl.imsglobal.org/spec/lti/claim/custom": {\n    "key1": "some & value",\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"parameter-substitution",children:"Parameter substitution"}),"\n",(0,s.jsxs)(t.p,{children:["To enhance this functionality, you can also use the custom dynamic variables defined in ",(0,s.jsx)(t.a,{href:"/docs/blackboard/rest-apis/advanced/dynamic-rendering",children:"Dynamic Rendering with template Variables"})," to get user, course or environment information at launch time."]}),"\n",(0,s.jsxs)(t.p,{children:["Learn also supports the substitution variables defined in the LTI specification file here: ",(0,s.jsx)(t.a,{href:"https://www.imsglobal.org/spec/lti/v1p3#customproperty",children:"https://www.imsglobal.org/spec/lti/v1p3#customproperty"}),". The syntax is the same as a custom parameter (a key-value pair separated by an equal sign), but the variable from the specification must be preceded with a dollar sign, as seen here:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"firstAvailable=$ResourceLink.available.startDateTime\nuserSysRoles=@X@user.role@X@\n"})}),"\n",(0,s.jsx)(t.p,{children:"The resulting values on the launch will be:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'"https://purl.imsglobal.org/spec/lti/claim/custom": {\n    "firstAvailable": "2024-09-25T13:00:00Z",\n    "userSysRoles": "Z",\n}\n'})}),"\n",(0,s.jsxs)(t.admonition,{title:"No value to replace",type:"caution",children:[(0,s.jsx)(t.p,{children:"In case the variable doesn't have a value stored for it (e.g: System role, enrollment start date, context history, etc), the system will send the string with the variable unaltered, as seen here:"}),(0,s.jsx)(t.p,{children:"The parameter:"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"groupId=$CourseGroup.id\n"})}),(0,s.jsx)(t.p,{children:"The included value"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'"groupId": "$CourseGroup.id",\n'})})]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>r});var n=a(96540);const s={},i=n.createContext(s);function o(e){const t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);