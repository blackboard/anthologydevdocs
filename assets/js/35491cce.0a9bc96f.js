"use strict";(globalThis.webpackChunkanthology_dev_docs=globalThis.webpackChunkanthology_dev_docs||[]).push([[1086],{27162:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"blackboard/rest-apis/demo-code/c-sharp-demo","title":"C# Demo","description":"The rest demo script demonstrates authenticating a REST application,","source":"@site/docs/blackboard/rest-apis/demo-code/csharp.md","sourceDirName":"blackboard/rest-apis/demo-code","slug":"/blackboard/rest-apis/demo-code/c-sharp-demo","permalink":"/docs/blackboard/rest-apis/demo-code/c-sharp-demo","draft":false,"unlisted":false,"editUrl":"https://github.com/blackboard/anthologydevdocs/tree/main/docs/blackboard/rest-apis/demo-code/csharp.md","tags":[],"version":"current","frontMatter":{"title":"C# Demo","id":"c-sharp-demo","categories":"Learn Rest","published":"","edited":"","author":"Scott Hurrey"},"sidebar":"documentationSidebar","previous":{"title":"Using cURL to access content attachments","permalink":"/docs/blackboard/rest-apis/demo-code/curl-attach-demo"},"next":{"title":"cURL Demo","permalink":"/docs/blackboard/rest-apis/demo-code/curl-demo"}}');var r=s(74848),a=s(28453);const i={title:"C# Demo",id:"c-sharp-demo",categories:"Learn Rest",published:"",edited:"",author:"Scott Hurrey"},o=void 0,c={},d=[{value:"Prerequisites",id:"prerequisites",level:3},{value:"Overview",id:"overview",level:3},{value:"Assumptions",id:"assumptions",level:3},{value:"Code Walkthrough",id:"code-walkthrough",level:3},{value:"Authorization and Authentication",id:"authorization-and-authentication",level:4},{value:"Calling Services",id:"calling-services",level:4},{value:"Datasources",id:"datasources",level:3},{value:"Terms",id:"terms",level:3},{value:"Courses",id:"courses",level:3},{value:"Users",id:"users",level:3},{value:"Memberships",id:"memberships",level:3},{value:"Conclusion",id:"conclusion",level:3}];function l(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The rest demo script demonstrates authenticating a REST application,\nmanagement and use of the authorization token, and creating, updating,\ndiscovering, and deleting supported Learn objects"}),"\n",(0,r.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"You must [register a developer account and application](/rest-apis/learn/Getting Started/registry) in the Developer Portal"}),"\n",(0,r.jsxs)(n.li,{children:["You must\n",(0,r.jsx)(n.a,{href:"/docs/blackboard/rest-apis/getting-started/rest-and-learn",children:"register your application"})," in Learn"]}),"\n",(0,r.jsx)(n.li,{children:"You must also configure the script as outlined in the README for the project"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"This C# Console Application allows you to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Authenticate"}),"\n",(0,r.jsx)(n.li,{children:"Create, Read, and Update a Data Source"}),"\n",(0,r.jsx)(n.li,{children:"Create, Read, and Update a Term"}),"\n",(0,r.jsx)(n.li,{children:"Create, Read, and Update a Course"}),"\n",(0,r.jsx)(n.li,{children:"Create, Read, and Update a User"}),"\n",(0,r.jsx)(n.li,{children:"Create, Read, and Update a Membership"}),"\n",(0,r.jsx)(n.li,{children:"Delete created objects in reverse order of create - membership, user, course, term, datasource."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"All generated output is sent to the console."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"This is not meant to be a C# tutorial. It will not teach you to write code in\nC#. It will, however, give a Developer familiar with C# the knowledge\nnecessary to build a Web Services integration."})}),"\n",(0,r.jsx)(n.h3,{id:"assumptions",children:"Assumptions"}),"\n",(0,r.jsx)(n.p,{children:"This help topic assumes the Developer:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"is familiar with C#"}),"\n",(0,r.jsx)(n.li,{children:"has installed Microsoft Visual Studio"}),"\n",(0,r.jsxs)(n.li,{children:["has obtained a copy of the ",(0,r.jsx)(n.a,{href:"https://github.com/blackboard/BBDN-REST-Demo-CSharp",children:"source code"})," and built it in conjunction with the project ",(0,r.jsx)(n.a,{href:"https://github.com/blackboard/BBDN-REST-Demo-CSharp/blob/master/README.md",children:"README.md"})," file."]}),"\n",(0,r.jsxs)(n.li,{children:["has a REST-enabled Learn instance, like the ",(0,r.jsx)(n.a,{href:"/docs/blackboard/sandbox-envs/welcome",children:"Developer AMI"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"code-walkthrough",children:"Code Walkthrough"}),"\n",(0,r.jsx)(n.p,{children:"To build an integration with the Learn REST Web Services, regardless of\nthe programming language of choice, can really be summed up in two steps:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Use the Application Key and Secret to obtain an OAuth 2.0 access token, as described in the ",(0,r.jsx)(n.a,{href:"/docs/blackboard/rest-apis/getting-started/basic-authentication",children:"Basic Authentication"})," document."]}),"\n",(0,r.jsx)(n.li,{children:"Call the appropriate REST endpoint with the appropriate data to perform the appropriate action."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"authorization-and-authentication",children:"Authorization and Authentication"}),"\n",(0,r.jsxs)(n.p,{children:["The REST Services rely on OAuth 2.0 Bearer Tokens for authentication. A\nrequest is made to the token endpoint with a Basic Authorization header\ncontaining the base64-encoded key",":secret"," string as its key. The token service\nreturns a JSON object containing the Access Token, the Token Type, and the\nnumber of seconds until the token expires. The token is set to expire after\none hour, and subsequent calls to retrieve the token will return the same\ntoken with an updated expiry time until such time that the token has expired.\nThere is no refresh token and currently no revoke token method."]}),"\n",(0,r.jsx)(n.p,{children:"The C# code handles this in bbdn.rest.Authorizer:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    var authData = string.Format ("{0}:{1}", Constants.KEY, Constants.SECRET);\n    var authHeaderValue = Convert.ToBase64String (Encoding.UTF8.GetBytes (authData));\n    client = new HttpClient ();\n    var endpoint = new Uri(Constants.HOSTNAME + Constants.AUTH_PATH);\n    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue ("Basic", authHeaderValue);\n    var postData = new List<KeyValuePair<string, string>>();\n    postData.Add(new KeyValuePair<string, string>("grant_type", "client_credentials"));\n    HttpContent body = new FormUrlEncodedContent(postData);\n    HttpResponseMessage response;\n    try {\n    \xa0 response = await client.PostAsync(endpoint, body)\n    \xa0\xa0\xa0 if (response.IsSuccessStatusCode)\n    \xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var content = await response.Content.ReadAsStringAsync();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 token = JsonConvert.DeserializeObject<Token>(content);\n'})}),"\n",(0,r.jsx)(n.p,{children:"The JSON response is serialized into the Token object, and you may then\nretrieve those values from that object."}),"\n",(0,r.jsx)(n.h4,{id:"calling-services",children:"Calling Services"}),"\n",(0,r.jsxs)(n.p,{children:["The individual service calls are handled by C# Classes in the\n",(0,r.jsx)(n.code,{children:"bbdn.rest.services"})," package, and each individual service class implements the\n",(0,r.jsx)(n.code,{children:"bbdn.rest.services.IRestService"})," interface. The interface is used to normalize\neach service handler to make additional service implementation standardized as\nnew endpoints are added."]}),"\n",(0,r.jsx)(n.p,{children:"IRestService dictates that four methods must be implemented:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Task<TRestModel> CreateObject (TRestModel T);"}),"\n",(0,r.jsx)(n.li,{children:"Task<TRestModel> ReadObject ();"}),"\n",(0,r.jsx)(n.li,{children:"Task<TRestModel> UpdateObject (TRestModel T);"}),"\n",(0,r.jsx)(n.li,{children:"Task<TRestModel> DeleteObject ();"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Task&lt;TRestModel&gt;"})," allows the code to run asynchronously, but specify when\nan operation should be handled synchronously before proceeding with the\nremaining code. TRestModel is a generic class place holder that allows the\ncode to implement the Interface, but pass it an Object type when it is\ninstantiated in order to take and return an individual service model dependent\nupon the Rest endpoint being implemented."]}),"\n",(0,r.jsx)(n.p,{children:"The individual service class must be defined in the following way, to ensure\nthe Interface is using the appropriate class type for TRestModel:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"    public class DatasourceService : IRestService<Datasource>, IDisposable\n"})}),"\n",(0,r.jsx)(n.p,{children:"Each of these methods creates the JSON body by instantiating the appropriate\nmodel from the bbdn.rest.models package when necessary, and then generates the\nappropriate HTTP Request, ships it to Learn, and serializes the JSON response\nback into the appropriate model."}),"\n",(0,r.jsxs)(n.p,{children:["End points are generally defined as ",(0,r.jsx)(n.code,{children:"/learn/api/public/v1/<object type>/<objectId>"}),". Object ID can be either the pk1, like ",(0,r.jsx)(n.code,{children:"_1_1"}),", or as the\nbatchuid. This value should be prepended by externalId:, like\n",(0,r.jsx)(n.code,{children:"externalId:test101"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, to retrieve a course by the pk1 ",(0,r.jsx)(n.code,{children:"_1_1"}),", you would call ",(0,r.jsx)(n.strong,{children:"GET\n/learn/api/public/v1/courses/_1_1"}),". To retrieve by the batchuid test101, you\nwould call ",(0,r.jsxs)(n.strong,{children:["GET /learn/api/public/v1/courses/externalId",":test101","."]})]}),"\n",(0,r.jsx)(n.p,{children:"Create is sent to Learn as a HTTP POST message with a JSON body that defines\nthe object. The endpoint should omit the objectId, as this will be generated\non creation."}),"\n",(0,r.jsx)(n.p,{children:"Read is sent to Learn as a HTTP GET message with an empty body. The endpoint\nshould include the objectId being retrieved."}),"\n",(0,r.jsx)(n.p,{children:"Update is sent to Learn as a HTTP PATCH message with a JSON body that defines\nthe object. The endpoint should include the objectId being updated."}),"\n",(0,r.jsx)(n.p,{children:"Delete is sent to Learn as a HTTP DELETE message with empty body. The endpoint\nshould include the objectId being deleted."}),"\n",(0,r.jsx)(n.h3,{id:"datasources",children:"Datasources"}),"\n",(0,r.jsxs)(n.p,{children:["Datasources are handled in ",(0,r.jsx)(n.code,{children:"bbdn.rest.services.DatasourceService"}),". As illustrated\nabove, this Class implements the IRestService interface and exposes four\nmethods. It also includes methods required to implement the IDisposible\ninterface which is required to use the async/await functionality.."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Create"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    public async Task<Datasource> CreateObject (Datasource dataSource)\n    {\n    \xa0\xa0\xa0\xa0\xa0\xa0 Datasource datasource = new Datasource();\n    \xa0\xa0\xa0\xa0\xa0\xa0 var uri = new Uri( Constants.HOSTNAME + Constants.DATASOURCE_PATH);\n    \xa0\xa0\xa0\xa0\xa0\xa0 try {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var json = JsonConvert.SerializeObject (dataSource);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var body = new StringContent (json, Encoding.UTF8, "application/json");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 HttpResponseMessage response = await client.PostAsync (uri, body);\xa0\xa0\xa0\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (response.IsSuccessStatusCode) {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var content = await response.Content.ReadAsStringAsync ();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 datasource = JsonConvert.DeserializeObject <Datasource> (content);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine (@" Datasource successfully created.");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0 } catch (Exception ex) {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine (@" ERROR {0}", ex.Message);\xa0\xa0\xa0\xa0\n    \xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0 return datasource;\n    }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Read"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    public async Task<Datasource> ReadObject ()\n    {\n    \xa0 Datasource datasource = new Datasource();\n    \xa0 var uri = new Uri(Constants.HOSTNAME + Constants.DATASOURCE_PATH + "/externalId:" + Constants.DATASOURCE_ID);\n    \xa0 try {\n    \xa0\xa0\xa0\xa0\xa0\xa0 var response = await client.GetAsync (uri);\n    \xa0\xa0\xa0\xa0\xa0\xa0 if (response.IsSuccessStatusCode) {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var content = await response.Content.ReadAsStringAsync ();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 datasource = JsonConvert.DeserializeObject<Datasource>(content);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0 } catch (Exception ex) {\n    \xa0 Debug.WriteLine (@" ERROR {0}", ex.Message);\n    \xa0 }\n    \xa0 return datasource;\n    }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Update"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    public async Task<Datasource> UpdateObject (Datasource updateDataSource)\n    {\n    \xa0\xa0\xa0\xa0\xa0\xa0 Datasource datasource = new Datasource();\n    \xa0\xa0\xa0\xa0\xa0\xa0 try {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var json = JsonConvert.SerializeObject (updateDataSource);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var body = new StringContent (json, Encoding.UTF8, "application/json");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 HttpResponseMessage response =\xa0 await HttpClientExtensions.PatchAsync (client, Constants.HOSTNAME + Constants.DATASOURCE_PATH + "/externalId:" + Constants.DATASOURCE_ID, body);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (response.IsSuccessStatusCode) {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine (@" Datasource successfully updated.");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var content = await response.Content.ReadAsStringAsync();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 datasource = JsonConvert.DeserializeObject<Datasource>(content);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0 } catch (Exception ex) {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine (@" ERROR {0}", ex.Message);\n    \xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0 return (datasource);\n    }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Delete"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    public async Task<Datasource> DeleteObject ()\n    {\n    \xa0\xa0\xa0\xa0\xa0\xa0 Datasource datasource = new Datasource();\n    \xa0\xa0\xa0\xa0\xa0\xa0 var uri = new Uri(Constants.HOSTNAME + Constants.DATASOURCE_PATH + "/externalId:" + Constants.DATASOURCE_ID);\n    \xa0\xa0\xa0\xa0\xa0\xa0 try {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var response = await client.DeleteAsync (uri);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (response.IsSuccessStatusCode) {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine (@" Datasource successfully deleted.");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var content = await response.Content.ReadAsStringAsync();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 datasource = JsonConvert.DeserializeObject<Datasource>(content);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0 } catch (Exception ex) {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine (@" ERROR {0}", ex.Message);\n    \xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0 return (datasource);\n    }\n'})}),"\n",(0,r.jsx)(n.h3,{id:"terms",children:"Terms"}),"\n",(0,r.jsxs)(n.p,{children:["Terms are handled in ",(0,r.jsx)(n.code,{children:"bbdn.rest.services.TermService"}),". As illustrated above,\nthis Class implements the IRestService interface and exposes four methods. It\nalso includes methods required to implement the IDisposible interface which is\nrequired to use the async/await functionality.."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Create"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 public async Task<Term> CreateObject(Term newTerm)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Term term = new Term();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var uri = new Uri(Constants.HOSTNAME + Constants.TERM_PATH);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 try\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var json = JsonConvert.SerializeObject(newTerm);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var body = new StringContent(json, Encoding.UTF8, "application/json");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 HttpResponseMessage response = await client.PostAsync(uri, body);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (response.IsSuccessStatusCode)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var content = await response.Content.ReadAsStringAsync();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 term = JsonConvert.DeserializeObject<Term>(content);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" Term successfully created.");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 catch (Exception ex)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" ERROR {0}", ex.Message);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return term;\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Read"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    public async Task<Term> ReadObject()\n    {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Term term = new Term();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var uri = new Uri(Constants.HOSTNAME + Constants.TERM_PATH + "externalId:" + Constants.TERM_ID);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 try\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var response = await client.GetAsync(uri);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (response.IsSuccessStatusCode)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var content = await response.Content.ReadAsStringAsync();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 term = JsonConvert.DeserializeObject<Term>(content);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 catch (Exception ex)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" ERROR {0}", ex.Message);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return term;\n    }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Update"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 public async Task<Term> UpdateObject(Term updateTerm)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Term term = new Term();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 try\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var json = JsonConvert.SerializeObject(updateTerm);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var body = new StringContent(json, Encoding.UTF8, "application/json");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 HttpResponseMessage response = await HttpClientExtensions.PatchAsync(client, Constants.HOSTNAME + Constants.TERM_PATH + "externalId:" + Constants.TERM_ID, body);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (response.IsSuccessStatusCode)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" Term successfully updated.");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var content = await response.Content.ReadAsStringAsync();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 term = JsonConvert.DeserializeObject<Term>(content);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 catch (Exception ex)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" ERROR {0}", ex.Message);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return (term);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Delete"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 public async Task<Term> DeleteObject()\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Term term = new Term();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var uri = new Uri(Constants.HOSTNAME + Constants.TERM_PATH + "externalId:" + Constants.TERM_ID);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 try\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var response = await client.DeleteAsync(uri);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (response.IsSuccessStatusCode)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" Term successfully deleted.");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var content = await response.Content.ReadAsStringAsync();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 term = JsonConvert.DeserializeObject<Term>(content);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 catch (Exception ex)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" ERROR {0}", ex.Message);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return (term);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.h3,{id:"courses",children:"Courses"}),"\n",(0,r.jsxs)(n.p,{children:["Course are handled in ",(0,r.jsx)(n.code,{children:"bbdn.rest.services.CourseService"}),". As illustrated above,\nthis Class implements the IRestService interface and exposes four methods. It\nalso includes methods required to implement the IDisposible interface which is\nrequired to use the async/await functionality.."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Create"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 public async Task<Course> CreateObject(Course newCourse)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Course course = new Course();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var uri = new Uri(Constants.HOSTNAME + Constants.COURSE_PATH);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 try\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var json = JsonConvert.SerializeObject(newCourse);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var body = new StringContent(json, Encoding.UTF8, "application/json");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 HttpResponseMessage response = await client.PostAsync(uri, body);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (response.IsSuccessStatusCode)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var content = await response.Content.ReadAsStringAsync();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 course = JsonConvert.DeserializeObject<Course>(content);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" Course successfully created.");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 catch (Exception ex)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" ERROR {0}", ex.Message);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return course;\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Read"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 public async Task<Course> ReadObject()\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Course course = new Course();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var uri = new Uri(Constants.HOSTNAME + Constants.COURSE_PATH + "/externalId:" + Constants.COURSE_ID);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 try\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var response = await client.GetAsync(uri);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (response.IsSuccessStatusCode)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var content = await response.Content.ReadAsStringAsync();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 course = JsonConvert.DeserializeObject<Course>(content);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 catch (Exception ex)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" ERROR {0}", ex.Message);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return course;\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Update"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 public async Task<Course> UpdateObject(Course updateCourse)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Course course = new Course();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 try\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var json = JsonConvert.SerializeObject(updateCourse);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var body = new StringContent(json, Encoding.UTF8, "application/json");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 HttpResponseMessage response = await HttpClientExtensions.PatchAsync(client, Constants.HOSTNAME + Constants.COURSE_PATH + "/externalId:" + Constants.COURSE_ID, body);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (response.IsSuccessStatusCode)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" Course successfully updated.");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var content = await response.Content.ReadAsStringAsync();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 course = JsonConvert.DeserializeObject<Course>(content);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 catch (Exception ex)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" ERROR {0}", ex.Message);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return (course);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Delete"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 public async Task<Course> DeleteObject()\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Course course = new Course();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var uri = new Uri(Constants.HOSTNAME + Constants.COURSE_PATH + "/externalId:" + Constants.COURSE_ID);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 try\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var response = await client.DeleteAsync(uri);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (response.IsSuccessStatusCode)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" Course successfully deleted.");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var content = await response.Content.ReadAsStringAsync();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 course = JsonConvert.DeserializeObject<Course>(content);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 catch (Exception ex)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" ERROR {0}", ex.Message);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return (course);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.h3,{id:"users",children:"Users"}),"\n",(0,r.jsxs)(n.p,{children:["Users are handled in ",(0,r.jsx)(n.code,{children:"bbdn.rest.services.UserService"}),". As illustrated above,\nthis Class implements the IRestService interface and exposes four methods. It\nalso includes methods required to implement the IDisposible interface which is\nrequired to use the async/await functionality.."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Create"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 public async Task<User> CreateObject(User newUser)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 User user = new User();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var uri = new Uri(Constants.HOSTNAME + Constants.USER_PATH);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 try\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var json = JsonConvert.SerializeObject(newUser);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var body = new StringContent(json, Encoding.UTF8, "application/json");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 HttpResponseMessage response = await client.PostAsync(uri, body);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (response.IsSuccessStatusCode)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var content = await response.Content.ReadAsStringAsync();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 user = JsonConvert.DeserializeObject<User>(content);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" User successfully created.");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 catch (Exception ex)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" ERROR {0}", ex.Message);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return user;\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Read"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 public async Task<User> ReadObject()\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 User user = new User();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var uri = new Uri(Constants.HOSTNAME + Constants.USER_PATH + "externalId:" + Constants.USER_ID);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 try\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var response = await client.GetAsync(uri);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (response.IsSuccessStatusCode)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var content = await response.Content.ReadAsStringAsync();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 user = JsonConvert.DeserializeObject<User>(content);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 catch (Exception ex)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" ERROR {0}", ex.Message);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return user;\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Update"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 public async Task<User> UpdateObject(User updateUser)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 User user = new User();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 try\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var json = JsonConvert.SerializeObject(updateUser);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var body = new StringContent(json, Encoding.UTF8, "application/json");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 HttpResponseMessage response = await HttpClientExtensions.PatchAsync(client, Constants.HOSTNAME + Constants.USER_PATH + "externalId:" + Constants.USER_ID, body);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (response.IsSuccessStatusCode)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" User successfully updated.");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (response.IsSuccessStatusCode)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var content = await response.Content.ReadAsStringAsync();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 user = JsonConvert.DeserializeObject<User>(content);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 catch (Exception ex)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" ERROR {0}", ex.Message);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return user;\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Delete"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 public async Task<User> DeleteObject()\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 User user = new User();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var uri = new Uri(Constants.HOSTNAME + Constants.USER_PATH + "externalId:" + Constants.USER_ID);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 try\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var response = await client.DeleteAsync(uri);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (response.IsSuccessStatusCode)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" User successfully deleted.");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var content = await response.Content.ReadAsStringAsync();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 user = JsonConvert.DeserializeObject<User>(content);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 catch (Exception ex)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" ERROR {0}", ex.Message);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return (user);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.h3,{id:"memberships",children:"Memberships"}),"\n",(0,r.jsxs)(n.p,{children:["Memberships are handled in ",(0,r.jsx)(n.code,{children:"bbdn.rest.services.MemberService"}),". As illustrated\nabove, this Class implements the IRestService interface and exposes four\nmethods. It also includes methods required to implement the IDisposible\ninterface which is required to use the async/await functionality.. In\naddition, the endpoint for memberships is a bit different, in that it is a\nsub-call to courses, so the endpoint would look like\n",(0,r.jsx)(n.code,{children:"/learn/api/public/v1/courses/<courseId>/users/<userId>"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Create"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 public async Task<Membership> CreateObject(Membership newMembership)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Membership membership = new Membership();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var uri = new Uri(Constants.HOSTNAME + Constants.COURSE_PATH + "/externalId:" +\n                Constants.COURSE_ID + "users/externalId:" + Constants.USER_ID);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 try\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var json = JsonConvert.SerializeObject(membership);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var body = new StringContent(json, Encoding.UTF8, "application/json");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 HttpResponseMessage response = await client.PostAsync(uri, body);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (response.IsSuccessStatusCode)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var content = await response.Content.ReadAsStringAsync();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 membership = JsonConvert.DeserializeObject<Membership>(content);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" Membership successfully created.");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 catch (Exception ex)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" ERROR {0}", ex.Message);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return membership;\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Read"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 public async Task<Membership> ReadObject()\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Membership membership = new Membership();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var uri = new Uri(Constants.HOSTNAME + Constants.COURSE_PATH + "/externalId:" +\n                Constants.COURSE_ID + "users/externalId:" + Constants.USER_ID);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 try\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var response = await client.GetAsync(uri);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (response.IsSuccessStatusCode)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var content = await response.Content.ReadAsStringAsync();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 membership = JsonConvert.DeserializeObject<Membership>(content);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 catch (Exception ex)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" ERROR {0}", ex.Message);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return membership;\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Update"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 public async Task<Membership> UpdateObject(Membership updateMembership)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Membership membership = new Membership();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 try\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var json = JsonConvert.SerializeObject(updateMembership);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var body = new StringContent(json, Encoding.UTF8, "application/json");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 HttpResponseMessage response = await HttpClientExtensions.PatchAsync\n                    (client, Constants.HOSTNAME + Constants.COURSE_PATH + "/externalId:"\n                    + Constants.COURSE_ID + "users/externalId:" + Constants.USER_ID, body);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (response.IsSuccessStatusCode)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" Membership successfully updated.");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var content = await response.Content.ReadAsStringAsync();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 membership = JsonConvert.DeserializeObject<Membership>(content);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 catch (Exception ex)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" ERROR {0}", ex.Message);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return (membership);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Delete"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 public async Task<Membership> DeleteObject()\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Membership membership = new Membership();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var uri = new Uri(Constants.HOSTNAME + Constants.COURSE_PATH + "/externalId:" +\n                Constants.COURSE_ID + "users/externalId:" + Constants.USER_ID);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 try\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var response = await client.DeleteAsync(uri);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if (response.IsSuccessStatusCode)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" Membership successfully deleted.");\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 var content = await response.Content.ReadAsStringAsync();\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 membership = JsonConvert.DeserializeObject<Membership>(content);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 catch (Exception ex)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 {\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 Debug.WriteLine(@" ERROR {0}", ex.Message);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return (membership);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(n.p,{children:["All of the code snippets included in this document at included in a sample\nREST Demo C# application available on\n",(0,r.jsx)(n.a,{href:"https://github.com/blackboard/BBDN-REST-Demo-CSharp",children:"GitHub"}),".\nThere is a README.html included that talks more specifically about building and\nrunning the code. Feel free to review the code and run it against a test or\ndevelopment Learn instance to see how it works."]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var t=s(96540);const r={},a=t.createContext(r);function i(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);