"use strict";(globalThis.webpackChunkanthology_dev_docs=globalThis.webpackChunkanthology_dev_docs||[]).push([[6265],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var o=n(96540);const i={},a=o.createContext(i);function r(e){const t=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(a.Provider,{value:t},e.children)}},68131:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"archive/b2/getting-started/archive-b2-gs-dev_life_cycle","title":"Development Life Cycle","description":"This document is deprecated!","source":"@site/docs/archive/b2/getting-started/dev-life-cycle.md","sourceDirName":"archive/b2/getting-started","slug":"/archive/b2/getting-started/archive-b2-gs-dev_life_cycle","permalink":"/docs/archive/b2/getting-started/archive-b2-gs-dev_life_cycle","draft":false,"unlisted":false,"editUrl":"https://github.com/blackboard/anthologydevdocs/tree/main/docs/archive/b2/getting-started/dev-life-cycle.md","tags":[],"version":"current","frontMatter":{"layout":"post","title":"Development Life Cycle","categories":"Learn b2","id":"archive-b2-gs-dev_life_cycle","author":"Scott Hurrey","status":"deprecated","displayed_sidebar":"documentationSidebar"},"sidebar":"documentationSidebar"}');var i=n(74848),a=n(28453);const r={layout:"post",title:"Development Life Cycle",categories:"Learn b2",id:"archive-b2-gs-dev_life_cycle",author:"Scott Hurrey",status:"deprecated",displayed_sidebar:"documentationSidebar"},s="Development Life Cycle",l={},c=[{value:"Before Writing Code",id:"before-writing-code",level:2},{value:"Define the business need and the stakeholders in the project",id:"define-the-business-need-and-the-stakeholders-in-the-project",level:4},{value:"Assemble your team",id:"assemble-your-team",level:4},{value:"Scope user functionality",id:"scope-user-functionality",level:4},{value:"Before Development",id:"before-development",level:2},{value:"Get your developer license",id:"get-your-developer-license",level:4},{value:"Set up your development server",id:"set-up-your-development-server",level:4},{value:"Set up your development workstation",id:"set-up-your-development-workstation",level:4},{value:"Determine how to manage code",id:"determine-how-to-manage-code",level:4},{value:"Starting Development",id:"starting-development",level:2},{value:"Start and configure your project in the IDE",id:"start-and-configure-your-project-in-the-ide",level:4},{value:"Choose what the architecture of your project is going to be",id:"choose-what-the-architecture-of-your-project-is-going-to-be",level:4},{value:"Configure the bb-manifest",id:"configure-the-bb-manifest",level:4},{value:"Determine how you will assemble your project for installation",id:"determine-how-you-will-assemble-your-project-for-installation",level:4},{value:"During Development",id:"during-development",level:2},{value:"Iterate through development",id:"iterate-through-development",level:4},{value:"Comment your code",id:"comment-your-code",level:4},{value:"Keep track of your changes",id:"keep-track-of-your-changes",level:4},{value:"Testing / QA",id:"testing--qa",level:2},{value:"Determine what to test and how to test it",id:"determine-what-to-test-and-how-to-test-it",level:4},{value:"Get your users involved",id:"get-your-users-involved",level:4},{value:"Releasing your product",id:"releasing-your-product",level:2},{value:"Consider running a trial or beta program",id:"consider-running-a-trial-or-beta-program",level:4},{value:"Encourage your power users to train other users",id:"encourage-your-power-users-to-train-other-users",level:4},{value:"Have a plan for dealing with bugs and issues",id:"have-a-plan-for-dealing-with-bugs-and-issues",level:4},{value:"Consider sharing your project",id:"consider-sharing-your-project",level:4},{value:"Maintaining your product",id:"maintaining-your-product",level:2},{value:"Maintenance issues",id:"maintenance-issues",level:4},{value:"Track changes",id:"track-changes",level:4},{value:"Enhancing your product",id:"enhancing-your-product",level:2},{value:"<em>Version 1.1</em>",id:"version-11",level:4},{value:"<em>Version 2</em>",id:"version-2",level:4},{value:"Caveat",id:"caveat",level:4}];function d(e){const t={a:"a",em:"em",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["\u26a0\ufe0f"," This document is deprecated!"]}),"\n",(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"development-life-cycle",children:"Development Life Cycle"})}),"\n",(0,i.jsx)(t.p,{children:"There are many things to consider when developing a Blackboard Building Block.\nHere we describe the issues involved and provide an overview of the\ndevelopment process. This is meant to serve as a general guide of how most\nprojects evolve - not all steps will be necessary in every case scenario and\nadditional steps may be necessary depending on your case scenario."}),"\n",(0,i.jsx)(t.h2,{id:"before-writing-code",children:"Before Writing Code"}),"\n",(0,i.jsx)(t.h4,{id:"define-the-business-need-and-the-stakeholders-in-the-project",children:"Define the business need and the stakeholders in the project"}),"\n",(0,i.jsx)(t.p,{children:"Your project will likely begin with some sort of need. Perhaps your users want\nadditional functionality for the user interface. Perhaps your student\ninformation system team wants to automate your data integration so that it can\nbe real-time. Perhaps you are a system administrator who wants to automate a\nmanual process. Perhaps you are a school administrator who wants greater\ninsight into how your Blackboard installation is being used. All of these boil\ndown into defining the business need for this project. Building Blocks enable\nyou to integrate and extend Blackboard beyond its core functionality. This\nprovides an easy way to add value to what is already a significant technology\ninvestment."}),"\n",(0,i.jsx)(t.p,{children:"When defining the business need for your project, you will want to determine\nwho the stakeholders are in your project. These are the folks who will fund,\nchampion, develop, deliver, implement, use, maintain, and support your new\ntool. You will want to make sure that these folks are at least aware of your\nproject, involve them in the initial project discussions, and likely keep them\nengaged throughout the duration of your project."}),"\n",(0,i.jsx)(t.h4,{id:"assemble-your-team",children:"Assemble your team"}),"\n",(0,i.jsx)(t.p,{children:"Once you determine who is involved and what you want to accomplish, you can\nbegin to assemble the core team of folks who will develop your Building Block.\nThis team will likely include a functional lead and a technical lead. The\nfunctional lead will contribute to those discussions relating to usability,\nuser-friendliness, and where to link to your tool in the user interface. The\ntechnical lead will likely be a developer but may also be the Blackboard\nSystem Administrator doing development work on the side. However, it is\nincreasingly common for schools have their own dedicated academic developer.\nIt is also possible that the person doing your Blackboard development also\ndevelops tools for your school's other backend systems including your student\ninformation system. Some schools even get their students involved with\nBuilding Block development through internships, student work programs, and\nclass projects."}),"\n",(0,i.jsx)(t.h4,{id:"scope-user-functionality",children:"Scope user functionality"}),"\n",(0,i.jsx)(t.p,{children:'The next step is to clearly define what you want to accomplish with your\nintegration. You may have heard the term "use case" used in discussion. This\nis what we refer to here. You will want to scope out what will (and what will\nnot) be part of your first version. It is helpful to get users involved and\nlisten to how they would best like to accomplish the tasks at hand. To\nsuccessfully scope functionality, you will want to be familiar with the areas\nin which you can use Building Blocks to integrate with our products and the\nfunctionality of our API set. There are helpful tutorials on these topics in\nthe Getting Started area of this site.'}),"\n",(0,i.jsx)(t.p,{children:"Set deadlines and determine how to define success"}),"\n",(0,i.jsx)(t.p,{children:"You will also want to determine how you are going to define the success of\nyour project. Some things to consider are successful development of the tool\n(a feat in and of itself), adoption rates of the tool, reduction in time or\nsteps involved in completing a process, enhancements to student-centered\nlearning, availability of new tools for faculty, tighter integration with\nother school systems, increased reporting capabilities, and others."}),"\n",(0,i.jsx)(t.p,{children:"You will also want to consider setting a deadline for implementing your\nproject. Many projects fail simply because they are not completed. There are\nmany challenges to completing a project, but EduGarage provides tutorials,\ntips, and an active discussion forum area to support you through your project."}),"\n",(0,i.jsx)(t.h2,{id:"before-development",children:"Before Development"}),"\n",(0,i.jsx)(t.h4,{id:"get-your-developer-license",children:"Get your developer license"}),"\n",(0,i.jsx)(t.p,{children:"When you are ready to begin your Building Block project, you need to find the\nmember of your organization who has the license to install a developer copy of\nthe Blackboard product. This is a fully-capable edition of our product that is\nlimited in the number of users, courses, and enrollments it can support. The\nperson most likely to have this license is your Blackboard administrator. If\nyou don't have this license and are an enterprise academic client, you can\nlikely request one from your Client Manager at no cost. If you are a\ncommercial partner, click the Business Resources link to the left for\ninstructions on how to obtain a developer license."}),"\n",(0,i.jsx)(t.h4,{id:"set-up-your-development-server",children:"Set up your development server"}),"\n",(0,i.jsx)(t.p,{children:"The next step is to set up a development server that matches your production\nserver's version (7.3.216.0, 8.0.184.3, etc) and platform (Windows, Linux,\nSolaris). You can find instructions on how to set up your environment in the\nTutorials section of this side and the installers to install Blackboard in the\nDownload section."}),"\n",(0,i.jsx)(t.h4,{id:"set-up-your-development-workstation",children:"Set up your development workstation"}),"\n",(0,i.jsx)(t.p,{children:"Now you will need to choose which development environment you'll use to\nactually do your development. Popular choices include Eclipse, MyEclipse,\nNetBeans, and JBoss Developer Studio. Some of these are free; others come at a\nprice. The most popular by far are Eclipse and NetBeans. Use whichever is\neasiest for you. They all accomplish the same tasks in different ways."}),"\n",(0,i.jsx)(t.h4,{id:"determine-how-to-manage-code",children:"Determine how to manage code"}),"\n",(0,i.jsx)(t.p,{children:"You will also want to determine how you are going to store and manage your\ncode. If you are a single developer working on a small project, it might make\nsense to just store your code locally (remember to back it up). If you are\nworking on a larger project or with multiple team members, it makes sense to\nuse a code versioning tool such as CVS or Subversion. These tools are also\nimmensely useful when keeping track of changes to your code over time."}),"\n",(0,i.jsx)(t.h2,{id:"starting-development",children:"Starting Development"}),"\n",(0,i.jsx)(t.h4,{id:"start-and-configure-your-project-in-the-ide",children:"Start and configure your project in the IDE"}),"\n",(0,i.jsx)(t.p,{children:"To start development, you will need to open your IDE and start your project.\nThis process will be different with each IDE, but many include a wizard to get\nyou started. The project that is closest in relation to a Building Block is\nthe dynamic web application. Using the wizard creates a shell for your\napplication and makes it easy to get up and running quickly. The only\ndifference between a Building Block and a web application is the presence of\nthe bb-manifest.xml file. This file tells Blackboard how and where your tool\nintegrates with the Blackboard user interface. It is very similar to the xml\nconfiguration file required when developing portlets."}),"\n",(0,i.jsx)(t.h4,{id:"choose-what-the-architecture-of-your-project-is-going-to-be",children:"Choose what the architecture of your project is going to be"}),"\n",(0,i.jsx)(t.p,{children:"There are many schools of thought on how to architect your web application.\nThere are arguments that favor strict adherence to the MVC (model-view-\ncontroller) design pattern such as can be easily accomplished with Struts.\nOther schools of thought favor the ease of using JSPs to process logic\n(arguably a bad practice). You will see examples of both approaches on this\nsite. Most beginners place all of their code in JSPs to start. As their skill\nlevel advances, they begin migrating this code into the controller and comply\nmore fully with some style of MVC development. If you are willing to persist\nthrough the learning curve, the most commonly seen best practice is to develop\na Struts-based web application. This said, you should be aware that there are\nlimitations to using Struts with your Building Block application specifically\nwith portal modules and with the script that is run upon removal of the\nBuilding Block."}),"\n",(0,i.jsx)(t.h4,{id:"configure-the-bb-manifest",children:"Configure the bb-manifest"}),"\n",(0,i.jsx)(t.p,{children:"As stated above, the bb-manifest.xml file tells Blackboard where and how your\ntool will integrate into our user interface. This file will provide a place to\ndefine the type of Building Block (tool, module, or content type), options\nassociated with each type, other configuration options, and permissions. These\nare described in greater detail in the Developer Guide located in the\nDocumentation area of this site. A more functional overview of where you can\nintegrate with Blackboard products can be found in the Getting Started area of\nthis site. A technical developer will determine exactly where to integrate\nwith Blackboard by working with a functional lead to determine the best\nfeasible user experience."}),"\n",(0,i.jsx)(t.h4,{id:"determine-how-you-will-assemble-your-project-for-installation",children:"Determine how you will assemble your project for installation"}),"\n",(0,i.jsx)(t.p,{children:"You will want to consider using an automated script to build your project and\nprepare it for installation on your development server. It is also possible to\ndo this by hand, and some IDEs include built-in functionality to automate\nbuilding your project. The most popular choice for automating your builds is\nAnt, although a new tool called Maven is also increasingly popular. Building\nBlocks are assembled and packaged as war/zip files for installation on the\nBlackboard server."}),"\n",(0,i.jsx)(t.h2,{id:"during-development",children:"During Development"}),"\n",(0,i.jsx)(t.h4,{id:"iterate-through-development",children:"Iterate through development"}),"\n",(0,i.jsx)(t.p,{children:"During development, you will make changes to your code, build your project,\nand install the resulting war file on your development server using the\nBuilding Blocks Manager area of the System Admin panel. It is a best practice\nto remove the old Building Block before installing the new version. The\nBuilding Block will deploy to the\n/blackboard/content/vi/bb_bb60/plugins/name_of_your_project/ directory on your\ndevelopment server. In this directory, you will be able to modify JSPs\ndirectly and see their changes on the next page load. Class files or jar\nlibraries can also be replaced, but the Building Block will need to be\ninactivated and made available again through the Building Blocks Manager\nbefore these changes will load. Compiled JSPs will appear in the\n/blackboard/apps/tomcat/work/Catalina/localhost/webapps_name of your project/\ndirectory. These can be deleted here to force recompiling of them on the next\npage load."}),"\n",(0,i.jsx)(t.p,{children:"Logging of Building Block activity can appear in any of several log files.\nAlways check /blackboard/logs/bb-services-log.txt and the catalina, stdout,\nand stderr logs in /blackboard/logs/tomcat/ (Windows) or\n/blackboard/apps/tomcat/logs (Linux and Solaris) directories."}),"\n",(0,i.jsx)(t.p,{children:'As you imagine, this is a very manual and potentially time consuming process.\nThe Starter Block discussed in the 2007 DevCon presentation titled "Best\nPractices for Building, Testing and Deploying Building Blocks" automates this\nprocess by using HTTP calls and an Ant script. You can download this tool in\nthe Developer Tools areas of the Downloads section of this site.'}),"\n",(0,i.jsx)(t.h4,{id:"comment-your-code",children:"Comment your code"}),"\n",(0,i.jsx)(t.p,{children:"Always, always, always comment your code, especially if you are using a non-\nstandard practice. You will forget how things work and why you did things in a\ncertain way. Make life easier for yourself and whoever maintains your code by\ncommenting it well."}),"\n",(0,i.jsx)(t.h4,{id:"keep-track-of-your-changes",children:"Keep track of your changes"}),"\n",(0,i.jsx)(t.p,{children:"Going a step beyond commenting your code is using a code versioning system to\nkeep track of changes made in each version of your product. This is a\nrecommended best practice."}),"\n",(0,i.jsx)(t.h2,{id:"testing--qa",children:"Testing / QA"}),"\n",(0,i.jsx)(t.h4,{id:"determine-what-to-test-and-how-to-test-it",children:"Determine what to test and how to test it"}),"\n",(0,i.jsx)(t.p,{children:"One often overlooked step when developing a new Building Block is testing.\nTesting involves not only verifying that your code works, but that it can\nscale to meet the demand of a large user base, and that it adequately and\naccurately meets the needs of your users."}),"\n",(0,i.jsx)(t.p,{children:"One of the most common tools to test code is called JUnit. It allows an\nautomated programmatic script to test API calls. For example, with JUnit you\ncan automate making a connection to a database, adding a record, and closing\nthe connection 100 times sequentially and then verify that 100 records made it\ninto the database. There is another tool along these lines called HTTPUnit\nwhich can perform the same type of testing for web sites. It can load your\nBuilding Block, perform an action, and verify the success of that action\nprogrammatically. In addition to HTTPUnit, there is also a tool called Grinder\nthat can be used to load test your Building Block."}),"\n",(0,i.jsx)(t.p,{children:"Your use cases defined when the project begins roughly correspond to test\ncases used to verify that your new tool meets the requirements set forth by\nthe project team. You should run through each of these and complete an end-to-\nend verification that your tool works and behaves as desired."}),"\n",(0,i.jsx)(t.h4,{id:"get-your-users-involved",children:"Get your users involved"}),"\n",(0,i.jsx)(t.p,{children:"You should absolutely also involve a certain subset of your users with your\nproject. In addition to being an exciting experience for them, it will provide\nthe development team with valuable feedback relating to if the tool meets the\nneeds of your users. This is often called user acceptance testing. Just be\ncareful about scope creep. Your version 1 of your tool is just that - version"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Record everyone's ideas and input but set the expectation that additional\nfunctionality will be considered for future versions only."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"releasing-your-product",children:"Releasing your product"}),"\n",(0,i.jsx)(t.h4,{id:"consider-running-a-trial-or-beta-program",children:"Consider running a trial or beta program"}),"\n",(0,i.jsx)(t.p,{children:"Consider encouraging the same team that helped with user acceptance testing to\nserve as the first users of the new tool in your production environment.\nDepending on how your tool is implemented, you may be able to limit who can\nsee the tool in the Blackboard user interface. A best practice is to install\nyour Building Block and leave the default Course/Org availability as\nUnavailable. Then, have your beta users activate the Building Block within\ntheir individual courses via the Manage Tools area of the Course Control\nPanel. The tool won't show by default for all of your users which will avoid\nconfusion. However, this will not prevent anyone from manually turning this\ntool on. For those who license the Community System, portal modules can be\naccess-restricted by institution role."}),"\n",(0,i.jsx)(t.h4,{id:"encourage-your-power-users-to-train-other-users",children:"Encourage your power users to train other users"}),"\n",(0,i.jsx)(t.p,{children:"As the participants in your testing and beta programs will be the most\nfamiliar with your product, consider encouraging and providing incentives for\nthem to instruct others how to use it."}),"\n",(0,i.jsx)(t.h4,{id:"have-a-plan-for-dealing-with-bugs-and-issues",children:"Have a plan for dealing with bugs and issues"}),"\n",(0,i.jsx)(t.p,{children:"Even the smallest of projects will have a bug or two that escapes the\ntesting/QA cycle. You should have a process for dealing with these issues.\nThis includes having the ability to report the issues such as through your\nexisting help desk or a bug tracking tool such as Bugzilla, allowing users to\ntrack the progress of the fix, making the changes, tracking the changes in\nyour code, testing the changes, and updating your Building Block to its latest\nversion during regularly scheduled Blackboard maintenance hours."}),"\n",(0,i.jsx)(t.h4,{id:"consider-sharing-your-project",children:"Consider sharing your project"}),"\n",(0,i.jsx)(t.p,{children:"Many of the free and almost all of the open source Building Blocks that are\navailable come from the innovation of this developer community. If you would\nlike to consider open sourcing your project, you need to consider several\nthings. These include university intellectual property policy, licensing of\nyour open source tool, variances in APIs among product versions, variances in\nplatform (Windows, Linux, Solaris), and maintenance strategy. Each of these\ncan be relatively easily addressed."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://github.com/oscelot",children:"OSCELOT"})," (the Open Source Community for\nEducational Learning Objects and Tools) has assisted many with open sourcing\ntheir projects in the past. To learn more, visit their web site."]}),"\n",(0,i.jsx)(t.h2,{id:"maintaining-your-product",children:"Maintaining your product"}),"\n",(0,i.jsx)(t.h4,{id:"maintenance-issues",children:"Maintenance issues"}),"\n",(0,i.jsx)(t.p,{children:"The three most common causes of issues when updating a Building Block for the\nmost recent Blackboard version are API changes, API bugs, and core product jar\nlibrary changes. API changes are noted in the Javadoc documentation that ships\nwith each product. Any API marked as deprecated is likely to be removed in the\nnext version. API bugs are unlikely to occur, but they can and do occur.\nFollow the process detailed in the Help section of this site to obtain\nassistance. Libraries also can change between versions. For example, the\nversion of Struts and the servlet-api are both likely to change with upgrades\nmade to the core product. Updates to the Tomcat application server in certain\nreleases can also induce unforeseen and undesired behavior in your Building\nBlocks."}),"\n",(0,i.jsx)(t.h4,{id:"track-changes",children:"Track changes"}),"\n",(0,i.jsx)(t.p,{children:"Again, even if you choose not using a code versioning system to track code\nchanges, you should at the very least make a backup copy of the source code\nand war file for each version."}),"\n",(0,i.jsx)(t.h2,{id:"enhancing-your-product",children:"Enhancing your product"}),"\n",(0,i.jsx)(t.h4,{id:"version-11",children:(0,i.jsx)(t.em,{children:"Version 1.1"})}),"\n",(0,i.jsx)(t.p,{children:"Version 1.1 will likely address some of the bugs and minor limitations with\nyour version 1. This is to be expected. It is a best practice to keep this\nsort of information documented so when you find time to complete 1.1, you can\ncheck off your issues down the list."}),"\n",(0,i.jsx)(t.h4,{id:"version-2",children:(0,i.jsx)(t.em,{children:"Version 2"})}),"\n",(0,i.jsx)(t.p,{children:'Version 2 will likely address those new feature requests brought up in your\nuser acceptance testing and beta programs. These would include any that begin\nwith "It would be nice if..."'}),"\n",(0,i.jsx)(t.h4,{id:"caveat",children:"Caveat"}),"\n",(0,i.jsx)(t.p,{children:"You should be aware that although you should keep track of your code versions,\nchanging the Building Block version in the bb-manifest can have adverse\naffects. Notably, impact on data and records associated with your Building\nBlock which may be lost should you uninstall a previous version to install the\nnew version."}),"\n",(0,i.jsx)(t.p,{children:"Always thoroughly test any changes you make to your Building Blocks."})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);