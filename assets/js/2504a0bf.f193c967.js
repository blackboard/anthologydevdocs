"use strict";(globalThis.webpackChunkanthology_dev_docs=globalThis.webpackChunkanthology_dev_docs||[]).push([[1451],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(96540);const r={},i=a.createContext(r);function s(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:n},e.children)}},57341:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"blackboard/rest-apis/getting-started/framework","title":"Anthology\'s REST API Framework","description":"Anthology\'s new REST API Framework is a giant step forward for integrating","source":"@site/docs/blackboard/rest-apis/getting-started/framework.md","sourceDirName":"blackboard/rest-apis/getting-started","slug":"/blackboard/rest-apis/getting-started/framework","permalink":"/docs/blackboard/rest-apis/getting-started/framework","draft":false,"unlisted":false,"editUrl":"https://github.com/blackboard/anthologydevdocs/tree/main/docs/blackboard/rest-apis/getting-started/framework.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Anthology\'s REST API Framework","id":"framework","categories":"Learn Rest","sidebar_position":3,"author":"Mark O\'Neil","published":"","edited":""},"sidebar":"documentationSidebar","previous":{"title":"Basic Authentication with REST","permalink":"/docs/blackboard/rest-apis/getting-started/basic-authentication"},"next":{"title":"Mapping Entitlements to Privileges","permalink":"/docs/blackboard/rest-apis/getting-started/getting-started-with-entitlements"}}');var r=t(74848),i=t(28453);const s={title:"Anthology's REST API Framework",id:"framework",categories:"Learn Rest",sidebar_position:3,author:"Mark O'Neil",published:"",edited:""},o=void 0,l={},h=[{value:"The Actors in REST API Use Cases",id:"the-actors-in-rest-api-use-cases",level:3},{value:"How These Three Actors Work Together to Enable Learn REST Integrations",id:"how-these-three-actors-work-together-to-enable-learn-rest-integrations",level:4},{value:"Data Exchange between the Actors",id:"data-exchange-between-the-actors",level:4},{value:"Data Flow",id:"data-flow",level:2},{value:"<em>Pre-authorization</em>",id:"pre-authorization",level:3},{value:"<em>Post-authorization</em>",id:"post-authorization",level:3},{value:"Rate Limiting",id:"rate-limiting",level:3}];function d(e){const n={a:"a",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Anthology's new REST API Framework is a giant step forward for integrating\nwith Learn. By moving the integration from in-process code to a\nseparate machine the health of your Learn instance is dramatically\nimproved by lowering complexity and reducing the amount of code running in a\nsingle location. The new REST API and Developer Portal are a work in progress\nand will continually grow in functionality as Learn, the REST APIs,\nand the Developer Portal continue to mature."}),"\n",(0,r.jsx)(n.h3,{id:"the-actors-in-rest-api-use-cases",children:"The Actors in REST API Use Cases"}),"\n",(0,r.jsx)(n.p,{children:"There are three actors in the REST API use case:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Developer:"}),": This is the person who writes an application that uses the new REST APIs. Through the application the developer manages authorization using the registered application\u2019s OAuth Key and Secret, any data sent to or received from Learn, and tracks application entitlements required for operation. ",(0,r.jsx)(n.em,{children:"Developers are limited to non-production testing pursuant to the applicable REST Developer Agreements."})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Learn Administrator"}),": By default, no Applications can access the REST APIs. A Learn Administrator must enable each app from the Learn Admin Panel before access is granted. This is done by creating an integration using the Learn Admin REST API Integrations tool using the developer provided application Id* and a User with the required entitlements as specified by the developer."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Important Note"})}),": By default NO integrations are enabled and the Learn server will not allow integrations without a Learn Administrator taking action."]}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Learn Administrator"}),": The Developer Portal: This is a new website (",(0,r.jsx)(n.a,{href:"https://developer.anthology.com/",children:"https://developer.anthology.com"}),") where a developer can browse the REST API documentation, register as a REST Developer, and register application references for integrating with Learn."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The REST API Framework Actors, interactions, and data paths\n",(0,r.jsx)(n.img,{alt:"RESTDiagram.png",src:t(79345).A+"",width:"3305",height:"1923"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"NOTE"}),": We do NOT support a model where the developer of the REST Application requires the Learn Administrator to get the Application ID, key, and secret for installing the developer\u2019s application on the Learn system. The developer will get one APP ID, key and secret for the one application. The developer is responsible for configuring the key and secret on their server. For security reasons, the key and secret should never be shared with the client or any other another party. The REST Application can determine which institution requests are coming from by examining the FQDN in the requests. There is no need for installing a separate Application ID for a given vendors application on each Learn instance."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"how-these-three-actors-work-together-to-enable-learn-rest-integrations",children:"How These Three Actors Work Together to Enable Learn REST Integrations"}),"\n",(0,r.jsx)(n.p,{children:"A developer (A) - or organization - decides that they want to create a new\napplication which uses the Learn REST APIs. She reviews the\ndocumentation and signs up inside the developer portal (C). Once she\nregisters, she may create one to many applications. Creating an application\nprovides an OAuth Key and Secret which is used to authorize Learn\nREST API access and an Application ID that is used to approve Learn\ninstances."}),"\n",(0,r.jsx)(n.p,{children:"The developer uses the Learn Admin REST API Integrations tool on a\nDeveloper Virtual Machine (B) or their Test instance of Learn (B)\nto enable access within Learn by providing the application ID for\nthe particular application in development. Once the Application has been\nenabled, the developer may now issue REST requests against the specific Learn\nserver. These HTTPS requests are issued directly against the Learn instance\nand are secured by OAuth 2.0."}),"\n",(0,r.jsx)(n.p,{children:"Once the application development and testing is completed, the developer\nshares the application Id and the required entitlements with the Blackboard\nLearn admin to enable access within Learn for the particular\napplication. The admin inputs the application Id provided by the developer and\nassigns a Learn User that the integration will run as. The role for\nthis user must have the entitlements as requested by the developer. This user\ncan be an existing user or a newly created user specific to the application.\nThe application will run as this user in Learn and will thus have all the\nrights that the user has in the system. If the admin wants to allow the\napplication only READ access, this can be done with the security system\nalready available in Learn by assigning the user role READ only entitlements."}),"\n",(0,r.jsx)(n.h4,{id:"data-exchange-between-the-actors",children:"Data Exchange between the Actors"}),"\n",(0,r.jsxs)(n.p,{children:["The request BODY or response is ",(0,r.jsx)(n.em,{children:"never"})," sent to the developer portal."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Personal data is exchanged between the application and Learn\nsystem only - no personally identifiable data is shared with the portal.\nTherefore, all data may remain within the Learn server and REST application\nregions."})}),"\n",(0,r.jsx)(n.p,{children:"Primary key identifiers (e.g. Learn PK1 for User or Course) are shared with\nthe portal for purposes of request logging and error messages. Note that in an\nupcoming release of Learn these PK1s will also be anonymized so no PII\ninformation is ever communicated outside the bounds of Learn-to-application\nexchanges."}),"\n",(0,r.jsx)(n.h2,{id:"data-flow",children:"Data Flow"}),"\n",(0,r.jsx)(n.h3,{id:"pre-authorization",children:(0,r.jsx)(n.em,{children:"Pre-authorization"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The developed application first makes an authorization request to their\nLearn server. This request contains the OAuth Key and Secret provisioned on\napplication creation in the developer portal."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Learn receives the request and asks the Developer Portal for a TOKEN if the\nKEY/SECRET are correct and valid for that Learn instance."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The Developer Portal returns a response to Learn containing a TOKEN if\nvalidation was successful."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"If validation is successful Learn caches and returns the TOKEN in the\nresponse to the application or returns a 401 Invalid client credentials."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": Tokens have a lifecycle of one hour and currently are not revocable."]}),"\n",(0,r.jsx)(n.h3,{id:"post-authorization",children:(0,r.jsx)(n.em,{children:"Post-authorization"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Once authorized, the application may then make data oriented requests to\nLearn by including the issued Token."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Developer data oriented requests are processed by Learn which returns\nresponse data to the requesting application."}),"\n",(0,r.jsx)(n.p,{children:"a. Learn checks the local cache to validate the TOKEN \u2013 if valid it runs and\nreturns the request response."}),"\n",(0,r.jsx)(n.p,{children:"b. In a background thread Learn contacts the developer portal indicating a\nspecified request was used by a TOKEN on a Learn server."}),"\n",(0,r.jsx)(n.p,{children:"c. The developer portal responds to Learn to indicate if the TOKEN is still\nvalid (not revoked) and is still running under the rate limits."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If the TOKEN has been revoked or rate limits have been reached, all future requests for that token will fail."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": Learn sends REST transaction and error log messages to the portal for purposes of API management and usage. The data sent to the portal includes the Learn Instance ID, Developer Application ID, and the REST API used (GET /users/ for instance)."]}),"\n",(0,r.jsx)(n.h3,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,r.jsx)(n.p,{children:"In the background, the Learn instance securely communicates with the Developer\nPortal to enable rate limiting on the Developer Application. This is done by\ntelling the Portal how many and which type of REST calls are being issued to\nLearn."}),"\n",(0,r.jsx)(n.p,{children:"For the duration of the technical preview we have set the rate limit on a\ndevelopers suite of applications to individual institution integrations at\n10,000 requests per 24 hour period. As the Technical Preview progresses we\nwill be collecting data on usage which will be analyzed to determine Customer\nand third party developer production grade rate limits when the Technical\nPreview is lifted."})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},79345:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/framework-1-cb7614afb8215eae842596f1b8693e9d.png"}}]);