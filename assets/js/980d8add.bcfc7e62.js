"use strict";(globalThis.webpackChunkanthology_dev_docs=globalThis.webpackChunkanthology_dev_docs||[]).push([[6313],{23042:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>h,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"blackboard/rest-apis/getting-started/3lo","title":"3LO","description":"One of the drawbacks associated with Basic Authentication is that the application requires broad access, as the tool","source":"@site/docs/blackboard/rest-apis/getting-started/3lo.md","sourceDirName":"blackboard/rest-apis/getting-started","slug":"/blackboard/rest-apis/getting-started/3lo","permalink":"/docs/blackboard/rest-apis/getting-started/3lo","draft":false,"unlisted":false,"editUrl":"https://github.com/blackboard/anthologydevdocs/tree/main/docs/blackboard/rest-apis/getting-started/3lo.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"title":"3LO","id":"3lo","categories":"Learn REST","sidebar_position":8,"author":"Scott Hurrey","published":"","edited":""},"sidebar":"documentationSidebar","previous":{"title":"Releasing your Integration","permalink":"/docs/blackboard/rest-apis/getting-started/releasing-your-integration"},"next":{"title":"REST Tutorials","permalink":"/docs/blackboard/rest-apis/getting-started/tutorials"}}');var r=s(74848),i=s(28453);const a={title:"3LO",id:"3lo",categories:"Learn REST",sidebar_position:8,author:"Scott Hurrey",published:"",edited:""},o="Three-Legged OAuth",h={},l=[{value:"Refresh Tokens",id:"refresh-tokens",level:3},{value:"Use Proof Key for Code Exchange (PKCE) with 3-Legged OAuth 2.0",id:"use-proof-key-for-code-exchange-pkce-with-3-legged-oauth-20",level:3},{value:"Examples",id:"examples",level:3}];function d(e){const t={a:"a",br:"br",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"three-legged-oauth",children:"Three-Legged OAuth"})}),"\n",(0,r.jsxs)(t.p,{children:["One of the drawbacks associated with ",(0,r.jsx)(t.a,{href:"/docs/blackboard/rest-apis/getting-started/basic-authentication",children:"Basic Authentication"})," is that the application requires broad access, as the tool\nis acting as a system-level user and enacting for the user. Three-legged OAuth\n(3LO) allows an application to act as a user. This sounds scary, but it\nactually allows for much more granular access control. Rather than a system\nuser acting as someone that can modify all courses, the application is now\nacting as Professor X, and as such, only has access to his or her courses."]}),"\n",(0,r.jsx)(t.p,{children:"As of Learn 3200.7 (SaaS deployed release), third-party REST\napplications now have the ability to implement 3LO to authorize a user against\nthe APIs and act as that user. In the spirit of sharing pretty pictures, here\nis a nice diagram displaying the workflow:"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"3_legged_oauth_workflow.png",src:s(76056).A+"",width:"1262",height:"604"})}),"\n",(0,r.jsxs)(t.p,{children:["So let's talk a bit about what is happening here. Let's pretend that we have\nbuilt a mobile app that allows a student to get his or her grades. Today, we\nwill be Marlee. Marlee picks up her iPhone and opens the GetMyGrades app. The\nfirst time Marlee opens the app, the app will send a GET request to\n",(0,r.jsx)(t.code,{children:"/learn/api/public/v1/oauth2/authorizationcode"})," with the Content-Type set to\n",(0,r.jsx)(t.code,{children:"form/urlencoded"})," and the following data as query parameters:"]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Parameter"}),(0,r.jsx)(t.th,{children:"Definition"}),(0,r.jsx)(t.th,{children:"Example"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"redirect_uri"}),(0,r.jsx)(t.td,{children:"Where to redirect the user once they have authorized the application"}),(0,r.jsxs)(t.td,{children:["redirect_uri=",(0,r.jsx)(t.a,{href:"https://my.edu/authorized",children:"https://my.edu/authorized"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"response_type"}),(0,r.jsx)(t.td,{children:"Must be set to code. Tells the endpoint to return an authorization code"}),(0,r.jsx)(t.td,{children:"response_type=code"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"client_id"}),(0,r.jsxs)(t.td,{children:["The application's OAuth ",(0,r.jsx)(t.strong,{children:"key"}),", from the ",(0,r.jsx)(t.strong,{children:"key"}),"/secret pair as registered in the developer portal.",(0,r.jsx)("br",{}),(0,r.jsx)(t.strong,{children:"NOTE: This is NOT the Application ID!!"})]}),(0,r.jsx)(t.td,{children:"client_id=8DBBA050-B830-414F-B7F1-0B448A6320C9"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"scope"}),(0,r.jsxs)(t.td,{children:["The application's permissions: read, write, delete, and/or offline.",(0,r.jsx)("br",{}),"Offline is required to use Refresh Tokens",(0,r.jsx)("br",{}),(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"CAUTION"})}),": If you do not ",(0,r.jsx)(t.strong,{children:"set the scope appropriately"})," you will still be able to get an access_token, but when using the access_token you will not be able to GET, POST, or UPDATE as expected. Instead you will get error responses."]}),(0,r.jsx)(t.td,{children:"scope=read"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"state"}),(0,r.jsx)(t.td,{children:"Opaque value used to prevent Cross Site Request Forgery"}),(0,r.jsx)(t.td,{children:"state=DC1067EE-63B9-40FE-A0AD-B9AC069BF4B0"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:"So in this example, my request would look like:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:"GET /learn/api/public/v1/oauth2/authorizationcode?redirect_uri =\nhttps://my.edu/authorized&response_type=code&client_id=8DBBA050-B830-414F-B7F1-0B448A6320C9&scope=read&\nstate=DC1067EE-63B9-40FE-A0AD-B9AC069BF4B0\n"})}),"\n",(0,r.jsx)(t.p,{children:"The result of this action is that Marlee is presented with her school's\nLearn login screen. She logs in and is presented with the following\nscreen, asking her to authorize the application."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"3-loauth-screenshot",src:s(95937).A+"",width:"350",height:"635"})}),"\n",(0,r.jsx)(t.p,{children:"Once Marlee clicks 'Allow', the URL sent as the redirect uri is called with\nthe authorization code as a query parameter, for example:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"https://my.edu/authorized?code=1234567890\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Now the application is able to talk server-to-server as Marlee. The next step\nis to get an access token from Learn based on the authorization code Marlee\ngranted. From here the workflow is very similar to the Basic Authentication\nmethod. The token is requested as a POST request from\n",(0,r.jsx)(t.code,{children:"/learn/api/public/v1/oauth2/token"}),". This is also a ",(0,r.jsx)(t.code,{children:"form/urlencoded"}),". The body of\nthe request contains the text ",(0,r.jsx)(t.code,{children:"grant_type=authorization_code"}),", and the URL is\nparameterized with the code ",(0,r.jsx)(t.code,{children:"code=1234567890"})," and the redirect_uri\n",(0,r.jsx)(t.code,{children:"redirect_uri=https://my.edu/app"}),". So the request looks like:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"POST /learn/api/public/v1/oauth2/token?code=1234567890&redirect_uri=https://my.edu/app\n"})}),"\n",(0,r.jsx)(t.p,{children:"The endpoint responds with the standard token (access_token, expires_in, and\ntoken_type), but also has a couple of new fields. If offline mode is granted,\na refresh_token is returned. This allows the application to get a new token on\nbehalf of the user, even if that user isn't explicitly asking for it. In\naddition, the scope requested in the initial request is returned, as well as\nthe UUID for the user in the user_id field."}),"\n",(0,r.jsx)(t.p,{children:"From this point forward, the access_token is used just as it is when using\nBasic Authentication, but instead of acting as the system user, it is acting\nas Marlee."}),"\n",(0,r.jsx)(t.h3,{id:"refresh-tokens",children:"Refresh Tokens"}),"\n",(0,r.jsx)(t.p,{children:"As mentioned above, one of the available scopes that an application can\nrequest is offline. Essentially, the offline scope allows an application to\naccess Learn as a user without requiring the user to login each\ntime. This might be especially useful in a mobile application to prevent the\nunnecessary redirects each time an application is loaded. The way this works\nis through the use of refresh tokens."}),"\n",(0,r.jsx)(t.p,{children:"The first time a user accesses the application and the normal 3LO process\ntakes place. The user is redirected to Learn, they login and authorize,\nand then the application is off an running. The difference is that a refresh\ntoken is returned in addition to the Bearer token. From this point forward,\nthe third party application can automatically request a new bearer token by\nsending the request with the refresh token without involving the user at all."}),"\n",(0,r.jsx)(t.p,{children:"The HTTP message might look like this:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"POST /learn/api/public/v1/oauth2/token?refresh_token=8DBBA050-B830-414F-B7F1-0B448A6320C9&redirect_uri=https://my.edu/app\n"})}),"\n",(0,r.jsx)(t.p,{children:"From this point forward, the access_token is used just as it is when using\nBasic Authentication, but instead of acting as the system user, it is acting\nas Marlee."}),"\n",(0,r.jsx)(t.h3,{id:"use-proof-key-for-code-exchange-pkce-with-3-legged-oauth-20",children:"Use Proof Key for Code Exchange (PKCE) with 3-Legged OAuth 2.0"}),"\n",(0,r.jsxs)(t.p,{children:["Starting in version 3700.4, Learn's 3-Legged OAuth 2.0\nimplementation supports the Proof Key for Code Exchange (PKCE) extension. For\nmore information about PKCE, see ",(0,r.jsx)(t.a,{href:"https://oauth.net/2/pkce",children:"OAuth 2.0's RFC 7636: Proof Key for Code Exchange"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"To implement the PKCE extension:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Create a random string 43-128 characters long, containing only the characters A-Z, a-z, 0-9, or the following - . _ ~ (hyphen, period, underscore, and tilde). This sting will later be used as your code_verifier."}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Use the S256 hashing method to create a hash of your random string. This hash is your code_challenge. The formula for an S256 hash is based on the SHA-256, but is not exactly the same.",(0,r.jsx)(t.br,{}),"\n","code_challenge = BASE64URL_ENCODE( SHA256( ASCII( code_verifier )))"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["For more information about the S256 hashing algorithm, see ",(0,r.jsx)(t.a,{href:"https://tools.ietf.org/html/rfc7636%23section-4.2",children:"RFC 7636 - Proof Key for Code Exchange by OAuth Public Clients"}),"."]}),"\n",(0,r.jsxs)(t.ol,{start:"3",children:["\n",(0,r.jsxs)(t.li,{children:["Make a request to ",(0,r.jsx)(t.code,{children:"/learn/api/public/v1/oauth2/authorizationcode"}),", and provide a ",(0,r.jsx)(t.code,{children:"code_challenge"})," and ",(0,r.jsx)(t.code,{children:"code_challenge_method"})," in the query parameters. For ",(0,r.jsx)(t.code,{children:"code_challenge_method"}),", the endpoint accepts only ",(0,r.jsx)(t.code,{children:"S256"}),". Your request will look something like:"]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"POST learn/api/public/v1/oauth2/authorizationcode?client_id=YOUR_CLIENT_ID&response_type=code&redirect_url=YOUR_URL&code_challenge=YOUR_CODE_CHALLENGE&code_challenge_method=S256\n"})}),"\n",(0,r.jsxs)(t.ol,{start:"4",children:["\n",(0,r.jsx)(t.li,{children:"Make a request for an access token, as normal. When you do, include your code_verifier as a query parameter. Your request will look like:"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"POST learn/api/public/v1/oauth2/token?grant_type=authorization_code&code=CODE_FROM_AUTH_CALL&code_verifier=YOUR_CODE_VERIFIER\n"})}),"\n",(0,r.jsx)(t.p,{children:"The Learn server will verify that the code_challenge and code_challenge_method\nsent in the first request form a valid hash of code_verifier. This allows to\nthe server to verify that the client asking for the access token is the same\nclient that sent the authorization code request."}),"\n",(0,r.jsxs)(t.ol,{start:"5",children:["\n",(0,r.jsx)(t.li,{children:"When you receive an access token, you can use it as you normally would to make API calls."}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"/docs/blackboard/rest-apis/demo-code/curl-demo",children:"Three-legged OAuth in Curl"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://github.com/blackboard/BBDN-3LO-REST-Swift",children:"BBDN-3LO-REST-Swift"})}),"\n"]})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>o});var n=s(96540);const r={},i=n.createContext(r);function a(e){const t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:t},e.children)}},76056:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/3loworkflow-10ca088dfadb4bb91fc62845febc71bd.png"},95937:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/3loauthscreenshot-a9de77cc2a2fb2960684a397271bf554.png"}}]);