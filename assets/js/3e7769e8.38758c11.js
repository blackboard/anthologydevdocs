"use strict";(self.webpackChunkanthology_dev_docs=self.webpackChunkanthology_dev_docs||[]).push([[3437],{4137:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(a),m=r,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return a?n.createElement(h,i(i({ref:t},u),{},{components:a})):n.createElement(h,i({ref:t},u))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8281:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=a(7462),r=(a(7294),a(4137));const o={layout:"post",title:"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions",categories:"Learn b2",id:"archive-b2-resources-moving_to_saas",author:"Scott Hurrey",displayed_sidebar:"documentationSidebar"},i=void 0,l={unversionedId:"archive/b2/resources/archive-b2-resources-moving_to_saas",id:"archive/b2/resources/archive-b2-resources-moving_to_saas",title:"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions",description:"This document is deprecated!",source:"@site/docs/archive/b2/resources/preparing-for-saas-and-new-learn-versions.md",sourceDirName:"archive/b2/resources",slug:"/archive/b2/resources/archive-b2-resources-moving_to_saas",permalink:"/docs/archive/b2/resources/archive-b2-resources-moving_to_saas",draft:!1,tags:[],version:"current",frontMatter:{layout:"post",title:"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions",categories:"Learn b2",id:"archive-b2-resources-moving_to_saas",author:"Scott Hurrey",displayed_sidebar:"documentationSidebar"},sidebar:"documentationSidebar"},s={},c=[{value:"APIs",id:"apis",level:2},{value:"Database",id:"database",level:2},{value:"Shared Content Folder",id:"shared-content-folder",level:2},{value:"Logging Changes",id:"logging-changes",level:2},{value:"Statelessness",id:"statelessness",level:2},{value:"Java 11",id:"java-11",level:2},{value:"Tomcat 8",id:"tomcat-8",level:2},{value:"JSP Precompilation",id:"jsp-precompilation",level:3},{value:"bb-context-config.properties",id:"bb-context-configproperties",level:3},{value:"com.blackboard.tomcat.servletcontainer.jarscanner.tldJars",id:"comblackboardtomcatservletcontainerjarscannertldjars",level:4},{value:"com.blackboard.tomcat.servletcontainer.jarscanner.pluggabilityJars",id:"comblackboardtomcatservletcontainerjarscannerpluggabilityjars",level:4},{value:"com.blackboard.tomcat.servletcontainer.context.containerSciFilter",id:"comblackboardtomcatservletcontainercontextcontainerscifilter",level:4},{value:"com.blackboard.tomcat.servletcontainer.context.processTldsOnStartup",id:"comblackboardtomcatservletcontainercontextprocesstldsonstartup",level:4},{value:"web.xml",id:"webxml",level:2},{value:"Faster Startup",id:"faster-startup",level:2},{value:"URL Encoding",id:"url-encoding",level:2},{value:"Permissions",id:"permissions",level:2},{value:"BAD",id:"bad",level:4},{value:"GOOD",id:"good",level:4},{value:"Original UI",id:"original-ui",level:2},{value:"Ultra UI",id:"ultra-ui",level:2},{value:"Continuous Delivery",id:"continuous-delivery",level:2},{value:"Installing Building Blocks in Learn SaaS",id:"installing-building-blocks-in-learn-saas",level:2},{value:"Update a Building Block for TinyMCE 5",id:"update-a-building-block-for-tinymce-5",level:2},{value:"B2 Changes Required for SameSite Issues with B2 Mashups",id:"b2-changes-required-for-samesite-issues-with-b2-mashups",level:2},{value:"Why These Changes Are Necessary",id:"why-these-changes-are-necessary",level:4},{value:"Overview of the Changes",id:"overview-of-the-changes",level:4}],u=(d="VersioningTracker",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var d;const p={toc:c},m="wrapper";function h(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(u,{frontMatter:o,mdxType:"VersioningTracker"}),(0,r.kt)("p",null,"\u26a0\ufe0f This document is deprecated!"),(0,r.kt)("h1",{id:"preparing-your-building-blocks-for-learn-saas-and-newer-learn-versions"},"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions"),(0,r.kt)("p",null,"Blackboard Building Blocks have long been a staple in the Blackboard Learn\nplatform. These Java Web Apps allow you to customize the workflow and\nexperience that you and your faculty use to interact with the system."),(0,r.kt)("p",null,"We realize that this is an important part of the Learn ecosystem, and so\nBlackboard Learn SaaS with the Original Experience will continue to support\nyour Building Blocks going forward",(0,r.kt)("strong",{parentName:"p"},"*"),". That said, the architecture of the\nSaaS-delivered platform is dramatically different than that of the self- and\nmanaged-hosted servers you are used to. As a result, your Building Block will\nlikely need to be modified to run in the new Blackboard."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"The following sections list requirements that must be met for a B2 to function in a SaaS environment"),". For example, your B2 must be compiled with Java 8, the database may be Postgres so the best practice is to use Schema.xml, the shared content must be accessed as described below, etc. Many of these are also requirements for a B2 to function on Learn Q2 2016 (3000.x.x) and Q4 2016 (3100.x.x). The best practice is to code to meet all of these requirements, then your B2 will function on SaaS, Managed Hosted, and Self Hosted systems."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"*","Note:")," Building Blocks cannot surface content in an Ultra course, ",(0,r.kt)("strong",{parentName:"p"},"ever"),". B2s meant designed to work with Original Experience courses can continue to work in SaaS, provided they meet the requirements documented here. Ultra Courses surface content from the Content Market - which are built on Partner Cloud, or the LTI standard & Blackboard Learn REST APIs."),(0,r.kt)("h2",{id:"apis"},"APIs"),(0,r.kt)("p",null,"Only use the ",(0,r.kt)("a",{parentName:"p",href:"/docs/archive/b2/getting-started/archive-b2-gs-api_docs"},"published APIs"),". If it's not published, it's private. Our product development\nteam is cleaning up and refactoring a lot of code. If you're using private\nAPIs, there is a good chance they will stop working. So, remove all use of\nprivate APIs. For example we've discovered that B2s that depend on\n",(0,r.kt)("strong",{parentName:"p"},"DocumentManagerEx")," now fail in newer versions of Learn.\n",(0,r.kt)("strong",{parentName:"p"},"DocumentManagerEx")," is private. Don't use it. Eliminate the use of all\nprivate APIs."),(0,r.kt)("h2",{id:"database"},"Database"),(0,r.kt)("p",null,"In SaaS, the database schema name will no longer be ",(0,r.kt)("strong",{parentName:"p"},"BBLEARN")," or\n",(0,r.kt)("strong",{parentName:"p"},"bb_bb60"),". Your B2 code must determine the actual schema name if it has any\ndependency on the value. See ",(0,r.kt)("a",{parentName:"p",href:"https://community.blackboard.com/blogs/4/23"},"Bye Bye BBLEARN & bb_bb60")),(0,r.kt)("p",null,"Also, in SaaS, the database is Postgres. If you\u2019ve been testing your code on\nthe Developer Virtual Machine, this isn\u2019t that big of a deal. Schema.xml will\ncontinue to be supported as it is today. If you are providing SQL statements\nin the form of stored procedures, post_schema_updates, etc, you will just need\nto be sure to supply those files in postgres form, as well. These files will\ntake the suffix, ",(0,r.kt)("strong",{parentName:"p"},"db-pgsql"),'. If a self or managed-hosted client is migrating\nyour B2 to SaaS via a "full database migration" be certain to read ',(0,r.kt)("a",{parentName:"p",href:"https://community.blackboard.com/blogs/4/24"},"SaaS\nMigrations - Sequences and Tables"),"."),(0,r.kt)("p",null,"In addition, its important to note that Exceptions encountered during postgres\ntransactions stop all processing. You must code to handle this occurrence. One\napproach is to create a save point before you start the transaction and roll\nback to that save point upon exception. Here\u2019s a small sample demonstrating\nthis."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Much of the error handling stripped for space\n\npublic static T withSavePoint(Callable c, Connection con) throws SQLException\n{\n  Savepoint savepoint = null;\n\n  try {\n    if ( null != con && !con.getAutoCommit() ) {\n      savepoint = con.setSavepoint();\n    }\n\n    return c.call();\n  } catch ( SQLException e ) {\n    if ( con != null && savepoint != null ) {\n      con.rollback( savepoint );\n    }\n    throw e;\n  }\n}\n")),(0,r.kt)("p",null,"Postgres handles timestamps differently. There are two types of timestamps:\n",(0,r.kt)("strong",{parentName:"p"},"localtimestamp")," and ",(0,r.kt)("strong",{parentName:"p"},"clock_timestamp::timestamp"),". The ",(0,r.kt)("strong",{parentName:"p"},"localtimestamp"),"\nreturns the time at the start of the transaction. The\n",(0,r.kt)("strong",{parentName:"p"},"clock_timestamp()::timestamp")," returns the actual current time. As a result,\nit is best practice to use ",(0,r.kt)("strong",{parentName:"p"},"clock_timestamp()::timestamp")," in your Building\nBlock, as this matches the behavior of timestamps in other databases."),(0,r.kt)("p",null,"Avoid the use of ",(0,r.kt)("strong",{parentName:"p"},"data-templates")," for management of objects that can be\nmanaged through the bb-manifest.xml file. This includes rows in tables like\napplication, navigation_item, and entitlements. The use of data-templates both\nadds risk to live-upgrades and loses customizations (application status,\nentitlement-to-role mappings, etc.)."),(0,r.kt)("h2",{id:"shared-content-folder"},"Shared Content Folder"),(0,r.kt)("p",null,"In the Enterprise Blackboard Learn you are accustomed to developing for, the\nBuilding Block home lives in the shared content directory. For instance, if I\nwrote a building block and set my vendor ID to \u2018bbdn\u2019 and my plugin handle to\n\u2018my-b2\u2019, my building block and all of its related files would live in\n",(0,r.kt)("strong",{parentName:"p"},"blackboard/content/vi/BBLEARN/plugins/bbdn-my-b2"),", and this directory would\nexist once, in only one place, so changes were persisted to all application\nservers."),(0,r.kt)("p",null,"In Learn SaaS, there are two building block homes. There is still the shared\nfile system that is shared among the entire group of application servers, but\nthere is also a local cache on each individual server. As a result, the\nBuilding Block would still reside in the shared directory, similar to\n",(0,r.kt)("strong",{parentName:"p"},"blackboard/content/vi/BBLEARN/plugins/bbdn-my-b2"),", however the web app\nwould live in the local cache on each server, in a directory similar to\n",(0,r.kt)("strong",{parentName:"p"},"blackboard/cache/vi/BBLEARN/plugins/bbdn-my-b2"),"."),(0,r.kt)("p",null,"As a result of this change, several of the Plugin API methods have been\nmodified to handle the dual-folder deployment.\n",(0,r.kt)("strong",{parentName:"p"},"PlugInManager.getPlugInDir()")," and ",(0,r.kt)("strong",{parentName:"p"},"PlugInManager.getPluginsDirectory()"),"\ncan now only be used to access the read-only files from the exploded war in\nthe cache folder. If you need to access the shared config folder for your\nBuilding Block, you can use ",(0,r.kt)("strong",{parentName:"p"},"PlugInUtil.getConfigDirectory()"),". Calling\nmethods like ",(0,r.kt)("strong",{parentName:"p"},"ServletContent.getRealPath()")," will point to the cache folder,\nso be sure that any method you are calling that returns a path or a file is\nreturning what you expect it to."),(0,r.kt)("p",null,"As an example, with prior versions of Learn you could use the following code\nto write to a file in your plugin\u2019s folder and create a configuration file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-properties"},'PlugInManager manager = PlugInManagerFactory.getInstance();\nFile myDir = manager.getPlugInDir( manager.getPlugIn( "myVendorId","myB2Handle" ) );\nFile myConfigDir = new File( myDir, "config" );\nFile myConfigFile = new File( myConfigDir, "config.txt" );\n\n// read/write myConfigFile\n')),(0,r.kt)("p",null,"You will now need to re-write the above code code to look like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'File myConfigDir = PlugInUtil.getConfigDirectory( "myVendorId", "myB2Handle");\nFile myConfigFile = new File(myConfigDir, \u201cconfig.txt\u201d);\n\n// read/write myConfigFile\n')),(0,r.kt)("p",null,"If you just need to read from a file that is included with in your Building\nBlock, you can use the following code snippet to access the cached copy."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'PlugInManager manager = PlugInManagerFactory.getInstance();\nFile myDir = manager.getPlugInDir( manager.getPlugIn( "myVendorId","myB2Handle" ) );\nFile myStaticDirectory = new File (myDir, "webapp/myStaticStuff");\n\n// read from myStaticDirectory - files as originally present in war file\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"See the bb-config.properties section in Developer Virtual Machine - DVM for how to configure your DVM to behave like Learn SaaS in regards to the shared content folder. ",(0,r.kt)("strong",{parentName:"p"},"Note: we no longer provide a local DVM. You must contact us for a special build of the AWS AMI."))),(0,r.kt)("p",null,"Eventually, all write access to the shared folder will be phased out, and\nwrite access for logging will be limited to the log directory returned by\nPlugInUtil.getLogDirectory(). Prior to this change, a new way will be\ndocumented to achieve the same goal without writing directly to the backend of\nthe server."),(0,r.kt)("h2",{id:"logging-changes"},"Logging Changes"),(0,r.kt)("p",null,"In SaaS, logging is handled a bit differently, as clients will not have back-\nend access to the system. You can still log to the log directory, but those\nlogs are redirected to Kibana so your Building Block won\u2019t be able to read\nthat log file. There will be access to the logs through the System Admin\npanel."),(0,r.kt)("p",null,"In order to see your B2s logs in Kibana-Elasticsearch, the only SaaS interface\nfor log files, your B2 must do the following:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Write the log files to the directory returned by ",(0,r.kt)("strong",{parentName:"p"},"blackboard.platform.plugin.PlugInUtil.getLogDirectory."),(0,r.kt)("a",{parentName:"p",href:"https://library.blackboard.com/ref/16ce28ed-bbca-4c63-8a85-8427e135a710/blackboard/platform/plugin/PlugInUtil.html"},(0,r.kt)("strong",{parentName:"a"},"PlugInUtil")," (Building Blocks API 3000.1.0)")),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Typically looks like ",(0,r.kt)("strong",{parentName:"li"},"<","blackboard home",">","/logs/plugins/","<","vendorId",">","-","<","handle%gt;/...")),(0,r.kt)("li",{parentName:"ol"},"Read the API documentation on how to get write permission."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Use this format, with four columns that are pipe separated:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"2016-03-15 01:00:00 | DEBUG | 41:c.b.c.i.task.UsageReportingTask | Generating Usage Report...\n2016-03-15 01:00:00 | ERROR | 68:o.s.s.support.MethodInvokingRunnable | Invocation of method 'doUsageReport' on target class ...failed\njava.lang.NullPointerException: null\n  at com.blackboard.consulting.internships.task.UsageReportingTask.getFirstTimeActivationDateModified(UsageReportingTask.java:68)\n")),(0,r.kt)("p",null,"The b2 logging configuration in the logback.xml file that produces this log\nformat is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<appender ... >\n\n...\n\n<encoder>\n\n<pattern>%date{yyyy-MM-dd HH:mm:ss} | %-5level | %-45(%L:%logger{40}) |\n%m%n%ex{10}</pattern>\n\n</encoder>\n\n...\n\n</appender>\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/mark-b-kauffman/bbdn-bblogbackb2"},"Sample logging code that works in a SaaS environment."))),(0,r.kt)("h2",{id:"statelessness"},"Statelessness"),(0,r.kt)("p",null,"The Learn SaaS cloud architecture is built to the best practices of cloud\ncomputing. As such, in SaaS, Learn is stateless. As a result, you can no\nlonger rely on ",(0,r.kt)("strong",{parentName:"p"},"HttpSession")," persisting across requests. As a result,\nBuilding Blocks that synchronize data on sessions will need to be refactored.\nYou can still use ",(0,r.kt)("strong",{parentName:"p"},"BbSession.setGlobalKey()")," to store data, but you will\nneed to be cognizant of the size of the data, as this is stored in the\ndatabase."),(0,r.kt)("p",null,"As an example, if you currently employ code like the following to store an\nobject in the session:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'request.getSession().setAttribute( "myKey", "myValue" );\nrequest.getSession().setAttribute( "myObjectKey", myObject );\n')),(0,r.kt)("p",null,"You will need to refactor to look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ContextManagerFactory.getInstance().getContext().getSession().setGlobalKey("myVendorId.myB2Handle.myKey", "myValue" );\n')),(0,r.kt)("p",null,"Non-String values need to be serialized to save on the ",(0,r.kt)("strong",{parentName:"p"},"BbSession")," -\nrefactor to avoid if at all possible."),(0,r.kt)("h2",{id:"java-11"},"Java 11"),(0,r.kt)("p",null,"Blackboard Learn SaaS runs on Java 11, as of Learn 3800. As a result, Building Block that are to\nbe installed in the cloud, or on 9.1 Q2 2020 or later, need to be built with\nJava 11. For more information see ",(0,r.kt)("a",{parentName:"p",href:"/docs/archive/b2/resources/archive-b2-resources-prepare_for_java_11"},"8 steps to prepare for Java 11"),"."),(0,r.kt)("h2",{id:"tomcat-8"},"Tomcat 8"),(0,r.kt)("p",null,"Tomcat 8 introduces a few new complexities to the Building Block development\nprocess. This move was an opportunity to re-imagine how the Learn application\nstartup performance could be improved. This work has been extremely\nsuccessful, but requires some refactoring of your code."),(0,r.kt)("h3",{id:"jsp-precompilation"},"JSP Precompilation"),(0,r.kt)("p",null,"It is expected that going forward, all Building Blocks will precompile JSPs.\nThis simple step will assure that your JSP files render properly in Blackboard\nLearn. All bundled Building Blocks are required to take this step, while\ncurrently optional, this could become mandatory in the future."),(0,r.kt)("p",null,"This blog post describes one way to ",(0,r.kt)("a",{parentName:"p",href:"https://community.blackboard.com/blogs/4/25"},"precompile your Java Server Pages")," when using Gradle."),(0,r.kt)("h3",{id:"bb-context-configproperties"},"bb-context-config.properties"),(0,r.kt)("p",null,"Tomcat 8.5 is substantially more configurable in the way that you can\nimplement ",(0,r.kt)("a",{parentName:"p",href:"https://tomcat.apache.org/tomcat-8.5-doc/config/jar-scanner.html"},"jar scanning"),". This file lives in the WEB-INF directory of your Building Block\nand provides the following options:"),(0,r.kt)("h4",{id:"comblackboardtomcatservletcontainerjarscannertldjars"},"com.blackboard.tomcat.servletcontainer.jarscanner.tldJars"),(0,r.kt)("p",null,"Because you should be precompiling your JSP files, this will normally be left\nblank. If on-demand JSP compilation is used, this may be set to a Java regular\nexpression of jar file names. You should only include the jar files containing\nthe TLD files needed by the non-compiled JSP files. The patter can include the\ntemplate variable ",(0,r.kt)("em",{parentName:"p"},"@CORE_TLD_PATTERN@"),", which will resolve to a regular\nexpression matching all Blackboard jar files containing TLDs."),(0,r.kt)("p",null,"Here are a few examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"RECOMMENDED"),": Building Block uses several Blackboard Tag Libraries")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"com.blackboard.tomcat.servletcontainer.jarscanner.tldJars=@CORE_TLD_PATTERN@\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Default")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"com.blackboard.tomcat.servletcontainer.jarscanner.tldJars=\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Building Block uses Struts and the bbNG Tags")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"com.blackboard.tomcat.servletcontainer.jarscanner.tldJars=bb-\ntaglibs.jar|struts-taglib-.*\\\\.jar\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Building Block uses several Blackboard libraries and Struts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"com.blackboard.tomcat.servletcontainer.jarscanner.tldJars=@CORE_TLD_PATTERN@|s\ntruts-taglib-.*\\\\.jar\n")),(0,r.kt)("h4",{id:"comblackboardtomcatservletcontainerjarscannerpluggabilityjars"},"com.blackboard.tomcat.servletcontainer.jarscanner.pluggabilityJars"),(0,r.kt)("p",null,"Set this to a Java regular expression of jar file names that contain web\nfragments, ServletContainerInitializers (SCIs), and other classes with\nannotations defined in the Servlet 3.1 specifications if they are used by the\nBuilding Block.The pattern can contain the template variable\n",(0,r.kt)("em",{parentName:"p"},"@CORE_PLUGGABILITY_PATTERN@"),", which will resolve to a regular expression that\nmatches all Blackboard jar files containing such components."),(0,r.kt)("p",null,"Here is an example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A Building Block contains classes that implement Spring's WebApplicationInitializer")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"com.blackboard.tomcat.servletcontainer.jarscanner.pluggabilityJars=spring-\nweb-.*\\\\.jar\n")),(0,r.kt)("h4",{id:"comblackboardtomcatservletcontainercontextcontainerscifilter"},"com.blackboard.tomcat.servletcontainer.context.containerSciFilter"),(0,r.kt)("p",null,"This Java regular expression should list all SCIs in the CLASSPATH that are\n",(0,r.kt)("strong",{parentName:"p"},"not")," used by the Building Block. The default value is ",(0,r.kt)("strong",{parentName:"p"},"^.","*","$"),", which\nmatches ALL SCIs and assumes that the Building Block does not use any."),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Building Block does not use SCIs and does not have any uncompiled jsps")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"com.blackboard.tomcat.servletcontainer.context.containerSciFilter=^.*$\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If for some reason, your JSP is not compiled, use")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"com.blackboard.tomcat.servletcontainer.context.containerSciFilter=^.*(?<!\\\\.JasperInitializer)$\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the JSPs are compiled, but your code relies on classes that implement Spring's WebAppplicationInitializer")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"com.blackboard.tomcat.servletcontainer.context.containerSciFilter=^.*(?<!\\\\.SpringServletContainerInitializer)$\n")),(0,r.kt)("h4",{id:"comblackboardtomcatservletcontainercontextprocesstldsonstartup"},"com.blackboard.tomcat.servletcontainer.context.processTldsOnStartup"),(0,r.kt)("p",null,"This is not required to be in the bb-context-config.properties file. You would\ninclude this and set it to true only if the Building Block or one of the jar\nfiles it contains defines a listener in a TLD that the Building Block\nrequires."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"com.blackboard.tomcat.servletcontainer.context.processTldsOnStartup=true\n")),(0,r.kt)("p",null,"Here is a final example of a typical /WEB-INF/bb-context-config.properties\nfile:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"com.blackboard.tomcat.servletcontainer.jarscanner.tldJars=\ncom.blackboard.tomcat.servletcontainer.jarscanner.pluggabilityJars=\ncom.blackboard.tomcat.servletcontainer.context.containerSciFilter=^.*$\n")),(0,r.kt)("p",null,"If you see errors like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Unable to compile <myclass> root cause:\nINFO | jvm 1 | 2018/02/06 00:51:17 | java.lang.NullPointerException\nINFO | jvm 1 | 2018/02/06 00:51:17 | at org.apache.jasper.JspCompilationContex\nt.getTldResourcePath(JspCompilationContext.java:566)\nINFO | jvm 1 | 2018/02/06 00:51:17 | at\norg.apache.jasper.compiler.Parser.parseTaglibDirective\n")),(0,r.kt)("p",null,"try adding making your bb-config-context.properties file look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"com.blackboard.tomcat.servletcontainer.jarscanner.tldJars=@CORE_TLD_PATTERN@\ncom.blackboard.tomcat.servletcontainer.jarscanner.pluggabilityJars=\ncom.blackboard.tomcat.servletcontainer.context.containerSciFilter=^.*(?<!\\\\.JasperInitializer)$\n")),(0,r.kt)("h2",{id:"webxml"},"web.xml"),(0,r.kt)("p",null,"Your Building Block should be using Web App version 3.0, and requires\nmetadata-complete to be set. By default and in most cases, this should be set\nto ",(0,r.kt)("strong",{parentName:"p"},"true")," for best performance. Set this to ",(0,r.kt)("strong",{parentName:"p"},"false")," ONLY if your Building\nBlock uses annotation-based web_xml extensions as defined in the Servlet 3.1\nspecification or if your jar files should be scanned for web-fragment.xml.\nThese are some of the annotations that require the metadata-complete attribute\nto be set to false:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"WebServlet"),(0,r.kt)("li",{parentName:"ul"},"WebFilter"),(0,r.kt)("li",{parentName:"ul"},"WebInitParam"),(0,r.kt)("li",{parentName:"ul"},"WebListener"),(0,r.kt)("li",{parentName:"ul"},"MultipartConfig"),(0,r.kt)("li",{parentName:"ul"},"ServletSecurity"),(0,r.kt)("li",{parentName:"ul"},"HttpConstraint"),(0,r.kt)("li",{parentName:"ul"},"HttpMethodConstraint"),(0,r.kt)("li",{parentName:"ul"},"DeclareRoles"),(0,r.kt)("li",{parentName:"ul"},"EJB"),(0,r.kt)("li",{parentName:"ul"},"EJBs"),(0,r.kt)("li",{parentName:"ul"},"Resource"),(0,r.kt)("li",{parentName:"ul"},"Resources"),(0,r.kt)("li",{parentName:"ul"},"PersistenceContext"),(0,r.kt)("li",{parentName:"ul"},"PersistentContexts"),(0,r.kt)("li",{parentName:"ul"},"PersistenceUnit"),(0,r.kt)("li",{parentName:"ul"},"PersistenceUnits"),(0,r.kt)("li",{parentName:"ul"},"PostConstruct"),(0,r.kt)("li",{parentName:"ul"},"PreDestroy"),(0,r.kt)("li",{parentName:"ul"},"RunAs"),(0,r.kt)("li",{parentName:"ul"},"WebServiceRef"),(0,r.kt)("li",{parentName:"ul"},"WebServiceRefs")),(0,r.kt)("p",null,"Some of these annotations, like PostContruct, PreDestroy, and Resource, only\nrequire the setting to be false if they are placed in an object whose life-\ncycle is managed by the container, such as a Servlet or a Listener."),(0,r.kt)("p",null,"Here is an example of what this will look like in your web.xml file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<web-app\n  xmlns="[http://java.sun.com/xml/ns/javaee](https://community.blackboa\nrd.com/external-link.jspa?url=http%3A//java.sun.com/xml/ns/javaee)"\n  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-\napp_3_0.xsd"\n\nversion="3.0" metadata-complete="true">\n')),(0,r.kt)("p",null,"In addition to metadata-complete, another new tag should be included at the\nend of the web.xml file: absolute-ordering. Generally, this should be an empty\ntag for best performance. If web fragments are used, the ones that are\nrequired should be listed explicitly her to to avoid unnecessary\ninitialization of other unused fragments in the class path."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The Building Block does NOT use web fragments")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<absolute-ordering/>\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The Building block uses web fragments from the spring-web jar")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<absolute-ordering>\n  <name>spring_web</name>\n</absolute-ordering>\n")),(0,r.kt)("h2",{id:"faster-startup"},"Faster Startup"),(0,r.kt)("p",null,"When declaring servlets in web.xml, the ","<","load-on-startup",">"," tag allows you to\ndecide when a servlet is loaded into memory. The default value is to load at\nfirst access, but that is not always appropriate for every situation. The\nfollowing table illustrates the tags and their meanings. Be sure to select the\none that is right for your Building Block."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Tag Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"<","load-on-startup",">","1","<","/load-on-startup",">"),(0,r.kt)("td",{parentName:"tr",align:null},"Load the servlet during system initialization.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"<","load-on-startup",">","-1","<","/load-on-startup",">"),(0,r.kt)("td",{parentName:"tr",align:null},"Load the servlet the first time it is accessed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"<","load-on-startup",">","-9876","<","/load-on-startup",">"),(0,r.kt)("td",{parentName:"tr",align:null},"Load the servlet immediately following the Learn system initialization")))),(0,r.kt)("p",null,"Be sure to evaluate your individual integration before deferring your startup.\nIf this or another Building Block depends on the servlet code being registered\nor if this servlet must be live prior to the system starting for user access,\ndeferring startup is not appropriate."),(0,r.kt)("p",null,"Deferring all of your servlets to load immediately following system startup\nwill definitely make the system available to users more quickly, though one\nshould note that those user requests might be a bit slower as all of the\nservlets are starting. In addition, it is important to note that should a user\naccess a servlet that has been deferred and not yet started, it will load at\nthat time, so there is no risk of a servlet being unavailable should the\nprocess still be underway."),(0,r.kt)("p",null,"If you are executing other startup logic inside something such as a\nServletContextListener's contextInitialized method and that logic is not 100%\nrequired to be executed before user activity then please defer it by calling\nContextInitThreadRunner.startThread(Thread) or .startDaemonThread(Thread)."),(0,r.kt)("p",null,"Here is a snippet from the Javadoc explaining this method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"/**\n\n* This method can be used in place of thread.start() when you are starting a thread typically during system startup\n\n* and you do not absolutely NEED that thread to start immediately. Once the system has completed normal startup of\n\n* all webapps (b2s) and is ready to accept requests, any threads registered via this method will be started. <br>\n\n* <br>\n\n* It is safe to call this at any point in time though - if the server has already started then this will merely start\n* the thread.<br>`\n\n* <br>\n\n* The reason we are doing this is to make sure all resources can be\ndedicated to pure startup tasks and not diverted\n\n* to 'background' activity, thus getting the system to a ready state a bit\nfaster.\n\n*/\n")),(0,r.kt)("h2",{id:"url-encoding"},"URL Encoding"),(0,r.kt)("p",null,"Tomcat 8.5.12 and later releases of Tomcat 8.5.x by default does not allow\ncurly braces ( { } ) or vertical bars, often referred to as pipes ( | ) in\nURLs. For backward compatibility, ",(0,r.kt)("a",{parentName:"p",href:"https://tomcat.apache.org/tomcat-8.5-doc/config/systemprops.html"},"Tomcat provides a way to override this\nbehavior")," by allowing\na system property tomcat.util.http.parser.HttpParser.requestTargetAllow to be\ndefined. Please be advised that this exposes the application to a ",(0,r.kt)("a",{parentName:"p",href:"https://nvd.nist.gov/vuln/detail/CVE-2016-6816"},"known\nsecurity issue"),"."),(0,r.kt)("p",null,"Future versions of Tomcat may not support this override. Therefore, all B2s\nmust url-encode these characters. For example, an URL like ",(0,r.kt)("inlineCode",{parentName:"p"},"http://myuniversity.blackboard.com/webapps/myb2/appController?options={x|y}")," must be written by the application as ",(0,r.kt)("inlineCode",{parentName:"p"},"http://myuniversity.blackboard.com/webapps/myb2/appController?options=%7bx%7cy%7d"),". Otherwise, Tomcat will reject the request."),(0,r.kt)("h2",{id:"permissions"},"Permissions"),(0,r.kt)("p",null,"As Blackboard continues to modernize the Blackboard Learn platform and move\nservices out of the Learn code line and into microservices, the need to secure\nthe application from both accidental and malicious actions, the properties\ngranted to Building Block integrations is necessarily tightening. This is\nbeing addressed in a phased manner, with the intent of providing third-party\ndevelopers ample runway for adjusting to the new restrictions. As new\nrestrictions are added, this page will list them, so be sure you are following\nthis page to receive updates."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Permission"),(0,r.kt)("th",{parentName:"tr",align:null},"Mitigating Factors"),(0,r.kt)("th",{parentName:"tr",align:null},"Current Action","*","*"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"java.security.AllPermission"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Filtered Out")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"java.lang.RuntimePermission"),(0,r.kt)("td",{parentName:"tr",align:null},"createSecurityManager, setSecurityManager"),(0,r.kt)("td",{parentName:"tr",align:null},"Filtered Out")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"java.lang.RuntimePermission"),(0,r.kt)("td",{parentName:"tr",align:null},"action implying createSecurityManager or setSecurityManager"),(0,r.kt)("td",{parentName:"tr",align:null},"Warning Message")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"java.util.PropertyPermission"),(0,r.kt)("td",{parentName:"tr",align:null},"write"),(0,r.kt)("td",{parentName:"tr",align:null},"Warning Message")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"java.io.FilePermission"),(0,r.kt)("td",{parentName:"tr",align:null},"ALL FILES"),(0,r.kt)("td",{parentName:"tr",align:null},"Warning Message")))),(0,r.kt)("p",null,"Many Building Blocks rely on the ALL FILES permission for writing to the file\nsystem. This will be filtered out soon. The Building Block should request\nexplicit file system permissions and utilize the advice in this guide when\nwriting to log files and config directories. To illustrate the change, here is\nan example of a bad permission and a good permission for writing to a log file\nfrom a Building Block."),(0,r.kt)("h4",{id:"bad"},"BAD"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'<permission type="java.io.FilePermission"name="&lt;&lt;ALLFILES&gt;&gt;" actions="read,write,delete,wxecute"/>\n')),(0,r.kt)("h4",{id:"good"},"GOOD"),(0,r.kt)("p",null,"( A couple examples. See ",(0,r.kt)("a",{parentName:"p",href:"https://community.blackboard.com/blogs/4/26"},"ALL FILES No More")," for a full set.)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'<permission type="java.io.FilePermission" name="BB_HOME/-" actions="read,write,delete"/>\n<permission type="java.io.FilePermission" name="BB_HOME/logs/" actions="read,write,delete"/>\n')),(0,r.kt)("h2",{id:"original-ui"},"Original UI"),(0,r.kt)("p",null,"Original courses run in an iframe on Learn SaaS. This shouldn\u2019t affect your\nBuilding Block, except in the two following cases:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If you set ",(0,r.kt)("strong",{parentName:"li"},"top.document.location")," or ",(0,r.kt)("strong",{parentName:"li"},"top.location.href")," or any other similar settings that change the top page for the browser, your Building Block will not display properly. You can use ",(0,r.kt)("strong",{parentName:"li"},"window.location")," instead."),(0,r.kt)("li",{parentName:"ul"},"HTML form tags with ",(0,r.kt)("strong",{parentName:"li"},'target="',"_",'top"'),", or ",(0,r.kt)("strong",{parentName:"li"},'target="',"_",'blank"')," will break out of the Ultra Original course peek panel. Change these to ",(0,r.kt)("strong",{parentName:"li"},'target="',"_",'self"'),"."),(0,r.kt)("li",{parentName:"ul"},"To meet accepted best practices in web design, there is a new maximum browser width of ",(0,r.kt)("strong",{parentName:"li"},"1920px"),". Make sure you plan accordingly."),(0,r.kt)("li",{parentName:"ul"},"B2s using the bbUI and bbData tag libraries should be refactored were at all possible to use bbNG.")),(0,r.kt)("h2",{id:"ultra-ui"},"Ultra UI"),(0,r.kt)("p",null,"There are currently no extension points for Building Blocks in the Ultra UI."),(0,r.kt)("h2",{id:"continuous-delivery"},"Continuous Delivery"),(0,r.kt)("p",null,"Blackboard strives to deliver updates every two weeks. As a result, you should\nbe using only public APIs whenever possible, as the continuous delivery model,\ncoupled with the possibility of undocumented private API changes without\nwarning, makes using private APIs extremely risky."),(0,r.kt)("h2",{id:"installing-building-blocks-in-learn-saas"},"Installing Building Blocks in Learn SaaS"),(0,r.kt)("p",null,"There is no way to install a Building Block in Learn SaaS, regardless of the\nUser Interface you are using. If you have licensed Learn SaaS Plus or\nAdvantage, you do have the ability to install Building Blocks, but you must\nwork with support to schedule the installation"),(0,r.kt)("h2",{id:"update-a-building-block-for-tinymce-5"},"Update a Building Block for TinyMCE 5"),(0,r.kt)("p",null,"In Learn 3900.X we intend to implement an updated content editor, TinyMCE 5, in the Original Course View and Original Experience of Learn. (","*","Forward-looking statement applies.) This editor changes certain patterns of UI with more of them living in an overlay modal rather than pop-up window after pop-up window. This change has led to required changes that are specific to B2s that have a Mashup. Cancel buttons in these mashups that expect to close a window will actually now need to close on overlay modal. The overlay modal will also include a close action button, an \u201cx\u201d in the interface, which will also work to close the window in case the cancel button doesn\u2019t work; but if a cancel button in a mashup B2 is going to continue to work, the code will need to be updated."),(0,r.kt)("p",null,"The code below needs to be added for the cancel button. This code assumes that a B2 is being designed that is compatible with both the new editor and the older one, Learn v 3900.x vs v3800.x and earlier."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"if ( parent && parent.tinymce &&\n     parent.tinymce.activeEditor &&\n     parent.tinymce.activeEditor.windowManager )\n{\n  parent.tinymce.activeEditor.windowManager.close();\n}\nelse\n{\n  // Call the JavaScript you currently use for Cancel here.\n}\n")),(0,r.kt)("p",null,"If the B2 will only be compatible with the updated editor and not backwards compatible, the else section isn\u2019t required:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"if ( parent && parent.tinymce &&\n     parent.tinymce.activeEditor &&\n     parent.tinymce.activeEditor.windowManager )\n{\n  parent.tinymce.activeEditor.windowManager.close();\n}\n")),(0,r.kt)("p",null,"*","Statements regarding our product development initiatives, including new products and future product upgrades, updates or enhancements represent our current intentions, but may be modified, delayed or abandoned without prior notice and there is no assurance that such offering, upgrades, updates or functionality will become available unless and until they have been made generally available to our customers."),(0,r.kt)("h2",{id:"b2-changes-required-for-samesite-issues-with-b2-mashups"},"B2 Changes Required for SameSite Issues with B2 Mashups"),(0,r.kt)("h4",{id:"why-these-changes-are-necessary"},"Why These Changes Are Necessary"),(0,r.kt)("p",null,'As of mid/late April 2021 Google Chrome 90 does not consider a GET request "safe" and blocks different site cookies even for a GET request. If an external server used GET with parameters to send data to a Learn server, that will no longer work because the session cookies are blocked. Hence, if your B2 provides a mashup that can be used in an Original course, you must implement a solution similar to the following. You can no longer use a GET as a workaround for SameSite issues. Or, you can migrate users to an LTI solution. The next paragraph gives more background.'),(0,r.kt)("p",null,"Historically a Building Block can launch from content created by a Blackboard Learn B2 to a remote server where some content is selected to push back to Blackboard Learn. With the advent of browsers now enforcing a SameSite cookie policy the remote server cannot then make a request back to Learn with the cookies necessary for that Learn session due to stringent browser SameSite enforcement. For this discussion we\u2019ll describe how that impacts a B2 mashup and describe a solution that uses JavaScript to get around the browser\u2019s enforcement of the SameSite policy. You will need to examine the rest of your B2 functionality to determine if you need to make similar changes in other areas that get content from your server."),(0,r.kt)("h4",{id:"overview-of-the-changes"},"Overview of the Changes"),(0,r.kt)("p",null,"As an example, we will discuss a B2 that provides a mashup that does a launch to get content from a mashup content provider, say\xa0mashupsource.com. The user used to be able to select content on\xa0mashupsource.com which then did a form POST, or a GET back to the B2 endpoint. Because browsers now enforce the SameSite policy by default,the form POST will no longer work. Some browsers recently have also become more stringent with 3rd-party cookies and GET requests. The browser will not send the Learn Server (LearnServerFQDN) cookies to LearnServerFQDN when the cookies are on a request from any source other than the domain of the LearnServer, instead it blocks them."),(0,r.kt)("p",null,"Hence you need a way update Learn Server content without a cross-site HTTP request from\xa0mashupsource.com\xa0to the Learn Server. The following describes how you can do this."),(0,r.kt)("p",null,"Instead of redirecting the browser to a page on\xa0mashupsource.com, that page needs to load an iframe, provided by your B2, with the source being\xa0mashupsource.com. The user will interact with\xa0mashupsource.com\xa0within that iframe and when done, that page will use JavaScript to postMessage to the parent window with whatever the result of the user\u2019s interaction with\xa0mashupsource.com\xa0is. JavaScript in the parent (authored by mashupsource developers, rendered by your B2 as part of your mashup) will accept that message (after validating it is coming from\xa0mashupsource.com) and then from within this window (the one launched from LearnServerFQDN/B2\u2026) it will then POST (or GET) back to the Learn B2 endpoint. Since this is a POST (or GET) from a page coming from the same origin it will work. These changes are compatible with the current and future releases of Blackboard Learn."),(0,r.kt)("p",null,"Here's a diagram showing the message chain from a mashupsource.com to the B2 on the Learn server:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"[window/iframe: LearnServerFQDN \u2013 the Learn Original Course page with the editor on it\n\xa0 \xa0 \xa0 \xa0 [iframe:LearnServerFQDN/B2 providing mashup (receive postMessage then POST or GET to appropriate B2 endpoint)\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 [iframe src=mashupsource.com (postMessage to parent)]\n\xa0 \xa0 \xa0 \xa0 ]\n]\n")),(0,r.kt)("p",null,"Note the brackets are indicating how the iframes are nested."),(0,r.kt)("p",null,"Summary - If your B2 provides a mashup for use in an Original Course's TinyMCE editor you will need to re-architect as described above, or mirgrate users to an LTI-based solution."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<AuthorBox frontMatter={frontMatter}/>\n")))}h.isMDXComponent=!0}}]);