"use strict";(globalThis.webpackChunkanthology_dev_docs=globalThis.webpackChunkanthology_dev_docs||[]).push([[2243],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var t=s(96540);const r={},o=t.createContext(r);function a(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(o.Provider,{value:n},e.children)}},60221:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"blackboard/rest-apis/demo-code/ruby-demo","title":"Demo using Ruby","description":"The rest demo script demonstrates authenticating a REST application,","source":"@site/docs/blackboard/rest-apis/demo-code/ruby.md","sourceDirName":"blackboard/rest-apis/demo-code","slug":"/blackboard/rest-apis/demo-code/ruby-demo","permalink":"/docs/blackboard/rest-apis/demo-code/ruby-demo","draft":false,"unlisted":false,"editUrl":"https://github.com/blackboard/anthologydevdocs/tree/main/docs/blackboard/rest-apis/demo-code/ruby.md","tags":[],"version":"current","frontMatter":{"title":"Demo using Ruby","id":"ruby-demo","categories":"Learn Rest","published":"","edited":"","author":"Scott Hurrey"},"sidebar":"documentationSidebar","previous":{"title":"Tutorial - Build a Java Command Line REST Application","permalink":"/docs/blackboard/rest-apis/demo-code/java-command-line"},"next":{"title":"Getting started with LTI","permalink":"/docs/blackboard/lti/welcome"}}');var r=s(74848),o=s(28453);const a={title:"Demo using Ruby",id:"ruby-demo",categories:"Learn Rest",published:"",edited:"",author:"Scott Hurrey"},i=void 0,d={},l=[{value:"Prerequisites",id:"prerequisites",level:3},{value:"Assumptions",id:"assumptions",level:3},{value:"Code Walkthrough",id:"code-walkthrough",level:3},{value:"Authorization and Authentication",id:"authorization-and-authentication",level:3},{value:"Calling Services",id:"calling-services",level:3},{value:"Datasources",id:"datasources",level:3},{value:"Terms",id:"terms",level:3},{value:"Course",id:"course",level:3},{value:"Users",id:"users",level:3},{value:"Memberships",id:"memberships",level:3},{value:"Conclusion",id:"conclusion",level:3}];function c(e){const n={a:"a",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The rest demo script demonstrates authenticating a REST application,\nmanagement and use of the authorization token, and creating, updating,\ndiscovering, and deleting supported Learn objects."}),"\n",(0,r.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"You must [register a developer account and application](/rest-apis/learn/Getting Started/registry) in the Developer Portal"}),"\n",(0,r.jsx)(n.li,{children:"You must\n[register your application](/rest-apis/learn/Getting Started/registry) in Learn"}),"\n",(0,r.jsx)(n.li,{children:"You must also configure the script as outlined in the README for the project"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This Ruby command line Application allows you to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Authenticate"}),"\n",(0,r.jsx)(n.li,{children:"Create, Read, and Update a Data Source"}),"\n",(0,r.jsx)(n.li,{children:"Create, Read, and Update a Term"}),"\n",(0,r.jsx)(n.li,{children:"Create, Read, and Update a Course"}),"\n",(0,r.jsx)(n.li,{children:"Create, Read, and Update a User"}),"\n",(0,r.jsx)(n.li,{children:"Create, Read, and Update a Membership"}),"\n",(0,r.jsx)(n.li,{children:"Delete created objects in reverse order of create - membership, user, course, term, datasource."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"All generated output is sent to the terminal."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"This is not meant to be a Ruby tutorial. It will not teach you to write code\nin Ruby. It will, however, give a Developer familiar with Ruby the knowledge\nnecessary to build a Web Services integration."})}),"\n",(0,r.jsx)(n.h3,{id:"assumptions",children:"Assumptions"}),"\n",(0,r.jsx)(n.p,{children:"This help topic assumes the Developer:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"is familiar with Ruby"}),"\n",(0,r.jsx)(n.li,{children:"has installed Ruby and the Ruby rest-client gem."}),"\n",(0,r.jsxs)(n.li,{children:["has obtained a copy of the ",(0,r.jsx)(n.a,{href:"https://github.com/blackboard/BBDN-REST-Demo-Ruby",children:"source code"})," and built it in conjunction with the project ",(0,r.jsx)(n.a,{href:"https://github.com/blackboard/BBDN-REST-Demo-Ruby/blob/master/README.md",children:"README.md"})," file."]}),"\n",(0,r.jsx)(n.li,{children:"has a REST-enabled Learn instance."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"code-walkthrough",children:"Code Walkthrough"}),"\n",(0,r.jsx)(n.p,{children:"To build an integration with the Learn REST Web Services, regardless of\nthe programming language of choice, can really be summed up in two steps:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Use the Application Key and Secret to obtain an OAuth 2.0 access token, as described in the [Basic Authentication](/rest-apis/learn/Getting Started/basic-authentication) document."}),"\n",(0,r.jsx)(n.li,{children:"Call the appropriate REST endpoint with the appropriate data to perform the appropriate action."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"authorization-and-authentication",children:"Authorization and Authentication"}),"\n",(0,r.jsxs)(n.p,{children:["The REST Services rely on OAuth 2.0 Bearer Tokens for authentication. A\nrequest is made to the token endpoint with a Basic Authorization header\ncontaining the base64-encoded key",":secret"," string as its key. The token service\nreturns a JSON object containing the Access Token, the Token Type, and the\nnumber of seconds until the token expires. The token is set to expire after\none hour, and subsequent calls to retrieve the token will return the same\ntoken with an updated expiry time until such time that the token has expired.\nThere is no refresh token and currently no revoke token method."]}),"\n",(0,r.jsx)(n.p,{children:"The Ruby code handles this with the following code:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"\n    bb_rest = RestClient::Resource.new $AUTH_PATH, $KEY, $SECRET\n    bb_rest.post('grant_type=client_credentials', :accept => :json){ |response, request, result, &block|\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 case response.code\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 when 200\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p \"It worked !\"\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 token = JSON.parse(response)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 $access_token = token['access_token']\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 $auth = \"Bearer \" + $access_token\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p 'Access_Token: ' + $access_token\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 else\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 response.return!(request, result, &block)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 end\n    \xa0 }\n"})}),"\n",(0,r.jsx)(n.p,{children:"The JSON response is serialized into the Token object, and you may then\nretrieve those values from that object."}),"\n",(0,r.jsx)(n.h3,{id:"calling-services",children:"Calling Services"}),"\n",(0,r.jsx)(n.p,{children:"The individual service calls are handled in succession in the restdemo.rb\nfile. Each operation and object combination creates the JSON body by\ninstantiating the appropriate JSON object in the form of a String (required if\nyou need to control the content-type, which you do) when necessary, and then\ngenerating the appropriate HTTP Request, shipping it to Learn, and serializing\nthe JSON response back into the appropriate object."}),"\n",(0,r.jsxs)(n.p,{children:["End points are generally defined as ",(0,r.jsx)(n.code,{children:"/learn/api/public/v1/<objecttype>/<objectId>"}),". Object ID can be either the pk1, like ",(0,r.jsx)(n.code,{children:"_1_1"}),", or as thebatchuid. This value should be prepended by externalId:, like ",(0,r.jsx)(n.code,{children:"externalId:test101"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, to retrieve a course by the pk1 ",(0,r.jsx)(n.code,{children:"_1_1"}),", you would call ",(0,r.jsx)(n.strong,{children:"GET\n/learn/api/public/v1/courses/\\_1_1"}),". To retrieve by the batchuid ",(0,r.jsx)(n.code,{children:"test101"}),", you\nwould call ",(0,r.jsxs)(n.strong,{children:["GET /learn/api/public/v1/courses/externalId",":test101","."]})]}),"\n",(0,r.jsx)(n.p,{children:"Create is sent to Learn as a HTTP POST message with a JSON body that defines\nthe object. The endpoint should omit the objectId, as this will be generated\non creation."}),"\n",(0,r.jsx)(n.p,{children:"Read is sent to Learn as a HTTP GET message with an empty body. The endpoint\nshould include the objectId being retrieved."}),"\n",(0,r.jsx)(n.p,{children:"Update is sent to Learn as a HTTP PATCH message with a JSON body that defines\nthe object. The endpoint should include the objectId being updated."}),"\n",(0,r.jsx)(n.p,{children:"Delete is sent to Learn as a HTTP DELETE message with empty body. The endpoint\nshould include the objectId being deleted."}),"\n",(0,r.jsx)(n.h3,{id:"datasources",children:"Datasources"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Create"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# Ruby Demo\n\nRestClient.post($DSK_PATH, payload, :content_type => :json, :accept => :json, :Authorization => $auth){ |response, request, result, &block|\n    \xa0\xa0\xa0\xa0\xa0\xa0 case response.code\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 when 201\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p \"It worked !\"\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 datasource = JSON.parse(response)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 $dsk_id = datasource['id']\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p 'Create Datasource: dsk_id=' + $dsk_id\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 else\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 response.return!(request, result, &block)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 end\n    }\n\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Read"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'    RestClient.get($DSK_PATH + $dsk_id, :content_type => :json, :accept => :json, :Authorization => $auth){ |response, request, result, &block|\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 case response.code\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 when 200\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p "Got Datasource !" + response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 else\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 response.return!(request, result, &block)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 end\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Update"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'    payload = "{ \\\\"externalId\\\\":\\\\"BBDN-DSK-RUBY\\\\", \\\\"description\\\\": \\\\"Demo Data Source used for REST Ruby Demo - Updated\\\\" }"\n    \xa0\n    \xa0\xa0\xa0 RestClient.patch($DSK_PATH + $dsk_id, payload, :content_type => :json, :accept => :json, :Authorization => $auth){ |response, request, result, &block|\n    \xa0\xa0\xa0 case response.code\n    \xa0\xa0\xa0\xa0\xa0 when 200\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 p \'Updated Datasource: \' + response.to_s\n    \xa0\xa0\xa0\xa0\xa0 else\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 p response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 response.return!(request, result, &block)\n    \xa0\xa0\xa0\xa0\xa0 end\n    \xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Delete"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'    RestClient.delete($DSK_PATH + $dsk_id, :content_type => :json, :accept => :json, :Authorization => $auth){ |response, request, result, &block|\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 case response.code\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 when 204\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p "Datasource Deleted !"\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 else\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 response.return!(request, result, &block)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 end\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.h3,{id:"terms",children:"Terms"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Create"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'    payload = "{ \\\\"externalId\\\\":\\\\"BBDN-TERM-RUBY\\\\", \\\\"dataSourceId\\\\":\\\\"" + $dsk_id + "\\\\", \\\\"name\\\\" : \\\\"REST Demo Term - Ruby\\\\", \\\\"description\\\\": \\\\"Term Used For REST Demo - Ruby\\\\", \\\\"availability\\\\" : { \\\\"available\\\\" : \\\\"Yes\\\\" } }"\n    RestClient.post($TERM_PATH, payload, :content_type => :json, :accept => :json, :Authorization => $auth){ |response, request, result, &block|\n    \xa0\xa0\xa0\xa0 case response.code\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 when 201\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p "It worked !"\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 term = JSON.parse(response)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 $term_id = term[\'id\']\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p \'Create Term: term_id=\' + $term_id\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 else\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 response.return!(request, result, &block)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 end\n    }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Read"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'    RestClient.get($TERM_PATH + $term_id, :content_type => :json, :accept => :json, :Authorization => $auth){ |response, request, result, &block|\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 case response.code\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 when 200\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p "Got Term !" + response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 else\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 response.return!(request, result, &block)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 end\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Update"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'    payload = "{ \\\\"externalId\\\\":\\\\"BBDN-TERM-RUBY\\\\", \\\\"dataSourceId\\\\":\\\\"" + $dsk_id + "\\\\", \\\\"name\\\\" : \\\\"REST Demo Term - Ruby\\\\", \\\\"description\\\\": \\\\"Updated Term Used For REST Demo - Ruby\\\\", \\\\"availability\\\\" : { \\\\"available\\\\" : \\\\"Yes\\\\" } }"\n    \xa0\xa0\xa0 RestClient.patch($TERM_PATH + $term_id, payload, :content_type => :json, :accept => :json, :Authorization => $auth){ |response, request, result, &block|\n    \xa0\xa0\xa0 case response.code\n    \xa0\xa0\xa0\xa0\xa0 when 200\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 p \'Updated Term: \' + response.to_s\n    \xa0\xa0\xa0\xa0\xa0 else\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 p response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 response.return!(request, result, &block)\n    \xa0\xa0\xa0\xa0\xa0 end\n    \xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Delete"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'    RestClient.delete($TERM_PATH + $term_id, :content_type => :json, :accept => :json, :Authorization => $auth){ |response, request, result, &block|\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 case response.code\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 when 204\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p "Term Deleted !"\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 else\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 response.return!(request, result, &block)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 end\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.h3,{id:"course",children:"Course"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Create"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'    payload = "{ \\\\"externalId\\\\" : \\\\"BBDN-Java-Ruby-Demo\\\\", \\\\"courseId\\\\" : \\\\"BBDN-Java-Ruby-Demo\\\\", \\\\"name\\\\" : \\\\"Course Used For REST Demo - Ruby\\\\", \\\\"description\\\\" : \\\\"Course Used For REST Demo - Ruby\\\\", \\\\"allowGuests\\\\" : \\\\"false\\\\", \\\\"readOnly\\\\" : \\\\"false\\\\", \\\\"termId\\\\" : \\\\"" + $term_id + "\\\\", \\\\"dataSourceId\\\\" : \\\\"" + $dsk_id + "\\\\", \\\\"availability\\\\" : { \\\\"available\\\\" : \\\\"Yes\\\\" } }"\n    \xa0\xa0\xa0 RestClient.post($COURSE_PATH, payload, :content_type => :json, :accept => :json, :Authorization => $auth){ |response, request, result, &block|\n    \xa0\xa0\xa0 case response.code\n    \xa0\xa0\xa0\xa0\xa0 when 201\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 p "It worked !"\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 course = JSON.parse(response)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 $course_id = course[\'id\']\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 p \'Create Course: course_id=\' + $course_id\n    \xa0\xa0\xa0\xa0\xa0 else\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 p response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 response.return!(request, result, &block)\n    \xa0\xa0\xa0\xa0\xa0 end\n    \xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Read"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'    RestClient.get($COURSE_PATH + $course_id, :content_type => :json, :accept => :json, :Authorization => $auth){ |response, request, result, &block|\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 case response.code\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 when 200\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p "Got Course !" + response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 else\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 response.return!(request, result, &block)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 end\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Update"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'    payload = "{ \\\\"externalId\\\\" : \\\\"BBDN-Java-Ruby-Demo\\\\", \\\\"courseId\\\\" : \\\\"BBDN-Java-Ruby-Demo\\\\", \\\\"name\\\\" : \\\\"Course Used For REST Demo - Ruby\\\\", \\\\"description\\\\" : \\\\"Updated Course Used For REST Demo - Ruby\\\\", \\\\"allowGuests\\\\" : \\\\"false\\\\", \\\\"readOnly\\\\" : \\\\"false\\\\", \\\\"termId\\\\" : \\\\"" + $term_id + "\\\\", \\\\"dataSourceId\\\\" : \\\\"" + $dsk_id + "\\\\", \\\\"availability\\\\" : { \\\\"available\\\\" : \\\\"Yes\\\\" } }"\n    \xa0\xa0\xa0 RestClient.patch($COURSE_PATH + $course_id, payload, :content_type => :json, :accept => :json, :Authorization => $auth){ |response, request, result, &block|\n    \xa0\xa0\xa0 case response.code\n    \xa0\xa0\xa0\xa0\xa0 when 200\n    \xa0\xa0\xa0\xa0\xa0 p \'Updated Course: \' + response.to_s\n    \xa0\xa0\xa0\xa0\xa0 else\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 p response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 response.return!(request, result, &block)\n    \xa0\xa0\xa0\xa0\xa0 end\n    \xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Delete"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'    RestClient.delete($COURSE_PATH + $course_id, :content_type => :json, :accept => :json, :Authorization => $auth){ |response, request, result, &block|\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 case response.code\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 when 204\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p "Course Deleted !"\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 else\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 response.return!(request, result, &block)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 end\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.h3,{id:"users",children:"Users"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Create"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'    payload = "{ \\\\"externalId\\\\" : \\\\"bbdnrestdemorubyuser\\\\", \\\\"userName\\\\" : \\\\"restrubyuser\\\\", \\\\"password\\\\" : \\\\"Bl@ckb0ard!\\\\", \\\\"studentId\\\\" : \\\\"restrubyuser\\\\", \\\\"dataSourceId\\\\" : \\\\"" + $dsk_id + "\\\\", \\\\"name\\\\" : { \\\\"given\\\\" : \\\\"Ruby\\\\", \\\\"family\\\\" : \\\\"Rest Demo\\\\" }, \\\\"contact\\\\" : { \\\\"email\\\\" : \\\\"developers@anthology.com\\\\" }, \\\\"availability\\\\" : { \\\\"available\\\\" : \\\\"Yes\\\\" } }"\n    \xa0\n    \xa0\xa0\xa0\xa0\xa0 RestClient.post($USER_PATH, payload, :content_type => :json, :accept => :json, :Authorization => $auth){ |response, request, result, &block|\n    \xa0\xa0\xa0\xa0\xa0 case response.code\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 when 201\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p "It worked !"\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 user = JSON.parse(response)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 $user_id = user[\'id\']\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p \'Create User: user_id=\' + $user_id\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 else\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 response.return!(request, result, &block)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 end\n    \xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Read"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'    RestClient.get($USER_PATH + $user_id, :content_type => :json, :accept => :json, :Authorization => $auth){ |response, request, result, &block|\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 case response.code\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 when 200\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p "Got User !" + response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 else\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 response.return!(request, result, &block)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 end\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Update"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'    payload = "{ \\\\"externalId\\\\" : \\\\"bbdnrestdemorubyuser\\\\", \\\\"userName\\\\" : \\\\"restrubyuser\\\\", \\\\"password\\\\" : \\\\"Bl@ckb0ard!\\\\", \\\\"studentId\\\\" : \\\\"restrubyuser\\\\", \\\\"dataSourceId\\\\" : \\\\"" + $dsk_id + "\\\\", \\\\"name\\\\" : { \\\\"given\\\\" : \\\\"Ruby\\\\", \\\\"family\\\\" : \\\\"Rest Demo\\\\", \\\\"middle\\\\" : \\\\"updated\\\\" }, \\\\"contact\\\\" : { \\\\"email\\\\" : \\\\"developers@anthology.com\\\\" }, \\\\"availability\\\\" : { \\\\"available\\\\" : \\\\"Yes\\\\" } }"\n    \xa0\n    \xa0\xa0\xa0\xa0\xa0 RestClient.patch($USER_PATH + $user_id, payload, :content_type => :json, :accept => :json, :Authorization => $auth){ |response, request, result, &block|\n    \xa0\xa0\xa0\xa0\xa0 case response.code\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 when 200\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 p \'Updated User: \' + response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 else\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 response.return!(request, result, &block)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 end\n    \xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Delete"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'    RestClient.delete($USER_PATH + $user_id, :content_type => :json, :accept => :json, :Authorization => $auth){ |response, request, result, &block|\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 case response.code\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 when 204\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p "User Deleted !"\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 else\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 response.return!(request, result, &block)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 end\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.h3,{id:"memberships",children:"Memberships"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Create"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'    payload = "{ \\\\"courseRoleId\\\\" : \\\\"Student\\\\", \\\\"dataSourceId\\\\" : \\\\"" + $dsk_id + "\\\\", \\\\"availability\\\\" : { \\\\"available\\\\" : \\\\"Yes\\\\" } }"\n    \xa0\n    \xa0\xa0\xa0\xa0\xa0 RestClient.put($COURSE_PATH + $course_id + \'/users/\' + $user_id, payload, :content_type => :json, :accept => :json, :Authorization => $auth){ |response, request, result, &block|\n    \xa0\xa0\xa0\xa0\xa0 case response.code\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 when 201\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p "It worked !"\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 membership = JSON.parse(response)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 $created = membership[\'created\']\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p \'Create Membership: \' + $created\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 else\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 response.return!(request, result, &block)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 end\n    \xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Read"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"    RestClient.get($COURSE_PATH + $course_id + '/users/' + $user_id, :content_type => :json, :accept => :json, :Authorization => $auth){ |response, request, result, &block|\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 case response.code\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 when 200\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p \"Got Membership !\" + response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 else\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 response.return!(request, result, &block)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 end\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Update"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'    payload = "{ \\\\"userId\\\\" : \\\\"" + $user_id + "\\\\", \\\\"courseId\\\\" : \\\\"" + $course_id + "\\\\", \\\\"courseRoleId\\\\" : \\\\"Instructor\\\\", \\\\"dataSourceId\\\\" : \\\\"" + $dsk_id + "\\\\", \\\\"availability\\\\" : { \\\\"available\\\\" : \\\\"Yes\\\\" } }"\n    \xa0\n    \xa0\xa0\xa0\xa0\xa0 RestClient.patch($COURSE_PATH + $course_id + \'/users/\' + $user_id, payload, :content_type => :json, :accept => :json, :Authorization => $auth){ |response, request, result, &block|\n    \xa0\xa0\xa0\xa0\xa0 case response.code\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 when 200\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 p \'Updated Membership: \' + response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 else\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 response.return!(request, result, &block)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 end\n    \xa0\xa0\xa0\xa0\xa0 }\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Delete"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"    RestClient.delete($COURSE_PATH + $course_id + '/users/' + $user_id, :content_type => :json, :accept => :json, :Authorization => $auth){ |response, request, result, &block|\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 case response.code\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 when 204\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p \"Membership Deleted !\"\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 else\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p response.to_s\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 response.return!(request, result, &block)\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 end\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0 }\n"})}),"\n",(0,r.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(n.p,{children:["All of the code snippets included in this document at included in a sample\nREST Demo Ruby application available on\n",(0,r.jsx)(n.a,{href:"https://github.com/blackboard/BBDN-REST-Demo-Ruby",children:"GitHub"}),".\nThere is a README.html included that talks more specifically about building and\nrunning the code. Feel free to review the code and run it against a test or\ndevelopment Learn instance to see how it works."]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);