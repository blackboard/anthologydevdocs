{"searchDocs":[{"title":"DevCon 2020 By The Numbers","type":0,"sectionRef":"#","url":"/blog/2020/08/03/2020/DevCon-2020-by-the-numbers","content":"DevCon 2020 is in the books, and what an amazing conference it was. This blog will start a weekly series in which everything Thursday, we will talk about DevCon from a content perspective. To begin this series, I want to set some context about the scope of this conference, so you, the reader, will have a baseline to base your opinions from. So let's start with some basic figures: Client Registrations: 3,113​Institutions: 1,276​Countries: 54​Badges: 2,348​358 Unique attendees to live sessions​2,352 Attendees to live sessions total​121,842 Collab session minutesBlackboarders: 300​ If we really look at this, we can come up with some interesting insights. If we base our calculations on unique attendees to live sessions, we can see that the average attendee spent almost 6 hours actively engaged in sessions. We had 71 hours worth of sessions spread out over three separate time zones -- Monday - Friday 8am-10am EDT, Monday - Friday 1pm-3pm EDT and on five days, 3pm to 4pm, and Monday-Thursday 8pm-10pm EDT -- so the average attendee joining 6 sessions is pretty amazing. We also issued 6.6 badges per active attendee programmatically through Badgr. These badges included attending at least 75% of a collab session associated with a session, pathways, which awarded badges based on predetermined groups of session badges, interaction with Ally, and earning points and promotions in the leaderboard. Speaking of insights, let's take a look at a few that show how users interacted with the content provided: Numbers and charts are cool, but what really matters from a DevCon perspective, is the experience of the attendees. Here are a few quotes that I think sum up the DevCon 2020 experience more that any statistic or chart can: “SUPER big high-five / cheers / shout-out and ALL the other superlatives out to @Scott Hurrey and all that helped make this 2020 DevCon !!!! have greatly enjoyed it in this time of Social Distancing”​ Kevin Squire, PA Virtual Charter School “Thanks @shurrey Scott for an awesome experience.. and thank you to all the presenters as well as participants. Look forward to continue networking and finding better solutions for students and faculty.”​ Arokia Raj, INTI International Universities and Colleges, Malaysia “A big thank you to @shurrey and colleagues from @Blackboard for making the 2020 #DevCon a really special online experience. Spreading the event out over a fortnight gave participants a chance to practice and play, not just listen. Fun in dark times.”​ Malcolm Murray, Durham To summarize, DevCon 2020 was a unique experience, and one that gave me a little bit of normalcy. Of course I would rather see everyone in person, but since I can't, I was extremely happy we could have a virtual get-together. Happy Coding! -scott","keywords":"","version":null},{"title":"DevCon 2020 - New LTI Advantage Tutorial","type":0,"sectionRef":"#","url":"/blog/2020/08/24/2020/DevCon-2020-new-lti-advantage-tutorial","content":"Be sure to revisit the Developing an LTI Advantage Solution page for the latest and greatest tutorial from DevCon 2020! Cheers! -markk","keywords":"","version":null},{"title":"REST and UEF Tutorials","type":0,"sectionRef":"#","url":"/blog/2020/08/24/2020/NewRESTandUEF-tutorials","content":"New!! Visit the REST Tutorials and UEF Tutorials pages for our tutorials on these topics!! Cheers! -markk","keywords":"","version":null},{"title":"Ally as a Service and UEF Documentation now available","type":0,"sectionRef":"#","url":"/blog/2020/09/03/2020/Ally-as-a-Service-and-UEF-Documentation-now-available","content":"Today we launched two new sections of developer documentation - Ally as a Service (AaaS) and the [Learn Ultra Extension Framework](/rest-apis/learn (UEF). These new APIs give you access to integration points and functionality that allows you to bring the power of Blackboard into your applications, and ultimately, your user's experience. Ally as a Service is a standalone, separately licensed API to apply specific components of Ally's approach to content within your application. In its initial form, you are able to upload files, process them through Ally's accessibility checklist, and retrieve data that tells you what can be improved. This is only the tip of the iceberg, so make sure you continue to monitor this amazing capability for enhancements moving forward. For more information, including a conversation about pricing, reach out to your Account Executive. The Ultra Extension Framework Premium APIs allow an integration to subscribe to events happening real-time in the Ultra UI, and respond to those events by interacting directly with the UI to do things like open panels, display modals, show messages and notifications, and augment the help system in Learn. Partners will need to be at a bronze level or higher to access these Premium APIs. See the partnership team for more information. If you are not a partner, check out how to become a partner. Licensed clients need only request access. Access is granted to your group in the developer portal, much like rate limits. Just open a case on Behind the Blackboard to get started! As always, let us know if you have any questions! Happy Coding!","keywords":"","version":null},{"title":"Student Id Template Variable","type":0,"sectionRef":"#","url":"/blog/2020/10/07/2020/New-Student-Id-Template-Variable","content":"New in SaaS and the forthcoming 3900 release* an @X@user.student_id@X@ template variable!. Statements regarding our product development initiatives, including new products and future product upgrades, updates or enhancements represent our current intentions, but may be modified, delayed or abandoned without prior notice and there is no assurance that such offering, upgrades, updates or functionality will become available unless and until they have been made generally available to our customers. -markk","keywords":"","version":null},{"title":"Oct 2020 - Changes that will impact Learn B2 Integrations","type":0,"sectionRef":"#","url":"/blog/2020/10/04/2020/Changes-That-Impact-Learn-B2-Integrations","content":"Read this article . Download Oct 2020 - Changes that will impact Learn Integrations.docx to find out how to get early access for testing. -Mark Kauffman","keywords":"","version":null},{"title":"Cookies and Browsers","type":0,"sectionRef":"#","url":"/blog/2020/10/15/2020/Cookies-and-Browsers","content":"Most people like cookies. Internet browsers used to like cookies, but a lot has changed in the last few years. We are seeing a lot of applications stop working in some browsers because cookies are not being shared, and this post hopes to help explain why that is happening and what can be done about it. A web application may set a cookie to track a user’s session. This is very common, however if your web application is going to be hosted in an iframe, then there’s a good chance your cookie won’t be sent back to you. This is because browsers are clamping down on sending “3rd-party” cookies back to applications hosted in an iframe. Note that a 3rd party is a site that is hosted on a domain different than the 1st party, or your web application. The reason is because these cookies can be used for tracking your internet and browsing activity. Safari has disallowed this for years as a user privacy measure. Another case where cookies aren’t being sent back is during a form POST back to your application. If you set a cookie, then launch to a 3rd party application, if that application does a form POST back to you, the browser will likely not send your cookie back because it is trying to help prevent cross-site request forgery attacks. Rather than detail all the scenarios and work arounds here I link to two web pages that are immensely helpful in explaining the situation and some possible workarounds. The TL;DR is if you must set a cookie in your web application, be careful how you configure that cookie’s properties, and understand that at least in Safari, your cookies may not get passed back to you. The other browser makers are going to get as restrictive as Safari soon. Samesite Cookies ExplainedSamesite Cookie Recipes","keywords":"","version":null},{"title":"In Orbit at DevCon 2020","type":0,"sectionRef":"#","url":"/blog/20200710-inorbitatdevcon2020","content":"DevCon 2020 kicked off in full force this week with clients, partners and Blackboarders around the world coming together in Learn Ultra to network, share knowledge, and dig deeper into Blackboard tech. We’ve had a record number of people at DevCon with 2,273 attendees logging in from 973 institutions and 43 countries throughout the week. We also had some amazing content, delivered all over the world. Our most-attended session was 'Collaborate Best Practices' presented by Amy Eyre from the University of York and Helga Gunnarsdottir from the University of the West of England (UWE), co-chairs of the EMEA Mobile and Collaborate User Group, affectionately known as MoCo. Other highlights include the 'May the Data be with you' series. I definitly miss seeing everyone in person, so the lively interaction in these sessions led by a talented group of System Administrators was definitely the next best thing. Big thanks to Casey Eubank from WSU Tech, Chris Bray from Arkansas, Heather Crites from Columbia State Community College, Dan Gioia from St. Louis Community College, Bradley Lawton from Louisville, and Mark Reynolds from University of Illinois at Urbana-Champaign. There were also a number of other sessions that were well-attended and extremely interesting, including: 'LTI Advantage for System Administrators', a thorough overview from Blackboard's own Eric Preston of the history of LTI, the new LTI Advantage spec, and everything a system administrator needs to know about LTI.'A Galaxy of Learn Data - Blast off with BbData &amp; Python!' was a look at the amazing work that Mike Bechtel from Indian River State College has done using Python to interact with Blackboard Data.'Turning any resource into an LTI tool to optimize Base Navigation' from University of Chicago's Szymon Machajewski was an entertaining look at a simple tool that turns any URL into an LTI tool that can be embedded into any LTI-compliant platform. I wish I could list highlights of all of the sessions, but in the spirit of brevity, let me just say thank you. Thank you to all of our presenters for taking the time out of your busy schedule -- sometimes crazy early, crazy late, or both -- to share your knowledge with the rest of our community. There is no better way to support and learn from each other than open communication. I look forward to building on this virtual DevCon to continue that global communication. Next week, we’ll continue running sessions three times each day to accommodate all time zones and schedules. Here are some sessions you won’t want to miss: The Python and the Postman - REST APIs for BeginnersMigrate Your B2 to LTI Advantage and RESTModels for Learn REST and LTI IntegrationsThe DevCon Gamification Query: what we built, how we designed it, and how might you adapt it for your institutionGUI Admin Tips and Tricks Unconference Sessions And don’t forget about Hackboard: Data. This weeklong event will allow attendees to build meaningful insights against the wealth of information Blackboard Data puts at your fingertips. We’ll kick off Monday and finish on Friday, with two Q&amp;A sessions in between. So add the Hackboard: Data session to your schedule and join us for the kickoff on Monday! As I write this, it looks like Mark Reynolds is atop the leaderboard, with Bradley Lawton and Eric Silva fast on his heels. And I would be remiss if I didn't mention our badging with Badgr. So far (not including Friday), we have awarded 480 badges, including: Arokia Raj, INTI Internation University and Colleges in Malaysia, who earned the 'Daily Champions Champion' badge by earning all of the Daily Champion badges.Mark Carroll, Mark Reynolds, and Kevin Lowey who earned the 'Let's take it data day' badge, by attending 4 of the 8 data-based (see what I did there?) sessions.Mark Carroll, Alicia Dunlap, Irene Rojas, and Elizabeth Barcena, who have attended more than half of the LTI sessions, earning them the 'LTI Advantageous' badge. Hoping to see all who attended and more back on Monday as we get ready for another week of great content from our clients (and us, too). Now you know, I can't let the chance to write some code poetry pass by: DevCon – one week down. Full of tips, tricks, chits and chats. Earn those badges yet?","keywords":"","version":null},{"title":"SOAP EOL Explained","type":0,"sectionRef":"#","url":"/blog/2020/12/16/2020/SOAP-EOL-Explained","content":"Back in the day, January 4, 2019 to be exact, Blackboard announced deprecation of our SOAP Web Services with this article Blackboard SOAP Web Services Deprecation Now, almost two years later in our Learn SaaS Relase Notes we've written &quot;As of December 31, 2020, Learn SOAP Web Services are no longer supported, as they have reached the end of life per our deprecation policy.&quot; What does this mean for you as a develoepr? The most common concern is &quot;Will my SOAP code continue to work in an earlier version of Learn?&quot; or some variation. Here's a recent example: &quot;Will this be for all versions, or will SOAP API still be available on version 3800?&quot; The answer is that client's self and manged-hosted systems that are on older versions of Learn will not be impacted. If your client is runnign 3800.0.3 and upgrades to the most recent Cumulative Update, the SOAP Webservices should continue to work for them. For self and managed-hosted clients that are on 3900.0.0 and are now upgrading using the same build numbers as in SaaS, SOAP will not be supported in any release post Dec 31, 2020. Another common quesiton is from those using the Learn LIS 2.0 SIS integration, which is SOAP based. No, we are keeping the LIS 2.0 SIS integration in the product at this time. It will not be affected. If you have additional questions, drop a line to developers@anthology.com and we'll update this blog post with the answer. Happy 2021!","keywords":"","version":null},{"title":"Caliper Documentation Updated for 1.1","type":0,"sectionRef":"#","url":"/blog/2021/01/05/2021/Caliper-Documentation-Updated-for-1.1","content":"We have spent some time over the holiday break updating and organizing our documentation better. One of the longest outstanding changes was to update the Caliper event samples from 1.0 to 1.1. I am pleased to announce that we have finally completed this project. The event guide is largely unchanged, but the individual events have all been updated to show current sample payloads from each event, allowing you to better anticipate the messages you will receive and better plan your storage and reporting requirements. Over the next few weeks, we will be highlighting some of the other key updates that we hope will help ease the onboarding process for new developers and make finding exactly what you need when you need it for everyone. Happy Coding!","keywords":"","version":null},{"title":"How to Create a User With Limited Entitlements For REST API Calls","type":0,"sectionRef":"#","url":"/blog/2021/01/06/2021/How to Create a User With Limited Entitlements For REST API Calls","content":"First, as our documentation states, a Learn admin should never be told to associate a user with Learn admin privileges with any REST API integration, see this document. Hence we often get questions from folks on how to create a user to associate with a REST API integration that has limited capability on a Learn system. One way is to research and design your REST application to use OAuth 2 3-legged Authentication. See the documents referenced below. 3LO guarentees that the user using your REST Application can only do what they can do via the Learn UX when they are logged into Learn. However, if your application is using our OAuth 2 2-legged Authentication read on. Or I should say, watch on. I created the following to answer the question &quot;Is it possible to create a user that has only the necessary permissions and avoid using &quot;Learn System Admin&quot; user?&quot; The answer is yes! Here's a video explaining exactly how to proceed. Reference Documentation: Managing REST Integrations in Learn: The REST Integrations Tool for System AdministratorsBasic Authentication with RESTThree-Legged OAuthhttps://github.com/Kong/mashape-oauth/blob/master/FLOWS.mdREST TutorialsBookmarklet to help map entitlements to permissions (requires login.) or document on this site","keywords":"","version":null},{"title":"LTI 1.3 tools must generate their own keys and JWKS URL","type":0,"sectionRef":"#","url":"/blog/2021/07/22/2021/LTI 1.3 tools must generate their own keys and JWKS URL","content":"When we started supporting LTI 1.3/Advantage (back in May of 2019) we chose to generate public/private key pairs for the tools. The tool vendor was then responsible for copying and storing those values on their side. But the IMS Global community has moved away from that model and now suggests that tool vendors generate their own key pairs for LTI authentication and provide their public key via a JWKS URL. This model is more secure because there is not copying of a private key and allows the LTI Tool provider to follow best practices with key rotation. We decided to follow that suggestion. If you want to register a new tool with Learn, you have to provide the JWKS URL information. And if you have an existing tool that use the Anthology-generated private key, please keep in mind that we'll be terminating support in the near future. NOTE: Once you've made the change, you must have our mutual clients redeploy your LTI 1.3 tool. Redeploy means the following: Admin -&gt; Integrations, LTI Tool Providers -&gt; Register LTI 1.3/Advantage ToolEnter the same client ID for your tool that was previously deployed. Click the [Submit] Button.Your tool will be redeployed to use your new JWKS URL. Follow the above steps exactly. Do NOT have them delete the integration as that will destroy all existing links to your tool, which can not be recovered. Here is a video explanation of both the steps you need to take to update your tool's JWKS URL and the step you will need to have our mutual clients take. Note that after you update your tool's JWKS URL on the developer portal our mutual clients will NOT able to use your product until after they redeploy as described above and in the video. FAQ: Is this just a background change, and it will not impact anything on the front end? -&gt; There is no impact to how our mutual clients use the LTI Tool or Learn.Does making the change at the central location serve the purpose, or are we required to plan anything around individual connections for separate schools? -&gt; You will need to work with the individual schools to ensure that after you make the chage they redploy your tool as described above.Will schools transition seamlessly once we transition from a static public key to keyset URL (JWKS), or does it require any intervention from the Black side or the school admins? -&gt; The school admins will need to redeploy your tool as described above.Currently, both static public key and keyset URL (JWKS) are going through successfully. Is it because Anthology hasn’t yet discontinued supporting the static public key? -&gt; Anthology will continue supporting the keys that were originally provided until further notice, likely until the end of 2022*. As always, if you have any questions, check out the contact us page and let us know! *Statements regarding our product development initiatives, including new products and future product upgrades, updates or enhancements represent our current intentions, but may be modified, delayed or abandoned without prior notice and there is no assurance that such offering, upgrades, updates or functionality will become available unless and until they have been made generally available to our customers.","keywords":"","version":null},{"title":"Use One-Time Session Token to Authenticate with UEF","type":0,"sectionRef":"#","url":"/blog/2021/05/10/2021/use one time session tokens instead of cookies for UEF authentication","content":"","keywords":"","version":null},{"title":"So what can you do?​","type":1,"pageTitle":"Use One-Time Session Token to Authenticate with UEF","url":"/blog/2021/05/10/2021/use one time session tokens instead of cookies for UEF authentication#so-what-can-you-do","content":"Well, that depends upon who is reading this blog. If you are an administrator trying to get your users back in Learn, the most immediate fix is to remove that snippet from your login page. It won't fix your broken UEF integration, but it will at least let your users log in and interact with Learn. If you are a developer that has built a UEF integration, we actually implemented a fix for this in April: a way to bypass the need for a session cookie in this process. In the LTI launch, we now provide what is called a one-time session cookie. This is present in both LTI 1.1 and 1.3 launches. If you are using LTI 1.3, there's a small bug in this. I will share a workaround that will both get around this bug, but not fail when the bug is fixed. This one-time session cookie is added to the claims in the LTI 1.3 JWT and the form POST parameters in LTI 1.1. You can grab that value from the LTI launch, return it as a parameter in your 3LO authorization code request, and your problem will be solved. ","version":null,"tagName":"h2"},{"title":"LTI 1.3​","type":1,"pageTitle":"Use One-Time Session Token to Authenticate with UEF","url":"/blog/2021/05/10/2021/use one time session tokens instead of cookies for UEF authentication#lti13","content":"In LTI 1.3, you will see the value in the https://blackboard.com/lti/claim/one_time_session_token claim. This token is made up of a specially generated token value. It should also be followed by a comma and the user's UUID. The bug is that the comma is missing. Luckily, the user's UUID is the sub token in the same set of LTI claims. We intend to fix this, but to ensure your code works both now and after the fix, you can simply look for the comma. If it's not there, append it and the sub and you will be off and running. Here's a Python 3 code snippet to illustrate how this might look. We will be updating our UEF sample code, but at the time of this writing, we have not done so.  # Get the value of the one time session token from the LTI claim one_time_session_token = message_launch_data['https://blackboard.com/lti/claim/one_time_session_token'] # If there is no comma in the value, we've hit the bug. Add it and the user's UUID if &quot;,&quot; not in one_time_session_token: one_time_session_token += &quot;,&quot; + message_launch_data['sub'] # Add the one_time_session_token to the query parameters to send to the Authorization Code endpoint params = { 'redirect_uri' : Config.config['app_url'] + '/authcode/', 'response_type' : 'code', 'client_id' : Config.config['learn_rest_key'], 'one_time_session_token' : one_time_session_token, 'scope' : '*', 'state' : str(uuid.uuid4()) } # Encode the parameters encoded_params = urllib.parse.urlencode(params) # Redirect the successful LTI validation to the Authorization Code endpoint return(redirect(learn_url + '/learn/api/public/v1/oauth2/authorizationCode?' + encoded_params))  ","version":null,"tagName":"h3"},{"title":"LTI 1.1​","type":1,"pageTitle":"Use One-Time Session Token to Authenticate with UEF","url":"/blog/2021/05/10/2021/use one time session tokens instead of cookies for UEF authentication#lti11","content":"By now, I hope you are using LTI 1.3, but I know many are not. As a result, we also added a one-time session token to LTI 1.1 launches. This will come in the form POST parameter ext_one_time_session_token. Just like in the 1.3 example, your application should take this value from the LTI launch, append it to the authorization code request endpoint as one_time_session_token=that_token and redirect them to the authorization code endpoint. ","version":null,"tagName":"h3"},{"title":"Summary​","type":1,"pageTitle":"Use One-Time Session Token to Authenticate with UEF","url":"/blog/2021/05/10/2021/use one time session tokens instead of cookies for UEF authentication#summary","content":"We have validated this fix with one of the partners that was affected. If you are a developer, please fix the issue immediately! If you are an administrator of a Learn SaaS instance using Ultra, and you have UEF integrations, make sure you do not have that JavaScript snippet on your login page. And if you do, please remove it. Then let your UEF integration partners and developers know that this fix must be made as soon as possible. Regardless of whether you are an administrator or a developer, please feel free to reach out to us at developers@anthology.com with any questions. Happy coding! ","version":null,"tagName":"h2"},{"title":"Best Practices - Requesting Support via email","type":0,"sectionRef":"#","url":"/blog/email-support-best-practices","content":"Published: March 15, 2024 Last Update: March 15, 2024 Ensuring prompt email support is crucial for achieving a seamless integration. We prioritize addressing inquiries from developers and the community promptly. However, given the volume of emails we receive daily, ranging from straightforward queries to those requiring in-depth research for the best solution or alternative, our response times may vary. Our approach to supporting email inquiries involves several phases: Upon receipt, emails undergo the following process: The developer support team identifies the relevant domain associated with the request, such as Learn, Student, Reach, Finance, etc.The support request is then assigned to the most suitable resource available.Extensive research is conducted on the issue outlined in the email.A comprehensive response is crafted and sent out to address the email. Below are the recommended best practices to ensure you receive the quickest, most accurate, and highest quality response: Ensure a Clear Subject Line: Opt for a descriptive subject line summarizing the issue concisely. We recommend using the following format: {Your Company Name}-{Domain Name}: {Brief Issue Description}Example: YourCompanyName-AnthologyLearn: Issue with Launching Textbook Tool Provide Relevant Information: Include all necessary details such as issue specifics, steps to replicate, and relevant test data. Be Concise Yet Specific: Offer sufficient information to clarify the problem while avoiding unnecessary details that could potentially confuse the support team. One Issue per Email: Focus on one problem per email to streamline communication and ensure adequate attention is given to each issue. Maintain a Polite and Professional Tone: Uphold a respectful demeanor in your communication, regardless of any frustrations. Remember, support agents are here to assist you, and a courteous approach can enhance the interaction. Follow Up Appropriately: Should you not receive a response within a reasonable timeframe, consider a polite follow-up. However, refrain from overwhelming the support team with numerous emails in quick succession. We eagerly anticipate receiving full support and collaborating with your teams to ensure a successful integration. Cheers! Contributors on this article: Vikas Gupta DirectorIntegration Architecture, Developer Relations &amp; Partner Support","keywords":"","version":null},{"title":"Public Rest API and devportal roadmap April 2024","type":0,"sectionRef":"#","url":"/blog/public-rest-api-and-dev-portal-roadmap-april-2024","content":"Published: April 18, 2024 Last Update: April 18, 2024 Owr very own Camilo Dominguez presented us on our bbtechies session on Wednesday April 17th 2024 the Public REST API roadmap and a bit of the Developer Portal Roadmap. Here is the slide deck! Cheers! Contributors on this article: Camilo Dominguez Product ManagerDeveloper Portal and REST APIs","keywords":"","version":null},{"title":"DevCon 2022 Presentations!","type":0,"sectionRef":"#","url":"/blog/DevCon-2022-Presentations!","content":"","keywords":"","version":null},{"title":"BB Rest Helper​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/DevCon-2022-Presentations!#bb-rest-helper","content":"⏲ 1:00 PM - 1:45 PM Session  👨‍💻 **Presenter:** Javier Gregori Creating a proof of concept for an integration from scratch can be tedious, there are many basic elements such API authentication or logs that will need to be sorted out before being able to work on meaningful code, and even then, lots of code will need to be written and tested for API Requests. This library abstracts the common and boring operations that Blackboard developers face when interfacing with the REST API so they can focus their effort in creating the cool features they need for their integrations. This library is intended to explore Blackboard REST APIs and to help create POCs for integrations. Please note this tool is not supported by Blackboard and no warranties of any kind are provided. In this presentation you will get to know the Bb_rest_helper library, and how to set up with Visual studio code and Jupyter notebooks to make the REST of your life easier Description​ The Bb Rest Helper includes 5 classes to simpilfy common API operations with Blackboard APIs; Get_Config. This class is used to get configuration variables (url,key,secret)from an external configuration file in Json format. If you are authenticating for more than one API (i.e. Learn and Collaborate) you will need separate configuration files (i.e. learn_config.json and collab_config.json).Auth_Helper. This class is used to get the token that then will be used in the API calls. Provides different methods for the different APIs.Bb_Requests. This class is used to simplify calls to the Blackboard Rest APIs. Provides methods for GET, POST, PUT, PATCH and DELETE requests.Bb_Utils. A set of convenience functions (Logging, printing...), this will be extended over time.Ally_Helper This class is used to simplify interaction with Ally as a service, includes methods to authenticate, upload a file, check processing status and retrieve the feedback. As it is an initial release for this API with limited features, it is implemented as a separate class to provide easier access to these methods rather than having to code them manually or with the Bb_rest_helper library. Companion Links​ Javier's GitRepoPypi project link Presentation PDF​  Day 2 @ DevCon 2022 ","version":null,"tagName":"h3"},{"title":"Blackboard Learn REST APIs for Beginners​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/DevCon-2022-Presentations!#blackboard-learn-rest-apis-for-beginners","content":"⏲ 11:40 AM - 12:25 AM Session  👨‍💻 **Presenter:** Davey Herrera Presentation PDF​  Video companion​  ","version":null,"tagName":"h3"},{"title":"Migrating a B2 to LTI & REST Deep dive​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/DevCon-2022-Presentations!#migrating-a-b2-to-lti--rest-deep-dive","content":"⏲ 1:45 PM - 3:00 PM Session  👨‍💻 **Presenter:** Eric Preston  ","version":null,"tagName":"h3"},{"title":"Moving to Ultra: A Phased Approach​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/DevCon-2022-Presentations!#moving-to-ultra-a-phased-approach","content":"⏲ 4:15 PM - 5:00 PM Session  👩‍💻 **Presenter:** Michelle Donaldson  Day 3 @ DevCon 2022 ","version":null,"tagName":"h3"},{"title":"Making ultra your own: UEF for Beginners​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/DevCon-2022-Presentations!#making-ultra-your-own-uef-for-beginners","content":"⏲ 11:30 PM - 12:15 PM Session  👨‍💻 **Presenter:** Chris Filkins For years, many of us have relied on Building Blocks as a way to add features and functionality into our Blackboard Learn courses. One of the best tools we ever used was the javascript Hacks tool, which leveraged the renderingHook function to allow a system administrator to further modify and customize their Learn environment with custom tools, banner, footers, etc. Unfortunately, the Ultra experience no longer supports the renderingHook function, removing the key mechanism for these customizations. In order to restore some of these capabilities, Blackboard Learn implemented a new feature set called the Ultra Extension Framework (UEF). This new framework opens a number of doors for developers to once again customize and extend their Blackboard Learn environments after switching to the Ultra experience. The Ultra Extension Framework consists of two key components – telemetry data for user activity, and injection points to add content at various locations within the Ultra interface. The telemetry data can include a number of different events, including hover, click, route, as well as portal windows being created and removed. After initially launching as an LTI tool, an UEF tool can subscribe to any number of these events, and typically runs as javascript inside of a hidden iframe within the Ultra interface. From there, the custom script can then submit requests to the Ultra interface to create new panels, banners, notifications, popups, or even a custom help provider. The attached presentation will provide some sample code snippets from projects that we have deployed in our production environment, including banners and custom help providers.  ","version":null,"tagName":"h3"},{"title":"Best Practices for Building Your LTI Advantage & REST Applications For Learn, From Registration through Release​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/DevCon-2022-Presentations!#best-practices-for-building-your-lti-advantage--rest-applications-for-learn-from-registration-through-release","content":"⏲ 9:00 AM - 9:45 PM Session  👨‍💻 **Presenter:** Mark Kauffman In this session Mark will give best practices for integrations that use LTI 1.3 and/or the Blackboard Learn REST APIs. There are many ways to improve your integration's performance and use, beginning with registration on the developer portal through the day it's installed on client systems. Given Mark's extensive experience working with 3rd-party integrations, he's selected those commonly missed best practices that, when you use them, will position your integration for maximum success.  ","version":null,"tagName":"h3"},{"title":"REST APIs and Developer portal Roadmap DEC 13","type":0,"sectionRef":"#","url":"/blog/rest-apis-and-developer-portal-roadmap-december-13-session","content":"Today, we had a really nice session with Mark O'Neil where he explored our roadmap for REST APIs and Developer Portal! Have a glimpse of what's to come! our forward looking statement must be kept in mind in this presentation Here is the slide deck! Cheers!","keywords":"","version":null},{"title":"REST APIs and Developer portal Roadmap August 30th 2023 session","type":0,"sectionRef":"#","url":"/blog/rest-apis-and-developer-portal-roadmap-august-30-2023","content":"Today, we had a really nice session with Mark O'Neil where he explored our roadmap for REST APIs and Developer Portal! Have a glimpse of what's to come! our forward looking statement must be kept in mind in this presentation Here is the slide deck! Cheers!","keywords":"","version":null},{"title":"Integration Installation and Customer Experience","type":0,"sectionRef":"#","url":"/blog/Anthology Integrations and Customer Experience","content":"","keywords":"","version":null},{"title":"Why is Customer Experience Important?​","type":1,"pageTitle":"Integration Installation and Customer Experience","url":"/blog/Anthology Integrations and Customer Experience#why-is-customer-experience-important","content":"Customer experience is important for Partners and Anthology Customers for many reasons. Most notably: Customer Retention: Providing a positive customer experience can help improve customer retention rates. Customers are more likely to remain loyal to a brand if they have had a positive experience with the company. Brand Reputation: A positive customer experience can enhance your company's reputation and help build a positive brand image. Word of mouth and online reviews are powerful marketing tools, and customers are more likely to share their positive experiences with others. Competitive Advantage: Providing a superior customer experience can set a business apart from its competitors and give it a competitive advantage. Overall, a positive customer experience is essential for building strong customer relationships, increasing customer loyalty, and improving the overall success of a business. This applies to our developer community as well as Anthology. In addition to the general integration functionality, for which the integration development team is ultimately responsible, the most significant impact on the Customer Experience is installation and support of your integration. Installation of your integration is often the first experience customers will have with your business and first impressions are lasting and influence future interactions. How clients discover and know whom to contact for Support is also a significant influencer of impressions of your business. Anthology has built our integration experience and best practices, with these latter two concepts in mind. ","version":null,"tagName":"h2"},{"title":"Integration Installation​","type":1,"pageTitle":"Integration Installation and Customer Experience","url":"/blog/Anthology Integrations and Customer Experience#integration-installation","content":"Anthology has thought long about how to simplify the integration experience for customers in the world of SaaS. In doing so we arrived at a &quot;Register once, deploy everywhere&quot; model for Integration developers to deliver theirr solutions. This applies to LTI 1.3 and RESTful integrations alike, and greatly simplifies installation for our mutual customers. ","version":null,"tagName":"h2"},{"title":"SaaS changed everything...​","type":1,"pageTitle":"Integration Installation and Customer Experience","url":"/blog/Anthology Integrations and Customer Experience#saas-changed-everything","content":"In prior years you may have built integrations which ran on-prem or in-process alongside the Anthology product. This required customers to manage the software themselves. Under the more modern SaaS model, which is used by Anthology, the customer is no responsible for updating and maintaining the integration, as SaaS product consumers receive updates automatically. To facilitate the SaaS model, the Anthology Developer Portal provides the means for you the Developer to register your integration once and deploy to multiple customers. Once your integration is registered in the Developer Portal an identifier is issued - this identifier is used by all customers to install your integration. This means you have one instance of your integration and all customers use that instance. This of course imply some design concepts for your integration. This model for delivering innovative solutions to customers provides cost savings and improved efficiency for your business. This is because instead of multiple instances (with per instance charges accrued) you only need one instance of your integration which is shared by all your customers. This is the SaaS way. ","version":null,"tagName":"h3"},{"title":"Integration Design Considerations​","type":1,"pageTitle":"Integration Installation and Customer Experience","url":"/blog/Anthology Integrations and Customer Experience#integration-design-considerations","content":"Register once and Deploy anywhere means there are some differences in how you design and deliver your integration. Note: The following pertains to development of integrations which are marketed to multiple customers. Only point 1 is pertinent to those who are developing campus-only solutions. Logs and data: Integrations should maintain archives of customer logs and any integration specific data as those are not provided by Anthology products.Multi-tenancy: Integrations should follow a multi-tenant model vs single tenant. Multi-tenant means one integration service delivering your integration to all your customers vs requiring a new intetegration service per customer. This means you have to design into your integration the ability for enabling individual customer accounts, likely only administrator, for any customer specific configuration.Separation of Customer data: Multi-tenancy means that in addition to running a single service for your customers you are likely using a single database. This dictates a secure separation of customer data using a unique customer identifier prefix on customer-centric data keys. Each of the above enable you to deliver a secure, efficient, and postive experience to customers at a cost savings of single instance vs multiple instance service delivery. ","version":null,"tagName":"h3"},{"title":"Best Practices​","type":1,"pageTitle":"Integration Installation and Customer Experience","url":"/blog/Anthology Integrations and Customer Experience#best-practices","content":"Developer Portal Accounts​ There are really two types of Developer Portal accounts: Developer Accounts: the personal accounts which are used for prototyping and testing of your integration. These are in the form of developername@domain.tld. These are often referred to as test or development _groups. These groups are restricted in the number of request which may be made w/in a 24 hour time period to non-production level settings.Production Accounts: these are your accounts used for production release of your integration. Given this account's information is what customers see when they install your integration it is considered a best practice to use a mailinglist such as business@, integration_name@, or support@domain.tld. This email must be publicly reachable.Production Group: This is a very specific group within your Production Account which contains your integrations. This group receives production level settings. See Getting Started with the Developer Portal for more information. Production Integration Release​ See our Releasing your Integration guide for production release details. Also see LTI Registration and Deployment with Learn guide which describes Anthology's approach behind releasing LTI 1.3 integrations. Customer Facing Documentation​ It is the integration developer's responsibility to provide the necessary documentation for a successful installation. This is greatly simplified when following our best practices for Register once, deploy anywhere. Currently there are three things which will generate no end of consternation for customers which degrades their experience with your integration/company. These three things fall into two groups User Roles and Support. Integration User Roles: Entitlements vs Privileges​ Aside from it not being a best practice to ask your customer to register your integration on the Developer Portal on your behalf, even worse is asking them to do so and then ask that they give your integration an Admin Role. Never, never, never ask them to do these terrible things. Instead, develop your integration following the Register once model, and hand off your integration Identifier to your customer. If you are an LTI 1.3 provider - you are done. Your customer adds your LTI integration and sets availability to their users and they are done. No passing around of Keys and Secrets or error prone multiple copy pasting of multiple configuration strings... you hand off one integration Id which you get when you register your integration on the portal and done. Well almost... the current exception (see The Future is Bright(er) below) is if your integration uses our REST APIs. Then your integration documentation must provide Anthology administrators with a list of privileges that need to be added to the user which is associated with your integration. The APIs list entitlements, not privileges, and therein lay a problem for Customers. As the integration provider you want a great customer experience so you use the bookmarklet tool to determine the privileges you include in your documentation to provide guidance to admins installing your integration. ","version":null,"tagName":"h3"},{"title":"Integration Support​","type":1,"pageTitle":"Integration Installation and Customer Experience","url":"/blog/Anthology Integrations and Customer Experience#integration-support","content":"","version":null,"tagName":"h2"},{"title":"Who is responsible for your integration's support?​","type":1,"pageTitle":"Integration Installation and Customer Experience","url":"/blog/Anthology Integrations and Customer Experience#who-is-responsible-for-your-integrations-support","content":"It probably goes without saying, but the integration vendor is responsible. Not Anthology. When the vendor registers in the Developer Portal they provide email information which is seen by customers when they install the integration. That is why this email and contact information must be publicly reachable. That is also why it makes sense to have a specific account from which all your integrations are delivered. See Getting Started with the Dev Portal for information. ","version":null,"tagName":"h3"},{"title":"The Future is Bright(er)​","type":1,"pageTitle":"Integration Installation and Customer Experience","url":"/blog/Anthology Integrations and Customer Experience#the-future-is-brighter","content":"Forward Looking Statement applies: Statements regarding our product development initiatives, including new products and future product upgrades, updates or enhancements represent our current intentions, but may be modified, delayed or abandoned without prior notice and there is no assurance that such offering, upgrades, updates or functionality will become available unless and until they have been made generally available to our customers. ","version":null,"tagName":"h2"},{"title":"Simplification of Integration Installation​","type":1,"pageTitle":"Integration Installation and Customer Experience","url":"/blog/Anthology Integrations and Customer Experience#simplification-of-integration-installation","content":"To ensure an optimal customer experience we have a few items which we intend to deliver in 2023. Each of these enable the offset the heavy lift of the installation of any integration from customers to the developer. Auto-Install of REST Users with Privileges​ Integrations using the REST API require association with a REST integration user who has the necessary system role privileges (never a System Administrator Role!!!). The REST APIs identify with entitlements while the systems identify with privileges. This complicates installation of REST integrations not using Three Legged OAuth (3LO). Late 2023 we intend to release a &quot;manifest&quot; model for integrations which, amongst other useful data points, identifies the entitlements required by an integration. This manifest will be used on Administrator request to install an integration to display important information about the integration to the Administrator - notably the privileges requested by the integration developer. The now informed Administrator may choose to install the integration at which time the REST integration user is created with the necessary privileges. No interaction on the part of the Administrator other than reviewing and accepting the installation! LTI and REST share JWT for authN​ Currently LTI 1.3 and REST APIs use two separate authentication models. LTI 1.3 uses JSON Web Tokens (JWT) and REST uses OAuth 2 basic authentication using Key:Secret pairs. Late 2023 the use of JWT will be optional for REST API-based integrations and JWT will be used exclusively for LTI 1.3 integrations which also use our REST APIs. This greatly simplifies the development of LTI 1.3 integrations which use our REST APIs. The optional use of JWTs for non-LTI integrations provide an improved security model for REST API-based integrations while being backward compatible with existing REST integrations. ","version":null,"tagName":"h3"},{"title":"DevCon 2022 Presentations!","type":0,"sectionRef":"#","url":"/blog/tags/2022","content":"","keywords":"","version":null},{"title":"BB Rest Helper​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/tags/2022#bb-rest-helper","content":"⏲ 1:00 PM - 1:45 PM Session  👨‍💻 **Presenter:** Javier Gregori Creating a proof of concept for an integration from scratch can be tedious, there are many basic elements such API authentication or logs that will need to be sorted out before being able to work on meaningful code, and even then, lots of code will need to be written and tested for API Requests. This library abstracts the common and boring operations that Blackboard developers face when interfacing with the REST API so they can focus their effort in creating the cool features they need for their integrations. This library is intended to explore Blackboard REST APIs and to help create POCs for integrations. Please note this tool is not supported by Blackboard and no warranties of any kind are provided. In this presentation you will get to know the Bb_rest_helper library, and how to set up with Visual studio code and Jupyter notebooks to make the REST of your life easier Description​ The Bb Rest Helper includes 5 classes to simpilfy common API operations with Blackboard APIs; Get_Config. This class is used to get configuration variables (url,key,secret)from an external configuration file in Json format. If you are authenticating for more than one API (i.e. Learn and Collaborate) you will need separate configuration files (i.e. learn_config.json and collab_config.json).Auth_Helper. This class is used to get the token that then will be used in the API calls. Provides different methods for the different APIs.Bb_Requests. This class is used to simplify calls to the Blackboard Rest APIs. Provides methods for GET, POST, PUT, PATCH and DELETE requests.Bb_Utils. A set of convenience functions (Logging, printing...), this will be extended over time.Ally_Helper This class is used to simplify interaction with Ally as a service, includes methods to authenticate, upload a file, check processing status and retrieve the feedback. As it is an initial release for this API with limited features, it is implemented as a separate class to provide easier access to these methods rather than having to code them manually or with the Bb_rest_helper library. Companion Links​ Javier's GitRepoPypi project link Presentation PDF​  Day 2 @ DevCon 2022 ","version":null,"tagName":"h3"},{"title":"Blackboard Learn REST APIs for Beginners​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/tags/2022#blackboard-learn-rest-apis-for-beginners","content":"⏲ 11:40 AM - 12:25 AM Session  👨‍💻 **Presenter:** Davey Herrera Presentation PDF​  Video companion​  ","version":null,"tagName":"h3"},{"title":"Migrating a B2 to LTI & REST Deep dive​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/tags/2022#migrating-a-b2-to-lti--rest-deep-dive","content":"⏲ 1:45 PM - 3:00 PM Session  👨‍💻 **Presenter:** Eric Preston  ","version":null,"tagName":"h3"},{"title":"Moving to Ultra: A Phased Approach​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/tags/2022#moving-to-ultra-a-phased-approach","content":"⏲ 4:15 PM - 5:00 PM Session  👩‍💻 **Presenter:** Michelle Donaldson  Day 3 @ DevCon 2022 ","version":null,"tagName":"h3"},{"title":"Making ultra your own: UEF for Beginners​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/tags/2022#making-ultra-your-own-uef-for-beginners","content":"⏲ 11:30 PM - 12:15 PM Session  👨‍💻 **Presenter:** Chris Filkins For years, many of us have relied on Building Blocks as a way to add features and functionality into our Blackboard Learn courses. One of the best tools we ever used was the javascript Hacks tool, which leveraged the renderingHook function to allow a system administrator to further modify and customize their Learn environment with custom tools, banner, footers, etc. Unfortunately, the Ultra experience no longer supports the renderingHook function, removing the key mechanism for these customizations. In order to restore some of these capabilities, Blackboard Learn implemented a new feature set called the Ultra Extension Framework (UEF). This new framework opens a number of doors for developers to once again customize and extend their Blackboard Learn environments after switching to the Ultra experience. The Ultra Extension Framework consists of two key components – telemetry data for user activity, and injection points to add content at various locations within the Ultra interface. The telemetry data can include a number of different events, including hover, click, route, as well as portal windows being created and removed. After initially launching as an LTI tool, an UEF tool can subscribe to any number of these events, and typically runs as javascript inside of a hidden iframe within the Ultra interface. From there, the custom script can then submit requests to the Ultra interface to create new panels, banners, notifications, popups, or even a custom help provider. The attached presentation will provide some sample code snippets from projects that we have deployed in our production environment, including banners and custom help providers.  ","version":null,"tagName":"h3"},{"title":"Best Practices for Building Your LTI Advantage & REST Applications For Learn, From Registration through Release​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/tags/2022#best-practices-for-building-your-lti-advantage--rest-applications-for-learn-from-registration-through-release","content":"⏲ 9:00 AM - 9:45 PM Session  👨‍💻 **Presenter:** Mark Kauffman In this session Mark will give best practices for integrations that use LTI 1.3 and/or the Blackboard Learn REST APIs. There are many ways to improve your integration's performance and use, beginning with registration on the developer portal through the day it's installed on client systems. Given Mark's extensive experience working with 3rd-party integrations, he's selected those commonly missed best practices that, when you use them, will position your integration for maximum success.  ","version":null,"tagName":"h3"},{"title":"DevCon 2022 Presentations!","type":0,"sectionRef":"#","url":"/blog/tags/devcon","content":"","keywords":"","version":null},{"title":"BB Rest Helper​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/tags/devcon#bb-rest-helper","content":"⏲ 1:00 PM - 1:45 PM Session  👨‍💻 **Presenter:** Javier Gregori Creating a proof of concept for an integration from scratch can be tedious, there are many basic elements such API authentication or logs that will need to be sorted out before being able to work on meaningful code, and even then, lots of code will need to be written and tested for API Requests. This library abstracts the common and boring operations that Blackboard developers face when interfacing with the REST API so they can focus their effort in creating the cool features they need for their integrations. This library is intended to explore Blackboard REST APIs and to help create POCs for integrations. Please note this tool is not supported by Blackboard and no warranties of any kind are provided. In this presentation you will get to know the Bb_rest_helper library, and how to set up with Visual studio code and Jupyter notebooks to make the REST of your life easier Description​ The Bb Rest Helper includes 5 classes to simpilfy common API operations with Blackboard APIs; Get_Config. This class is used to get configuration variables (url,key,secret)from an external configuration file in Json format. If you are authenticating for more than one API (i.e. Learn and Collaborate) you will need separate configuration files (i.e. learn_config.json and collab_config.json).Auth_Helper. This class is used to get the token that then will be used in the API calls. Provides different methods for the different APIs.Bb_Requests. This class is used to simplify calls to the Blackboard Rest APIs. Provides methods for GET, POST, PUT, PATCH and DELETE requests.Bb_Utils. A set of convenience functions (Logging, printing...), this will be extended over time.Ally_Helper This class is used to simplify interaction with Ally as a service, includes methods to authenticate, upload a file, check processing status and retrieve the feedback. As it is an initial release for this API with limited features, it is implemented as a separate class to provide easier access to these methods rather than having to code them manually or with the Bb_rest_helper library. Companion Links​ Javier's GitRepoPypi project link Presentation PDF​  Day 2 @ DevCon 2022 ","version":null,"tagName":"h3"},{"title":"Blackboard Learn REST APIs for Beginners​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/tags/devcon#blackboard-learn-rest-apis-for-beginners","content":"⏲ 11:40 AM - 12:25 AM Session  👨‍💻 **Presenter:** Davey Herrera Presentation PDF​  Video companion​  ","version":null,"tagName":"h3"},{"title":"Migrating a B2 to LTI & REST Deep dive​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/tags/devcon#migrating-a-b2-to-lti--rest-deep-dive","content":"⏲ 1:45 PM - 3:00 PM Session  👨‍💻 **Presenter:** Eric Preston  ","version":null,"tagName":"h3"},{"title":"Moving to Ultra: A Phased Approach​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/tags/devcon#moving-to-ultra-a-phased-approach","content":"⏲ 4:15 PM - 5:00 PM Session  👩‍💻 **Presenter:** Michelle Donaldson  Day 3 @ DevCon 2022 ","version":null,"tagName":"h3"},{"title":"Making ultra your own: UEF for Beginners​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/tags/devcon#making-ultra-your-own-uef-for-beginners","content":"⏲ 11:30 PM - 12:15 PM Session  👨‍💻 **Presenter:** Chris Filkins For years, many of us have relied on Building Blocks as a way to add features and functionality into our Blackboard Learn courses. One of the best tools we ever used was the javascript Hacks tool, which leveraged the renderingHook function to allow a system administrator to further modify and customize their Learn environment with custom tools, banner, footers, etc. Unfortunately, the Ultra experience no longer supports the renderingHook function, removing the key mechanism for these customizations. In order to restore some of these capabilities, Blackboard Learn implemented a new feature set called the Ultra Extension Framework (UEF). This new framework opens a number of doors for developers to once again customize and extend their Blackboard Learn environments after switching to the Ultra experience. The Ultra Extension Framework consists of two key components – telemetry data for user activity, and injection points to add content at various locations within the Ultra interface. The telemetry data can include a number of different events, including hover, click, route, as well as portal windows being created and removed. After initially launching as an LTI tool, an UEF tool can subscribe to any number of these events, and typically runs as javascript inside of a hidden iframe within the Ultra interface. From there, the custom script can then submit requests to the Ultra interface to create new panels, banners, notifications, popups, or even a custom help provider. The attached presentation will provide some sample code snippets from projects that we have deployed in our production environment, including banners and custom help providers.  ","version":null,"tagName":"h3"},{"title":"Best Practices for Building Your LTI Advantage & REST Applications For Learn, From Registration through Release​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/tags/devcon#best-practices-for-building-your-lti-advantage--rest-applications-for-learn-from-registration-through-release","content":"⏲ 9:00 AM - 9:45 PM Session  👨‍💻 **Presenter:** Mark Kauffman In this session Mark will give best practices for integrations that use LTI 1.3 and/or the Blackboard Learn REST APIs. There are many ways to improve your integration's performance and use, beginning with registration on the developer portal through the day it's installed on client systems. Given Mark's extensive experience working with 3rd-party integrations, he's selected those commonly missed best practices that, when you use them, will position your integration for maximum success.  ","version":null,"tagName":"h3"},{"title":"DevCon 2022 Presentations!","type":0,"sectionRef":"#","url":"/blog/tags/recap","content":"","keywords":"","version":null},{"title":"BB Rest Helper​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/tags/recap#bb-rest-helper","content":"⏲ 1:00 PM - 1:45 PM Session  👨‍💻 **Presenter:** Javier Gregori Creating a proof of concept for an integration from scratch can be tedious, there are many basic elements such API authentication or logs that will need to be sorted out before being able to work on meaningful code, and even then, lots of code will need to be written and tested for API Requests. This library abstracts the common and boring operations that Blackboard developers face when interfacing with the REST API so they can focus their effort in creating the cool features they need for their integrations. This library is intended to explore Blackboard REST APIs and to help create POCs for integrations. Please note this tool is not supported by Blackboard and no warranties of any kind are provided. In this presentation you will get to know the Bb_rest_helper library, and how to set up with Visual studio code and Jupyter notebooks to make the REST of your life easier Description​ The Bb Rest Helper includes 5 classes to simpilfy common API operations with Blackboard APIs; Get_Config. This class is used to get configuration variables (url,key,secret)from an external configuration file in Json format. If you are authenticating for more than one API (i.e. Learn and Collaborate) you will need separate configuration files (i.e. learn_config.json and collab_config.json).Auth_Helper. This class is used to get the token that then will be used in the API calls. Provides different methods for the different APIs.Bb_Requests. This class is used to simplify calls to the Blackboard Rest APIs. Provides methods for GET, POST, PUT, PATCH and DELETE requests.Bb_Utils. A set of convenience functions (Logging, printing...), this will be extended over time.Ally_Helper This class is used to simplify interaction with Ally as a service, includes methods to authenticate, upload a file, check processing status and retrieve the feedback. As it is an initial release for this API with limited features, it is implemented as a separate class to provide easier access to these methods rather than having to code them manually or with the Bb_rest_helper library. Companion Links​ Javier's GitRepoPypi project link Presentation PDF​  Day 2 @ DevCon 2022 ","version":null,"tagName":"h3"},{"title":"Blackboard Learn REST APIs for Beginners​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/tags/recap#blackboard-learn-rest-apis-for-beginners","content":"⏲ 11:40 AM - 12:25 AM Session  👨‍💻 **Presenter:** Davey Herrera Presentation PDF​  Video companion​  ","version":null,"tagName":"h3"},{"title":"Migrating a B2 to LTI & REST Deep dive​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/tags/recap#migrating-a-b2-to-lti--rest-deep-dive","content":"⏲ 1:45 PM - 3:00 PM Session  👨‍💻 **Presenter:** Eric Preston  ","version":null,"tagName":"h3"},{"title":"Moving to Ultra: A Phased Approach​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/tags/recap#moving-to-ultra-a-phased-approach","content":"⏲ 4:15 PM - 5:00 PM Session  👩‍💻 **Presenter:** Michelle Donaldson  Day 3 @ DevCon 2022 ","version":null,"tagName":"h3"},{"title":"Making ultra your own: UEF for Beginners​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/tags/recap#making-ultra-your-own-uef-for-beginners","content":"⏲ 11:30 PM - 12:15 PM Session  👨‍💻 **Presenter:** Chris Filkins For years, many of us have relied on Building Blocks as a way to add features and functionality into our Blackboard Learn courses. One of the best tools we ever used was the javascript Hacks tool, which leveraged the renderingHook function to allow a system administrator to further modify and customize their Learn environment with custom tools, banner, footers, etc. Unfortunately, the Ultra experience no longer supports the renderingHook function, removing the key mechanism for these customizations. In order to restore some of these capabilities, Blackboard Learn implemented a new feature set called the Ultra Extension Framework (UEF). This new framework opens a number of doors for developers to once again customize and extend their Blackboard Learn environments after switching to the Ultra experience. The Ultra Extension Framework consists of two key components – telemetry data for user activity, and injection points to add content at various locations within the Ultra interface. The telemetry data can include a number of different events, including hover, click, route, as well as portal windows being created and removed. After initially launching as an LTI tool, an UEF tool can subscribe to any number of these events, and typically runs as javascript inside of a hidden iframe within the Ultra interface. From there, the custom script can then submit requests to the Ultra interface to create new panels, banners, notifications, popups, or even a custom help provider. The attached presentation will provide some sample code snippets from projects that we have deployed in our production environment, including banners and custom help providers.  ","version":null,"tagName":"h3"},{"title":"Best Practices for Building Your LTI Advantage & REST Applications For Learn, From Registration through Release​","type":1,"pageTitle":"DevCon 2022 Presentations!","url":"/blog/tags/recap#best-practices-for-building-your-lti-advantage--rest-applications-for-learn-from-registration-through-release","content":"⏲ 9:00 AM - 9:45 PM Session  👨‍💻 **Presenter:** Mark Kauffman In this session Mark will give best practices for integrations that use LTI 1.3 and/or the Blackboard Learn REST APIs. There are many ways to improve your integration's performance and use, beginning with registration on the developer portal through the day it's installed on client systems. Given Mark's extensive experience working with 3rd-party integrations, he's selected those commonly missed best practices that, when you use them, will position your integration for maximum success.  ","version":null,"tagName":"h3"},{"title":"How to use the Ally as a Service API Document to Test API","type":0,"sectionRef":"#","url":"/docs/ally/about-api-doc","content":"How to use the Ally as a Service API Document to Test API The API documentation for Ally as a Service allows a developer to test the API real-time inline on the page. It is a quick and easy way to not only get high-level information about the API itself, but also see how it works. You can upload a file, check the status of processing, and retrieve the report when finished. Doing so and then testing your application with the same file is a quick, easy, and powerful way to validate your work. To do this, you will need your client ID and your secret. See the Getting Started Guide for information on how to request your credentials. At the top of the page you will see two text boxes, one for each of these values. Simply plug them in and you are all ready to. At the bottom of the documentation for the Upload a File to Ally endpoint, there is a Try it now section, where you can select a file and click submit to upload that file to be processed. Upon upload, you will see the results appear on the screen, which will include the content hash value. This content hash value is unique to a specific piece of content, and specifically, the piece of content you just uploaded. In your application, you will use this for all subsequent calls. In the API documentation, it will automatically capture that value and paste it into the subsequest endpoints. The next section is the Check the processing status of a file endpoint. In the Try it now section, you will see a field for the Content hash already filled in and a Submit button. Click submit to see the result of this call. Finally, at the bottom of the documentation for the Retrieve the feedback for a file, the Try it now section has a similar Content hash text box prefilled with the content hash value, and a Feedback radio button. Setting to true will retrieve the full report, while setting it to false or N/A, which indicates that you are not specifying the argument, will retrieve just the metadata. For a walkthrough, check out this video: Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards","keywords":"","version":null},{"title":"Check the processing status of a file","type":0,"sectionRef":"#","url":"/docs/ally/check-status","content":"","keywords":"","version":null},{"title":"Endpoint​","type":1,"pageTitle":"Check the processing status of a file","url":"/docs/ally/check-status#endpoint","content":"GET /api/v2/clients/:clientId/content/:contentHash/status  Path Parameters​ clientId - Path parameter - Your Ally Client IDcontentHash - Path parameter - The content hash from the previous endpoint Body Parameters​ None Query Parameters​ None ","version":null,"tagName":"h3"},{"title":"Expected response​","type":1,"pageTitle":"Check the processing status of a file","url":"/docs/ally/check-status#expected-response","content":"This endpoint will always return a 200 status code for existing content hashes regardless of whether the file was processed successfully. { &quot;hash&quot;: &quot;MS4gQWxsI...&quot;, &quot;status&quot;: &quot;success&quot;, &quot;statusUrl&quot;: &quot;/api/v2/clients/:clientId/content/MS4gQWxsIH.../status&quot;, &quot;resourceUrl&quot;: &quot;/api/v2/clients/:clientId/content/MS4gQWxsIH...&quot; }  Parameter\tDefinitionhash\tthe content hash used to reference the file by Ally as a Service status\tthe stage of processing the file is in* statusUrl\tthe endpoint to call to check the status resourceUrl\tthe endpoint to retrieve the report or metadata The following status values can be identified: successpendinginprogressfailed ","version":null,"tagName":"h3"},{"title":"Testing with cURL​","type":1,"pageTitle":"Check the processing status of a file","url":"/docs/ally/check-status#testing-with-curl","content":"curl \\ -H &quot;Authorization: Bearer myJwtToken&quot; \\ https://prod.ally.ac/api/v2/clients/:clientId/content/:contentHash/status  Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h2"},{"title":"Feedback parameter definitions","type":0,"sectionRef":"#","url":"/docs/ally/feedback-parameter-definitions","content":"Feedback parameter definitions Here are the feedback parameters returned when the feedback endpoint is called. The full and meta columns defines which fields are included based on the feedback query parameter. If it is set to true, you get the full response, and the full column will have a check. If it is set to false or omitted, you receive just the meta data, and Meta column will have an check Parameter\tDefinition\tFull\tMetahash\tthe content hash used to reference the file by Ally as a Service\tcheck\tcheck feedback\tthe feedback from processing the document, or null\tcheck\tcheck feedback.score\tscore between 0 (low) and 1 (high) indicating the documents accessibility\tcheck feedback.visibility\tvisibility is the overall accessibility of your document: low, medium, high or perfect\tcheck feedback.report\tthe contents of the feedback report\tcheck feedback.report.results\tthe results of the feedback report\tcheck feedback.report.results.Scanned\twas the document scanned?\tcheck feedback.report.results.Scanned.score\t0 = scanned, 1 = not scanned\tcheck feedback.report.results.Tagged\tis the document tagged?\tcheck feedback.report.results.Tagged.score\t0 = untagged, 1 = tagged\tcheck feedback.report.results.Ocred\twas the document OCRed?\tcheck feedback.report.results.Ocred.score\t0 = no, 1 = yes\tcheck feedback.report.results.AlternativeText\treport on alternative text for images\tcheck feedback.report.results.AlternativeText.snippets\tan array containing locations of detected issues\tcheck feedback.report.results.AlternativeText.snippets[ ].page\tthe page number containing the issue\tcheck feedback.report.results.AlternativeText.snippets[ ].y0\tthe starting y axis location on the page of the issue\tcheck feedback.report.results.AlternativeText.snippets[ ].x0\tthe starting x axis location on the page of the issue\tcheck feedback.report.results.AlternativeText.snippets[ ].y1\tthe ending y axis location on the page of the issue\tcheck feedback.report.results.AlternativeText.snippets[ ].x1\tthe ending x axis location on the page of the issue\tcheck feedback.report.results.AlternativeText.score\talternative text score between 0 (low) and 1 (high)\tcheck feedback.report.results.Contrast\treport on color contrast\tcheck feedback.report.results.Contrast.snippets\tan array containing locations of detected issues\tcheck feedback.report.results.Contrast.snippets[ ].page\tthe page number containing the issue\tcheck feedback.report.results.Contrast.snippets[ ].y0\tthe starting y axis location on the page of the issue\tcheck feedback.report.results.Contrast.snippets[ ].x0\tthe starting x axis location on the page of the issue\tcheck feedback.report.results.Contrast.snippets[ ].y1\tthe ending y axis location on the page of the issue\tcheck feedback.report.results.Contrast.snippets[ ].x1\tthe ending x axis location on the page of the issue\tcheck feedback.report.results.Contrast.score\tcontrast score between 0 (low) and 1 (high)\tcheck feedback.report.results.HeadingsSequential\treport on sequential headings\tcheck feedback.report.results.HeadingsSequential.snippets\tan array containing locations of detected issues\tcheck feedback.report.results.HeadingsSequential.snippets[ ].page\tthe page number containing the issue\tcheck feedback.report.results.HeadingsSequential.snippets[ ].y0\tthe starting y axis location on the page of the issue\tcheck feedback.report.results.HeadingsSequential.snippets[ ].x0\tthe starting x axis location on the page of the issue\tcheck feedback.report.results.HeadingsSequential.snippets[ ].y1\tthe ending y axis location on the page of the issue\tcheck feedback.report.results.HeadingsSequential.snippets[ ].x1\tthe ending x axis location on the page of the issue\tcheck feedback.report.results.HeadingsSequential.score\tsequential headings score between 0 (low) and 1 (high)\tcheck feedback.report.results.HeadingsHigherLevel.snippets\treport on PDF heading levels\tcheck feedback.report.results.HeadingsHigherLevel.score\thigher-level headings score between 0 (low) and 1 (high)\tcheck feedback.report.results.Title\tdoes the document have a title?\tcheck feedback.report.results.Title.score\t0 = No, 1 = Yes\tcheck feedback.report.results.TableHeaders\treport on the existence of headers in tables\tcheck feedback.report.results.TableHeaders.snippets\tan array containing locations of detected issues\tcheck feedback.report.results.TableHeaders.snippets[ ].page\tthe page number containing the issue\tcheck feedback.report.results.TableHeaders.snippets[ ].y0\tthe starting y axis location on the page of the issue\tcheck feedback.report.results.TableHeaders.snippets[ ].x0\tthe starting x axis location on the page of the issue\tcheck feedback.report.results.TableHeaders.snippets[ ].y1\tthe ending y axis location on the page of the issue\tcheck feedback.report.results.TableHeaders.snippets[ ].x1\tthe ending x axis location on the page of the issue\tcheck feedback.report.results.TableHeaders.score\ttable headers score between 0 (low) and 1 (high)\tcheck feedback.report.results.LanguagePresence\tdoes the document contain language information\tcheck feedback.report.results.LanguagePresence.score\tlanguage presence score: 0 = No, 1 = Yes\tcheck feedback.report.results.HeadingsPresence\tdoes the document contain headings?\tcheck feedback.report.results.HeadingsPresence.score\theadings present score, 0 = No, 1 = Yes\tcheck feedback.report.results.LanguageCorrect\tdoes the document language declaration match the language used?\tcheck feedback.report.results.LanguageCorrect.detectedLanguage\tlanguage code declared, i.e. 'en' for English\tcheck feedback.report.results.LanguageCorrect.score\tlanguage correct score, 0 = No, 1 = Yes\tcheck feedback.report.results.HeadingsStartAtOne\treport on headings and whether they start at one\tcheck feedback.report.results.HeadingsStartAtOne.snippets\tan array containing locations of detected issues\tcheck feedback.report.results.HeadingsStartAtOne.snippets[ ].page\tthe page number containing the issue\tcheck feedback.report.results.HeadingsStartAtOne.snippets[ ].y0\tthe starting y axis location on the page of the issue\tcheck feedback.report.results.HeadingsStartAtOne.snippets[ ].x0\tthe starting x axis location on the page of the issue\tcheck feedback.report.results.HeadingsStartAtOne.snippets[ ].y1\tthe ending y axis location on the page of the issue\tcheck feedback.report.results.HeadingsStartAtOne.snippets[ ].x1\tthe ending x axis location on the page of the issue\tcheck feedback.report.results.HeadingsStartAtOne.score\tscore between 0 (low) and 1 (high)\tcheck feedback.report.results.LibraryReference\tDeprecated Not used. This will always be null and will be removed in a future release\tcheck feedback.report.results.LibraryReference.score\tDeprecated Not used. This will always be null and will be removed in a future release\tcheck feedback.report.suggestions\tthe portion of the report that displays improvement suggestions\tcheck feedback.report.suggestions.HeadingsSequential\tthe document's total score if all headings are made sequential\tcheck feedback.report.suggestions.Title\tthe document's total score if the title is added\tcheck feedback.report.suggestions.TableHeaders\tthe document's total score if all tables include headers\tcheck feedback.report.suggestions.HeadingsStartAtOne\tthe document's total score if all headings hierarchy starts at one\tcheck feedback.report.suggestions.AlternativeText\tthe document's total score if all images contain alternative text\tcheck feedback.report.suggestions.Contrast\tthe document's total score if all color contrast issues are corrected\tcheck feedback.report.suggestions.LibraryReference\tDeprecated Not used. This will always be null and will be removed in a future release\tcheck formats\tnot currently used, will always be null\tcheck\tcheck metadata\tdocument metadata\tcheck\tcheck metadata.name\tthe name of the processed file\tcheck\tcheck metadata.decorative\tDeprecated Not used. This will always be null and will be removed in a future release\tcheck\tcheck metadata.description\tDeprecated Not used. This will always be null and will be removed in a future release\tcheck\tcheck metadata.fileType\tthe file type of the processed file\tcheck\tcheck metadata.mimeType\tthe mime type of the processed file\tcheck\tcheck metadata.isVersioned\tDeprecated Not used. This will always be null and will be removed in a future release\tcheck\tcheck metadata.isSeizureInducing\twill the processed file cause seizures?\tcheck\tcheck metadata.libraryReference\tDeprecated Not used. This will always be null and will be removed in a future release\tcheck\tcheck For more information about the Ally accessibility tests, visit the Accessibility Checklist page on help.blackboard.com. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards","keywords":"","version":null},{"title":"Authorize and Authenticate in Ally as a Service","type":0,"sectionRef":"#","url":"/docs/ally/authorization","content":"","keywords":"","version":null},{"title":"JWT Assertion​","type":1,"pageTitle":"Authorize and Authenticate in Ally as a Service","url":"/docs/ally/authorization#jwt-assertion","content":"To get API access to the Ally service, you must create a JWT assertion. A JWT assertion is a JSON web token request for access. It includes: headerpayloadsignature The header and payload are each base64 encoded and the three parts are separated with a dot, resulting in a token in this format: encodedheader.encodedpayload.signature  and resembles the following: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJjbGllbnRJZCI6ImFsbHktY2xpZW50LWlkIiwiaWF0IjoxNjAwMTc0MTM3fQ. jh0tox209FPdI2TPMgIt6v2lQZLu9OGOnRs7KxJ6mLY  ","version":null,"tagName":"h3"},{"title":"JWT Header​","type":1,"pageTitle":"Authorize and Authenticate in Ally as a Service","url":"/docs/ally/authorization#jwt-header","content":"The header is a JSON object with that identifies the algorithm used to generate the signature and the type of token being created. In this example, the application is signing the data with HMAC-SHA 256 and requesting a JSON Web Token. { &quot;alg&quot;: &quot;HS256&quot;, &quot;typ&quot;: &quot;JWT&quot; }  To create the encodedheader part of the token, base64 encode this JSON. ","version":null,"tagName":"h3"},{"title":"JWT Payload​","type":1,"pageTitle":"Authorize and Authenticate in Ally as a Service","url":"/docs/ally/authorization#jwt-payload","content":"The payload contains information about the calling application that uniquely identifies the client to the REST server. The Ally as a Service REST APIs supports two types of payloads: A payload that identifies the caller as a service holding the secret key. This will permit all actions to be undertaken against the Ally as a Service REST APIs. Required parameters are: clientId - holds the numerical value of your provided and unique Ally client IDiat - when the token was issued (seconds since epoch) For example: { &quot;clientId&quot;: &quot;###&quot;, &quot;iat&quot;: &quot;1480457763988&quot; }  A payload that identifies a narrow set of of permissions that the holder can execute. This is useful for when you want to delegate some access to the Ally as a Service REST APIs to a third party (e.g. a user of your own service) but don't want them to be able to execute other actions (such as uploading new content). Required parameters are: clientId - holds the numerical value of your provided and unique Ally client IDiat - when the token was issued (seconds since epoch)policy - a set of statements that explicitly grant which resources and actions the token holder has access to. See Policies for more details. For example, the following policy allows the holder to request the format related information and request an alternative format: { &quot;clientId&quot;: &quot;###&quot;, &quot;iat&quot;: &quot;1480457763988&quot;, &quot;policy&quot;: { &quot;statements&quot;: [ { &quot;resource&quot;: &quot;content:a1b2c3d4e5f6&quot;, &quot;actions&quot;: [&quot;content:getDetails:WithFormats&quot;, &quot;content:getFormat&quot;] } ] } }  Base64 encode the payload and append it to the based64-encoded header, separated by a dot. ","version":null,"tagName":"h3"},{"title":"JWT Signature​","type":1,"pageTitle":"Authorize and Authenticate in Ally as a Service","url":"/docs/ally/authorization#jwt-signature","content":"The signature is basically the string created above encodedheader.encodedpayload, signed using the algorithm specified in the header and the REST API secret provided by Blackboard. The resulting string must be appended to encodedheader.encodedpayload, separated with a dot. ","version":null,"tagName":"h3"},{"title":"Using the JWT Token​","type":1,"pageTitle":"Authorize and Authenticate in Ally as a Service","url":"/docs/ally/authorization#using-the-jwt-token","content":"A properly formed Ally as a Service API call will use this signed JWT as its bearer token. To authorize a request, simply add this token as a Bearer token in your request's authorization header. The authorization header will look like the following:  Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRJZCI6ImFsbHktY2xpZW50LWlkIiwiaWF0IjoxNjAwMTc0MTM3fQ.jh0tox209FPdI2TPMgIt6v2lQZLu9OGOnRs7KxJ6mLY  ","version":null,"tagName":"h2"},{"title":"Policies​","type":1,"pageTitle":"Authorize and Authenticate in Ally as a Service","url":"/docs/ally/authorization#policies","content":"Ally as a Service supports fine-grained permissions by defining a policy that explicitly allows which resources a user has access to and what actions they're allowed to execute. A policy consists out of one or more statements expressing what resources and actions the user is allowed to interact with. These resources and actions are defined using namespaced strings. Resources​ Ally as a Service identifies the following resources: content:hashId - A single piece of content identified by the hashIdcontent:* - All content uploaded into Ally as a Service Actions​ Ally as a Service identifies the following actions: content:upload - Allows the holder to upload content to Allycontent:getStatus - Allows the holder to request the processing status for an uploaded piece of contentcontent:getDetails - Allows the holder to retrieve basic information for a piece of contentcontent:getDetails:withFeedback - Allows the holder to retrieve the feedback information for a piece of contentcontent:getDetails:withFormats - Allows the holder to retrieve the alternative formats information for a piece of contentcontent:getFormat - Allows the holder to request an alternative format for a piece of content Policy statements​ A policy statement identifies which action(s) can be invoked on which(s) resources. For example, the following statement would allow for retrieving the procesing status of an uploaded piece of content: { &quot;resource&quot;: &quot;content:a1b2c3d4e5f6&quot;, &quot;action&quot;: [&quot;content:getStatus&quot;] }  Note that a colon indicates the start of a new part in the namespace. It is possible to use a wildcard asterisk * to widen the resource or action. For example, the following statement would allow for retrieving the procesing status of all content items: { &quot;resource&quot;: &quot;content:*&quot;, &quot;actions&quot;: [&quot;content:getStatus&quot;] }  This can be done for both the resource or action string. For example, the following statement would allow for executing all content related actions on all content related resources. Note how the actions array has a second item as the wildcard only applies to one part of the namespace. { &quot;resource&quot;: &quot;content:*&quot;, &quot;actions&quot;: [&quot;content:*&quot;, &quot;content:*:*&quot;] }  ","version":null,"tagName":"h3"},{"title":"Additional Resources​","type":1,"pageTitle":"Authorize and Authenticate in Ally as a Service","url":"/docs/ally/authorization#additional-resources","content":"JSON Web Tokens are a widely adopted standard in modern applications, and thus, there are a ton of resources available for developers interested in JWT beyond the scope of Ally. JWT.io: This site is dedicated to assisting developers trying to build JWT-enabled applications. There is a debugger that allows you to manually input your secret and your header and payload and generate an assertion. There is also an extensive list of available libraries in multiple languages that handle the bulk of the JWT creation.RFC 7519: This is the actual standard specification document. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Retrieve the feedback for multiple files","type":0,"sectionRef":"#","url":"/docs/ally/getting-batched-feedback","content":"","keywords":"","version":null},{"title":"Endpoint​","type":1,"pageTitle":"Retrieve the feedback for multiple files","url":"/docs/ally/getting-batched-feedback#endpoint","content":"GET /api/v2/clients/:clientId/content/batch  ","version":null,"tagName":"h2"},{"title":"Path Parameters​","type":1,"pageTitle":"Retrieve the feedback for multiple files","url":"/docs/ally/getting-batched-feedback#path-parameters","content":"clientId - Path parameter - Your Ally Client ID Body Parameters​ The request body is a JSON encoded request of the form: { &quot;references&quot;: [ { &quot;hash&quot;: &quot;a1b2c3d...&quot; }, { &quot;hash&quot;: &quot;QWxseSs...&quot; }, { &quot;hash&quot;: &quot;e1f2123...&quot; } ] }  Query Parameters​ feedback Query parameter - Whether feedback information should be returned. Should be true, false or omitted.Requires the content:getDetails:withFeedback action to be granted in the JWT token before data is release formats Query parameter - Whether alternative format information should be returned. Should be true, false or omitted.Requires the content:getDetails:withFormats action to be granted in the JWT token before data is release ","version":null,"tagName":"h3"},{"title":"Expected response​","type":1,"pageTitle":"Retrieve the feedback for multiple files","url":"/docs/ally/getting-batched-feedback#expected-response","content":"The values in the JSON array will follow the same order as in the submitted request. If no information could be retrieved for a content reference, the null value will be returned. formats=true { &quot;reports&quot;: [ null, { &quot;hash&quot;: &quot;QWxseSs...&quot;, &quot;feedback&quot;: null, &quot;formats&quot;: { &quot;availableFormats&quot;: [&quot;Beeline&quot;, &quot;Tts&quot;, &quot;Epub&quot;, &quot;Braille&quot;, &quot;Html&quot;], &quot;canToggleAvailability&quot;: false, &quot;available&quot;: true, &quot;visibility&quot;: true }, &quot;metadata&quot;: { &quot;name&quot;: &quot;Ally+-+One+Pager+-+Higher+Ed+-+General.pdf&quot;, &quot;decorative&quot;: null, &quot;description&quot;: null, &quot;fileType&quot;: &quot;pdf&quot;, &quot;mimeType&quot;: &quot;application/pdf&quot;, &quot;isVersioned&quot;: false, &quot;isSeizureInducing&quot;: false, &quot;libraryReference&quot;: null } }, null ] }  ","version":null,"tagName":"h2"},{"title":"Testing with cURL​","type":1,"pageTitle":"Retrieve the feedback for multiple files","url":"/docs/ally/getting-batched-feedback#testing-with-curl","content":"curl \\ -H &quot;Authorization: Bearer myJwtToken&quot; \\ -H &quot;Content-Type: application/json&quot; \\ -d '{&quot;references&quot;: [{&quot;hash&quot;: &quot;a1b2c3d...&quot;},{&quot;hash&quot;: &quot;QWxseSs...&quot;},{&quot;hash&quot;: &quot;e1f2123...&quot;}]}' \\ https://prod.ally.ac/api/v2/clients/:clientId/content/bash  Contributors on this article: Simon Gaeremynck Software EngineerProduct Development Blackboard Learn ","version":null,"tagName":"h3"},{"title":"Getting Started Developing for Ally as a Service","type":0,"sectionRef":"#","url":"/docs/ally/getting-started","content":"","keywords":"","version":null},{"title":"Tutorials and Examples​","type":1,"pageTitle":"Getting Started Developing for Ally as a Service","url":"/docs/ally/getting-started#tutorials-and-examples","content":"As we create tutorials and sample code, we will list them here. Ally as a Service API documentation - Includes sample cURL CommandsPostman CollectionPython Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"B2 API Documentation","type":0,"sectionRef":"#","url":"/docs/archive/b2/getting-started/archive-b2-gs-api_docs","content":"","keywords":"","version":null},{"title":"API Documentation​","type":1,"pageTitle":"B2 API Documentation","url":"/docs/archive/b2/getting-started/archive-b2-gs-api_docs#api-documentation","content":"Blackboard provides the Building Blocks API and Web Services Specifications for Learn 9.1 in an HTML package in Javadoc format. Blackboard also provides a &quot;diff file&quot; to detail the changes to the Building Blocks API and Web Services Specifications since the previous release of Blackboard Learn. This navigable list of added, removed, and changed public APIs is an HTML package in Javadoc format. ","version":null,"tagName":"h2"},{"title":"Tag Libraries​","type":1,"pageTitle":"B2 API Documentation","url":"/docs/archive/b2/getting-started/archive-b2-gs-api_docs#tag-libraries","content":"The familiar look and feel of the Learn user interface is provided to developers through the Blackboard Tag Library. These are the same tag libraries used in the Learn application and are available for your use. Java Server Pages constructed using elements from the tag library render the user interface in a manner familiar for users of the Learn application. Using the tag libraries in your Building Block creates a 'seamless' ui experience for your Building Block users. ","version":null,"tagName":"h2"},{"title":"OpenDB​","type":1,"pageTitle":"B2 API Documentation","url":"/docs/archive/b2/getting-started/archive-b2-gs-api_docs#opendb","content":"The Open Database Schema provides information about the Blackboard Learn database structure, including layout and table inter-dependencies. This information is intended for intermediate to expert database administrators, as an aid to troubleshooting, capacity planning and analytics. The schemas include a description of the data characteristics of the tables and columns in the Blackboard Learn database, which includes datatypes and sizes, nullability, index, sequence, key and constraint information. Additional commentary is also provided for key tables and columns. The Open Database Schema does not include a complete description of every database object inBlackboard Learn. The following information is not included: Detailed commentary for some tables and columns.No table or column information for the Xythos engine file storage schema.No information about stored procedures, views, triggers, or database jobs. Note: These documents are available in English only. 9.1 Release\tAPI Documentation\tTag Libraries\tOpenDBQ2 2019\tView API\tView Taglibs\tView Schema Q4 2018\tView API\tView Taglibs\tView Schema Q2 2018\tView API\tView Taglibs\tView Schema Q4 2017\tView API\tView Taglibs\tView Schema Q2 2017\tView API\tView Taglibs\tView Schema Q4 2016\tView API\tView Taglibs\tView Schema Q2 2016\tView API\tView Taglibs\tView Schema Q4 2015\tView API\tView Taglibs\tView Schema Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h2"},{"title":"B2s and Java Permissions","type":0,"sectionRef":"#","url":"/docs/archive/b2/getting-started/archive-b2-gs-api_overview","content":"","keywords":"","version":null},{"title":"Functional Overview​","type":1,"pageTitle":"B2s and Java Permissions","url":"/docs/archive/b2/getting-started/archive-b2-gs-api_overview#functional-overview","content":"Announcement​ Announcements are representations of an announcement within the Blackboard application. These can be either system-wide or course-specific in nature. Blackboard provides the ability to create, update, and remove announcements. Authentication​ The authentication API allows developers to implement a customized authentication scheme other than those that ship with the product. An example would be creating a way to authenticate against a custom central authentication database or other non-LDAP-based authentication service. Calendar​ Calendar entries represent a calendar entry within the Blackboard application. These can be system-wide, course-specific, or user-specific in nature. Blackboard provides the ability to create, update, and remove calendar entries. Content​ Content refers to files that exist in the various content areas within a given course site such as presentations or documents. The APIs give you the ability to add and remove content, create links to content, create sequentially- ordered lessons, and access data related to user interaction with a given piece of content. Content System (When licensed)​ The Blackboard Content System allows users to upload and share content within the context of a content management system. The Content System APIs allow content to be created, bookmarked, tagged with metadata, incorporated into a portfolio, and acted on as part of a workflow. Context​ The Context allows a developer to access information regarding a given user or course based on that user's current interactions with the Learning System. Courses​ Courses can be created, updated, deleted, and copied in the same ways that are possible with the Snapshot enterprise data integration tool. Course Categories​ Course categories allow courses to be categorized according to a given taxonomy. Blackboard provides ways to create, update, and remove course categories. Discussion Board​ Discussion board conferences, forums, threads, and posts can be accessed. You can also determine the status of a given posting and generate statistics on discussion board usage. Enrollments​ Course enrollments can be created, updated, and removed in the same ways that are possible with the Snapshot enterprise data integration tool. File System​ Various directories can be accessed directly giving access to logs, course content, temp directories, and other areas. Gradebook​ Individual gradebook items and scores can be created, updated, and removed. Logging​ Allows access to the core Blackboard logging system including the ability to define new logs. Navigation / Course Table of Contents​ Allows the loading of the course table of contents. Plugins​ Utility class for interacting with Building Blocks on a Blackboard server giving access to information such as which Building Blocks are installed, versions of which Blackboard products are installed, and other Building Block configuration information. Portal data​ Allows user-specific module data to be created and updated. Roles​ Allows individual users to be associated with various institution/portal roles in the same ways that are possible with the Snapshot enterprise data integration tool. System configuration​ Allows access to server configuration data such as application server name, authentication type enabled, installation directory, database name, and SMTP configuration. Users​ Allows creation, update, and removal of users in the same ways that are possible with the Snapshot enterprise data integration tool. Utility classes​ Various classes to support functions such as byte-&gt;kilobyte conversion and localized number representation. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h2"},{"title":"Integrate Ally as a Service into your own user interface","type":0,"sectionRef":"#","url":"/docs/ally/ui-integration","content":"","keywords":"","version":null},{"title":"Set-up​","type":1,"pageTitle":"Integrate Ally as a Service into your own user interface","url":"/docs/ally/ui-integration#set-up","content":"The latest UI API is readily available from your regionial Ally deployment: &lt;script src=&quot;https://prod-eu-central-1.ally.ac/integration/api/ally.ui.js&quot;&gt;&lt;/script&gt;  ","version":null,"tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Integrate Ally as a Service into your own user interface","url":"/docs/ally/ui-integration#configuration","content":"Before any interaction logic can be applied, the UI API needs to be initialized. // Wait until the Ally UI API has bootstrapped itself, this is usually a matter of milliseconds after loading ally.ready(function () { // Configure the Ally UI API and store it on the `ui` instance variable on the window. window.ui = ally.ui({ client: { // An authentication function that returns a suitable JWT token. // The function will be invoked each time the UI API needs to make an authenticated call to the Ally API. // When Ally needs to interact with a piece of content, the content hash id will be passed in. You can use // this to provide a token that is scoped to just that resource ID and/or apply your own rate limit. // When API calls are made that aren't specific to a content hash (e.g. determining custom help content), // no argument will be provided and a generic token can be returned. auth: (hashId) =&gt; Promise.resolve({ bearer: &quot;eyJhbGciO...&quot; }), // The base URL of your regional Ally API baseUrl: &quot;https://prod-eu-central-1.ally.ac&quot;, // Your numerical Ally client identifier clientId: 42, }, // The locale controls the internationalization and localization of the dialog locale: &quot;en-US&quot;, // The Ally UI API currently requires this to be set to AaaS platformName: &quot;AaaS&quot;, }); });  Once the UI object has been created, you can then use it to bind click handlers into your own DOM. You should run this function once the elements that you want to trigger Ally functionality are available in the DOM. // Optional element to scan, defaults to the `body` element. const el = document.getElementById(&quot;links&quot;); // Check all the elements under #links and bind the necessary event listeners. window.ui.update(el);  There is also an option to let the Ally UI API monitor the DOM and invoke the update method every x milliseconds. This is intended for when you have a dynamic web application where the DOM is actively changed as the user interacts with the page. e.g. single page applications, pop-out menus, etc.. // Scan the entire DOM window.ui.autoUpdate({ // Represents the millisecond interval at which to automatically update the DOM. If a number `&gt; 0` is specified, // the DOM will be checked at this frequency. Otherwise, the DOM will be checked only once. // Optional. domWatch: 500, // The element whose subtree to scan for relevant data attributes. // Optional, defaults to the `body` element el: document.getElementById(&quot;links&quot;), });  ","version":null,"tagName":"h3"},{"title":"Data attributes​","type":1,"pageTitle":"Integrate Ally as a Service into your own user interface","url":"/docs/ally/ui-integration#data-attributes","content":"The Ally UI API works by placing HTML data-* attributes in the DOM. The following generic attributes can be considered: data-ally-content-id - A unique identifier within the DOM tree for a content item. This can be referred to by other elements through data-ally-content-ref. This referral mechanism allows you to define the Ally content hash for a resource once and then refer to it from multiple places. Each element that has a content-id attribute, should also have a data-ally-aaas-content-hash attribute. &lt;a data-ally-content-id=&quot;123&quot; data-ally-aaas-content-hash=&quot;MIja...&quot; href=&quot;/download?id=987&quot;&gt; Download the original file &lt;/a&gt; data-ally-aaas-content-hash - The content hash that is returned by the Ally as a Service REST API.data-ally-content-ref - Can be used to refer back to the element that holds the data-ally-aaas-content-hash value.data-ally-download-url - The URL where a file can be downloaded from. This will be used to generate on-the-fly formats or feedback.data-ally-show - Whether or not the Ally UI API should show this element based on the value. &lt;a data-ally-content-ref=&quot;123&quot; data-ally-show=&quot;alternativeformats&quot;&gt; This link is only visible when there are alternative formats available for this content item &lt;/a&gt; data-ally-show-display - The value of this attribute defines what display style should be used when showing an element. &lt;a data-ally-content-ref=&quot;123&quot; data-ally-show=&quot;alternativeformats&quot; data-ally-show-display=&quot;inline&quot;&gt; This link is only visible when there are alternative formats available for this content item &lt;/a&gt; data-ally-tooltip - Displays the contents of the title attribute in a tooltip when the element is hovered over.data-ally-invoke - Binds a click handler to the element and invokes the specified functionality when clicked. ","version":null,"tagName":"h3"},{"title":"Alternative formats​","type":1,"pageTitle":"Integrate Ally as a Service into your own user interface","url":"/docs/ally/ui-integration#alternative-formats","content":"When you want to offer alternative formats to your users, it's recommended to rely on Ally's UI API as it is able to communicate all the intermediate states before a format can be downloaded. The Alternative Formats modal can be launched from any web application and does not come with any Blackboard Branding.  ","version":null,"tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Integrate Ally as a Service into your own user interface","url":"/docs/ally/ui-integration#example","content":"The following example contains two links. The first link is a download link your application might already make available to your users. This element should be annotated with the relevant Ally information (aaas-content-hash and download-url) and a content-id so that it can be referred to by the second link which will trigger the alternative formats modal. &lt;a href=&quot;/download/12312123&quot; data-ally-content-id=&quot;myAllyContentId1&quot; data-ally-aaas-content-hash=&quot;QWxseSstK09uZStQYWdlcistK0hpZ2hlcitFZCstK0dlbmVyYWwucGRmOjM0QURFNDE2NzNDRUJBNUIyRjc2MDI3N0IxOEYwNTdERDY1MDczQzg6YXBwbGljYXRpb24vcGRm&quot; data-ally-download-url=&quot;https://ally-public.s3-us-west-2.amazonaws.com/demo/High+Quality+Alternative+Formats/Ally+-+One+Pager+-+Higher+Ed+-+General.pdf&quot;&gt; Original file &lt;/a&gt; &lt;a href=&quot;#&quot; title=&quot;Alternative formats&quot; data-ally-content-ref=&quot;myAllyContentId1&quot; data-ally-invoke=&quot;alternativeformats&quot; data-ally-show=&quot;alternativeformats&quot; data-ally-show-display=&quot;inline&quot; data-ally-tooltip&gt; &lt;img src=&quot;/assets/img/ally-logo.svg&quot; alt=&quot;Alternative Formats&quot; width=&quot;25&quot; height=&quot;20&quot; /&gt; &lt;/a&gt;  Contributors on this article: Simon Gaeremynck Software EngineerProduct Development Blackboard Learn ","version":null,"tagName":"h3"},{"title":"Upload a file to Ally","type":0,"sectionRef":"#","url":"/docs/ally/uploading-files","content":"","keywords":"","version":null},{"title":"Supported content types​","type":1,"pageTitle":"Upload a file to Ally","url":"/docs/ally/uploading-files#supported-content-types","content":"PDF filesMicrosoft® Word filesMicrosoft® PowerPoint® filesOpenOffice/LibreOffice filesUploaded HTML filesImage files (JPG, JPEG, GIF, PNG, BPM, TIFF)  ","version":null,"tagName":"h2"},{"title":"Endpoint​","type":1,"pageTitle":"Upload a file to Ally","url":"/docs/ally/uploading-files#endpoint","content":"POST /api/v2/clients/:clientId/content  ","version":null,"tagName":"h3"},{"title":"Path Parameters​","type":1,"pageTitle":"Upload a file to Ally","url":"/docs/ally/uploading-files#path-parameters","content":"clientId - Path parameter - Your Ally Client ID ","version":null,"tagName":"h3"},{"title":"Body Parameters​","type":1,"pageTitle":"Upload a file to Ally","url":"/docs/ally/uploading-files#body-parameters","content":"file - Post parameter - The binary file data ","version":null,"tagName":"h3"},{"title":"Query Parameters​","type":1,"pageTitle":"Upload a file to Ally","url":"/docs/ally/uploading-files#query-parameters","content":"None ","version":null,"tagName":"h3"},{"title":"Expected response​","type":1,"pageTitle":"Upload a file to Ally","url":"/docs/ally/uploading-files#expected-response","content":"There are two potential outcomes: The file is new and will be processed asynchronously. The endpoint will return with a 202 Accepted response and the following response body: { &quot;hash&quot;: &quot;UkVBRE1FLm1k...&quot;, &quot;status&quot;: &quot;pending&quot;, &quot;statusUrl&quot;: &quot;/api/v2/clients/:clientId/content/UkVBRE1FLm1k.../status, &quot;resourceUrl&quot;: null } Parameter\tDefinitionhash\tthe content hash used to reference the file by Ally as a Service status\tthe stage of processing the file is in* statusUrl\tthe endpoint to call to check the status resourceUrl\tthe endpoint to retrieve the report or metadata *The following status values can be identified: successpendinginprogressfailed The file has been processed before. The endpoint will return a 303 See Other with a Location header to the feedback URL ","version":null,"tagName":"h2"},{"title":"Testing with cURL​","type":1,"pageTitle":"Upload a file to Ally","url":"/docs/ally/uploading-files#testing-with-curl","content":"curl \\ -H &quot;Authorization: Bearer myJwtToken&quot; \\ -F&quot;file=@test.pdf&quot; https://prod.ally.ac/api/v2/clients/:clientId/content  ","version":null,"tagName":"h3"},{"title":"Frequently Asked Questions​","type":1,"pageTitle":"Upload a file to Ally","url":"/docs/ally/uploading-files#frequently-asked-questions","content":"This section contains answers to many of the common questions we field as developers are on-boarding to the Ally as a Service API. ","version":null,"tagName":"h2"},{"title":"Upload - input​","type":1,"pageTitle":"Upload a file to Ally","url":"/docs/ally/uploading-files#upload---input","content":"Q: I have questions about the version support for each of these. For instance, which versions of Office are supported? Office 365, Office 2016, LibreOffice 5.2, LibreOffice 5.4 Q: What image file formats are supported? Most image types whose mimetype starts with image/ Q: Are there constraints on images: sizes, resolution? No Q: Are there any restrictions on HTML files? What about external references in the HTML files? External references will be resolved and included for the HTML accessibility check, but the files themselves will not be checked. Q: Is there support for HTML archive formats? No Q: Is there any support for archive format: zip, tar? No ","version":null,"tagName":"h3"},{"title":"Upload - mechanics​","type":1,"pageTitle":"Upload a file to Ally","url":"/docs/ally/uploading-files#upload---mechanics","content":"Q: We’re posting into an end-point protected with TLS 1.2 or higher, right? Yes. We use standard AWS security practices (ELBSecurityPolicy-TLS-1-2-2017-01) Q: Related to the archive question, are we posting the raw file, or is it organized in a multipart/form-data? Raw Files are uploaded through a multipart upload. One file at a time. Q: What’s the maximum file size? There is a 50MB file size limit. We're gathering feedback on how large this limit should be to support our customers. Q: Does the endpoint require a particular encoding? UTF-8 is recommended Q: Does the POST have to have an accurate Content-Length: header? Yes Q: Do the authentication tokens expire? No Q: If we had N writers submitting to this API, would each have to have a separate authentication token? No Q: Can we submit compressed files? No If so, what compression does Ally support? None Q: For the 303/See Other response, if we mistakenly permitted two writers to submit the same file in some brief period, would that automatically be caught? How long is that window? Yes ","version":null,"tagName":"h3"},{"title":"Upload - output​","type":1,"pageTitle":"Upload a file to Ally","url":"/docs/ally/uploading-files#upload---output","content":"Q: I’m especially surprised to see the (x0,y0,x1,y) notation for errors. Can you tell me more about that? These are coordinates for areas in the document that contain some accessibility issue. They are coordinates that correspond to our PDF preview version. Q: The output meta data contains “isVersioned”. Is there a standard way to present versions of documents when we post them? No, see next answer. Q: The meta data contains a “name”, “description” and other parameters. But these are not reflections of arguments in the initial POST. Is this just an indication that there’s a richer set of arguments for the submission phase? These parameters are artifacts from our LMS API. They will be removed shortly as they carry no function in a standalone function. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Retrieve the feedback for a file","type":0,"sectionRef":"#","url":"/docs/ally/getting-feedback","content":"","keywords":"","version":null},{"title":"Endpoint​","type":1,"pageTitle":"Retrieve the feedback for a file","url":"/docs/ally/getting-feedback#endpoint","content":"GET /api/v2/clients/:clientId/content/:contentHash  ","version":null,"tagName":"h2"},{"title":"Path Parameters​","type":1,"pageTitle":"Retrieve the feedback for a file","url":"/docs/ally/getting-feedback#path-parameters","content":"clientId - Path parameter - Your Ally Client IDcontentHash - Path parameter - The content hash from the previous endpoint Body Parameters​ None Query Parameters​ feedback Query parameter - Whether feedback information should be returned. Should be true, false or omitted.Requires the content:getDetails:withFeedback action to be granted in the JWT token before data is release formats Query parameter - Whether alternative format information should be returned. Should be true, false or omitted.Requires the content:getDetails:withFormats action to be granted in the JWT token before data is release ","version":null,"tagName":"h3"},{"title":"Expected response​","type":1,"pageTitle":"Retrieve the feedback for a file","url":"/docs/ally/getting-feedback#expected-response","content":"For more information on the contents of this JSON, visit the feedback definitions page. feedback=true  { &quot;hash&quot;: &quot;Mi4gSGVhZGluZ3NfdGFnZ2VkX2luY29ycmVjdGx5LnBkZjo4NkE3NEJGOTUxRDA2NEM4Qzk1ODUyMDI0NEQ0REJBNkM4RDdGRjJCOmFwcGxpY2F0aW9uL3BkZg==&quot;, &quot;feedback&quot;: { &quot;score&quot;: 0.4292113158749556, &quot;visibility&quot;: &quot;medium&quot;, &quot;report&quot;: { &quot;results&quot;: { &quot;Scanned&quot;: { &quot;score&quot;: 1 }, &quot;Tagged&quot;: { &quot;score&quot;: 1 }, &quot;AlternativeText&quot;: { &quot;snippets&quot;: [ { &quot;page&quot;: 3, &quot;y0&quot;: 397.45, &quot;x0&quot;: 72, &quot;y1&quot;: 720, &quot;x1&quot;: 526 }, { &quot;page&quot;: 4, &quot;y0&quot;: 394.81, &quot;x0&quot;: 72, &quot;y1&quot;: 720, &quot;x1&quot;: 476.8 }, .... ], &quot;score&quot;: 0 }, &quot;Contrast&quot;: { &quot;snippets&quot;: [ { &quot;page&quot;: 0, &quot;y0&quot;: 588.6369, &quot;x0&quot;: 63.583138, &quot;y1&quot;: 612.7333, &quot;x1&quot;: 385.0053 }, { &quot;page&quot;: 1, &quot;y0&quot;: 688.4769, &quot;x0&quot;: 63.583138, &quot;y1&quot;: 712.5733, &quot;x1&quot;: 473.90308 }, ... ], &quot;score&quot;: 0.9442992157651318 }, &quot;HeadingsSequential&quot;: { &quot;snippets&quot;: [ { &quot;page&quot;: 2, &quot;y0&quot;: 583.18, &quot;x0&quot;: 72.024, &quot;y1&quot;: 620.98, &quot;x1&quot;: 233.324 } ], &quot;score&quot;: 0.9230769230769231 }, &quot;HeadingsHigherLevel&quot;: { &quot;snippets&quot;: [], &quot;score&quot;: 1 }, &quot;Title&quot;: { &quot;score&quot;: 0 }, &quot;TableHeaders&quot;: { &quot;snippets&quot;: [ { &quot;page&quot;: 1, &quot;y0&quot;: 344.09, &quot;x0&quot;: 77.664, &quot;y1&quot;: 645.45996, &quot;x1&quot;: 517.17 } ], &quot;score&quot;: 0 }, &quot;LanguagePresence&quot;: { &quot;score&quot;: 1 }, &quot;HeadingsPresence&quot;: { &quot;score&quot;: 1 }, &quot;LanguageCorrect&quot;: { &quot;detectedLanguage&quot;: &quot;en&quot;, &quot;score&quot;: 1 }, &quot;HeadingsStartAtOne&quot;: { &quot;snippets&quot;: [ { &quot;page&quot;: 0, &quot;y0&quot;: 586.06, &quot;x0&quot;: 72.024, &quot;y1&quot;: 620.26, &quot;x1&quot;: 376.75403 } ], &quot;score&quot;: 0 }, &quot;LibraryReference&quot;: { &quot;score&quot;: 0 } }, &quot;suggestions&quot;: { &quot;HeadingsSequential&quot;: 0.4306552764930626, &quot;Title&quot;: 0.4471530009744932, &quot;TableHeaders&quot;: 0.47092573373138025, &quot;HeadingsStartAtOne&quot;: 0.44798280391034667, &quot;AlternativeText&quot;: 0.6169261962288668, &quot;Contrast&quot;: 0.4515796153846155, &quot;LibraryReference&quot;: 1 } } }, &quot;formats&quot;: null, &quot;metadata&quot;: { &quot;name&quot;: &quot;2. Headings_tagged_incorrectly.pdf&quot;, &quot;decorative&quot;: null, &quot;description&quot;: null, &quot;fileType&quot;: &quot;pdf&quot;, &quot;mimeType&quot;: &quot;application/pdf&quot;, &quot;isVersioned&quot;: false, &quot;isSeizureInducing&quot;: false, &quot;libraryReference&quot;: null } }  feedback=false or omitted { &quot;hash&quot;: &quot;RGV2ZWxvcGVyIFJlbGF0aW9ucyBhbmQgU3RhbmRhcmRzIFRlYW0gRGVzaWduLnBwdHg6Qz&quot;, &quot;feedback&quot;: null, &quot;formats&quot;: null, &quot;metadata&quot;: { &quot;name&quot;: &quot;Developer Relations and Standards Team Design.pptx&quot;, &quot;decorative&quot;: null, &quot;description&quot;: null, &quot;fileType&quot;: &quot;presentation&quot;, &quot;mimeType&quot;: &quot;application/vnd.openxmlformats-officedocument.presentationml.presentation&quot;, &quot;isVersioned&quot;: false, &quot;isSeizureInducing&quot;: false, &quot;libraryReference&quot;: null } }  ","version":null,"tagName":"h2"},{"title":"Testing with cURL​","type":1,"pageTitle":"Retrieve the feedback for a file","url":"/docs/ally/getting-feedback#testing-with-curl","content":"curl \\ -H &quot;Authorization: Bearer myJwtToken&quot; \\ https://prod.ally.ac/api/v2/clients/:clientId/content/:contentHash  Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"B2-FAQs","type":0,"sectionRef":"#","url":"/docs/archive/b2/getting-started/archive-b2-gs-faqs","content":"","keywords":"","version":null},{"title":"Account questions​","type":1,"pageTitle":"B2-FAQs","url":"/docs/archive/b2/getting-started/archive-b2-gs-faqs#account-questions","content":"Your Behind the Blackboard account will provide you with authenticated access to Developer Resources. Any Behind the Blackboard account is able to post to our discussion forums. If you would like to identify as a Blackboard developer, please e-mail your Blackboard Client Manager and request developer access for your Behind the Blackboard account. Anyone who had an existing account as a Blackboard Developer or Blackboard Partner has full access to this site. Accounts from legacy developer network sites have been migrated. New developer account requests should be directed to your Blackboard Client Manager. Accounts will be provided to existing Blackboard clients and to partners enrolled in our Blackboard Developers Network program according to our contractual terms. If you do not know who your Client Manager is, please contact your institution's Blackboard System Administrator or primary business relationship owner. He or she will know who to contact. To reset forgotten passwords, please visit Behind the Blackboard and click the &quot;Forgot your password?&quot; link. A new password will be e-mailed to your account. ","version":null,"tagName":"h2"},{"title":"License Questions​","type":1,"pageTitle":"B2-FAQs","url":"/docs/archive/b2/getting-started/archive-b2-gs-faqs#license-questions","content":"Academic clients should contact their Client Manager for a developer license or questions about developer licensing. Generally, academic clients who license our enterprise software are eligible for one license to our developer software and 25 developer accounts. These accounts allow you to participate in and contribute to the content on the wiki and forum areas of this site as well as access certain developer content that requires a login to access. Commercial entities are invited to join the program and purchase developer licenses at this link{: target='_blank'}. If you have lost your license file or require a change in your license, please contact your sales representative or the partnership program. IMPORTANT: The developer license of our software limits the number of users, courses, and enrollments that can exist, but otherwise is a fully functional version of the product. ","version":null,"tagName":"h2"},{"title":"Installation assistance​","type":1,"pageTitle":"B2-FAQs","url":"/docs/archive/b2/getting-started/archive-b2-gs-faqs#installation-assistance","content":"Commercial BbDN members are entitled to 30 days of technical support to assist with the installation of the Learning System product. For assistance, please call our Client Support Team at (888) 788-5264. Have your six-digit company ID ready when you call. All others should read up on the available DVBAor request help on the Developer forums{: target='_blank'} ","version":null,"tagName":"h2"},{"title":"API/known issues​","type":1,"pageTitle":"B2-FAQs","url":"/docs/archive/b2/getting-started/archive-b2-gs-faqs#apiknown-issues","content":"If you believe you've found an issue with our APIs, please follow this process to receive support: Post your issue to our discussion forums on the community site{: target='_blank'}Search the Blackboard Techies Slack Space{: target='_blank'} archives and optionally e-mail the listserv regarding your issue.Open a new case to Behind the Blackboard (or have your Blackboard administrator do this on your behalf) ","version":null,"tagName":"h2"},{"title":"Product improvements/recommendations​","type":1,"pageTitle":"B2-FAQs","url":"/docs/archive/b2/getting-started/archive-b2-gs-faqs#product-improvementsrecommendations","content":"If you have an idea to improve or add features to our API set, please follow this process: Work with your Blackboard System Administrator to create and document an Enhancement Request through Behind the Blackboard.If you do not have a Behind the Blackboard account or the above is not a viable option, post a new feature request to our The specified item was not found.. ","version":null,"tagName":"h2"},{"title":"Building Block issues​","type":1,"pageTitle":"B2-FAQs","url":"/docs/archive/b2/getting-started/archive-b2-gs-faqs#building-block-issues","content":"Please follow these steps to receive help with a 3rd party Building Block issue: Submit a help ticket with the vendorIf the vendor instructs you to submit a help ticket with Blackboard, please work with your Blackboard Administrator to do so on Behind the BlackboardOur Support team will attempt to collaborate with the vendor to resolve the issueIssues that cannot be resolved are escalated as appropriate via our support process Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h2"},{"title":"First Steps with learn B2s","type":0,"sectionRef":"#","url":"/docs/archive/b2/getting-started/archive-b2-gs-first_steps","content":"","keywords":"","version":null},{"title":"Development Workstation​","type":1,"pageTitle":"First Steps with learn B2s","url":"/docs/archive/b2/getting-started/archive-b2-gs-first_steps#development-workstation","content":"Your development workstation will host the software and libraries necessary for writing and building java web applications. This may be any software of your choice that is up to the task though most development is done using one of the more prominent Integrated Development Environments - Eclipse, Netbeans, or IntelliJ. This tutorial will focus on using Eclipse (with some notes re the use of Netbeans). Development Server​ Your development server will host an instance of Blackboard Learn, Developer Edition - a version of the Blackboard learning platform that we make available for development purposes that has the Content System, Community System, and Learning System all enabled to support up to 150 test users, 100 test courses, and 1000 test enrollment records. In many cases, developers choose to run Blackboard Learn, Developer Edition on their development workstation rather than on separate server hardware. Others choose to share a dedicated development server among multiple developers, each connecting to it from their individual development workstations. Still others have created their own virtual machine images that allow unwanted changes to be &quot;thrown away&quot; and easily restore to a vanilla installation of their development server. Supporting Libraries​ Blackboard ships Learn with various proprietary or open-source .jar files as resources. Blackboard includes or excludes these resources depending only on the needs of Blackboard Learn. We do not know which ones independent developers might want to use. When you build a Building Block, do not rely on the presence of any particular resource in the Blackboard Learn installation. Instead, include a copy of any necessary resources locally with your development project. Available Tutorials​ The following tutorials are available to help you get started with Building Block development: Building Block Development Life CycleEnabling DebuggingFirst Project: Gradle, Git, and basic-b2-template Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Introduction to Building Blocks","type":0,"sectionRef":"#","url":"/docs/archive/b2/getting-started/archive-b2-gs-intro","content":"","keywords":"","version":null},{"title":"Data that can be accessed includes:​","type":1,"pageTitle":"Introduction to Building Blocks","url":"/docs/archive/b2/getting-started/archive-b2-gs-intro#data-that-can-be-accessed-includes","content":"Authentication and authorization information - to ensure seamless authentication and authorization between Blackboard software and other systemsUser data - name, course of study, contact informationCourse data and Enrollment recordsOutcomes - student quiz and test data, scores, grades, participation and activity dataContent - the ability to seamlessly integrate rich content from a variety of sourcesSystem management - information to help administrators manage and monitor your Blackboard software installations ","version":null,"tagName":"h2"},{"title":"Learn More​","type":1,"pageTitle":"Introduction to Building Blocks","url":"/docs/archive/b2/getting-started/archive-b2-gs-intro#learn-more","content":"To learn more about creating Building Blocks, starthere. To see examples of Building Blocks that have already been created, take a look at released building blocks on the Blackboard Learn extensions site which highlights Building Blocks produced by Blackboard Partners, or take a look at open source projects contributed by the Learn developer community at OSCELOT'sprojects site. ","version":null,"tagName":"h3"},{"title":"Request a Developers License​","type":1,"pageTitle":"Introduction to Building Blocks","url":"/docs/archive/b2/getting-started/archive-b2-gs-intro#request-a-developers-license","content":"All Blackboard Learn clients receive a Blackboard developers license at no cost. A developers license is a &quot;small footprint&quot; version of Blackboard with the Community and Content Management modules turned on. It can be run on a development server or even a virtual machine image for development purposes. If you require a developer network account visit Behind the Blackboard (as an administrator) or contact your sales representative. ","version":null,"tagName":"h3"},{"title":"Commercial Partnerships​","type":1,"pageTitle":"Introduction to Building Blocks","url":"/docs/archive/b2/getting-started/archive-b2-gs-intro#commercial-partnerships","content":"If you are interested in becoming a Blackboard partner visit the Blackboard Partnerships™ program site. Partnering with Blackboard provides access to design guidance and support among other benefits. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Development Life Cycle","type":0,"sectionRef":"#","url":"/docs/archive/b2/getting-started/archive-b2-gs-dev_life_cycle","content":"","keywords":"","version":null},{"title":"Before Writing Code​","type":1,"pageTitle":"Development Life Cycle","url":"/docs/archive/b2/getting-started/archive-b2-gs-dev_life_cycle#before-writing-code","content":"Define the business need and the stakeholders in the project​ Your project will likely begin with some sort of need. Perhaps your users want additional functionality for the user interface. Perhaps your student information system team wants to automate your data integration so that it can be real-time. Perhaps you are a system administrator who wants to automate a manual process. Perhaps you are a school administrator who wants greater insight into how your Blackboard installation is being used. All of these boil down into defining the business need for this project. Building Blocks enable you to integrate and extend Blackboard beyond its core functionality. This provides an easy way to add value to what is already a significant technology investment. When defining the business need for your project, you will want to determine who the stakeholders are in your project. These are the folks who will fund, champion, develop, deliver, implement, use, maintain, and support your new tool. You will want to make sure that these folks are at least aware of your project, involve them in the initial project discussions, and likely keep them engaged throughout the duration of your project. Assemble your team​ Once you determine who is involved and what you want to accomplish, you can begin to assemble the core team of folks who will develop your Building Block. This team will likely include a functional lead and a technical lead. The functional lead will contribute to those discussions relating to usability, user-friendliness, and where to link to your tool in the user interface. The technical lead will likely be a developer but may also be the Blackboard System Administrator doing development work on the side. However, it is increasingly common for schools have their own dedicated academic developer. It is also possible that the person doing your Blackboard development also develops tools for your school's other backend systems including your student information system. Some schools even get their students involved with Building Block development through internships, student work programs, and class projects. Scope user functionality​ The next step is to clearly define what you want to accomplish with your integration. You may have heard the term &quot;use case&quot; used in discussion. This is what we refer to here. You will want to scope out what will (and what will not) be part of your first version. It is helpful to get users involved and listen to how they would best like to accomplish the tasks at hand. To successfully scope functionality, you will want to be familiar with the areas in which you can use Building Blocks to integrate with our products and the functionality of our API set. There are helpful tutorials on these topics in the Getting Started area of this site. Set deadlines and determine how to define success You will also want to determine how you are going to define the success of your project. Some things to consider are successful development of the tool (a feat in and of itself), adoption rates of the tool, reduction in time or steps involved in completing a process, enhancements to student-centered learning, availability of new tools for faculty, tighter integration with other school systems, increased reporting capabilities, and others. You will also want to consider setting a deadline for implementing your project. Many projects fail simply because they are not completed. There are many challenges to completing a project, but EduGarage provides tutorials, tips, and an active discussion forum area to support you through your project. ","version":null,"tagName":"h2"},{"title":"Before Development​","type":1,"pageTitle":"Development Life Cycle","url":"/docs/archive/b2/getting-started/archive-b2-gs-dev_life_cycle#before-development","content":"Get your developer license​ When you are ready to begin your Building Block project, you need to find the member of your organization who has the license to install a developer copy of the Blackboard product. This is a fully-capable edition of our product that is limited in the number of users, courses, and enrollments it can support. The person most likely to have this license is your Blackboard administrator. If you don't have this license and are an enterprise academic client, you can likely request one from your Client Manager at no cost. If you are a commercial partner, click the Business Resources link to the left for instructions on how to obtain a developer license. Set up your development server​ The next step is to set up a development server that matches your production server's version (7.3.216.0, 8.0.184.3, etc) and platform (Windows, Linux, Solaris). You can find instructions on how to set up your environment in the Tutorials section of this side and the installers to install Blackboard in the Download section. Set up your development workstation​ Now you will need to choose which development environment you'll use to actually do your development. Popular choices include Eclipse, MyEclipse, NetBeans, and JBoss Developer Studio. Some of these are free; others come at a price. The most popular by far are Eclipse and NetBeans. Use whichever is easiest for you. They all accomplish the same tasks in different ways. Determine how to manage code​ You will also want to determine how you are going to store and manage your code. If you are a single developer working on a small project, it might make sense to just store your code locally (remember to back it up). If you are working on a larger project or with multiple team members, it makes sense to use a code versioning tool such as CVS or Subversion. These tools are also immensely useful when keeping track of changes to your code over time. ","version":null,"tagName":"h2"},{"title":"Starting Development​","type":1,"pageTitle":"Development Life Cycle","url":"/docs/archive/b2/getting-started/archive-b2-gs-dev_life_cycle#starting-development","content":"Start and configure your project in the IDE​ To start development, you will need to open your IDE and start your project. This process will be different with each IDE, but many include a wizard to get you started. The project that is closest in relation to a Building Block is the dynamic web application. Using the wizard creates a shell for your application and makes it easy to get up and running quickly. The only difference between a Building Block and a web application is the presence of the bb-manifest.xml file. This file tells Blackboard how and where your tool integrates with the Blackboard user interface. It is very similar to the xml configuration file required when developing portlets. Choose what the architecture of your project is going to be​ There are many schools of thought on how to architect your web application. There are arguments that favor strict adherence to the MVC (model-view- controller) design pattern such as can be easily accomplished with Struts. Other schools of thought favor the ease of using JSPs to process logic (arguably a bad practice). You will see examples of both approaches on this site. Most beginners place all of their code in JSPs to start. As their skill level advances, they begin migrating this code into the controller and comply more fully with some style of MVC development. If you are willing to persist through the learning curve, the most commonly seen best practice is to develop a Struts-based web application. This said, you should be aware that there are limitations to using Struts with your Building Block application specifically with portal modules and with the script that is run upon removal of the Building Block. Configure the bb-manifest​ As stated above, the bb-manifest.xml file tells Blackboard where and how your tool will integrate into our user interface. This file will provide a place to define the type of Building Block (tool, module, or content type), options associated with each type, other configuration options, and permissions. These are described in greater detail in the Developer Guide located in the Documentation area of this site. A more functional overview of where you can integrate with Blackboard products can be found in the Getting Started area of this site. A technical developer will determine exactly where to integrate with Blackboard by working with a functional lead to determine the best feasible user experience. Determine how you will assemble your project for installation​ You will want to consider using an automated script to build your project and prepare it for installation on your development server. It is also possible to do this by hand, and some IDEs include built-in functionality to automate building your project. The most popular choice for automating your builds is Ant, although a new tool called Maven is also increasingly popular. Building Blocks are assembled and packaged as war/zip files for installation on the Blackboard server. ","version":null,"tagName":"h2"},{"title":"During Development​","type":1,"pageTitle":"Development Life Cycle","url":"/docs/archive/b2/getting-started/archive-b2-gs-dev_life_cycle#during-development","content":"Iterate through development​ During development, you will make changes to your code, build your project, and install the resulting war file on your development server using the Building Blocks Manager area of the System Admin panel. It is a best practice to remove the old Building Block before installing the new version. The Building Block will deploy to the /blackboard/content/vi/bb_bb60/plugins/name_of_your_project/ directory on your development server. In this directory, you will be able to modify JSPs directly and see their changes on the next page load. Class files or jar libraries can also be replaced, but the Building Block will need to be inactivated and made available again through the Building Blocks Manager before these changes will load. Compiled JSPs will appear in the /blackboard/apps/tomcat/work/Catalina/localhost/webapps_name of your project/ directory. These can be deleted here to force recompiling of them on the next page load. Logging of Building Block activity can appear in any of several log files. Always check /blackboard/logs/bb-services-log.txt and the catalina, stdout, and stderr logs in /blackboard/logs/tomcat/ (Windows) or /blackboard/apps/tomcat/logs (Linux and Solaris) directories. As you imagine, this is a very manual and potentially time consuming process. The Starter Block discussed in the 2007 DevCon presentation titled &quot;Best Practices for Building, Testing and Deploying Building Blocks&quot; automates this process by using HTTP calls and an Ant script. You can download this tool in the Developer Tools areas of the Downloads section of this site. Comment your code​ Always, always, always comment your code, especially if you are using a non- standard practice. You will forget how things work and why you did things in a certain way. Make life easier for yourself and whoever maintains your code by commenting it well. Keep track of your changes​ Going a step beyond commenting your code is using a code versioning system to keep track of changes made in each version of your product. This is a recommended best practice. ","version":null,"tagName":"h2"},{"title":"Testing / QA​","type":1,"pageTitle":"Development Life Cycle","url":"/docs/archive/b2/getting-started/archive-b2-gs-dev_life_cycle#testing--qa","content":"Determine what to test and how to test it​ One often overlooked step when developing a new Building Block is testing. Testing involves not only verifying that your code works, but that it can scale to meet the demand of a large user base, and that it adequately and accurately meets the needs of your users. One of the most common tools to test code is called JUnit. It allows an automated programmatic script to test API calls. For example, with JUnit you can automate making a connection to a database, adding a record, and closing the connection 100 times sequentially and then verify that 100 records made it into the database. There is another tool along these lines called HTTPUnit which can perform the same type of testing for web sites. It can load your Building Block, perform an action, and verify the success of that action programmatically. In addition to HTTPUnit, there is also a tool called Grinder that can be used to load test your Building Block. Your use cases defined when the project begins roughly correspond to test cases used to verify that your new tool meets the requirements set forth by the project team. You should run through each of these and complete an end-to- end verification that your tool works and behaves as desired. Get your users involved​ You should absolutely also involve a certain subset of your users with your project. In addition to being an exciting experience for them, it will provide the development team with valuable feedback relating to if the tool meets the needs of your users. This is often called user acceptance testing. Just be careful about scope creep. Your version 1 of your tool is just that - version Record everyone's ideas and input but set the expectation that additional functionality will be considered for future versions only. ","version":null,"tagName":"h2"},{"title":"Releasing your product​","type":1,"pageTitle":"Development Life Cycle","url":"/docs/archive/b2/getting-started/archive-b2-gs-dev_life_cycle#releasing-your-product","content":"Consider running a trial or beta program​ Consider encouraging the same team that helped with user acceptance testing to serve as the first users of the new tool in your production environment. Depending on how your tool is implemented, you may be able to limit who can see the tool in the Blackboard user interface. A best practice is to install your Building Block and leave the default Course/Org availability as Unavailable. Then, have your beta users activate the Building Block within their individual courses via the Manage Tools area of the Course Control Panel. The tool won't show by default for all of your users which will avoid confusion. However, this will not prevent anyone from manually turning this tool on. For those who license the Community System, portal modules can be access-restricted by institution role. Encourage your power users to train other users​ As the participants in your testing and beta programs will be the most familiar with your product, consider encouraging and providing incentives for them to instruct others how to use it. Have a plan for dealing with bugs and issues​ Even the smallest of projects will have a bug or two that escapes the testing/QA cycle. You should have a process for dealing with these issues. This includes having the ability to report the issues such as through your existing help desk or a bug tracking tool such as Bugzilla, allowing users to track the progress of the fix, making the changes, tracking the changes in your code, testing the changes, and updating your Building Block to its latest version during regularly scheduled Blackboard maintenance hours. Consider sharing your project​ Many of the free and almost all of the open source Building Blocks that are available come from the innovation of this developer community. If you would like to consider open sourcing your project, you need to consider several things. These include university intellectual property policy, licensing of your open source tool, variances in APIs among product versions, variances in platform (Windows, Linux, Solaris), and maintenance strategy. Each of these can be relatively easily addressed. OSCELOT (the Open Source Community for Educational Learning Objects and Tools) has assisted many with open sourcing their projects in the past. To learn more, visit their web site. ","version":null,"tagName":"h2"},{"title":"Maintaining your product​","type":1,"pageTitle":"Development Life Cycle","url":"/docs/archive/b2/getting-started/archive-b2-gs-dev_life_cycle#maintaining-your-product","content":"Maintenance issues​ The three most common causes of issues when updating a Building Block for the most recent Blackboard version are API changes, API bugs, and core product jar library changes. API changes are noted in the Javadoc documentation that ships with each product. Any API marked as deprecated is likely to be removed in the next version. API bugs are unlikely to occur, but they can and do occur. Follow the process detailed in the Help section of this site to obtain assistance. Libraries also can change between versions. For example, the version of Struts and the servlet-api are both likely to change with upgrades made to the core product. Updates to the Tomcat application server in certain releases can also induce unforeseen and undesired behavior in your Building Blocks. Track changes​ Again, even if you choose not using a code versioning system to track code changes, you should at the very least make a backup copy of the source code and war file for each version. ","version":null,"tagName":"h2"},{"title":"Enhancing your product​","type":1,"pageTitle":"Development Life Cycle","url":"/docs/archive/b2/getting-started/archive-b2-gs-dev_life_cycle#enhancing-your-product","content":"Version 1.1​ Version 1.1 will likely address some of the bugs and minor limitations with your version 1. This is to be expected. It is a best practice to keep this sort of information documented so when you find time to complete 1.1, you can check off your issues down the list. Version 2​ Version 2 will likely address those new feature requests brought up in your user acceptance testing and beta programs. These would include any that begin with &quot;It would be nice if...&quot; Caveat​ You should be aware that although you should keep track of your code versions, changing the Building Block version in the bb-manifest can have adverse affects. Notably, impact on data and records associated with your Building Block which may be lost should you uninstall a previous version to install the new version. Always thoroughly test any changes you make to your Building Blocks. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h2"},{"title":"Rosetta Stone","type":0,"sectionRef":"#","url":"/docs/archive/b2/getting-started/archive-b2-gs-rosetta_stone","content":"","keywords":"","version":null},{"title":"Overview​","type":1,"pageTitle":"Rosetta Stone","url":"/docs/archive/b2/getting-started/archive-b2-gs-rosetta_stone#overview","content":"This topic comes up often regarding Learn versions, &quot;How do I map the Learn release names to the build numbers?&quot; One of our clients referred to finding the answer as &quot;finding the secret decoder ring, or discovering the location of the Rosetta Stone.&quot; Here's the answer. ","version":null,"tagName":"h3"},{"title":"Do It Yourself​","type":1,"pageTitle":"Rosetta Stone","url":"/docs/archive/b2/getting-started/archive-b2-gs-rosetta_stone#do-it-yourself","content":"You want to know this because this page is infrequently updated. Just log in to Behind the Blackboard and use the search tool to look for the most recent release. I just entered &quot;Q4 2019.&quot; This link came up https://blackboard.secure.force.com/btbb_articleview?id=kA01O000000xVuX. Now scroll down the page and you will see the Upgrade Paths listed, which also maps the Release Names to the Build Numbers as shown below. And there you have it, your very own Secret Decoder Ring mapping of Learn Release Names to Build Numbers. ","version":null,"tagName":"h3"},{"title":"Rosetta Stone & Secret Decoder Ring​","type":1,"pageTitle":"Rosetta Stone","url":"/docs/archive/b2/getting-started/archive-b2-gs-rosetta_stone#rosetta-stone--secret-decoder-ring","content":"Blackboard Learn 9.1 Q4 2019 &lt;&lt; EOL December 2021 &gt;&gt; 9.1 Q4 2019 Cumulative Update 1 (Build:3800.0.1-rel.42+75c791f) Blackboard Learn 9.1 Q2 2019 &lt;&lt; EOL June 2021 &gt;&gt; 9.1 Q2 2019 Cumulative Update 7 (Build: 3700.0.7-rel.21+54e64bd)9.1 Q2 2019 Cumulative Update 6 (Build: 3700.0.6-rel.16+b131895)9.1 Q2 2019 Cumulative Update 5 (Build: 3700.0.5-rel.21+dfdd268)9.1 Q2 2019 Cumulative Update 4 (Build: 3700.0.4-rel.20+ded7cc5)9.1 Q2 2019 Cumulative Update 3 (Build: 3700.0.3-rel.35+ec64a31)9.1 Q2 2019 Cumulative Update 2 (Build: 3700.0.2-rel.36+fbf2221)9.1 Q2 2019 Cumulative Update 1 (Build:3700.0.1-rel.29+a963bd8)9.1 Q2 2019 (Build:3700.0.0) LTI 1.3/Advantage Release to Self/Managed-Hosted (Was first availalbe in SaaS 3500.11) Blackboard Learn 9.1 Q4 2018 &lt;&lt; EOL December 2020 &gt;&gt; 9.1 Q4 2018 Cumulative Update 10 (Build: 3500.0.10-rel.27+b7718ce)9.1 Q4 2018 Cumulative Update 9 (Build:3500.0.9-rel.12+78adef1)9.1 Q4 2018 Cumulative Update 8 (Build: 3500.0.8-rel.13+ba67594)9.1 Q4 2018 Cumulative Update 7 (Build: 3500.0.7-rel.34+6f3e777)9.1 Q4 2018 Cumulative Update 6 (Build: 3500.0.6-rel.16+7744aa6)9.1 Q4 2018 Cumulative Update 5 (Build: 3500.0.5-rel.48+1fc210f)9.1 Q4 2108 Cumulative Update 4 (Build:3500.0.4-rel.19+9180e36)9.1 Q4 2018 Cumulative Update 3 (Build:3500.0.3-rel.26+06aa766)9.1 Q4 2018 Cumulative Update 2 (Build:3500.0.2-rel.32+19c67cc)9.1 Q4 2018 Cumulative Update 1(Build:3500.0.1-rel.59+219b76) : Admin-&gt;LTI, Content Type []Deep Linking Blackboard Learn 9.1 Q2 2018 &lt;&lt; EOL June 2020 &gt;&gt; 9.1 Q2 2018 (Build:3400.0.0-rel.44+9fb1e0e)9.1, Q2 2018 Release (Build: 3400.0.1-rel.90+b74efee) : B2s-&gt;LTI, CIM, No Content Type Dropdown Blackboard Learn 9.1 Q4 2017 &lt;&lt; EOL Dec 2019 &gt;&gt; FIRST AVAILABILITY OF LTI CIM/Deep-linking 1.0 9.1 Q4 2017 CU2 (Build: 3300.0.2-rel.137+ba130da)9.1 Q4 2017 Cumulative Update 1 (Build: 3300.0.1-rel.60+a05276c) : B2s-&gt;LTI, +CIM, Content Type Dropdown Blackboard Learn 9.1 Q2 2017 &lt;&lt; EOL June 2019 &gt;&gt; 9.1 Q2 2017 Cumulative Update 2 (Build: 3200.0.2-rel.37+f07d42b)9.1 Q2 2017 Cumulative Update 2 (Build: 3200.0.2-rel.34+a87152a)9.1 Q2 2017 Cumulative Update 1 (Build: 3200.0.1-rel.56+af64d14)9.1 Q2 2017 (Build: 3200.0.0-rel.52+647f084) : LTI still under B2s, No Deep Linking Blackboard Learn 9.1 Q4 2016 &lt;&lt; EOL Dec 2018 &gt;&gt; 9.1 Q4 2016 Cumlative Update 3 (Build: 3100.0.3-rel.51+917ccd3)Build: 3100.0.2 released to SaaS FDO only - Article # 435869.1 Q4 2016 Cumulative Update 1 (Build: 3100.0.1-rel.117+6ef1843)9.1 Q4 2016 (Build: 3100.0.0-rel.107+401e) FIRST USE OF Tomcat 8 Blackboard Learn 9.1 Q2 2016 &lt;&lt; No longer supported &gt;&gt; 9.1 Q2 2016 Cumulative Update 5 (Build: 3000.1.5-rel.106+a770c2a)9.1 Q2 2016 Cumulative Update 4 (Build: 3000.1.4-rel.183+298455c)9.1 Q2 2016 Cumulative Update 3 (Build: 3000.1.3-rel.70+214db31)9.1 Q2 2016 Cumulative Update 2 (Build: 3000.1.2-rel.52+af05c84)9.1 Q2 2016 Cumulative Update 1 (Build: 3000.1.1-rel.20+6fbf7f6 )9.1 Q2 2016 (Build: 3000.1.0-rel.52+991d) FIRST USE OF Java 8 Blackboard Learn 9.1 Q4 2015 &lt;&lt; No longer supported &gt;&gt; 9.1 Q4 2015 Cumulative Update 3 (Build: 9.1.201510.1176878)9.1 Q4 2015 Cumulative Update 2 (Build: 9.1.201510.1175205)9.1 Q4 2015 Cumulative Update 1 (LRNSI-21344)9.1 Q4 2015 (Build: 9.1.201510.1171621) Contributors on this article: Anthology Inc Integrations, Developer Relations and Standards TeamAnthology Inc ","version":null,"tagName":"h3"},{"title":"Starter Building Block Readme","type":0,"sectionRef":"#","url":"/docs/archive/b2/getting-started/archive-b2-gs-starter_b2","content":"","keywords":"","version":null},{"title":"Introduction​","type":1,"pageTitle":"Starter Building Block Readme","url":"/docs/archive/b2/getting-started/archive-b2-gs-starter_b2#introduction","content":"The Starting Block Building Block can be used to dynamically deploy another Building Block for the purpose of testing changes. It is for use during the development cycle of a Building Block and should not be used on a production system. The Starting Block performs no authorization on requests and therefore represents a large security hole on anything but a development system. The Starting Block only works with local files and therefore any file indicated for installation must be directly visible to the server on which the Starting Block resides. ","version":null,"tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Starter Building Block Readme","url":"/docs/archive/b2/getting-started/archive-b2-gs-starter_b2#usage","content":"The Starting Block is invoked directly via URL. To access the help screen (which lists all available actions/options) install the Starting Block on your server and then go to the following URL: http://&lt;server&gt;/webapps/bb-starting-block-&lt;schema&gt;/execute/help The above URL assumes the Starting Block was installed on the default Virtual Installation. Replace &lt;server&gt; with your servers domain and &lt;schema%gt; with your schema name. On newer systems, this should be BBLEARN, on older systems, this should be bb_bb60. ","version":null,"tagName":"h2"},{"title":"Invocation​","type":1,"pageTitle":"Starter Building Block Readme","url":"/docs/archive/b2/getting-started/archive-b2-gs-starter_b2#invocation","content":"Since the Starting Block can be &quot;called&quot; using a URL, it can be invoked through a standard web browser (using a bookmark). However, it is easier to incorporate the invocation of the Starting Block into the build script of your Building Block. ","version":null,"tagName":"h2"},{"title":"Invocation Via Gradle​","type":1,"pageTitle":"Starter Building Block Readme","url":"/docs/archive/b2/getting-started/archive-b2-gs-starter_b2#invocation-via-gradle","content":"The Basic B2 Templateproject contains all the information you need to use the Starter Block from your Gradle build process. A Gradle task was added called 'deployB2' that takes care of everything for you. To invoke, simply type 'gradle deployB2' or 'gradlew deployB2' at the command line in the root directory of your project, or configure the task to be called from your IDE's Gradle plugin. ","version":null,"tagName":"h3"},{"title":"Invocation Via Ant​","type":1,"pageTitle":"Starter Building Block Readme","url":"/docs/archive/b2/getting-started/archive-b2-gs-starter_b2#invocation-via-ant","content":"A sample Ant build file has been included in this package in order to demonstrate how this can be done (see the &quot;deploy&quot; set of build targets in the sample build file). The build file is a complete Building Block build file and may be useful as is for your own Building Block. Ant Build File Caveats​ If you plan on using the sample build file for your own project don't forget to change the project name attribute. In order to invoke the Starting Block from Ant, the &quot;get&quot; Ant task is being used. Unfortunately, there is no easy way to take the output of that task (the output of the Starting Block written to a file) and render it to the user. As such, the user must examine it manually (stored in distrib/deploy.out) or update the Ant script with a platform specific call to echo the contents of the file. Generally speaking though, the output of the Starting Block is not important since there is very little that can go wrong if the &quot;get&quot; request is successful (which Ant will tell you). However, be sure to check deploy.out if deployment does not seem to be working. If the WAR file name that should be deployed requires url encoding in order to properly work with the &quot;get&quot; task (i.e., the WAR file or the path to the WAR file contain special characters) you will need to update the build file to use the &quot;makeurl&quot; task. This task is part of the -set-deploy-url target but is commented out by default since the task is new to Ant 1.7 and will not work unless you have that version of Ant or newer. If its use is necessary for you, make sure you have Ant 1.7, uncomment out the task, and then update the setting of deploy.url to use warfile.url in place of warfile. Contributors on this article: Kelley MacEwen Former Sr. Content DesignerBlackboard Learn - Content Team ","version":null,"tagName":"h3"},{"title":"Enabling Remote Debugging","type":0,"sectionRef":"#","url":"/docs/archive/b2/resources/archive-b2-resources-enable_remote_debug","content":"","keywords":"","version":null},{"title":"Enabling debugging using bb-config.properties​","type":1,"pageTitle":"Enabling Remote Debugging","url":"/docs/archive/b2/resources/archive-b2-resources-enable_remote_debug#enabling-debugging-using-bb-configproperties","content":"Newer versions of Blackboard Learn have a built-in flag to enable Tomcat debugging. Follow these steps to turn it on: Open the file /blackboard/config/bb-config.properties in a text editorModify the value bbconfig.tomcat.debug.enable and set bbconfig.tomcat.debug.enable=trueNavigate to /blackboard/tools/admin/ and run PushConfigUpdates.sh/.bat from the command line.You can now connect with a debugger to port 2222 (or as set in the value for bbconfig.jvm.options.debug.tomcat) ","version":null,"tagName":"h3"},{"title":"Setting up Eclipse for Tomcat Debugging​","type":1,"pageTitle":"Enabling Remote Debugging","url":"/docs/archive/b2/resources/archive-b2-resources-enable_remote_debug#setting-up-eclipse-for-tomcat-debugging","content":"Remote debugging is project specific in Eclipse. Once you have the building block project created and open you may setup the debugging within Eclipse: In the Eclipse project view tool bar: Click on the upward facing arrow next to the “Debug” button (the button with the bug) in the toolbar and Click on “Debug configurations…” Alternatively you may select &quot;Run &gt; Debug configurations…&quot; from the Eclipse menu. A new window with the current debug configurations will open. Select “Remote Java Application” in the left list of configuration options and then click on “New launch configuration” button (the button with the folder icon in the top-left corner). Alternatively you may double-click &quot;Remote Java Application&quot;. Fill the configuration with the data corresponding with your Tomcat instance: Project: The project you want to debug: it has to contain the source code for the application we want to debug. So include the source in the project build.Connection Type: Standard (Socket Attach).Host: IP of the Learn server being used for debugging.Port: Port indicated to JVM in address parameter. Usually port 2222. ","version":null,"tagName":"h3"},{"title":"Execute the Debugger​","type":1,"pageTitle":"Enabling Remote Debugging","url":"/docs/archive/b2/resources/archive-b2-resources-enable_remote_debug#execute-the-debugger","content":"Once you have built and deployed your Building Block you may click on the button “Debug” and Eclipse will connect with the Learn instance of Tomcat (Learn must be running). Now when you put the breakpoints inside the Eclipse project you may debug as you would normally with a regular project only now it is remote code running in the Learn Tomcat container. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Java 11 for Learn: FAQ","type":0,"sectionRef":"#","url":"/docs/archive/b2/resources/archive-b2-resources-java_11","content":"Java 11 for Learn: FAQ Published: Not Available Last Update: Not Available ⚠️ This document is deprecated! Java 11 for Learn: FAQ To address recent changes in Oracle’s Java support model, Blackboard Learn is transitioning to adopt a more recent version of Java, Java 11 Corretto JDK. To find details regarding the targeted versions and release dates please review the latest announcement details As with prior Java version changes, it is generally expected that Building Blocks will continue to work as-is. However, Java 9 onwards has significant changes to library management and class reflection which has required numerous changes to the Learn application. To assist developers in updates to existing Building Blocks we are provided guidance through these frequently asked questions: Will EVERY Building Block (B2) be required to be recompiled with Java 11? No, not every B2 will need to be recompiled. However, most B2s are highly likely to use one or more libraries that will require an upgrade with Java 11 (Ex. Spring). In that case, a recompile is unavoidable. In scenarios where the libraries are both Java 8 and Java 11 compatible, a B2 compiled with Java 8 will continue to work with Java 11. Aren't JDK/runtime backward compatible? Why the need to recompile? There is no need to recompile solely for the sake of runtime compatibility. The class files created by Java 8 are still executable in Java 11; however, there have been other changes in the Java runtime (library changes, etc.) that might require modification of the code. These modifications may be made in Java 8 and compiled with Java 8 making it compatible with the Java 11 runtime. Will I have to upgrade any of the jars or libraries bundled with my B2 for Java 11? All jars and libraries will require an upgrade. If the B2 libraries and jars are not compatible with the Java 11 runtime used by Blackboard Learn, an upgrade is required. For example, some parts of Spring 4.5 are not compatible with Java 11. If the B2 is dependent on Spring 4.5, an update will be required to ensure compatibility with Java 11 (Spring 5.1.x). Can I reference the 3rd party libraries or jars that are bundled with the Blackboard Learn for my B2? Blackboard strongly recommends NOT referencing 3rd party libraries and jars, because Blackboard may be required to upgrade libraries or jars bundled within Learn for various reasons including security updates. These upgrades may deprecate or eliminate certain methods or classes breaking B2 dependencies. To prevent this, Blackboard recommends that a B2 includes its own copies of dependent jars. Does installer detect JDK version (i.e. did Blackboard update to detect/require Java 11)? Yes, the Blackboard installer is updated with logic to detect the minimum version of the JDK11 runtime supported by the Blackboard Learn build place. Will B2 developers or Self Hosted system administrators need to make environment changes? Only integrations involving command line invocation will need to make environmental changes. Scenarios invoking Java from a script would need to include the argument &quot;--add-modules=ALL-SYSTEM&quot; to prevent potential module related errors.Depending on the client installation, there could be risk of StackOverflow due to the size of the callstack resolving class files. Tomcat can be modified via bb-config.properties setting &quot;bbconfig.max.stacksize.tomcat&quot;. Default minimum is 1M What is the impact of switching to Corretto 11 distribution of OpenJDK? With our AWS partnership, we have a path to ongoing support for Java that isn’t limited by the OpenJDK support timeframe and is simpler than prior support contract processes.It will be fully supported by Amazon including distribution of security patches until at least August 2024 whereas the open source OpenJDK will stop receiving security patches after the 6-month release windows from the next major JDK release.It has been fully tested by AWS to ensure compatibility with the Oracle Java platform.It has been designed as a full drop-in replacement for all Java SE distributions.There should be very minimal impact in switching to Corretto distribution beyond installing the Corretto binaries on the server platform and making sure all applications are updated to include the path to the correct binary in their startup or launch scripts.Amazon uses Corretto internally which means added benefits from testing on thousands of Amazon services. Issues found internally at Amazon should be fixed and released within days. How can I avoid having to do frequent testing and recompiling of Building Blocks? As noted above, including copies of dependent libraries in the Building Block rather than referencing them in the Learn application will help. To avoid the overhead of maintaining Building Blocks through these frequent library changes, we encourage you to also consider our ever-expanding support for LTI and REST APIs to determine when it would appropriate for you to transition your solution to these integration frameworks that aren’t impacted by library changes. The LTI/REST framework has the added benefit of being supported across all Learn deployments and UX options enabling your integration to also be Ultra ready. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards","keywords":"","version":null},{"title":"Preparing Your B2 for Blackboard Learn 9.1 Q2 2016","type":0,"sectionRef":"#","url":"/docs/archive/b2/resources/archive-b2-resources-prep_learn_q2","content":"Preparing Your B2 for Blackboard Learn 9.1 Q2 2016 Published: Not Available Last Update: Not Available ⚠️ This document is deprecated! Preparing Your B2 for Blackboard Learn 9.1 Q2 2016 Attached is the PowerPoint deck for the 3/16/2016 Webinar recording:Preparing Your Building Block for Blackboard Learn 9.1.Q2 2016. In this Webinar we reviewed the changes in the upcoming Learn 9.1 Q2 2016 release and how to prepare your Building Block for the release. Topics covered include - Java 8, Learn Versioning, B2 Versioning, New Installer, and Development Resources. Another must-read is Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions by Scott Hurrey. The recording for the 3/22/2016 Webinar ishere. During the 3/22/2016 presentation one of the participants had questions around setting the minimum and maximum version in the bb-manifest, and setting the B2 version. I've updated the slide deck based on that conversation and further internal conversations. The slide on B2 Versioning now states that creating 2 versions of your B2, one for SaaS and one for 9.1 is bad practice, not second-best. If you write a B2 so that it works in SaaS, it will also work in 9.1 Q2 2016 and future releases of Learn. There is no reason to create two versions. Further discussion on B2 versioning and setting the Learn minimum and maximum version # in the bb-manifest follows in the comments section below. How to set Java compatibility settings is discussed in the attached powerpoint slide deck. Regarding setting the minimum and maximum version of Learn in the bb-manifest file, and setting the version of your B2, there are many different possible scenarios. Following are a few, starting with a few simple cases, and becoming more complex. Case 0:​ You've tested v1.0 of your B2 in 9.1, SP8. You've set the minimum Learn version in the manifest to 9.1, SP8 accordingly. You have not set a maximum version of your B2 because as each release of Learn comes out you find that your B2 continues to work. With the release of 9.1 Q2 2016 you find that your B2 continues to work without changes, and you find that it meets all of the requirements for deployment in SaaS and works in the current Learn SaaS release. You don't need to do anything. Case 1:​ As above except that you find that you need to release a new version, v2 of the B2 for the 9.1 Q2 2016 Release to run with Java 8. You also design the new v2 B2 is to work in the Learn SaaS environment. This is the best practice as it gives you only one version to maintain - and you eliminate any possibility of a B2 that doesn't work in SaaS getting installed into a SaaS environment. Now you need to end-of-life B2 v1 by setting its maximum Learn version in the bb-mainfest to the most recent version of Learn that v1 was tested on, assume Q4 2015. With the new v2 B2 you will test, then set, the minimum Learn version in the bb-manifest to 3000.x.x (whatever we end up with in the GA release). You do not yet set a maximum because you do not know yet whether the v2 B2 will continue to work on future releases of Learn. Because Learn SaaS and Learn 9.1 will both have the same Learn version numbering scheme rolling forward, starting with this release, the minimum Learn version that you've specified in the bb-manifest correctly specifies the minimum SaaS and 9.1 Learn version that the v2 B2 has been tested with. A key point of Case 1 is that by architecting your B2 to work in Learn SaaS, you also guarantee that it will work in the Q2 2016 release, provided of course that if you create and use any custom DB tables you continue to code for MS SQL, and Oracle, as well as Postgres. Case 2:​ Blackboard releases a newer version of Learn, say Q2 2017. You find that that your B2 continues to work in both 9.1 and SaaS environments. You don't need to do anything. Case 3:​ Blackboard releases a newer version of Learn, say Q2 2017. You find that you need to make changes to your v2 B2 so that it will work with this newer version of Learn. You now must set the max version of Learn in the v2 B2 so that it can not be installed in this new version of Learn. You create a new version of your B2, v3, and set the min version of Learn in the bb-manifest. B2 v3 does not yet need to have a max version of Learn set in the manifest. Contributors on this article: Anthology Inc Integrations, Developer Relations and Standards TeamAnthology Inc","keywords":"","version":null},{"title":"First Project: Gradle, Git and b2-starter-template","type":0,"sectionRef":"#","url":"/docs/archive/b2/resources/archive-b2-resources-first_project_gradle","content":"","keywords":"","version":null},{"title":"Start a Gradle Based Project​","type":1,"pageTitle":"First Project: Gradle, Git and b2-starter-template","url":"/docs/archive/b2/resources/archive-b2-resources-first_project_gradle#start-a-gradle-based-project","content":"In this step you will download the Blackboard provided project template, copy it to a new project directory named after your project, configure the template to reflect your project requirements by editing the build and bb-manifest.xml files. ","version":null,"tagName":"h2"},{"title":"'GIT' the basic-b2-template​","type":1,"pageTitle":"First Project: Gradle, Git and b2-starter-template","url":"/docs/archive/b2/resources/archive-b2-resources-first_project_gradle#git-the-basic-b2-template","content":"Blackboard provides a gradle-based template for Building Block development which is accessible from the Blackboard GitHub project repository: https://github.com/blackboard/basic-b2-template There are several ways which you may access the basic-b2-template. Notably: Download a zip file – this works fine if you do not have GIT installed and is available via a link on the project page.Clone the project to your desktop via the GitHub website via a link on the project page.Use the GIT command-line tools to clone and rename the project.In the case of the first two you have to manually copy/rename the directory to reflect your project name. The third approach, the GIT command-line is what is used in this tutorial - note this requires that you have installed GIT on your development workstation. Using GIT command-line tools​ The command for cloning a remote GIT repository is  $ git clone -o  So using 'my-gradleB2' as an example the template would be cloned byclone the template thus: Using a terminal change to your GIT managed project directory and  $ git clone https://github.com/blackboard/basic-b2-template.git -o my-gradleB2 my-gradleB2  (re)Initialize your local repository  $ git init  Add the cloned files to your local git repo  $ git add -A  An important note about GIT​ It is all local until it is pushed to the remote repository – add, commit, remove, branch etc all happen on your local repository. Only if and only when you push your local repository to the remote do you impact the remote repository. ","version":null,"tagName":"h3"},{"title":"Import the Project Into Your IDE​","type":1,"pageTitle":"First Project: Gradle, Git and b2-starter-template","url":"/docs/archive/b2/resources/archive-b2-resources-first_project_gradle#import-the-project-into-your-ide","content":"You have cloned the remote repository and set up a local ‘working directory’ now you need to import the project into your IDE so that you can begin coding. The basic-b2-template is a gradle project thus so is the clone. NetBeans​ NetBeans recognizes and imports gradle projects such as the cloned basic-b2-template: Open NetBeansSelect File: Open ProjectNavigate to your GIT dev directory and select the project. NetBeans recognizes and Imports the project with all it’s ‘gradleness intact.’ Eclipse​ Eclipse with the Gradle plugin (or STS) supports importing Gradle projects via Import&gt;Gradle&gt;Gradle Project menu. An Eclipse w/o the Gradle plugin requires the creation of the supporting Eclipse project files to import the project. This is done by running the Gradle Eclipse plugin:  $ gradle eclipse :eclipseClasspath :eclipseJdt :eclipseProject :eclipse BUILD SUCCESSFUL  When the Eclipse plugin successfully completes, import the project as you would normally using Import&gt;General&gt;Existing Projects into Workspace. The schema folder in both NetBeans and Eclipse is generated outside the Web Pages folder – this is a manifestation of the template clone not an Eclipse or NetBeans issue – just drag it into the Web Pages folder. ","version":null,"tagName":"h3"},{"title":"Edit the build.gradle and bb-manifest.xml files​","type":1,"pageTitle":"First Project: Gradle, Git and b2-starter-template","url":"/docs/archive/b2/resources/archive-b2-resources-first_project_gradle#edit-the-buildgradle-and-bb-manifestxml-files","content":"build.gradle​ The build.gradle file provides the necessary libraries for the build, dependency management for the project classpath and war file, and the target settings for maven and deployment of the Building Block. These must be edited to reflect your project requirements. You will make edits to three areas of the file: Term\tDefinitionext or project.ext\tthis specifies replacement variables for the build repository\tthis specifies the location of the maven repository dependencies\tmanagement of project dependencies ext (or project.ext)​ Set this section to reflect your remote development settings:  project.ext { learnVersion = &quot;9.1.110082.0&quot; deployServer = &quot;10.0.1.150&quot; deployInstance = &quot;BBLEARN&quot; }  Term\tDefinitionlearnVersion\tused in pulling the appropriate library jars for target version deployServer\tthe IP or server name for the target development server (add &quot;:&lt;port&amp;rt;&quot; if not served from port 80) deployInstance\tthe DB instance for the target development server Repository​ Set this section to reflect the Learn maven repository:  repositories { mavenCentral() maven { url &quot;https://maven.blackboard.com/content...ries/releases/&quot; } }  You may add additional maven repositories:  maven {...} maven { url https://repo.myinst.edu/mavenrepo }  Dependencies​ Set this section to reflect project dependencies: Term\tDefinitionprovidedCompile\trequired but NOT built into WAR compile\trequired AND built into WAR Gradle Dependency Management Documentation Blackboard jars should always be providedCompile to exclude them from the war file:  providedCompile( &quot;blackboard.platform:bb-platform:$ext.learnVersion”) { transitive = false } providedCompile( &quot;blackboard.platform:bb-cms-admin:$ext.learnVersion&quot; ) { transitive = false } providedCompile( &quot;blackboard.platform:bb-taglibs:$ext.learnVersion&quot; ) { transitive = false }  NOTE: 'transitive' determines whether to pull all related library dependencies onto the build path. Supporting Libraries which need to be built into the war are added as ‘compile’: compile &quot;org.springframework:spring-aop:$ext.springVersion&quot;, &quot;com.googlecode.json-simple:json-simple:1.1&quot;, &quot;org.codehaus.jackson:jackson-mapper-asl:1.8.5&quot;, &quot;commons-logging:commons-logging:1.1.1&quot;, &quot;junit:junit:4.5&quot;, &quot;org.json:json:20090211&quot; ~~~ Setting transitive to 'true' specifies a dependency that is reconciled by Gradle and places all libraries required to satisfy the dependencies on the build path. ~~~ java compile( &quot;org.hibernate:hibernate-core:$ext.hibernateVersion&quot; ) { transitive = true }  ","version":null,"tagName":"h3"},{"title":"bb-manifest.xml and bb-manifest-en_US.properties​","type":1,"pageTitle":"First Project: Gradle, Git and b2-starter-template","url":"/docs/archive/b2/resources/archive-b2-resources-first_project_gradle#bb-manifestxml-and-bb-manifest-en_usproperties","content":"Set up the bb-manifest to meet the requirements for your project. The basic-b2-template provides the framework of a bb-manifest.xml file which uses internationalization bundles. There are two files that require editing: bb-manifest.xmlbundles/bb-manifest-en_US.properties Both these files are located in the project WEB-INF directory. bb-manifest.xml​ The basic-b2-template bb-manifest minimally requires edits to the following noted areas for use in your cloned project.  &lt;name value=&quot;b2.name&quot; /&gt; &lt;--- this is changed in bb-manifest-en_US.properties &lt;handle value=&quot;template&quot; /&gt; &lt;--- this should be changed to reflect the project name - such as my-gradleB2 &lt;description value=&quot;b2.description&quot; /&gt; &lt;--- this is changed in bb-manifest-en_US.properties &lt;default-locale value=&quot;en_US&quot; /&gt; &lt;--- this may be left unchanged &lt;version value=&quot;1.0&quot; /&gt; &lt;--- this may be changed to reflect the extension version &lt;requires&gt; &lt;bbversion value=&quot;9.1.110082.0&quot; /&gt; &lt;--- this should be changed to reflect the minimal target Learn version&lt;/requires&gt; &lt;vendor&gt; &lt;id value=&quot;mnmt&quot; /&gt; &lt;--- this should be changed to a four character id that reflects the extension origin &lt;name value=&quot;Monument University&quot; /&gt; &lt;--- this should be changed to the vendor name &lt;url value=&quot;http://www.monument.edu/&quot; /&gt; &lt;--- this should be changed to vendor URL &lt;description value=&quot;Monument University&quot; /&gt; &lt;--- this should be a brief description of the vendor &lt;/vendor&gt;  bb-manifest-en_US.properties​ Bundle *.properties files provide the means to internationalize the bb- manifest sections that are visible in the UI and any text that is displayed as part of the extension's user interface.  b2.name=B2 Template &lt;--- this should be changed to reflect the name of your extension, such as my-gradleB2 b2.description=Simple B2 template for starting new B2 projects. &lt;--- this should contain a brief description of the extension's function.  Build and Deploy​ Building and deploying is conveniently done via a terminal by running the gradle deployB2 task from within the top level directory of your project.  $ gradle deployB2 :compileJava UP-TO-DATE :processResources UP-TO-DATE :classes UP-TO-DATE :war UP-TO-DATE :deployB2 BUILD SUCCESSFUL Total time: 12.423 secs  Note that launching custom tasks may be configurable within your IDE. Adding a custom task enables a build and deploy cycle to be run entirely from within the IDE. ","version":null,"tagName":"h3"},{"title":"Benefits​","type":1,"pageTitle":"First Project: Gradle, Git and b2-starter-template","url":"/docs/archive/b2/resources/archive-b2-resources-first_project_gradle#benefits","content":"Consistency and Control​ Use of Gradle, a VM, and a SCM such as GIT provide a consistent environment for development – across all projects, while providing a means of managing your code-base. Speed​ While average build-times may not significantly decrease, the significant time savings resulting from improved general project management and from the deployment feature of the Learn/Gradle dev environment adds up quickly when compared to a manual deploy cycle. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"8 Steps to prepare for Java 11","type":0,"sectionRef":"#","url":"/docs/archive/b2/resources/archive-b2-resources-prepare_for_java_11","content":"","keywords":"","version":null},{"title":"What you should do to prepare for this change:​","type":1,"pageTitle":"8 Steps to prepare for Java 11","url":"/docs/archive/b2/resources/archive-b2-resources-prepare_for_java_11#what-you-should-do-to-prepare-for-this-change","content":"Clean up. You should inactivate or remove Building Blocks (B2s) from your environments you no longer use or support. If the tool contains data you may need to retain for data retention purposes, you should make it inactive; if you know you no longer have any need for the B2 it can be removed. Depending on how long you’ve been using Blackboard Learn, you may have B2s from older versions of Learn that are no longer used nor supported. We encourage removing these B2s. Take inventory and collect updated Building Block installers. Review the non-Blackboard B2s in your environment and take note of version numbers. Plan to collect the latest B2s for third-party extensions. Self- and Managed Hosting admins will follow typical upgrade planning and should plan to apply updated Building Blocks as part of a 9.1 Q4 2019 upgrade process. Admins may be able to update the Building Block prior to the upgrade if the provider indicates the Building Block is compatible with both Java 8 and Java 11 versions of Learn. Otherwise, updates can be applied after the Learn upgrade. When collecting updated Building Blocks, make sure you have the latest version of the B2 from the provider (vendor, open source, or internal). Check vendor websites or contact vendors’ support and get the latest versions of B2s from them. Confirm that the updates have been tested to be Java 11 compatible and validate in your test or stage environment. For open source Building Blocks you use, check community sources such as OSCELOT to see if updates are available. If you have B2s created by Blackboard Consulting and supported under an ICM contract, contact Blackboard Product Support for the latest version that is Java 11 compatible. Transition integrations to different integration types. Some solution providers have transitioned their integrations to other methods, such as leveraging the Learning Tools Interoperability (LTI) standard or REST APIs instead of Building Block APIs. In some cases, they may have completely different B2 integrations than the one you’re using. Working with these vendors, determine whether this is appropriate for you. Examples of these integrations requiring transition include Lynda.com and Turning Technologies. Test and update in-house Building Blocks. If you have B2s created at your institution, you should confirm their functionality in test/stage and prepare to update them. Guidance about updating Building Blocks can be found here. We’ve created an automated tool to assist with identifying potential library incompatibilities. While this tool doesn’t necessarily inform you of the functional behavior of the Building Block with Java 11, it provides guidance around library incompatibilities that could lead to a non-functional B2. See the section about the Building Block Scan Tool in the Resources section below. Test in test/stage environments. For SaaS: It is always best practice to test new Building Blocks in your test/stage environment before applying to production.For 9.1 Q4 2019: Test in your test/stage environments using the 9.1 Q4 2019 installer. Prepare for the production upgrade. Have your collected B2 installers ready to install after your production upgrade. To prevent disruption to users, you might also choose to make affected Building Blocks temporarily inactive so users don’t see error messages until the updated Building Blocks are installed. Please note that updated B2s should only be applied to production environments before the production upgrade if the provider explicitly says that version is compatible with both Java 8 and Java 11. A number of B2s aren’t compatible with both, so an update in production early could disrupt the use of that tool. Conduct post-upgrade testing. Review B2s after upgrade to validate their functionality. Report issues to the provider of the Building Block. Plan for the future. Once this change is over, we encourage you to review your B2 inventory and plan for the future. Transitioning away from library-dependent integration frameworks like Building Blocks toward more change-resilient integration frameworks like LTI and REST can help prevent this type of change management activity. If your institution develops tools and integrations for your Blackboard Learn instance, learn more about LTI and REST in our developer community. Encourage your solution providers to consider integrations based on REST APIs and the latest in standards such as LTI Advantage. ","version":null,"tagName":"h3"},{"title":"Resources:​","type":1,"pageTitle":"8 Steps to prepare for Java 11","url":"/docs/archive/b2/resources/archive-b2-resources-prepare_for_java_11#resources","content":"Testing environments. There are numerous ways and locations where you can test the functionality of your Building Blocks. (Available Now, Self- and Managed Hosting) Learn 9.1 Q4 2019 was made available in December. Building Block Scan Tool. We’ve created an automated tool for scanning B2s and help you determine if there are likely incompatible libraries. The results of the scan will highlight potentially incompatible libraries. While this may indicate likelihood of a need to update a Building Block, it doesn’t replace testing—we’ve seen a few cases where a B2 with compatibility alerts appears to function as expected, and other instances where a B2 has a clear scan but isn’t functioning quite as expected. SaaS clients can run the utility themselves. Self- and Managed Hosting clients can access the utility as part of the 9.1 Q4 2019 release. Documentation to run the Building Block Java 11 compatibility scanner yourself Testing status for Partner Building Blocks. As we worked with partners throughout 2019 in preparing for Java 11, we were updating the status of those Building Blocks on Behind the Blackboard. This document can be used as a resource, but please note that it was no longer updated afer February 2020. Be certain to check with Building Block suppliers for the most up-to-date information. Additional background information and FAQ: General updates and answers to frequently asked questions can be found in this Behind the Blackboard article. Building Block developer resources: The developer’s community has many resources for Building Block development. Preparing a Building Block for a newer version of Learn and ensuring it works with Learn SaaSB2 development frequently asked questions Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Scan tool for Learn SaaS","type":0,"sectionRef":"#","url":"/docs/archive/b2/resources/archive-b2-resources-scan_tool","content":"Scan tool for Learn SaaS Published: Not Available Last Update: Not Available ⚠️ This document is deprecated! Building Block Scan Tool for Blackboard Learn As of Blackboard Learn SaaS version 3700.11.0, including 9.1 Q4 2019 and higher, you now have the ability to scan any installed Building Block for API changes and readiness for Java 11! You should ONLY run this on your staging environment. It can be resource- intensive The process is really quite simple. The scanning tool can be turned on in a browser by loading the following URL: https://&lt;your Blackboard domain&gt;/webapps/portal/support.jsp?Action=toggleDevOnlyRestEndpoints The resulting screen will look like this: Notice the DevOnly endpoint status at the bottom of the screen shot. This is how you can tell whether you enabled or disabled the scanner. This endpoint is a toggle; calling it twice will turn it off. This endpoint is also only valid in your current browser session. If you close the browser, the scanning tool will be turned off. Once this is completed, you can scan any currently installed Building Block. Here are the details: Endpoint: https://&lt;your Blackboard domain&gt;/learn/api/v1/healthCheck/deepb2s The endpoint takes the following query parameters Parameter\tDescription\tExamplehandle\tThe plugin handle for the Building Block\thandle=myB2 vendor\tThe vendor id for the Building Block\tvendor=bbdn lookAtEverything\tConfigure the scanner to check for all options\tlookAtEverything=true onlyReportDependencyProblems\tOnly report issues with libraries in use\tonlyReportDependencyProblems=true skipReportingB2Overrides\tDon't report on methods overridden in the Building Block\tskipReportingB2Overrides=true groupDependencyIssues\tGroup dependency issues together\tgroupDependencyIssues=true As an example, to test the building block in our example, you would load the following URL: https://&lt;your Blackboard domain&gt;/learn/api/v1/healthCheck/deepb2s?handle=myB2&amp;vendor=bbdn&amp;lookAtEverything=true&amp;onlyReportDependencyProblems=true&amp;skipReportingB2Overrides=true&amp;groupDependencyIssues=true The result of loading this endpoint is a JSON body containing information about the Building Block and any reported discrepancies. Here is an example of the output from running this scanner against the youtube mashup Building Block. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards","keywords":"","version":null},{"title":"Useful Links","type":0,"sectionRef":"#","url":"/docs/archive/b2/resources/archive-b2-resources-useful_links","content":"","keywords":"","version":null},{"title":"Building Block Developer Tools​","type":1,"pageTitle":"Useful Links","url":"/docs/archive/b2/resources/archive-b2-resources-useful_links#building-block-developer-tools","content":"Blackboard Maven Repository{: target='_blank'}schema.xml validator{: target='_blank'}bb-manifest.xml validator{: target='_blank'}Blackboard Github Repository{: target='_blank'}Java 11Java 11 FAQs Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h2"},{"title":"Welcome to caliper!","type":0,"sectionRef":"#","url":"/docs/blackboard/caliper/caliper-intro","content":"Welcome to caliper! Contributors on this article: Anthology Inc Integrations, Developer Relations and Standards TeamAnthology Inc","keywords":"","version":null},{"title":"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions","type":0,"sectionRef":"#","url":"/docs/archive/b2/resources/archive-b2-resources-moving_to_saas","content":"","keywords":"","version":null},{"title":"APIs​","type":1,"pageTitle":"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions","url":"/docs/archive/b2/resources/archive-b2-resources-moving_to_saas#apis","content":"Only use the published APIs. If it's not published, it's private. Our product development team is cleaning up and refactoring a lot of code. If you're using private APIs, there is a good chance they will stop working. So, remove all use of private APIs. For example we've discovered that B2s that depend onDocumentManagerEx now fail in newer versions of Learn.DocumentManagerEx is private. Don't use it. Eliminate the use of all private APIs. ","version":null,"tagName":"h2"},{"title":"Database​","type":1,"pageTitle":"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions","url":"/docs/archive/b2/resources/archive-b2-resources-moving_to_saas#database","content":"In SaaS, the database schema name will no longer be BBLEARN orbb_bb60. Your B2 code must determine the actual schema name if it has any dependency on the value. See Bye Bye BBLEARN &amp; bb_bb60 Also, in SaaS, the database is Postgres. If you’ve been testing your code on the Developer Virtual Machine, this isn’t that big of a deal. Schema.xml will continue to be supported as it is today. If you are providing SQL statements in the form of stored procedures, post_schema_updates, etc, you will just need to be sure to supply those files in postgres form, as well. These files will take the suffix, db-pgsql. If a self or managed-hosted client is migrating your B2 to SaaS via a &quot;full database migration&quot; be certain to read SaaS Migrations - Sequences and Tables. In addition, its important to note that Exceptions encountered during postgres transactions stop all processing. You must code to handle this occurrence. One approach is to create a save point before you start the transaction and roll back to that save point upon exception. Here’s a small sample demonstrating this. // Much of the error handling stripped for space public static T withSavePoint(Callable c, Connection con) throws SQLException { Savepoint savepoint = null; try { if ( null != con &amp;&amp; !con.getAutoCommit() ) { savepoint = con.setSavepoint(); } return c.call(); } catch ( SQLException e ) { if ( con != null &amp;&amp; savepoint != null ) { con.rollback( savepoint ); } throw e; } }  Postgres handles timestamps differently. There are two types of timestamps:localtimestamp and clock_timestamp::timestamp. The localtimestampreturns the time at the start of the transaction. Theclock_timestamp()::timestamp returns the actual current time. As a result, it is best practice to use clock_timestamp()::timestamp in your Building Block, as this matches the behavior of timestamps in other databases. Avoid the use of data-templates for management of objects that can be managed through the bb-manifest.xml file. This includes rows in tables like application, navigation_item, and entitlements. The use of data-templates both adds risk to live-upgrades and loses customizations (application status, entitlement-to-role mappings, etc.). ","version":null,"tagName":"h2"},{"title":"Shared Content Folder​","type":1,"pageTitle":"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions","url":"/docs/archive/b2/resources/archive-b2-resources-moving_to_saas#shared-content-folder","content":"In the Enterprise Blackboard Learn you are accustomed to developing for, the Building Block home lives in the shared content directory. For instance, if I wrote a building block and set my vendor ID to ‘bbdn’ and my plugin handle to ‘my-b2’, my building block and all of its related files would live inblackboard/content/vi/BBLEARN/plugins/bbdn-my-b2, and this directory would exist once, in only one place, so changes were persisted to all application servers. In Learn SaaS, there are two building block homes. There is still the shared file system that is shared among the entire group of application servers, but there is also a local cache on each individual server. As a result, the Building Block would still reside in the shared directory, similar toblackboard/content/vi/BBLEARN/plugins/bbdn-my-b2, however the web app would live in the local cache on each server, in a directory similar toblackboard/cache/vi/BBLEARN/plugins/bbdn-my-b2. As a result of this change, several of the Plugin API methods have been modified to handle the dual-folder deployment.PlugInManager.getPlugInDir() and PlugInManager.getPluginsDirectory()can now only be used to access the read-only files from the exploded war in the cache folder. If you need to access the shared config folder for your Building Block, you can use PlugInUtil.getConfigDirectory(). Calling methods like ServletContent.getRealPath() will point to the cache folder, so be sure that any method you are calling that returns a path or a file is returning what you expect it to. As an example, with prior versions of Learn you could use the following code to write to a file in your plugin’s folder and create a configuration file: PlugInManager manager = PlugInManagerFactory.getInstance(); File myDir = manager.getPlugInDir( manager.getPlugIn( &quot;myVendorId&quot;,&quot;myB2Handle&quot; ) ); File myConfigDir = new File( myDir, &quot;config&quot; ); File myConfigFile = new File( myConfigDir, &quot;config.txt&quot; ); // read/write myConfigFile  You will now need to re-write the above code code to look like the following: File myConfigDir = PlugInUtil.getConfigDirectory( &quot;myVendorId&quot;, &quot;myB2Handle&quot;); File myConfigFile = new File(myConfigDir, “config.txt”); // read/write myConfigFile  If you just need to read from a file that is included with in your Building Block, you can use the following code snippet to access the cached copy. PlugInManager manager = PlugInManagerFactory.getInstance(); File myDir = manager.getPlugInDir( manager.getPlugIn( &quot;myVendorId&quot;,&quot;myB2Handle&quot; ) ); File myStaticDirectory = new File (myDir, &quot;webapp/myStaticStuff&quot;); // read from myStaticDirectory - files as originally present in war file  See the bb-config.properties section in Developer Virtual Machine - DVM for how to configure your DVM to behave like Learn SaaS in regards to the shared content folder. Note: we no longer provide a local DVM. You must contact us for a special build of the AWS AMI. Eventually, all write access to the shared folder will be phased out, and write access for logging will be limited to the log directory returned by PlugInUtil.getLogDirectory(). Prior to this change, a new way will be documented to achieve the same goal without writing directly to the backend of the server. ","version":null,"tagName":"h2"},{"title":"Logging Changes​","type":1,"pageTitle":"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions","url":"/docs/archive/b2/resources/archive-b2-resources-moving_to_saas#logging-changes","content":"In SaaS, logging is handled a bit differently, as clients will not have back- end access to the system. You can still log to the log directory, but those logs are redirected to Kibana so your Building Block won’t be able to read that log file. There will be access to the logs through the System Admin panel. In order to see your B2s logs in Kibana-Elasticsearch, the only SaaS interface for log files, your B2 must do the following: Write the log files to the directory returned by blackboard.platform.plugin.PlugInUtil.getLogDirectory.PlugInUtil (Building Blocks API 3000.1.0) Typically looks like &lt;blackboard home&gt;/logs/plugins/&lt;vendorId&gt;-&lt;handle%gt;/...Read the API documentation on how to get write permission. Use this format, with four columns that are pipe separated: 2016-03-15 01:00:00 | DEBUG | 41:c.b.c.i.task.UsageReportingTask | Generating Usage Report... 2016-03-15 01:00:00 | ERROR | 68:o.s.s.support.MethodInvokingRunnable | Invocation of method 'doUsageReport' on target class ...failed java.lang.NullPointerException: null at com.blackboard.consulting.internships.task.UsageReportingTask.getFirstTimeActivationDateModified(UsageReportingTask.java:68)  The b2 logging configuration in the logback.xml file that produces this log format is: &lt;appender ... &gt; ... &lt;encoder&gt; &lt;pattern&gt;%date{yyyy-MM-dd HH:mm:ss} | %-5level | %-45(%L:%logger{40}) | %m%n%ex{10}&lt;/pattern&gt; &lt;/encoder&gt; ... &lt;/appender&gt;  Sample logging code that works in a SaaS environment. ","version":null,"tagName":"h2"},{"title":"Statelessness​","type":1,"pageTitle":"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions","url":"/docs/archive/b2/resources/archive-b2-resources-moving_to_saas#statelessness","content":"The Learn SaaS cloud architecture is built to the best practices of cloud computing. As such, in SaaS, Learn is stateless. As a result, you can no longer rely on HttpSession persisting across requests. As a result, Building Blocks that synchronize data on sessions will need to be refactored. You can still use BbSession.setGlobalKey() to store data, but you will need to be cognizant of the size of the data, as this is stored in the database. As an example, if you currently employ code like the following to store an object in the session: request.getSession().setAttribute( &quot;myKey&quot;, &quot;myValue&quot; ); request.getSession().setAttribute( &quot;myObjectKey&quot;, myObject );  You will need to refactor to look like this: ContextManagerFactory.getInstance().getContext().getSession().setGlobalKey(&quot;myVendorId.myB2Handle.myKey&quot;, &quot;myValue&quot; );  Non-String values need to be serialized to save on the BbSession - refactor to avoid if at all possible. ","version":null,"tagName":"h2"},{"title":"Java 11​","type":1,"pageTitle":"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions","url":"/docs/archive/b2/resources/archive-b2-resources-moving_to_saas#java-11","content":"Blackboard Learn SaaS runs on Java 11, as of Learn 3800. As a result, Building Block that are to be installed in the cloud, or on 9.1 Q2 2020 or later, need to be built with Java 11. For more information see 8 steps to prepare for Java 11. ","version":null,"tagName":"h2"},{"title":"Tomcat 8​","type":1,"pageTitle":"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions","url":"/docs/archive/b2/resources/archive-b2-resources-moving_to_saas#tomcat-8","content":"Tomcat 8 introduces a few new complexities to the Building Block development process. This move was an opportunity to re-imagine how the Learn application startup performance could be improved. This work has been extremely successful, but requires some refactoring of your code. ","version":null,"tagName":"h2"},{"title":"JSP Precompilation​","type":1,"pageTitle":"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions","url":"/docs/archive/b2/resources/archive-b2-resources-moving_to_saas#jsp-precompilation","content":"It is expected that going forward, all Building Blocks will precompile JSPs. This simple step will assure that your JSP files render properly in Blackboard Learn. All bundled Building Blocks are required to take this step, while currently optional, this could become mandatory in the future. This blog post describes one way to precompile your Java Server Pages when using Gradle. ","version":null,"tagName":"h3"},{"title":"bb-context-config.properties​","type":1,"pageTitle":"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions","url":"/docs/archive/b2/resources/archive-b2-resources-moving_to_saas#bb-context-configproperties","content":"Tomcat 8.5 is substantially more configurable in the way that you can implement jar scanning. This file lives in the WEB-INF directory of your Building Block and provides the following options: com.blackboard.tomcat.servletcontainer.jarscanner.tldJars​ Because you should be precompiling your JSP files, this will normally be left blank. If on-demand JSP compilation is used, this may be set to a Java regular expression of jar file names. You should only include the jar files containing the TLD files needed by the non-compiled JSP files. The patter can include the template variable @CORE_TLD_PATTERN@, which will resolve to a regular expression matching all Blackboard jar files containing TLDs. Here are a few examples: RECOMMENDED: Building Block uses several Blackboard Tag Libraries com.blackboard.tomcat.servletcontainer.jarscanner.tldJars=@CORE_TLD_PATTERN@  Default com.blackboard.tomcat.servletcontainer.jarscanner.tldJars=  Building Block uses Struts and the bbNG Tags com.blackboard.tomcat.servletcontainer.jarscanner.tldJars=bb- taglibs.jar|struts-taglib-.*\\\\.jar  Building Block uses several Blackboard libraries and Struts com.blackboard.tomcat.servletcontainer.jarscanner.tldJars=@CORE_TLD_PATTERN@|s truts-taglib-.*\\\\.jar  com.blackboard.tomcat.servletcontainer.jarscanner.pluggabilityJars​ Set this to a Java regular expression of jar file names that contain web fragments, ServletContainerInitializers (SCIs), and other classes with annotations defined in the Servlet 3.1 specifications if they are used by the Building Block.The pattern can contain the template variable@CORE_PLUGGABILITY_PATTERN@, which will resolve to a regular expression that matches all Blackboard jar files containing such components. Here is an example: A Building Block contains classes that implement Spring's WebApplicationInitializer com.blackboard.tomcat.servletcontainer.jarscanner.pluggabilityJars=spring- web-.*\\\\.jar  com.blackboard.tomcat.servletcontainer.context.containerSciFilter​ This Java regular expression should list all SCIs in the CLASSPATH that arenot used by the Building Block. The default value is ^.*$, which matches ALL SCIs and assumes that the Building Block does not use any. Examples: Building Block does not use SCIs and does not have any uncompiled jsps com.blackboard.tomcat.servletcontainer.context.containerSciFilter=^.*$  If for some reason, your JSP is not compiled, use com.blackboard.tomcat.servletcontainer.context.containerSciFilter=^.*(?&lt;!\\\\.JasperInitializer)$  If the JSPs are compiled, but your code relies on classes that implement Spring's WebAppplicationInitializer com.blackboard.tomcat.servletcontainer.context.containerSciFilter=^.*(?&lt;!\\\\.SpringServletContainerInitializer)$  com.blackboard.tomcat.servletcontainer.context.processTldsOnStartup​ This is not required to be in the bb-context-config.properties file. You would include this and set it to true only if the Building Block or one of the jar files it contains defines a listener in a TLD that the Building Block requires. com.blackboard.tomcat.servletcontainer.context.processTldsOnStartup=true  Here is a final example of a typical /WEB-INF/bb-context-config.properties file: com.blackboard.tomcat.servletcontainer.jarscanner.tldJars= com.blackboard.tomcat.servletcontainer.jarscanner.pluggabilityJars= com.blackboard.tomcat.servletcontainer.context.containerSciFilter=^.*$  If you see errors like: Unable to compile &lt;myclass&gt; root cause: INFO | jvm 1 | 2018/02/06 00:51:17 | java.lang.NullPointerException INFO | jvm 1 | 2018/02/06 00:51:17 | at org.apache.jasper.JspCompilationContex t.getTldResourcePath(JspCompilationContext.java:566) INFO | jvm 1 | 2018/02/06 00:51:17 | at org.apache.jasper.compiler.Parser.parseTaglibDirective  try adding making your bb-config-context.properties file look like this: com.blackboard.tomcat.servletcontainer.jarscanner.tldJars=@CORE_TLD_PATTERN@ com.blackboard.tomcat.servletcontainer.jarscanner.pluggabilityJars= com.blackboard.tomcat.servletcontainer.context.containerSciFilter=^.*(?&lt;!\\\\.JasperInitializer)$  ","version":null,"tagName":"h3"},{"title":"web.xml​","type":1,"pageTitle":"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions","url":"/docs/archive/b2/resources/archive-b2-resources-moving_to_saas#webxml","content":"Your Building Block should be using Web App version 3.0, and requires metadata-complete to be set. By default and in most cases, this should be set to true for best performance. Set this to false ONLY if your Building Block uses annotation-based web_xml extensions as defined in the Servlet 3.1 specification or if your jar files should be scanned for web-fragment.xml. These are some of the annotations that require the metadata-complete attribute to be set to false: WebServletWebFilterWebInitParamWebListenerMultipartConfigServletSecurityHttpConstraintHttpMethodConstraintDeclareRolesEJBEJBsResourceResourcesPersistenceContextPersistentContextsPersistenceUnitPersistenceUnitsPostConstructPreDestroyRunAsWebServiceRefWebServiceRefs Some of these annotations, like PostContruct, PreDestroy, and Resource, only require the setting to be false if they are placed in an object whose life- cycle is managed by the container, such as a Servlet or a Listener. Here is an example of what this will look like in your web.xml file: &lt;web-app xmlns=&quot;[http://java.sun.com/xml/ns/javaee](https://community.blackboa rd.com/external-link.jspa?url=http%3A//java.sun.com/xml/ns/javaee)&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web- app_3_0.xsd&quot; version=&quot;3.0&quot; metadata-complete=&quot;true&quot;&gt;  In addition to metadata-complete, another new tag should be included at the end of the web.xml file: absolute-ordering. Generally, this should be an empty tag for best performance. If web fragments are used, the ones that are required should be listed explicitly her to to avoid unnecessary initialization of other unused fragments in the class path. For example: The Building Block does NOT use web fragments &lt;absolute-ordering/&gt;  The Building block uses web fragments from the spring-web jar &lt;absolute-ordering&gt; &lt;name&gt;spring_web&lt;/name&gt; &lt;/absolute-ordering&gt;  ","version":null,"tagName":"h2"},{"title":"Faster Startup​","type":1,"pageTitle":"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions","url":"/docs/archive/b2/resources/archive-b2-resources-moving_to_saas#faster-startup","content":"When declaring servlets in web.xml, the &lt;load-on-startup&gt; tag allows you to decide when a servlet is loaded into memory. The default value is to load at first access, but that is not always appropriate for every situation. The following table illustrates the tags and their meanings. Be sure to select the one that is right for your Building Block. Tag Value\tDescription&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\tLoad the servlet during system initialization. &lt;load-on-startup&gt;-1&lt;/load-on-startup&gt;\tLoad the servlet the first time it is accessed. &lt;load-on-startup&gt;-9876&lt;/load-on-startup&gt;\tLoad the servlet immediately following the Learn system initialization Be sure to evaluate your individual integration before deferring your startup. If this or another Building Block depends on the servlet code being registered or if this servlet must be live prior to the system starting for user access, deferring startup is not appropriate. Deferring all of your servlets to load immediately following system startup will definitely make the system available to users more quickly, though one should note that those user requests might be a bit slower as all of the servlets are starting. In addition, it is important to note that should a user access a servlet that has been deferred and not yet started, it will load at that time, so there is no risk of a servlet being unavailable should the process still be underway. If you are executing other startup logic inside something such as a ServletContextListener's contextInitialized method and that logic is not 100% required to be executed before user activity then please defer it by calling ContextInitThreadRunner.startThread(Thread) or .startDaemonThread(Thread). Here is a snippet from the Javadoc explaining this method: /** * This method can be used in place of thread.start() when you are starting a thread typically during system startup * and you do not absolutely NEED that thread to start immediately. Once the system has completed normal startup of * all webapps (b2s) and is ready to accept requests, any threads registered via this method will be started. &lt;br&gt; * &lt;br&gt; * It is safe to call this at any point in time though - if the server has already started then this will merely start * the thread.&lt;br&gt;` * &lt;br&gt; * The reason we are doing this is to make sure all resources can be dedicated to pure startup tasks and not diverted * to 'background' activity, thus getting the system to a ready state a bit faster. */  ","version":null,"tagName":"h2"},{"title":"URL Encoding​","type":1,"pageTitle":"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions","url":"/docs/archive/b2/resources/archive-b2-resources-moving_to_saas#url-encoding","content":"Tomcat 8.5.12 and later releases of Tomcat 8.5.x by default does not allow curly braces ( { } ) or vertical bars, often referred to as pipes ( | ) in URLs. For backward compatibility, Tomcat provides a way to override this behavior by allowing a system property tomcat.util.http.parser.HttpParser.requestTargetAllow to be defined. Please be advised that this exposes the application to a known security issue. Future versions of Tomcat may not support this override. Therefore, all B2s must url-encode these characters. For example, an URL like http://myuniversity.blackboard.com/webapps/myb2/appController?options={x|y} must be written by the application as http://myuniversity.blackboard.com/webapps/myb2/appController?options=%7bx%7cy%7d. Otherwise, Tomcat will reject the request. ","version":null,"tagName":"h2"},{"title":"Permissions​","type":1,"pageTitle":"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions","url":"/docs/archive/b2/resources/archive-b2-resources-moving_to_saas#permissions","content":"As Blackboard continues to modernize the Blackboard Learn platform and move services out of the Learn code line and into microservices, the need to secure the application from both accidental and malicious actions, the properties granted to Building Block integrations is necessarily tightening. This is being addressed in a phased manner, with the intent of providing third-party developers ample runway for adjusting to the new restrictions. As new restrictions are added, this page will list them, so be sure you are following this page to receive updates. Permission\tMitigating Factors\tCurrent Action**java.security.AllPermission Filtered Out java.lang.RuntimePermission\tcreateSecurityManager, setSecurityManager\tFiltered Out java.lang.RuntimePermission\taction implying createSecurityManager or setSecurityManager\tWarning Message java.util.PropertyPermission\twrite\tWarning Message java.io.FilePermission\tALL FILES\tWarning Message Many Building Blocks rely on the ALL FILES permission for writing to the file system. This will be filtered out soon. The Building Block should request explicit file system permissions and utilize the advice in this guide when writing to log files and config directories. To illustrate the change, here is an example of a bad permission and a good permission for writing to a log file from a Building Block. BAD​ &lt;permission type=&quot;java.io.FilePermission&quot;name=&quot;&amp;lt;&amp;lt;ALLFILES&amp;gt;&amp;gt;&quot; actions=&quot;read,write,delete,wxecute&quot;/&gt;  GOOD​ ( A couple examples. See ALL FILES No More for a full set.) &lt;permission type=&quot;java.io.FilePermission&quot; name=&quot;BB_HOME/-&quot; actions=&quot;read,write,delete&quot;/&gt; &lt;permission type=&quot;java.io.FilePermission&quot; name=&quot;BB_HOME/logs/&quot; actions=&quot;read,write,delete&quot;/&gt;  ","version":null,"tagName":"h2"},{"title":"Original UI​","type":1,"pageTitle":"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions","url":"/docs/archive/b2/resources/archive-b2-resources-moving_to_saas#original-ui","content":"Original courses run in an iframe on Learn SaaS. This shouldn’t affect your Building Block, except in the two following cases: If you set top.document.location or top.location.href or any other similar settings that change the top page for the browser, your Building Block will not display properly. You can use window.location instead.HTML form tags with target=&quot;_top&quot;, or target=&quot;_blank&quot; will break out of the Ultra Original course peek panel. Change these to target=&quot;_self&quot;.To meet accepted best practices in web design, there is a new maximum browser width of 1920px. Make sure you plan accordingly.B2s using the bbUI and bbData tag libraries should be refactored were at all possible to use bbNG. ","version":null,"tagName":"h2"},{"title":"Ultra UI​","type":1,"pageTitle":"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions","url":"/docs/archive/b2/resources/archive-b2-resources-moving_to_saas#ultra-ui","content":"There are currently no extension points for Building Blocks in the Ultra UI. ","version":null,"tagName":"h2"},{"title":"Continuous Delivery​","type":1,"pageTitle":"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions","url":"/docs/archive/b2/resources/archive-b2-resources-moving_to_saas#continuous-delivery","content":"Blackboard strives to deliver updates every two weeks. As a result, you should be using only public APIs whenever possible, as the continuous delivery model, coupled with the possibility of undocumented private API changes without warning, makes using private APIs extremely risky. ","version":null,"tagName":"h2"},{"title":"Installing Building Blocks in Learn SaaS​","type":1,"pageTitle":"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions","url":"/docs/archive/b2/resources/archive-b2-resources-moving_to_saas#installing-building-blocks-in-learn-saas","content":"There is no way to install a Building Block in Learn SaaS, regardless of the User Interface you are using. If you have licensed Learn SaaS Plus or Advantage, you do have the ability to install Building Blocks, but you must work with support to schedule the installation ","version":null,"tagName":"h2"},{"title":"Update a Building Block for TinyMCE 5​","type":1,"pageTitle":"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions","url":"/docs/archive/b2/resources/archive-b2-resources-moving_to_saas#update-a-building-block-for-tinymce-5","content":"In Learn 3900.X we intend to implement an updated content editor, TinyMCE 5, in the Original Course View and Original Experience of Learn. (*Forward-looking statement applies.) This editor changes certain patterns of UI with more of them living in an overlay modal rather than pop-up window after pop-up window. This change has led to required changes that are specific to B2s that have a Mashup. Cancel buttons in these mashups that expect to close a window will actually now need to close on overlay modal. The overlay modal will also include a close action button, an “x” in the interface, which will also work to close the window in case the cancel button doesn’t work; but if a cancel button in a mashup B2 is going to continue to work, the code will need to be updated. The code below needs to be added for the cancel button. This code assumes that a B2 is being designed that is compatible with both the new editor and the older one, Learn v 3900.x vs v3800.x and earlier. if ( parent &amp;&amp; parent.tinymce &amp;&amp; parent.tinymce.activeEditor &amp;&amp; parent.tinymce.activeEditor.windowManager ) { parent.tinymce.activeEditor.windowManager.close(); } else { // Call the JavaScript you currently use for Cancel here. }  If the B2 will only be compatible with the updated editor and not backwards compatible, the else section isn’t required: if ( parent &amp;&amp; parent.tinymce &amp;&amp; parent.tinymce.activeEditor &amp;&amp; parent.tinymce.activeEditor.windowManager ) { parent.tinymce.activeEditor.windowManager.close(); }  *Statements regarding our product development initiatives, including new products and future product upgrades, updates or enhancements represent our current intentions, but may be modified, delayed or abandoned without prior notice and there is no assurance that such offering, upgrades, updates or functionality will become available unless and until they have been made generally available to our customers. ","version":null,"tagName":"h2"},{"title":"B2 Changes Required for SameSite Issues with B2 Mashups​","type":1,"pageTitle":"Preparing Your Building Blocks For Learn SaaS and Newer Learn Versions","url":"/docs/archive/b2/resources/archive-b2-resources-moving_to_saas#b2-changes-required-for-samesite-issues-with-b2-mashups","content":"Why These Changes Are Necessary​ As of mid/late April 2021 Google Chrome 90 does not consider a GET request &quot;safe&quot; and blocks different site cookies even for a GET request. If an external server used GET with parameters to send data to a Learn server, that will no longer work because the session cookies are blocked. Hence, if your B2 provides a mashup that can be used in an Original course, you must implement a solution similar to the following. You can no longer use a GET as a workaround for SameSite issues. Or, you can migrate users to an LTI solution. The next paragraph gives more background. Historically a Building Block can launch from content created by a Blackboard Learn B2 to a remote server where some content is selected to push back to Blackboard Learn. With the advent of browsers now enforcing a SameSite cookie policy the remote server cannot then make a request back to Learn with the cookies necessary for that Learn session due to stringent browser SameSite enforcement. For this discussion we’ll describe how that impacts a B2 mashup and describe a solution that uses JavaScript to get around the browser’s enforcement of the SameSite policy. You will need to examine the rest of your B2 functionality to determine if you need to make similar changes in other areas that get content from your server. Overview of the Changes​ As an example, we will discuss a B2 that provides a mashup that does a launch to get content from a mashup content provider, say mashupsource.com. The user used to be able to select content on mashupsource.com which then did a form POST, or a GET back to the B2 endpoint. Because browsers now enforce the SameSite policy by default,the form POST will no longer work. Some browsers recently have also become more stringent with 3rd-party cookies and GET requests. The browser will not send the Learn Server (LearnServerFQDN) cookies to LearnServerFQDN when the cookies are on a request from any source other than the domain of the LearnServer, instead it blocks them. Hence you need a way update Learn Server content without a cross-site HTTP request from mashupsource.com to the Learn Server. The following describes how you can do this. Instead of redirecting the browser to a page on mashupsource.com, that page needs to load an iframe, provided by your B2, with the source being mashupsource.com. The user will interact with mashupsource.com within that iframe and when done, that page will use JavaScript to postMessage to the parent window with whatever the result of the user’s interaction with mashupsource.com is. JavaScript in the parent (authored by mashupsource developers, rendered by your B2 as part of your mashup) will accept that message (after validating it is coming from mashupsource.com) and then from within this window (the one launched from LearnServerFQDN/B2…) it will then POST (or GET) back to the Learn B2 endpoint. Since this is a POST (or GET) from a page coming from the same origin it will work. These changes are compatible with the current and future releases of Blackboard Learn. Here's a diagram showing the message chain from a mashupsource.com to the B2 on the Learn server: [window/iframe: LearnServerFQDN – the Learn Original Course page with the editor on it [iframe:LearnServerFQDN/B2 providing mashup (receive postMessage then POST or GET to appropriate B2 endpoint) [iframe src=mashupsource.com (postMessage to parent)] ] ]  Note the brackets are indicating how the iframes are nested. Summary - If your B2 provides a mashup for use in an Original Course's TinyMCE editor you will need to re-architect as described above, or mirgrate users to an LTI-based solution.   Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h2"},{"title":"Blog Events","type":0,"sectionRef":"#","url":"/docs/blackboard/caliper/events/blog-events","content":"","keywords":"","version":null},{"title":"BlogEvent​","type":1,"pageTitle":"Blog Events","url":"/docs/blackboard/caliper/events/blog-events#blogevent","content":"object.id - the primary key for the Blog action - Created, Modified, Commented extensions - contains a tag called bb:user.externalId with the batch_uid for the user ","version":null,"tagName":"h3"},{"title":"Sample Payload​","type":1,"pageTitle":"Blog Events","url":"/docs/blackboard/caliper/events/blog-events#sample-payload","content":"Here is a sample of what an event payload might look like: { &quot;sensor&quot;: &quot;530efc49-6b9f-40a6-918b-966ee83a744c&quot;, &quot;sendTime&quot;: &quot;2021-01-05T16:55:05.235Z&quot;, &quot;dataVersion&quot;: &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot;, &quot;data&quot;: [ { &quot;@context&quot;: [ &quot;http://caliper.blackboard.com/ctx/caliper/v1/Context&quot;, &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot; ], &quot;type&quot;: &quot;http://caliper.blackboard.com/caliper/v1/BlogEvent&quot;, &quot;id&quot;: &quot;a6fa63b8-9db7-44f8-aff8-63b94b952ead&quot;, &quot;actor&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/users/9c60a9cdb3144d1aa77ff56c34ef248b&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_227_1&quot;, &quot;bb:user.externalId&quot;: &quot;scott.hurrey@myschool.edu&quot; } }, &quot;action&quot;: &quot;Created&quot;, &quot;object&quot;: { &quot;@context&quot;: [ &quot;http://caliper.blackboard.com/ctx/caliper/v1/Context&quot;, &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot; ], &quot;type&quot;: &quot;http://caliper.blackboard.com/caliper/v1/Blog&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/blog/_39_1&quot;, &quot;name&quot;: &quot;Test Blog&quot;, &quot;description&quot;: &quot;&quot;, &quot;blogType&quot;: &quot;INDIVIDUAL&quot;, &quot;journal&quot;: false, &quot;pointsPossible&quot;: 100, &quot;extensions&quot;: {} }, &quot;generated&quot;: { &quot;@context&quot;: [ &quot;http://caliper.blackboard.com/ctx/caliper/v1/Context&quot;, &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot; ], &quot;type&quot;: &quot;http://caliper.blackboard.com/caliper/v1/BlogPost&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/blog/_39_1/post/_40_1&quot;, &quot;name&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot;, &quot;anonymous&quot;: false, &quot;attachedFilesCount&quot;: 0, &quot;length&quot;: 51, &quot;extensions&quot;: {} }, &quot;eventTime&quot;: &quot;2021-01-05T16:55:03.225Z&quot;, &quot;edApp&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/applications/learn&quot;, &quot;type&quot;: &quot;SoftwareApplication&quot; }, &quot;membership&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/courses/e9c09e39c7844ae3b2ed677ac4fd90d7/members/9c60a9cdb3144d1aa77ff56c34ef248b&quot;, &quot;type&quot;: &quot;Membership&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_124_1&quot;, &quot;bb:course.externalId&quot;: &quot;og-101&quot;, &quot;bb:user.id&quot;: &quot;_227_1&quot;, &quot;bb:user.externalId&quot;: &quot;scott.hurrey@myschool.edu&quot; }, &quot;member&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/users/9c60a9cdb3144d1aa77ff56c34ef248b&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_227_1&quot;, &quot;bb:user.externalId&quot;: &quot;scott.hurrey@myschool.edu&quot; } }, &quot;organization&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/courses/e9c09e39c7844ae3b2ed677ac4fd90d7&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_124_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;og-101&quot; }, &quot;roles&quot;: [&quot;Learner&quot;], &quot;status&quot;: &quot;Active&quot; }, &quot;federatedSession&quot;: { &quot;startedAtTime&quot;: &quot;2021-01-05T16:55:03.225Z&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/sessions/5118E091FCBDF29709BBD9D6F6758679&quot;, &quot;type&quot;: &quot;LtiSession&quot;, &quot;name&quot;: &quot;5118E091FCBDF29709BBD9D6F6758679&quot;, &quot;dateCreated&quot;: &quot;2021-01-05T16:55:03.225Z&quot;, &quot;user&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/users/9c60a9cdb3144d1aa77ff56c34ef248b&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_227_1&quot;, &quot;bb:user.externalId&quot;: &quot;scott.hurrey@myschool.edu&quot; } } }, &quot;extensions&quot;: {}, &quot;session&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/sessions/5118E091FCBDF29709BBD9D6F6758679&quot;, &quot;type&quot;: &quot;Session&quot; } } ] }  Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Learn Caliper Event Guide","type":0,"sectionRef":"#","url":"/docs/blackboard/caliper/events/caliper-events-guide","content":"","keywords":"","version":null},{"title":"SessionEvent​","type":1,"pageTitle":"Learn Caliper Event Guide","url":"/docs/blackboard/caliper/events/caliper-events-guide#sessionevent","content":"Action\tActor\tWhenLog In\tAll Users\tImmediately Log Out\tAll Users\tImmediately Session Time Out\tAll Users\tImmediately For more information, see Session Events. ","version":null,"tagName":"h3"},{"title":"ViewEvent​","type":1,"pageTitle":"Learn Caliper Event Guide","url":"/docs/blackboard/caliper/events/caliper-events-guide#viewevent","content":"Action\tActor\tWhenClick Content File Link\tAll Users\tImmediately Click External Link\tAll Users\tImmediately Click Assignment Link\tAll Users\tImmediately Click Discussion Link\tAll Users\tImmediately For more information, see View Events. ","version":null,"tagName":"h3"},{"title":"LTIEvent​","type":1,"pageTitle":"Learn Caliper Event Guide","url":"/docs/blackboard/caliper/events/caliper-events-guide#ltievent","content":"Action\tActor\tWhenClick LTI Link\tAll Users\tImmediately Return from LTI Link\tAll Users\tImmediately For more information, see LTI Events. ","version":null,"tagName":"h3"},{"title":"AssignableEvent​","type":1,"pageTitle":"Learn Caliper Event Guide","url":"/docs/blackboard/caliper/events/caliper-events-guide#assignableevent","content":"Action\tActor\tWhenStart an Assignment\tStudent\tImmediately Start a Group Assignment\tStudent\tImmediately Submit an Assignment\tStudent\tImmediately Submit a Group Assignment\tStudent\tImmediately For more information, see Assignable Events. ","version":null,"tagName":"h3"},{"title":"AssessmentEvent​","type":1,"pageTitle":"Learn Caliper Event Guide","url":"/docs/blackboard/caliper/events/caliper-events-guide#assessmentevent","content":"Action\tActor\tWhenStart a Test\tStudent\tImmediately Submit a Test\tStudent\tImmediately For more information, see Assessment Events. ","version":null,"tagName":"h3"},{"title":"AssessmentItemEvent​","type":1,"pageTitle":"Learn Caliper Event Guide","url":"/docs/blackboard/caliper/events/caliper-events-guide#assessmentitemevent","content":"Action\tActor\tWhenStart a Test Question\tStudent\tImmediately Submit a Test Question\tStudent\tImmediately For more information see, Assessment Events. ","version":null,"tagName":"h3"},{"title":"ForumEvent​","type":1,"pageTitle":"Learn Caliper Event Guide","url":"/docs/blackboard/caliper/events/caliper-events-guide#forumevent","content":"Action\tActor\tWhenCreate a Discussion Thread Top Message\tInstructor\tImmediately Update Discussion Thread Name, Points Possible, or Message\tInstructor\tImmediately Delete a Discussion Thread Top Message\tInstructor\tImmediately Post a Thread\tAll Users\tImmediately Save a Thread as Draft\tAll Users\tImmediately Post an Assignment Conversation Comment\tAll Users\tImmediately Post a Group Thread\tAll Users\tImmediately Post a Group Conversation Comment\tAll Users\tImmediately Delete a Message\tInstructor\tImmediately For more information, see Forum Events. ","version":null,"tagName":"h3"},{"title":"GradeEvent​","type":1,"pageTitle":"Learn Caliper Event Guide","url":"/docs/blackboard/caliper/events/caliper-events-guide#gradeevent","content":"Action\tActor\tWhenSubmit an Assignment\tStudent\tImmediately Submit a Group Assignment\tStudent\tImmediately Submit a Test\tStudent\tImmediately Enter Grade, Comments, or Feedback\tInstructor\tNightly Update Feedback\tAll Users\tNightly Post a Manual Grade\tInstructor\tNightly Override a Grade\tInstructor\tNightly Clear an Overridden Grade\tInstructor\tNightly Delete an Attempt\tInstructor\tNightly For more information, see Grade Events. ","version":null,"tagName":"h3"},{"title":"CalculatedGradeSnapshotEvent​","type":1,"pageTitle":"Learn Caliper Event Guide","url":"/docs/blackboard/caliper/events/caliper-events-guide#calculatedgradesnapshotevent","content":"Action\tActor\tWhenTrigger Calculated Grade Re-Calculation\tInstructor\tNightly For more information, see Calculated Grade Snapshot Events. ","version":null,"tagName":"h3"},{"title":"ContentEvent​","type":1,"pageTitle":"Learn Caliper Event Guide","url":"/docs/blackboard/caliper/events/caliper-events-guide#contentevent","content":"Action\tActor\tWhenCreate or Delete Folder\tInstructor\tImmediately Update Folder: Name, Description, Availability, Show Dates, Hide Dates\tInstructor\tImmediately Create or Delete Link\tInstructor\tImmediately Update Link: Name, URL, Description, Availability, Show Dates, Hide Dates\tInstructor\tImmediately Create or Delete LTI\tInstructor\tImmediately Update LTI: Name, URL, Description, Parameters, Availability, Points Possible,Due Date, Show Dates, Hide Dates\tInstructor\tImmediately Create or Delete Assignment\tInstructor\tImmediately Update Assignment: Name, Availability, Points Possible, Due Date, Show Dates, Hide Dates, Instructions, Attempts Allowed, Scoring Method\tInstructor\tImmediately Create or Delete Discussion Forum Link\tInstructor\tImmediately Update Discussion Forum Link: Name, Availability, Due Date, Show Dates, Hide Dates\tInstructor\tImmediately Create or Delete Content File (Upload)\tInstructor\tImmediately Update Content File (Upload): Name, Availability, Show Dates, Hide Dates, Instructions\tInstructor\tImmediately Create or Delete Test\tInstructor\tImmediately Update Test: Name, Availability, Points Possible, Due Date, Show Dates, Hide Dates, Instructions, Attempts Allowed, Scoring Method\tInstructor\tImmediately Create or Delete Document\tInstructor\tImmediately Update Document: Name, Availability, Show Dates, Hide Dates, Instructions\tInstructor\tImmediately Create or Delete Document File\tInstructor\tImmediately Update Document File: Name, Availability, Show Dates, Hide Dates, Instructions\tInstructor\tImmediately Add Questions to Assignment or Test\tInstructor\tImmediately For more information, see Content Events. ","version":null,"tagName":"h3"},{"title":"CourseGroupEvent​","type":1,"pageTitle":"Learn Caliper Event Guide","url":"/docs/blackboard/caliper/events/caliper-events-guide#coursegroupevent","content":"Action\tActor\tWhenCreate or Delete Group\tInstructor\tImmediately Update Group: Assignment, Discussion Forum, or Test\tInstructor\tImmediately For more information, see Course Group Events. ","version":null,"tagName":"h3"},{"title":"BlogEvent​","type":1,"pageTitle":"Learn Caliper Event Guide","url":"/docs/blackboard/caliper/events/caliper-events-guide#blogevent","content":"Action\tActor\tWhenPost a Blog Entry in an Original Experience Course\tStudent\tImmediately For more information, see Blog Events. ","version":null,"tagName":"h3"},{"title":"WikiEvent​","type":1,"pageTitle":"Learn Caliper Event Guide","url":"/docs/blackboard/caliper/events/caliper-events-guide#wikievent","content":"Action\tActor\tWhenPost to a Wiki in an Original Experience Course\tStudent\tImmediately For more information, see Wiki Events. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Assignable Events","type":0,"sectionRef":"#","url":"/docs/blackboard/caliper/events/assignables-events","content":"","keywords":"","version":null},{"title":"AssignableEvent - Assignment​","type":1,"pageTitle":"Assignable Events","url":"/docs/blackboard/caliper/events/assignables-events#assignableevent---assignment","content":"group.courseNumber - the course batch_uid (i.e. the ID sent in by LIS or Data Integration) object.@id - …/gradableItems/id - the primary key for the content ID action - Started, Submitted, Completed ","version":null,"tagName":"h3"},{"title":"AssignableEvent - Group Assignment​","type":1,"pageTitle":"Assignable Events","url":"/docs/blackboard/caliper/events/assignables-events#assignableevent---group-assignment","content":"group.courseNumber - the course batch_uid (i.e. the ID sent in by LIS or Data Integration) object.@id - …/gradableItems/id - the primary key for the content ID extensions.bb:group.users - an array of users in the group. The batchUId field will contain the batch_uid for the user action - Started, Submitted, Completed For a completed group assignment, the course information is located one level lower in group.subOrganizationOf ","version":null,"tagName":"h3"},{"title":"Sample Payload​","type":1,"pageTitle":"Assignable Events","url":"/docs/blackboard/caliper/events/assignables-events#sample-payload","content":"{ &quot;sensor&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot;, &quot;sendTime&quot;: &quot;2021-01-05T14:51:22.739Z&quot;, &quot;dataVersion&quot;: &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot;, &quot;data&quot;: [ { &quot;@context&quot;: &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot;, &quot;type&quot;: &quot;AssignableEvent&quot;, &quot;id&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot;, &quot;actor&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/47fe55cef30441458b7625885e8aee83&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;action&quot;: &quot;Completed&quot;, &quot;object&quot;: { &quot;dateToSubmit&quot;: &quot;2021-01-12T06:59:00.000Z&quot;, &quot;maxAttempts&quot;: 0, &quot;maxSubmits&quot;: 0, &quot;maxScore&quot;: 60, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/gradableItems/_12345_1&quot;, &quot;type&quot;: &quot;AssignableDigitalResource&quot;, &quot;name&quot;: &quot;My Assignable Item&quot;, &quot;creators&quot;: [], &quot;learningObjectives&quot;: [], &quot;keywords&quot;: [] }, &quot;generated&quot;: { &quot;startedAtTime&quot;: &quot;2021-01-05T14:51:14.512Z&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/gradableItems/_12345_1/attempts/_12345_1&quot;, &quot;type&quot;: &quot;Attempt&quot;, &quot;assignable&quot;: { &quot;dateToSubmit&quot;: &quot;2021-01-12T06:59:00.000Z&quot;, &quot;maxAttempts&quot;: 0, &quot;maxSubmits&quot;: 0, &quot;maxScore&quot;: 60, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/gradableItems/_12345_1&quot;, &quot;type&quot;: &quot;AssignableDigitalResource&quot;, &quot;name&quot;: &quot;My Assignable Item&quot;, &quot;creators&quot;: [], &quot;learningObjectives&quot;: [], &quot;keywords&quot;: [] }, &quot;assignee&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/47fe55cef30441458b7625885e8aee83&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;count&quot;: 1 }, &quot;eventTime&quot;: &quot;2021-01-05T14:51:14.512Z&quot;, &quot;edApp&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn&quot;, &quot;type&quot;: &quot;SoftwareApplication&quot; }, &quot;group&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/22fb6a3e811f4bad8a418dcb2caa0a85&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;BIO-101&quot; }, &quot;membership&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/22fb6a3e811f4bad8a418dcb2caa0a85/members/47fe55cef30441458b7625885e8aee83&quot;, &quot;type&quot;: &quot;Membership&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot;, &quot;bb:course.externalId&quot;: &quot;BIO-101&quot;, &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; }, &quot;member&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/47fe55cef30441458b7625885e8aee83&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;organization&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/22fb6a3e811f4bad8a418dcb2caa0a85&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;BIO-101&quot; }, &quot;roles&quot;: [&quot;Learner&quot;], &quot;status&quot;: &quot;Active&quot; }, &quot;federatedSession&quot;: { &quot;startedAtTime&quot;: &quot;2021-01-05T14:51:14.512Z&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/&quot;, &quot;type&quot;: &quot;LtiSession&quot;, &quot;name&quot;: &quot;&quot;, &quot;dateCreated&quot;: &quot;2021-01-05T14:51:14.512Z&quot;, &quot;user&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/47fe55cef30441458b7625885e8aee83&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } } }, &quot;extensions&quot;: {} } ] }  Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h2"},{"title":"Course Group Events","type":0,"sectionRef":"#","url":"/docs/blackboard/caliper/events/course-group-events","content":"","keywords":"","version":null},{"title":"CourseGroupEvent​","type":1,"pageTitle":"Course Group Events","url":"/docs/blackboard/caliper/events/course-group-events#coursegroupevent","content":"extensions - contains bb:group.users with list of course membership ids in the group action - Created or Modified or Deleted ","version":null,"tagName":"h3"},{"title":"Sample Payload​","type":1,"pageTitle":"Course Group Events","url":"/docs/blackboard/caliper/events/course-group-events#sample-payload","content":"Here is a sample of what a payload might look like: { &quot;sensor&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot;, &quot;sendTime&quot;: &quot;2021-01-05T09:37:13.827Z&quot;, &quot;dataVersion&quot;: &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot;, &quot;data&quot;: [ { &quot;@context&quot;: [ &quot;http://caliper.blackboard.com/ctx/caliper/v1/Context&quot;, &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot; ], &quot;type&quot;: &quot;http://caliper.blackboard.com/caliper/v1/CourseGroupEvent&quot;, &quot;id&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot;, &quot;actor&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/a1165a247b9044dc9730620872d11788&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;action&quot;: &quot;Created&quot;, &quot;object&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/a3fe89604fc6437ea381979569cd6d81/groups/_12345_1&quot;, &quot;type&quot;: &quot;Group&quot;, &quot;extensions&quot;: { &quot;bb:group.name&quot;: &quot;Team 2&quot; }, &quot;subOrganizationOf&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/a3fe89604fc6437ea381979569cd6d81&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;BIO-101&quot; }, &quot;members&quot;: [] }, &quot;eventTime&quot;: &quot;2021-01-05T09:37:09.585Z&quot;, &quot;edApp&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn&quot;, &quot;type&quot;: &quot;SoftwareApplication&quot; }, &quot;group&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/a3fe89604fc6437ea381979569cd6d81/groups/_12345_1&quot;, &quot;type&quot;: &quot;Group&quot;, &quot;extensions&quot;: { &quot;bb:group.name&quot;: &quot;Team 2&quot; }, &quot;subOrganizationOf&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/a3fe89604fc6437ea381979569cd6d81&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;BIO-101&quot; }, &quot;members&quot;: [] }, &quot;membership&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/a3fe89604fc6437ea381979569cd6d81/members/a1165a247b9044dc9730620872d11788&quot;, &quot;type&quot;: &quot;Membership&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot;, &quot;bb:course.externalId&quot;: &quot;BIO-101&quot;, &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; }, &quot;member&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/a1165a247b9044dc9730620872d11788&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;organization&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/a3fe89604fc6437ea381979569cd6d81&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;BIO-101&quot; }, &quot;roles&quot;: [], &quot;status&quot;: &quot;Active&quot; }, &quot;federatedSession&quot;: { &quot;startedAtTime&quot;: &quot;2021-01-05T09:37:09.585Z&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/10497B7377117FFD7B5FD7D3EE58227E&quot;, &quot;type&quot;: &quot;LtiSession&quot;, &quot;name&quot;: &quot;10497B7377117FFD7B5FD7D3EE58227E&quot;, &quot;dateCreated&quot;: &quot;2021-01-05T09:37:09.585Z&quot;, &quot;user&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/a1165a247b9044dc9730620872d11788&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } } }, &quot;extensions&quot;: {}, &quot;session&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/10497B7377117FFD7B5FD7D3EE58227E&quot;, &quot;type&quot;: &quot;Session&quot; } } ] }  Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Assessment Events","type":0,"sectionRef":"#","url":"/docs/blackboard/caliper/events/assesment-events","content":"","keywords":"","version":null},{"title":"AssessmentEvent​","type":1,"pageTitle":"Assessment Events","url":"/docs/blackboard/caliper/events/assesment-events#assessmentevent","content":"group.courseNumber - the course batch_uid (i.e. the ID sent in by LIS or Data Integration) object.@id - …/assessments/id - the primary key for the assessment ID action - Started, Completed ","version":null,"tagName":"h3"},{"title":"AssessmentItemEvent​","type":1,"pageTitle":"Assessment Events","url":"/docs/blackboard/caliper/events/assesment-events#assessmentitemevent","content":"group.courseNumber - the course batch_uid (i.e. the ID sent in by LIS or Data Integration) object.@id - …/questions/id - the primary key for the question ID object.ispartOf.@id .../assessments/id - the primary key for the assessment this questions is a part of action - Started, Submitted ","version":null,"tagName":"h3"},{"title":"Sample Payloads​","type":1,"pageTitle":"Assessment Events","url":"/docs/blackboard/caliper/events/assesment-events#sample-payloads","content":"AssessmentEventAssessmentItemEvent ","version":null,"tagName":"h3"},{"title":"1. AssessmentEvent​","type":1,"pageTitle":"Assessment Events","url":"/docs/blackboard/caliper/events/assesment-events#1-assessmentevent","content":"{ &quot;sensor&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot;, &quot;sendTime&quot;: &quot;2021-01-05T14:49:40.609Z&quot;, &quot;dataVersion&quot;: &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot;, &quot;data&quot;: [ { &quot;@context&quot;: &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot;, &quot;type&quot;: &quot;AssessmentEvent&quot;, &quot;id&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot;, &quot;actor&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/a361d45a65564777b98460834687183f&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;action&quot;: &quot;Started&quot;, &quot;object&quot;: { &quot;dateToSubmit&quot;: &quot;2021-01-12T06:59:00.000Z&quot;, &quot;maxAttempts&quot;: 0, &quot;maxSubmits&quot;: 0, &quot;maxScore&quot;: 150, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_12345_1&quot;, &quot;type&quot;: &quot;Assessment&quot;, &quot;name&quot;: &quot;My Test&quot;, &quot;extensions&quot;: { &quot;bb:assessment.categoryId&quot;: &quot;_12345_1&quot;, &quot;bb:assessment.categoryName&quot;: &quot;Assignment&quot;, &quot;bb:contentId&quot;: &quot;_12345_1&quot;, &quot;bb:assessment.gradeableItemId&quot;: &quot;_12345_1&quot;, &quot;bb:assessment.catUserDefined&quot;: &quot;false&quot; }, &quot;creators&quot;: [], &quot;learningObjectives&quot;: [], &quot;keywords&quot;: [], &quot;items&quot;: [] }, &quot;generated&quot;: { &quot;startedAtTime&quot;: &quot;2021-01-05T14:49:36.451Z&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/gradableItems/_12345_1/attempts/_12345_1&quot;, &quot;type&quot;: &quot;Attempt&quot;, &quot;assignable&quot;: { &quot;dateToSubmit&quot;: &quot;2021-01-12T06:59:00.000Z&quot;, &quot;maxAttempts&quot;: 0, &quot;maxSubmits&quot;: 0, &quot;maxScore&quot;: 150, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_12345_1&quot;, &quot;type&quot;: &quot;Assessment&quot;, &quot;name&quot;: &quot;My Test&quot;, &quot;extensions&quot;: { &quot;bb:assessment.categoryId&quot;: &quot;_12345_1&quot;, &quot;bb:assessment.categoryName&quot;: &quot;Assignment&quot;, &quot;bb:contentId&quot;: &quot;_12345_1&quot;, &quot;bb:assessment.gradeableItemId&quot;: &quot;_12345_1&quot;, &quot;bb:assessment.catUserDefined&quot;: &quot;false&quot; }, &quot;creators&quot;: [], &quot;learningObjectives&quot;: [], &quot;keywords&quot;: [], &quot;items&quot;: [] }, &quot;assignee&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/a361d45a65564777b98460834687183f&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;count&quot;: 1 }, &quot;eventTime&quot;: &quot;2021-01-05T14:49:36.451Z&quot;, &quot;edApp&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn&quot;, &quot;type&quot;: &quot;SoftwareApplication&quot; }, &quot;group&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/34f0705416864ca09a34f22f73446686&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;BIO-101&quot; }, &quot;membership&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/34f0705416864ca09a34f22f73446686/members/a361d45a65564777b98460834687183f&quot;, &quot;type&quot;: &quot;Membership&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot;, &quot;bb:course.externalId&quot;: &quot;BIO-101&quot;, &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; }, &quot;member&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/a361d45a65564777b98460834687183f&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;organization&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/34f0705416864ca09a34f22f73446686&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;BIO-101&quot; }, &quot;roles&quot;: [&quot;Learner&quot;], &quot;status&quot;: &quot;Active&quot; }, &quot;federatedSession&quot;: { &quot;startedAtTime&quot;: &quot;2021-01-05T14:49:36.451Z&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/94DD6EFB1B20EBD3B62889A38C7BF590&quot;, &quot;type&quot;: &quot;LtiSession&quot;, &quot;name&quot;: &quot;94DD6EFB1B20EBD3B62889A38C7BF590&quot;, &quot;dateCreated&quot;: &quot;2021-01-05T14:49:36.451Z&quot;, &quot;user&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/a361d45a65564777b98460834687183f&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } } }, &quot;extensions&quot;: {} } ] }  ","version":null,"tagName":"h3"},{"title":"AssessmentItemEvent​","type":1,"pageTitle":"Assessment Events","url":"/docs/blackboard/caliper/events/assesment-events#assessmentitemevent-1","content":"{ &quot;sensor&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot;, &quot;sendTime&quot;: &quot;2021-01-05T14:50:26.769Z&quot;, &quot;dataVersion&quot;: &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot;, &quot;data&quot;: [ { &quot;@context&quot;: &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot;, &quot;type&quot;: &quot;AssessmentItemEvent&quot;, &quot;id&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot;, &quot;actor&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/1a26d8c5b4d44f1db491db1f24407715&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;action&quot;: &quot;Started&quot;, &quot;object&quot;: { &quot;maxAttempts&quot;: 0, &quot;maxSubmits&quot;: 0, &quot;maxScore&quot;: 0, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_12345_1/questions/_12345_1&quot;, &quot;type&quot;: &quot;AssessmentItem&quot;, &quot;creators&quot;: [], &quot;learningObjectives&quot;: [], &quot;keywords&quot;: [], &quot;isPartOf&quot;: { &quot;dateToSubmit&quot;: &quot;2020-12-23T07:59:00.000Z&quot;, &quot;maxAttempts&quot;: 1, &quot;maxSubmits&quot;: 0, &quot;maxScore&quot;: 300, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7cc/assessments/_12345_1&quot;, &quot;type&quot;: &quot;Assessment&quot;, &quot;name&quot;: &quot;My Test&quot;, &quot;extensions&quot;: { &quot;bb:assessment.categoryId&quot;: &quot;_12345_1&quot;, &quot;bb:assessment.categoryName&quot;: &quot;Test&quot;, &quot;bb:assessment.catUserDefined&quot;: &quot;false&quot;, &quot;bb:assessment.gradeableItemId&quot;: &quot;_12345_1&quot; }, &quot;creators&quot;: [], &quot;learningObjectives&quot;: [], &quot;keywords&quot;: [], &quot;items&quot;: [] } }, &quot;generated&quot;: { &quot;startedAtTime&quot;: &quot;2021-01-04T19:13:19.774Z&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_12345_1/questions/_12345_1/attempts/_12345_1&quot;, &quot;type&quot;: &quot;Attempt&quot;, &quot;assignable&quot;: { &quot;maxAttempts&quot;: 0, &quot;maxSubmits&quot;: 0, &quot;maxScore&quot;: 0, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_12345_1/questions/_12345_1&quot;, &quot;type&quot;: &quot;AssessmentItem&quot;, &quot;creators&quot;: [], &quot;learningObjectives&quot;: [], &quot;keywords&quot;: [], &quot;isPartOf&quot;: { &quot;dateToSubmit&quot;: &quot;2020-12-23T07:59:00.000Z&quot;, &quot;maxAttempts&quot;: 1, &quot;maxSubmits&quot;: 0, &quot;maxScore&quot;: 300, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_12345_1&quot;, &quot;type&quot;: &quot;Assessment&quot;, &quot;name&quot;: &quot;My Test&quot;, &quot;extensions&quot;: { &quot;bb:assessment.categoryId&quot;: &quot;_12345_1&quot;, &quot;bb:assessment.categoryName&quot;: &quot;Test&quot;, &quot;bb:assessment.catUserDefined&quot;: &quot;false&quot;, &quot;bb:assessment.gradeableItemId&quot;: &quot;_12345_1&quot; }, &quot;creators&quot;: [], &quot;learningObjectives&quot;: [], &quot;keywords&quot;: [], &quot;items&quot;: [] } }, &quot;assignee&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/1a26d8c5b4d44f1db491db1f24407715&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;count&quot;: 1 }, &quot;eventTime&quot;: &quot;2021-01-04T19:13:19.774Z&quot;, &quot;edApp&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn&quot;, &quot;type&quot;: &quot;SoftwareApplication&quot; }, &quot;group&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/35983609b6084ef88407f98a2263e574&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;BIO-101&quot; }, &quot;membership&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/35983609b6084ef88407f98a2263e574/members/1a26d8c5b4d44f1db491db1f24407715&quot;, &quot;type&quot;: &quot;Membership&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot;, &quot;bb:course.externalId&quot;: &quot;BIO-101&quot;, &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; }, &quot;member&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/1a26d8c5b4d44f1db491db1f24407715&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;organization&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/35983609b6084ef88407f98a2263e574&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;BIO-101&quot; }, &quot;roles&quot;: [&quot;Learner&quot;], &quot;status&quot;: &quot;Active&quot; }, &quot;federatedSession&quot;: { &quot;startedAtTime&quot;: &quot;2021-01-04T19:13:19.774Z&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/DCC5DE08316F7BB7F5355929DD49AE28&quot;, &quot;type&quot;: &quot;LtiSession&quot;, &quot;name&quot;: &quot;DCC5DE08316F7BB7F5355929DD49AE28&quot;, &quot;dateCreated&quot;: &quot;2021-01-04T19:13:19.774Z&quot;, &quot;user&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/1a26d8c5b4d44f1db491db1f24407715&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } } }, &quot;extensions&quot;: {} }, { &quot;@context&quot;: &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot;, &quot;type&quot;: &quot;AssessmentItemEvent&quot;, &quot;id&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot;, &quot;actor&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/1a26d8c5b4d44f1db491db1f24407715&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;action&quot;: &quot;Completed&quot;, &quot;object&quot;: { &quot;maxAttempts&quot;: 0, &quot;maxSubmits&quot;: 0, &quot;maxScore&quot;: 0, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_9058464_1/questions/_9058487_1&quot;, &quot;type&quot;: &quot;AssessmentItem&quot;, &quot;creators&quot;: [], &quot;learningObjectives&quot;: [], &quot;keywords&quot;: [], &quot;isPartOf&quot;: { &quot;dateToSubmit&quot;: &quot;2020-12-23T07:59:00.000Z&quot;, &quot;maxAttempts&quot;: 1, &quot;maxSubmits&quot;: 0, &quot;maxScore&quot;: 300, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_9058464_1&quot;, &quot;type&quot;: &quot;Assessment&quot;, &quot;name&quot;: &quot;My Test&quot;, &quot;extensions&quot;: { &quot;bb:assessment.categoryId&quot;: &quot;_12345_1&quot;, &quot;bb:assessment.categoryName&quot;: &quot;Test&quot;, &quot;bb:assessment.catUserDefined&quot;: &quot;false&quot;, &quot;bb:assessment.gradeableItemId&quot;: &quot;_12345_1&quot; }, &quot;creators&quot;: [], &quot;learningObjectives&quot;: [], &quot;keywords&quot;: [], &quot;items&quot;: [] } }, &quot;generated&quot;: { &quot;startedAtTime&quot;: &quot;2021-01-04T19:13:19.774Z&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_12345_1/questions/_12345_1/attempts/_12345_1/response&quot;, &quot;type&quot;: &quot;MultipleResponseResponse&quot;, &quot;extensions&quot;: { &quot;bb:questionType&quot;: &quot;MultipleAnswer&quot; }, &quot;attempt&quot;: { &quot;startedAtTime&quot;: &quot;2021-01-04T19:13:19.774Z&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_12345_1/questions/_12345_1/attempts/_12345_1&quot;, &quot;type&quot;: &quot;Attempt&quot;, &quot;assignable&quot;: { &quot;maxAttempts&quot;: 0, &quot;maxSubmits&quot;: 0, &quot;maxScore&quot;: 0, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_12345_1/questions/_12345_1&quot;, &quot;type&quot;: &quot;AssessmentItem&quot;, &quot;creators&quot;: [], &quot;learningObjectives&quot;: [], &quot;keywords&quot;: [], &quot;isPartOf&quot;: { &quot;dateToSubmit&quot;: &quot;2020-12-23T07:59:00.000Z&quot;, &quot;maxAttempts&quot;: 1, &quot;maxSubmits&quot;: 0, &quot;maxScore&quot;: 300, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/assessments/_12345_1&quot;, &quot;type&quot;: &quot;Assessment&quot;, &quot;name&quot;: &quot;My Test&quot;, &quot;extensions&quot;: { &quot;bb:assessment.categoryId&quot;: &quot;_12345_1&quot;, &quot;bb:assessment.categoryName&quot;: &quot;Test&quot;, &quot;bb:assessment.catUserDefined&quot;: &quot;false&quot;, &quot;bb:assessment.gradeableItemId&quot;: &quot;_12345_1&quot; }, &quot;creators&quot;: [], &quot;learningObjectives&quot;: [], &quot;keywords&quot;: [], &quot;items&quot;: [] } }, &quot;assignee&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/1a26d8c5b4d44f1db491db1f24407715&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;count&quot;: 1 }, &quot;values&quot;: [] }, &quot;eventTime&quot;: &quot;2021-01-04T19:13:19.774Z&quot;, &quot;edApp&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn&quot;, &quot;type&quot;: &quot;SoftwareApplication&quot; }, &quot;group&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/35983609b6084ef88407f98a2263e574&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;BIO-101&quot; }, &quot;membership&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/35983609b6084ef88407f98a2263e574/members/1a26d8c5b4d44f1db491db1f24407715&quot;, &quot;type&quot;: &quot;Membership&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot;, &quot;bb:course.externalId&quot;: &quot;BIO-101&quot;, &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; }, &quot;member&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/1a26d8c5b4d44f1db491db1f24407715&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;organization&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/35983609b6084ef88407f98a2263e574&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;BIO-101&quot; }, &quot;roles&quot;: [&quot;Learner&quot;], &quot;status&quot;: &quot;Active&quot; }, &quot;federatedSession&quot;: { &quot;startedAtTime&quot;: &quot;2021-01-04T19:13:19.774Z&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/DCC5DE08316F7BB7F5355929DD49AE28&quot;, &quot;type&quot;: &quot;LtiSession&quot;, &quot;name&quot;: &quot;DCC5DE08316F7BB7F5355929DD49AE28&quot;, &quot;dateCreated&quot;: &quot;2021-01-04T19:13:19.774Z&quot;, &quot;user&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/1a26d8c5b4d44f1db491db1f24407715&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } } }, &quot;extensions&quot;: {} } ] }  Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Grade Events","type":0,"sectionRef":"#","url":"/docs/blackboard/caliper/events/grade-events","content":"","keywords":"","version":null},{"title":"GradeEvent​","type":1,"pageTitle":"Grade Events","url":"/docs/blackboard/caliper/events/grade-events#gradeevent","content":"group.courseNumber - the course batch_uid (i.e. the ID sent in by LIS or Data Integration) object.assignable - …/gradableItems/id - the primary key for the content ID action - Graded actor.id - contains a unique ID of the user (the ID is known to Bb) generated.normalScore - score provided extensions - contains a tag called bb:user.externalId with the batch_uid for the user ","version":null,"tagName":"h3"},{"title":"Sample Payload​","type":1,"pageTitle":"Grade Events","url":"/docs/blackboard/caliper/events/grade-events#sample-payload","content":"Here is a sample of what a workflow might look like: { &quot;sensor&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot;, &quot;sendTime&quot;: &quot;2021-01-05T07:55:48.048Z&quot;, &quot;dataVersion&quot;: &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot;, &quot;data&quot;: [ { &quot;@context&quot;: &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot;, &quot;type&quot;: &quot;GradeEvent&quot;, &quot;id&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot;, &quot;actor&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn&quot;, &quot;type&quot;: &quot;SoftwareApplication&quot; }, &quot;action&quot;: &quot;Graded&quot;, &quot;object&quot;: { &quot;startedAtTime&quot;: &quot;2021-01-04T12:57:55.941Z&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/gradableItems/_12345_1/attempts/_12345_1&quot;, &quot;type&quot;: &quot;Attempt&quot;, &quot;assignable&quot;: { &quot;dateToSubmit&quot;: &quot;2021-01-04T12:57:55.941Z&quot;, &quot;maxAttempts&quot;: 0, &quot;maxSubmits&quot;: 0, &quot;maxScore&quot;: 160, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/gradableItems/_12345_1&quot;, &quot;type&quot;: &quot;Assessment&quot;, &quot;dateCreated&quot;: &quot;2021-01-04T12:57:55.941Z&quot;, &quot;dateModified&quot;: &quot;2021-01-04T12:59:47.248Z&quot;, &quot;creators&quot;: [], &quot;learningObjectives&quot;: [], &quot;keywords&quot;: [], &quot;items&quot;: [] }, &quot;assignee&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/0e9625cdef42403c9c8aed38d7cd80b2&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;count&quot;: 1 }, &quot;generated&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/gradableItems/_12345_1/attempts/_12345_1/score&quot;, &quot;type&quot;: &quot;Score&quot;, &quot;dateCreated&quot;: &quot;2021-01-04T12:59:47.248Z&quot;, &quot;dateModified&quot;: &quot;2021-01-04T12:59:47.248Z&quot;, &quot;extensions&quot;: { &quot;bb:action.name&quot;: &quot;instructor.grade.history.event.attempt.grade&quot;, &quot;bb:content.id&quot;: &quot;_12345_1&quot;, &quot;bb:provider.domain&quot;: &quot;lti.mytool.com&quot; }, &quot;attempt&quot;: { &quot;startedAtTime&quot;: &quot;2021-01-04T12:57:55.941Z&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/gradableItems/_12345_1/attempts/_12345_1&quot;, &quot;type&quot;: &quot;Attempt&quot;, &quot;assignable&quot;: { &quot;dateToSubmit&quot;: &quot;2021-01-04T12:57:55.941Z&quot;, &quot;maxAttempts&quot;: 0, &quot;maxSubmits&quot;: 0, &quot;maxScore&quot;: 160, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/gradableItems/_12345_1&quot;, &quot;type&quot;: &quot;Assessment&quot;, &quot;dateCreated&quot;: &quot;2021-01-04T12:57:55.941Z&quot;, &quot;dateModified&quot;: &quot;2021-01-04T12:59:47.248Z&quot;, &quot;creators&quot;: [], &quot;learningObjectives&quot;: [], &quot;keywords&quot;: [], &quot;items&quot;: [] }, &quot;assignee&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/0e9625cdef42403c9c8aed38d7cd80b2&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;count&quot;: 1 }, &quot;maxScore&quot;: 0, &quot;scoreGiven&quot;: 39.45205, &quot;scoredBy&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn&quot;, &quot;type&quot;: &quot;SoftwareApplication&quot; } }, &quot;eventTime&quot;: &quot;2021-01-04T12:59:47.248Z&quot;, &quot;edApp&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn&quot;, &quot;type&quot;: &quot;SoftwareApplication&quot; }, &quot;group&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/6d0140f42843472da7e3ecd150908fa3&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;BIO-101&quot; }, &quot;membership&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/6d0140f42843472da7e3ecd150908fa3/members/0e9625cdef42403c9c8aed38d7cd80b2&quot;, &quot;type&quot;: &quot;Membership&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot;, &quot;bb:course.externalId&quot;: &quot;BIO-101&quot;, &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; }, &quot;member&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/0e9625cdef42403c9c8aed38d7cd80b2&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;organization&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/6d0140f42843472da7e3ecd150908fa3&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;BIO-101&quot; }, &quot;roles&quot;: [&quot;Learner&quot;], &quot;status&quot;: &quot;Active&quot; }, &quot;extensions&quot;: {} } ] }  Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Forum Events","type":0,"sectionRef":"#","url":"/docs/blackboard/caliper/events/forum-events","content":"","keywords":"","version":null},{"title":"ForumEvent - Non-Gradable Thread​","type":1,"pageTitle":"Forum Events","url":"/docs/blackboard/caliper/events/forum-events#forumevent---non-gradable-thread","content":"actor.@id - contains a unique ID of the user (the ID is known to Bb) extensions - contains a tag called bb:user.externalId with the batch_uid for the user action - Created or Modified or Deleted ","version":null,"tagName":"h3"},{"title":"Content Events","type":0,"sectionRef":"#","url":"/docs/blackboard/caliper/events/content-events","content":"","keywords":"","version":null},{"title":"Content Item Created​","type":1,"pageTitle":"Content Events","url":"/docs/blackboard/caliper/events/content-events#content-item-created","content":"Object\tMessage SentFolder\tdone Link\tdone LTI\tdone Assignment\tdone Forum\tdone Content File Upload\tdone Test\tdone Document\tdone File Upload\tdone ","version":null,"tagName":"h3"},{"title":"Content Item Updated (by member value)​","type":1,"pageTitle":"Content Events","url":"/docs/blackboard/caliper/events/content-events#content-item-updated-by-member-value","content":"The columns contain attributes of the Content Item. Legend done - Changing this value emits a caliper event  close - Changing this value does not emit a caliper event  remove - This value is not applicable for this attribute  radio_button_unchecked - This results in a ForumEvent  Object\tName\tURL\tDes\tAvl\tParm\tScore\tDue Date\tStart Date\tEnd Date\tDisc\tGrp\tInst\tQsFolder\tdone\tremove\tclose\tdone\tremove\tremove\tremove\tdone\tdone\tclose\tremove\tremove Link\tdone\tdone\tclose\tdone\tremove\tremove\tremove\tdone\tdone\tclose\tremove\tremove LTI\tdone\tdone\tclose\tdone\tdone\tclose\tclose\tdone\tdone\tradio_button_unchecked\tremove\tremove\tremove Assignment\tdone\tremove\tremove\tdone\tremove\tclose\tclose\tdone\tdone\tradio_button_unchecked\tclose\tdone\tremove Forum\tdone\tremove\tremove\tdone\tremove\tclose\tclose\tdone\tdone\tclose\tremove\tremove\tremove Content File Upload\tdone\tremove\tremove\tdone\tremove\tremove\tremove\tdone\tdone\tclose\tremove\tdone\tremove Test\tdone\tremove\tremove\tdone\tremove\tclose\tclose\tdone\tdone\tradio_button_unchecked\tclose\tclose\tclose Document\tdone\tremove\tremove\tdone\tremove\tremove\tremove\tdone\tdone\tclose\tremove\tdone\tremove File Upload\tdone\tremove\tremove\tdone\tremove\tremove\tremove\tdone\tdone\tclose\tremove\tdone\tremove {: .striped} ","version":null,"tagName":"h3"},{"title":"Content Item Deleted​","type":1,"pageTitle":"Content Events","url":"/docs/blackboard/caliper/events/content-events#content-item-deleted","content":"Object\tMessage SentFolder\tdone Link\tdone LTI\tdone Assignment\tdone Forum\tdone Content File Upload\tdone Test\tdone Document\tdone File Upload\tdone GradeEvents are sent in bulk nightly. Here is some of the key data that is associated with these events: ","version":null,"tagName":"h3"},{"title":"ContentEvent​","type":1,"pageTitle":"Content Events","url":"/docs/blackboard/caliper/events/content-events#contentevent","content":"group.courseNumber - the course batch_uid (i.e. the ID sent in by LIS or Data Integration) object.@id - …/content/id - the primary key for the content ID actor.@id - contains a unique ID of the user (the ID is known to Bb) extensions - contains a tag called bb:user.externalId with the batch_uid for the user membership.roles - #Instructor action - Created or Modified or Deleted ","version":null,"tagName":"h3"},{"title":"Sample Payload​","type":1,"pageTitle":"Content Events","url":"/docs/blackboard/caliper/events/content-events#sample-payload","content":"Here is a sample of what a payload might look like: { &quot;sensor&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot;, &quot;sendTime&quot;: &quot;2021-01-05T14:50:35.681Z&quot;, &quot;dataVersion&quot;: &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot;, &quot;data&quot;: [ { &quot;@context&quot;: [ &quot;http://caliper.blackboard.com/ctx/caliper/v1/Context&quot;, &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot; ], &quot;type&quot;: &quot;http://caliper.blackboard.com/caliper/v1/ContentEvent&quot;, &quot;id&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot;, &quot;actor&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/566f88cb92b64e1086590458deeeb0da&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c &quot; } }, &quot;action&quot;: &quot;Modified&quot;, &quot;object&quot;: { &quot;@context&quot;: [ &quot;http://caliper.blackboard.com/ctx/caliper/v1/Context&quot;, &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot; ], &quot;type&quot;: &quot;http://caliper.blackboard.com/caliper/v1/Content&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/content/_12345_1&quot;, &quot;name&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot;, &quot;handler&quot;: &quot;resource/x-bb-forumlink&quot;, &quot;isLesson&quot;: false, &quot;isFolder&quot;: false, &quot;isGroupContent&quot;: false, &quot;dataVersion&quot;: 3, &quot;renderType&quot;: &quot;LINK&quot;, &quot;scorePossible&quot;: 20, &quot;dueDate&quot;: &quot;2021-01-19T06:59:00.000Z&quot;, &quot;aggregationModel&quot;: &quot;Last&quot;, &quot;extensions&quot;: {} }, &quot;eventTime&quot;: &quot;2021-01-05T14:50:29.906Z&quot;, &quot;edApp&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn&quot;, &quot;type&quot;: &quot;SoftwareApplication&quot; }, &quot;membership&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/3ced8bf8f6174c339908f7dab224f0fa/members/566f88cb92b64e1086590458deeeb0da&quot;, &quot;type&quot;: &quot;Membership&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot;, &quot;bb:course.externalId&quot;: &quot;BIO-101&quot;, &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c &quot; }, &quot;member&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/566f88cb92b64e1086590458deeeb0da&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c &quot; } }, &quot;organization&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/3ced8bf8f6174c339908f7dab224f0fa&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;BIO-101&quot; }, &quot;roles&quot;: [ &quot;Instructor&quot; ], &quot;status&quot;: &quot;Active&quot; }, &quot;federatedSession&quot;: { &quot;startedAtTime&quot;: &quot;2021-01-05T14:50:29.906Z&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/98CDC6B4501AF7FDAF55D8CC2B3DD7CA&quot;, &quot;type&quot;: &quot;LtiSession&quot;, &quot;name&quot;: &quot;98CDC6B4501AF7FDAF55D8CC2B3DD7CA&quot;, &quot;dateCreated&quot;: &quot;2021-01-05T14:50:29.906Z&quot;, &quot;user&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/566f88cb92b64e1086590458deeeb0da&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c &quot; } } }, &quot;extensions&quot;: {}, &quot;session&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/98CDC6B4501AF7FDAF55D8CC2B3DD7CA&quot;, &quot;type&quot;: &quot;Session&quot; } }, { &quot;@context&quot;: [ &quot;http://caliper.blackboard.com/ctx/caliper/v1/Context&quot;, &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot; ], &quot;type&quot;: &quot;http://caliper.blackboard.com/caliper/v1/ContentEvent&quot;, &quot;id&quot;: &quot;90cc7d43-60df-49a4-8782-f4719988d5fb&quot;, &quot;actor&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/566f88cb92b64e1086590458deeeb0da&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c &quot; } }, &quot;action&quot;: &quot;Modified&quot;, &quot;object&quot;: { &quot;@context&quot;: [ &quot;http://caliper.blackboard.com/ctx/caliper/v1/Context&quot;, &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot; ], &quot;type&quot;: &quot;http://caliper.blackboard.com/caliper/v1/Content&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/content/_12345_1&quot;, &quot;name&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot;, &quot;handler&quot;: &quot;resource/x-bb-forumlink&quot;, &quot;isLesson&quot;: false, &quot;isFolder&quot;: false, &quot;isGroupContent&quot;: false, &quot;dataVersion&quot;: 3, &quot;renderType&quot;: &quot;LINK&quot;, &quot;scorePossible&quot;: 20, &quot;dueDate&quot;: &quot;2021-01-19T06:59:00.000Z&quot;, &quot;aggregationModel&quot;: &quot;Last&quot;, &quot;extensions&quot;: {} }, &quot;eventTime&quot;: &quot;2021-01-05T14:50:30.114Z&quot;, &quot;edApp&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn&quot;, &quot;type&quot;: &quot;SoftwareApplication&quot; }, &quot;membership&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/3ced8bf8f6174c339908f7dab224f0fa/members/566f88cb92b64e1086590458deeeb0da&quot;, &quot;type&quot;: &quot;Membership&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot;, &quot;bb:course.externalId&quot;: &quot;BIO-101&quot;, &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c &quot; }, &quot;member&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/566f88cb92b64e1086590458deeeb0da&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c &quot; } }, &quot;organization&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/3ced8bf8f6174c339908f7dab224f0fa&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;BIO-101&quot; }, &quot;roles&quot;: [ &quot;Instructor&quot; ], &quot;status&quot;: &quot;Active&quot; }, &quot;federatedSession&quot;: { &quot;startedAtTime&quot;: &quot;2021-01-05T14:50:30.114Z&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/98CDC6B4501AF7FDAF55D8CC2B3DD7CA&quot;, &quot;type&quot;: &quot;LtiSession&quot;, &quot;name&quot;: &quot;98CDC6B4501AF7FDAF55D8CC2B3DD7CA&quot;, &quot;dateCreated&quot;: &quot;2021-01-05T14:50:30.114Z&quot;, &quot;user&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/566f88cb92b64e1086590458deeeb0da&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c &quot; } } }, &quot;extensions&quot;: {}, &quot;session&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/98CDC6B4501AF7FDAF55D8CC2B3DD7CA&quot;, &quot;type&quot;: &quot;Session&quot; } } ] }  Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"LTI Events","type":0,"sectionRef":"#","url":"/docs/blackboard/caliper/events/lti-events","content":"","keywords":"","version":null},{"title":"LTIEvent​","type":1,"pageTitle":"LTI Events","url":"/docs/blackboard/caliper/events/lti-events#ltievent","content":"actor.@id - contains a unique ID of the user (the ID is known to Bb) extensions - contains a tag called bb:user.externalId with the batch_uid for the user object.launchUrl - URL of the LTI Provider object.launchParameters - name/value pairs passed group.courseNumber - the course batch_uid (i.e. the ID sent in by LIS or Data Integration) action - LoggedIn, LoggedOut ","version":null,"tagName":"h3"},{"title":"Sample Payload​","type":1,"pageTitle":"LTI Events","url":"/docs/blackboard/caliper/events/lti-events#sample-payload","content":"{ &quot;@context&quot;: [ &quot;http://caliper.blackboard.com/ctx/caliper/v1/Context&quot;, &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot; ], &quot;type&quot;: &quot;http://caliper.blackboard.com/caliper/v1/LTIEvent&quot;, &quot;id&quot;: &quot;6b495fe6-cdd9-459a-aa1f-39e4979b87f5&quot;, &quot;actor&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/users/ffc08009f0884c059192bac549e117b2&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_1_1&quot;, &quot;bb:user.externalId&quot;: &quot;administrator&quot; } }, &quot;action&quot;: &quot;LoggedIn&quot;, &quot;object&quot;: { &quot;@context&quot;: [ &quot;http://caliper.blackboard.com/ctx/caliper/v1/Context&quot;, &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot; ], &quot;type&quot;: &quot;http://caliper.blackboard.com/caliper/v1/LTILaunchInfo&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/ltiLaunches/d0b8a363-7484-4ee6-b458-0f0e0ce5f05f&quot;, &quot;name&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot;, &quot;launchUrl&quot;: &quot;https://ltiah.herokuapp.com/launch_lti&quot;, &quot;launchParameters&quot;: { &quot;tool_consumer_instance_contact_email&quot;: &quot;admin@support-ultra-test.blackboard.com&quot;, &quot;tool_consumer_info_product_family_code&quot;: &quot;BlackboardLearn&quot;, &quot;oauth_signature_method&quot;: &quot;HMAC-SHA1&quot;, &quot;tool_consumer_info_version&quot;: &quot;3900.4.0-rel.14+d8ea606&quot;, &quot;oauth_signature&quot;: &quot;PEPikqcsphXcnKe/WQajV2VDNcQ=&quot;, &quot;launch_presentation_document_target&quot;: &quot;window&quot;, &quot;lti_message_type&quot;: &quot;basic-lti-launch-request&quot;, &quot;custom_caliper_profile_url&quot;: &quot;https://support-ultra-test.blackboard.com/learn/api/v1/telemetry/caliper/profile/ultra&quot;, &quot;ext_launch_id&quot;: &quot;d0b8a363-7484-4ee6-b458-0f0e0ce5f05f&quot;, &quot;lis_person_sourcedid&quot;: &quot;administrator&quot;, &quot;ext_lms&quot;: &quot;bb-3900.4.0-rel.14+d8ea606&quot;, &quot;lis_person_name_family&quot;: &quot;Administrator&quot;, &quot;custom_caliper_federated_session_id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/sessions/0356052DAA966AA071787F54DBFEB1B1&quot;, &quot;lis_person_name_full&quot;: &quot;Blackboard Administrator&quot;, &quot;context_label&quot;: &quot;Ultra Ltiah_herokuapp_placement&quot;, &quot;oauth_consumer_key&quot;: &quot;mykeyagain&quot;, &quot;user_id&quot;: &quot;ffc08009f0884c059192bac549e117b2&quot;, &quot;launch_presentation_return_url&quot;: &quot;https://support-ultra-test.blackboard.com/webapps/blackboard/execute/blti/launchReturn?launch_id=d0b8a363-7484-4ee6-b458-0f0e0ce5f05f&amp;link_id=ultra&amp;launch_time=1608831491592&quot;, &quot;oauth_version&quot;: &quot;1.0&quot;, &quot;resource_link_id&quot;: &quot;ultra&quot;, &quot;custom_tc_profile_url&quot;: &quot;https://support-ultra-test.blackboard.com/learn/api/v1/lti/profile?lti_version=LTI-1p0&quot;, &quot;oauth_callback&quot;: &quot;about:blank&quot;, &quot;lis_person_contact_email_primary&quot;: &quot;noreply@blackboard.com&quot;, &quot;roles&quot;: &quot;urn:lti:sysrole:ims/lis/Administrator&quot;, &quot;tool_consumer_instance_name&quot;: &quot;Blackboard, Inc.&quot;, &quot;launch_presentation_locale&quot;: &quot;en-US&quot;, &quot;context_title&quot;: &quot;Ultra Ltiah_herokuapp_placement&quot;, &quot;tool_consumer_instance_guid&quot;: &quot;82ef1947e5974e559156e8a6c8c2ea79&quot;, &quot;lis_person_name_given&quot;: &quot;Blackboard&quot;, &quot;oauth_timestamp&quot;: &quot;1608831491&quot;, &quot;lti_version&quot;: &quot;LTI-1p0&quot;, &quot;ext_launch_presentation_css_url&quot;: &quot;https://support-ultra-test.blackboard.com/common/shared.css,https://support-ultra-test.blackboard.com/themes/as_2015/theme.css&quot;, &quot;context_id&quot;: &quot;_41_1&quot;, &quot;oauth_nonce&quot;: &quot;171815513849839&quot;, &quot;tool_consumer_instance_description&quot;: &quot;Blackboard, Inc.&quot; }, &quot;customParameters&quot;: {}, &quot;extensions&quot;: {} }, &quot;eventTime&quot;: &quot;2020-12-24T17:38:11.660Z&quot;, &quot;edApp&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/applications/learn&quot;, &quot;type&quot;: &quot;SoftwareApplication&quot;, &quot;extensions&quot;: { &quot;bb:request.headers.ipAddress&quot;: &quot;186.28.208.123&quot; } }, &quot;federatedSession&quot;: { &quot;startedAtTime&quot;: &quot;2020-12-24T17:38:11.660Z&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/sessions/0356052DAA966AA071787F54DBFEB1B1&quot;, &quot;type&quot;: &quot;LtiSession&quot;, &quot;name&quot;: &quot;0356052DAA966AA071787F54DBFEB1B1&quot;, &quot;dateCreated&quot;: &quot;2020-12-24T17:38:11.660Z&quot;, &quot;user&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/users/ffc08009f0884c059192bac549e117b2&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_1_1&quot;, &quot;bb:user.externalId&quot;: &quot;administrator&quot; } } }, &quot;extensions&quot;: {}, &quot;session&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/sessions/0356052DAA966AA071787F54DBFEB1B1&quot;, &quot;type&quot;: &quot;Session&quot; } }  Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"ForumEvent - Gradable Thread​","type":1,"pageTitle":"Forum Events","url":"/docs/blackboard/caliper/events/forum-events#forumevent---gradable-thread","content":"actor.@id - contains a unique ID of the user (the ID is known to Bb) extensions - contains a tag called bb:user.externalId with the batch_uid for the user object.forumPointsPossible - number of possible points action - Created or Modified or Deleted ","version":null,"tagName":"h3"},{"title":"ForumEvent - Assignment Conversation Comment​","type":1,"pageTitle":"Forum Events","url":"/docs/blackboard/caliper/events/forum-events#forumevent---assignment-conversation-comment","content":"actor.@id - contains a unique ID of the user (the ID is known to Bb) extensions - contains a tag called bb:user.externalId with the batch_uid for the user object.forumPointsPossible - number of possible points action - Created or Modified or Deleted ","version":null,"tagName":"h3"},{"title":"ForumEvent - Non-Gradable Group Thread​","type":1,"pageTitle":"Forum Events","url":"/docs/blackboard/caliper/events/forum-events#forumevent---non-gradable-group-thread","content":"actor.@id - contains a unique ID of the user (the ID is known to Bb) extensions - contains a tag called bb:user.externalId with the batch_uid for the user group.subOrganizationOf - course information action - Created or Modified or Deleted ","version":null,"tagName":"h3"},{"title":"ForumEvent - Group Conversation Comment​","type":1,"pageTitle":"Forum Events","url":"/docs/blackboard/caliper/events/forum-events#forumevent---group-conversation-comment","content":"actor.@id - contains a unique ID of the user (the ID is known to Bb) extensions - contains a tag called bb:user.externalId with the batch_uid for the user object.forumPointsPossible - number of possible points group.subOrganizationOf - course information action - Created or Modified or Deleted ","version":null,"tagName":"h3"},{"title":"Sample Payload​","type":1,"pageTitle":"Forum Events","url":"/docs/blackboard/caliper/events/forum-events#sample-payload","content":"{ &quot;sensor&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot;, &quot;sendTime&quot;: &quot;2021-01-05T14:48:59.462Z&quot;, &quot;dataVersion&quot;: &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot;, &quot;data&quot;: [ { &quot;@context&quot;: [ &quot;http://caliper.blackboard.com/ctx/caliper/v1/Context&quot;, &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot; ], &quot;type&quot;: &quot;http://caliper.blackboard.com/caliper/v1/ForumEvent&quot;, &quot;id&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot;, &quot;actor&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/9eda44a94869439d8dd77496de1db568&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;action&quot;: &quot;Created&quot;, &quot;object&quot;: { &quot;@context&quot;: [ &quot;http://caliper.blackboard.com/ctx/caliper/v1/Context&quot;, &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot; ], &quot;type&quot;: &quot;http://caliper.blackboard.com/caliper/v1/Forum&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/discussion/_12345_1&quot;, &quot;name&quot;: &quot;Placeholder 2&quot;, &quot;description&quot;: &quot;&quot;, &quot;threadPointsPossible&quot;: 20, &quot;dueDate&quot;: &quot;2021-01-12T06:59:00.000Z&quot;, &quot;isDiscussion&quot;: true, &quot;contentId&quot;: &quot;_12345_1&quot;, &quot;extensions&quot;: {} }, &quot;generated&quot;: { &quot;@context&quot;: [ &quot;http://caliper.blackboard.com/ctx/caliper/v1/Context&quot;, &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot; ], &quot;type&quot;: &quot;http://caliper.blackboard.com/caliper/v1/ForumPost&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/discussion/_12345_1/post/_12345_1&quot;, &quot;name&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot;, &quot;parentId&quot;: &quot;_12345_1&quot;, &quot;threadId&quot;: &quot;_12345_1&quot;, &quot;fileAttached&quot;: false, &quot;length&quot;: 1468, &quot;anonymous&quot;: false, &quot;firstPost&quot;: false, &quot;extensions&quot;: {} }, &quot;eventTime&quot;: &quot;2021-01-05T14:48:52.852Z&quot;, &quot;edApp&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn&quot;, &quot;type&quot;: &quot;SoftwareApplication&quot; }, &quot;membership&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/1b5fe13ea75b4e9f97f23da85600b6f7/members/9eda44a94869439d8dd77496de1db568&quot;, &quot;type&quot;: &quot;Membership&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot;, &quot;bb:course.externalId&quot;: &quot;BIO-101&quot;, &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; }, &quot;member&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/9eda44a94869439d8dd77496de1db568&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;organization&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/1b5fe13ea75b4e9f97f23da85600b6f7&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;BIO-101&quot; }, &quot;roles&quot;: [&quot;Learner&quot;], &quot;status&quot;: &quot;Active&quot; }, &quot;federatedSession&quot;: { &quot;startedAtTime&quot;: &quot;2021-01-05T14:48:52.852Z&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/85A3CA3571288387778479A527A9D478&quot;, &quot;type&quot;: &quot;LtiSession&quot;, &quot;name&quot;: &quot;85A3CA3571288387778479A527A9D478&quot;, &quot;dateCreated&quot;: &quot;2021-01-05T14:48:52.852Z&quot;, &quot;user&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/9eda44a94869439d8dd77496de1db568&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } } }, &quot;extensions&quot;: {}, &quot;session&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/85A3CA3571288387778479A527A9D478&quot;, &quot;type&quot;: &quot;Session&quot; } }, { &quot;@context&quot;: [ &quot;http://caliper.blackboard.com/ctx/caliper/v1/Context&quot;, &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot; ], &quot;type&quot;: &quot;http://caliper.blackboard.com/caliper/v1/ForumEvent&quot;, &quot;id&quot;: &quot;5c7a2f72-6806-49c3-8bb2-0677df17f7a8&quot;, &quot;actor&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/9eda44a94869439d8dd77496de1db568&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;action&quot;: &quot;Modified&quot;, &quot;object&quot;: { &quot;@context&quot;: [ &quot;http://caliper.blackboard.com/ctx/caliper/v1/Context&quot;, &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot; ], &quot;type&quot;: &quot;http://caliper.blackboard.com/caliper/v1/Forum&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/discussion/_12345_1&quot;, &quot;name&quot;: &quot;Placeholder 2&quot;, &quot;description&quot;: &quot;&quot;, &quot;threadPointsPossible&quot;: 20, &quot;dueDate&quot;: &quot;2021-01-12T06:59:00.000Z&quot;, &quot;isDiscussion&quot;: true, &quot;contentId&quot;: &quot;_12345_1&quot;, &quot;extensions&quot;: {} }, &quot;generated&quot;: { &quot;@context&quot;: [ &quot;http://caliper.blackboard.com/ctx/caliper/v1/Context&quot;, &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot; ], &quot;type&quot;: &quot;http://caliper.blackboard.com/caliper/v1/ForumPost&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/discussion/_12345_1/post/_12345_1&quot;, &quot;name&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot;, &quot;parentId&quot;: &quot;_12345_1&quot;, &quot;threadId&quot;: &quot;_12345_1&quot;, &quot;fileAttached&quot;: false, &quot;length&quot;: 1474, &quot;anonymous&quot;: false, &quot;firstPost&quot;: false, &quot;extensions&quot;: {} }, &quot;eventTime&quot;: &quot;2021-01-05T14:48:52.852Z&quot;, &quot;edApp&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn&quot;, &quot;type&quot;: &quot;SoftwareApplication&quot; }, &quot;membership&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/1b5fe13ea75b4e9f97f23da85600b6f7/members/9eda44a94869439d8dd77496de1db568&quot;, &quot;type&quot;: &quot;Membership&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot;, &quot;bb:course.externalId&quot;: &quot;BIO-101&quot;, &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; }, &quot;member&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/9eda44a94869439d8dd77496de1db568&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;organization&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/1b5fe13ea75b4e9f97f23da85600b6f7&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;BIO-101&quot; }, &quot;roles&quot;: [&quot;Learner&quot;], &quot;status&quot;: &quot;Active&quot; }, &quot;federatedSession&quot;: { &quot;startedAtTime&quot;: &quot;2021-01-05T14:48:52.852Z&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/85A3CA3571288387778479A527A9D478&quot;, &quot;type&quot;: &quot;LtiSession&quot;, &quot;name&quot;: &quot;85A3CA3571288387778479A527A9D478&quot;, &quot;dateCreated&quot;: &quot;2021-01-05T14:48:52.852Z&quot;, &quot;user&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/9eda44a94869439d8dd77496de1db568&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } } }, &quot;extensions&quot;: {}, &quot;session&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/sessions/85A3CA3571288387778479A527A9D478&quot;, &quot;type&quot;: &quot;Session&quot; } } ] }  Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Calculated Grade Snapshot Events","type":0,"sectionRef":"#","url":"/docs/blackboard/caliper/events/snapshots-events","content":"","keywords":"","version":null},{"title":"CalculatedGradeSnapshotEvent​","type":1,"pageTitle":"Calculated Grade Snapshot Events","url":"/docs/blackboard/caliper/events/snapshots-events#calculatedgradesnapshotevent","content":"object.course.courseNumber - the course batch_uid (i.e. the ID sent in by LIS or Data Integration) object.itemId - the primary key for the calculated grade column user.id - contains a unique ID of the user (the ID is known to Bb) object.score - score provided object.isCourseGrade - true if final grade user.extensions - contains a tag called bb:user.externalId with the batch_uid for the user action - Graded ","version":null,"tagName":"h3"},{"title":"Sample Payload​","type":1,"pageTitle":"Calculated Grade Snapshot Events","url":"/docs/blackboard/caliper/events/snapshots-events#sample-payload","content":"Here is a sample of what a payload might look like: { &quot;sensor&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot;, &quot;sendTime&quot;: &quot;2021-01-05T08:20:38.600Z&quot;, &quot;dataVersion&quot;: &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot;, &quot;data&quot;: [ { &quot;@context&quot;: [ &quot;http://caliper.blackboard.com/ctx/caliper/v1/Context&quot;, &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot; ], &quot;type&quot;: &quot;http://caliper.blackboard.com/caliper/v1/CalculatedGradeSnapshotEvent&quot;, &quot;id&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot;, &quot;actor&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn&quot;, &quot;type&quot;: &quot;SoftwareApplication&quot; }, &quot;action&quot;: &quot;Graded&quot;, &quot;object&quot;: { &quot;@context&quot;: [ &quot;http://caliper.blackboard.com/ctx/caliper/v1/Context&quot;, &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot; ], &quot;type&quot;: &quot;http://caliper.blackboard.com/caliper/v1/CalculatedGrade&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/gradableItems/_12345_1/calculatedGrade/329189703&quot;, &quot;name&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot;, &quot;itemId&quot;: &quot;_12345_1&quot;, &quot;scorePossible&quot;: 100, &quot;isCourseGrade&quot;: false, &quot;syncVersion&quot;: 329189703, &quot;user&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/b1ea2fccd95144a29e5e906034e4ddee&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;course&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/ab336626104044daab61e9a9d72ac8e2&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;BIO-101&quot; }, &quot;extensions&quot;: {} }, &quot;eventTime&quot;: &quot;2021-01-05T08:20:33.572Z&quot;, &quot;edApp&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/applications/learn&quot;, &quot;type&quot;: &quot;SoftwareApplication&quot; }, &quot;membership&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/ab336626104044daab61e9a9d72ac8e2/members/b1ea2fccd95144a29e5e906034e4ddee&quot;, &quot;type&quot;: &quot;Membership&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot;, &quot;bb:course.externalId&quot;: &quot;BIO-101&quot;, &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; }, &quot;member&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/users/b1ea2fccd95144a29e5e906034e4ddee&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_12345_1&quot;, &quot;bb:user.externalId&quot;: &quot;54b54b42-dd02-42f8-88ed-07bd719bfb7c&quot; } }, &quot;organization&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/54b54b42-dd02-42f8-88ed-07bd719bfb7c/courses/ab336626104044daab61e9a9d72ac8e2&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_12345_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;BIO-101&quot; }, &quot;roles&quot;: [&quot;Learner&quot;], &quot;status&quot;: &quot;Active&quot; }, &quot;extensions&quot;: {} } ] }  Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Session Events","type":0,"sectionRef":"#","url":"/docs/blackboard/caliper/events/session-events","content":"","keywords":"","version":null},{"title":"SessionEvent - Login/Logout​","type":1,"pageTitle":"Session Events","url":"/docs/blackboard/caliper/events/session-events#sessionevent---loginlogout","content":"actor.@id - contains a unique ID of the user (the ID is known to Bb) extensions - contains a tag called bb:user.externalId with the batch_uid for the user action - LoggedIn or …/action#LoggedOut ","version":null,"tagName":"h3"},{"title":"SessionEvent -Timeout​","type":1,"pageTitle":"Session Events","url":"/docs/blackboard/caliper/events/session-events#sessionevent--timeout","content":"actor.@id - contains a unique ID of the user (the ID is known to Bb) extensions - contains a tag called bb:user.externalId with the batch_uid for the user object.actor.@id - contains a unique ID of the user (the ID is known to Bb) action - TimedOut ","version":null,"tagName":"h3"},{"title":"Sample Payload​","type":1,"pageTitle":"Session Events","url":"/docs/blackboard/caliper/events/session-events#sample-payload","content":"{ &quot;@context&quot;: &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot;, &quot;type&quot;: &quot;SessionEvent&quot;, &quot;id&quot;: &quot;f8c984e2-de73-4c0b-8183-779ab4149422&quot;, &quot;actor&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/users/ffc08009f0884c059192bac549e117b2&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_1_1&quot;, &quot;bb:user.externalId&quot;: &quot;administrator&quot; } }, &quot;action&quot;: &quot;LoggedIn&quot;, &quot;object&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/applications/learn&quot;, &quot;type&quot;: &quot;SoftwareApplication&quot;, &quot;extensions&quot;: { &quot;bb:request.headers.agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36&quot;, &quot;bb:request.headers.ipAddress&quot;: &quot;98.10.178.27&quot; } }, &quot;target&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03&quot;, &quot;type&quot;: &quot;DigitalResource&quot;, &quot;creators&quot;: [], &quot;learningObjectives&quot;: [], &quot;keywords&quot;: [] }, &quot;eventTime&quot;: &quot;2020-12-24T21:38:05.645Z&quot;, &quot;edApp&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/applications/learn&quot;, &quot;type&quot;: &quot;SoftwareApplication&quot;, &quot;extensions&quot;: { &quot;bb:request.headers.agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36&quot;, &quot;bb:request.headers.ipAddress&quot;: &quot;98.10.178.27&quot; } }, &quot;federatedSession&quot;: { &quot;startedAtTime&quot;: &quot;2020-12-24T21:38:05.645Z&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/sessions/B287CEC440C99337012096F677684697&quot;, &quot;type&quot;: &quot;LtiSession&quot;, &quot;name&quot;: &quot;B287CEC440C99337012096F677684697&quot;, &quot;dateCreated&quot;: &quot;2020-12-24T21:38:05.645Z&quot;, &quot;extensions&quot;: { &quot;bb:request.headers.agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36&quot; }, &quot;user&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/users/ffc08009f0884c059192bac549e117b2&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_1_1&quot;, &quot;bb:user.externalId&quot;: &quot;administrator&quot; } } }, &quot;extensions&quot;: {} }  Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Getting Started with Caliper","type":0,"sectionRef":"#","url":"/docs/blackboard/caliper/getting-started/getting-started","content":"Getting Started with Caliper Published: Not Available Last Update: Not Available Caliper Analytics is an IMS Global standard focused on the delivery of consistent event tracking across campus applications. For more information on the Caliper Analytics specification, visit the IMS site here. Caliper is implemented in Learn as the Learn Activity Stream. This data is stored in an external system called the Caliper Event Store. This server lives in the Cloud and is not externally accessible at this time. As a result of its location in the Cloud, it is also only currently available on Learn SaaS deployments. The data is then used to fuel Activity Reports in the context of Learn. These are currently available for Learn Assignments, Assessments, and Kaltura Media assignments when using Kaltura’s LTI integration and Learn SaaS. For more information on Kaltura integrations, visit the Kaltura web site here. From a Developer standpoint, Caliper is available in two ways: sending events to the Learn Activity Stream, and subscribing to the Learn Activity Stream as an additional Event Store. This section of the Anthology standards Developer Community will dive into both of these options, with sample code and supporting documentation. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards","keywords":"","version":null},{"title":"Configuring Caliper Event Store in Learn","type":0,"sectionRef":"#","url":"/docs/blackboard/caliper/getting-started/event-store-in-learn","content":"Configuring Caliper Event Store in Learn Published: Not Available Last Update: Not Available Learn was the first Learning Management System to be certified for Caliper Learning Analytics. Caliper is an IMS Global standard that allows a provider, in this case Learn, to stream usage data to an external system. This data contains things like login and out events, content views, assignment submissions, and even grading events. The standard defines a specific format providing a self-contained JSON document that gives the ingestor all of the information needed to understand who performed what action on what system to what outcome. The following document describes how to enable an external Event Store in Learn. If you are self-hosted, you will need to make a configuration change in order to use Caliper. In bb-config.properties, you must set bbconfig.cloud.telemetry.aws.region=us-east-1 and run PushConfigUpdates for the setting to take affect. For UK clients, the data transfer to us-east is protected under the requirements as set forth in GDPR. As a user with Administrator privledges, login to Learn and access the System Administrator area. In the original experience, this is a tab across the top. If in the Ultra experience, this will be available in the left hand navigation panel. On the subsequent page, select installed Tools. From the Manage Building Blocks page, navigate through the paging tools until you see the 'Telemetry' Building Block. Using your mouse, hover to the right of the Building Block's title to show the context menu. Click the context menu icon and select 'Settings' from the menu. On the Settings page, you will notice two entries. Caliper Providers is to review external Caliper Providers that are feeding Caliper events into Learn. If you are a Kaltura client running on a SaaS deployment of Learn, you will likely see Kaltura here. This is how the Kaltura Student Usage Report is populated. For this document, we are focused on Caliper Event Stores. Click the corresponding link. On this screen, you can see all of the currently registered Event Stores. You will likely only see one entry on this page, similar to the last URL in this example. This is Learn's internal event store, used to power the Student Activity Reports. The top entry in our example is a custom Event Store, used to capture the Learn events as they are streamed. It is important to note that the internal event store is not accessible externally. As a client, you must enable your own custom event store and capture the data there if you want access to it. It is also important to note that Caliper Providers that send data to Learn like Kaltura are not included in the caliper event stream. Any caliper providers on your campus should write directly to your event store. Service URL - This is the full URL to the Caliper Ingestion Service i.e.https://mydomain.edu/caliper API Key - This is a value that is included with every Caliper Event transmission. Your Event Store should know this value and use it to validate the message as authentic. It can also be used to differentiate between multiple Caliper Providers. Highly recommended that this value is a true UUID. Generate API Key - Use this button to have Learn automatically generate a true UUID for the API key if you have not already done so. Event Batch Size - The Telemetry Building Block captures a lot of information. The Event Batch Size allows you to specify how many messages to compile before sending. Once it the batch size is reached, a single HTTP message will be sent with an array of caliper events. Active - Essential Admin toggle to make the Event Store active or inactive. Submit/Cancel - Click Submit to save. As soon as you enable your event store, it will start to recieve events. Your event store should be a fully-hardened data warehouse. There is a ton of data and no way to filter the data you receive on the Learn server. You can certainly filter out the data that you want, but you will have to be able to process all of the incoming messages and have ample space and processing power to store the data and run reports against it. If you want more information about what types of data is included, check out the rest of this space for documents tagged for caliper. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards","keywords":"","version":null},{"title":"View Events","type":0,"sectionRef":"#","url":"/docs/blackboard/caliper/events/view-events","content":"","keywords":"","version":null},{"title":"Example Payload​","type":1,"pageTitle":"View Events","url":"/docs/blackboard/caliper/events/view-events#example-payload","content":"{ &quot;@context&quot;: &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot;, &quot;type&quot;: &quot;ViewEvent&quot;, &quot;id&quot;: &quot;788e0326-c12c-4c23-be39-27b446992b79&quot;, &quot;actor&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/users/ffc08009f0884c059192bac549e117b2&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_1_1&quot;, &quot;bb:user.externalId&quot;: &quot;administrator&quot; } }, &quot;action&quot;: &quot;Viewed&quot;, &quot;object&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/unknown/unknown&quot;, &quot;type&quot;: &quot;Chapter&quot;, &quot;creators&quot;: [], &quot;learningObjectives&quot;: [], &quot;keywords&quot;: [], &quot;index&quot;: 0 }, &quot;target&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/unknown/unknown&quot;, &quot;type&quot;: &quot;Chapter&quot;, &quot;creators&quot;: [], &quot;learningObjectives&quot;: [], &quot;keywords&quot;: [], &quot;index&quot;: 0 }, &quot;eventTime&quot;: &quot;2020-12-24T21:04:41.359Z&quot;, &quot;edApp&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/applications/learn&quot;, &quot;type&quot;: &quot;SoftwareApplication&quot;, &quot;extensions&quot;: {} }, &quot;group&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/courses/875ab28d354e444a81784e58e44a60b2&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_1358_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;04650987_bbtest_ignore&quot; }, &quot;membership&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/courses/875ab28d354e444a81784e58e44a60b2/members/ffc08009f0884c059192bac549e117b2&quot;, &quot;type&quot;: &quot;Membership&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_1358_1&quot;, &quot;bb:course.externalId&quot;: &quot;04650987_bbtest_ignore&quot;, &quot;bb:user.id&quot;: &quot;_1_1&quot;, &quot;bb:user.externalId&quot;: &quot;administrator&quot; }, &quot;member&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/users/ffc08009f0884c059192bac549e117b2&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_1_1&quot;, &quot;bb:user.externalId&quot;: &quot;administrator&quot; } }, &quot;organization&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/courses/875ab28d354e444a81784e58e44a60b2&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_1358_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;04650987_bbtest_ignore&quot; }, &quot;roles&quot;: [&quot;Instructor&quot;], &quot;status&quot;: &quot;Active&quot; }, &quot;federatedSession&quot;: { &quot;startedAtTime&quot;: &quot;2020-12-24T21:04:41.359Z&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/sessions/0D8663C4ABF729F1B7B9CA8B93A5AE0D&quot;, &quot;type&quot;: &quot;LtiSession&quot;, &quot;name&quot;: &quot;0D8663C4ABF729F1B7B9CA8B93A5AE0D&quot;, &quot;dateCreated&quot;: &quot;2020-12-24T21:04:41.359Z&quot;, &quot;user&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/users/ffc08009f0884c059192bac549e117b2&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_1_1&quot;, &quot;bb:user.externalId&quot;: &quot;administrator&quot; } } }, &quot;extensions&quot;: {} }  Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Wiki Events","type":0,"sectionRef":"#","url":"/docs/blackboard/caliper/events/wikis-events","content":"","keywords":"","version":null},{"title":"WikiEvent​","type":1,"pageTitle":"Wiki Events","url":"/docs/blackboard/caliper/events/wikis-events#wikievent","content":"object.wikiId - the primary key for the wiki action - Created, Modified, Commented extensions - contains a tag called bb:user.externalId with the batch_uid for the user ","version":null,"tagName":"h3"},{"title":"Sample Payload​","type":1,"pageTitle":"Wiki Events","url":"/docs/blackboard/caliper/events/wikis-events#sample-payload","content":"Here is a sample of what an event payload might look like: { &quot;sensor&quot;: &quot;530efc49-6b9f-40a6-918b-966ee83a744c&quot;, &quot;sendTime&quot;: &quot;2021-01-05T16:58:53.778Z&quot;, &quot;dataVersion&quot;: &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot;, &quot;data&quot;: [ { &quot;@context&quot;: [ &quot;http://caliper.blackboard.com/ctx/caliper/v1/Context&quot;, &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot; ], &quot;type&quot;: &quot;http://caliper.blackboard.com/caliper/v1/WikiEvent&quot;, &quot;id&quot;: &quot;1162c8d4-c3f8-446f-a08a-c673e2a2eaf2&quot;, &quot;actor&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/users/9c60a9cdb3144d1aa77ff56c34ef248b&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_227_1&quot;, &quot;bb:user.externalId&quot;: &quot;scott.hurrey@myschool.edu&quot; } }, &quot;action&quot;: &quot;Created&quot;, &quot;object&quot;: { &quot;@context&quot;: [ &quot;http://caliper.blackboard.com/ctx/caliper/v1/Context&quot;, &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot; ], &quot;type&quot;: &quot;http://caliper.blackboard.com/caliper/v1/WikiPage&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/wiki/7cdeb8248ba84ec3a6f859973fb7764c&quot;, &quot;name&quot;: &quot;Second Wiki Post&quot;, &quot;description&quot;: &quot;&quot;, &quot;wikiId&quot;: &quot;_36_1&quot;, &quot;wikiName&quot;: &quot;Test Wiki&quot;, &quot;pointsPossible&quot;: 100, &quot;extensions&quot;: {} }, &quot;generated&quot;: { &quot;@context&quot;: [ &quot;http://caliper.blackboard.com/ctx/caliper/v1/Context&quot;, &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot; ], &quot;type&quot;: &quot;http://caliper.blackboard.com/caliper/v1/WikiPost&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/wiki/7cdeb8248ba84ec3a6f859973fb7764c/post/AXbTfLPSgpyqar8j43GB&quot;, &quot;name&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot;, &quot;totalWordCount&quot;: 17, &quot;extensions&quot;: {} }, &quot;eventTime&quot;: &quot;2021-01-05T16:58:42.126Z&quot;, &quot;edApp&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/applications/learn&quot;, &quot;type&quot;: &quot;SoftwareApplication&quot; }, &quot;membership&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/courses/e9c09e39c7844ae3b2ed677ac4fd90d7/members/9c60a9cdb3144d1aa77ff56c34ef248b&quot;, &quot;type&quot;: &quot;Membership&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_124_1&quot;, &quot;bb:course.externalId&quot;: &quot;og-101&quot;, &quot;bb:user.id&quot;: &quot;_227_1&quot;, &quot;bb:user.externalId&quot;: &quot;scott.hurrey@myschool.edu&quot; }, &quot;member&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/users/9c60a9cdb3144d1aa77ff56c34ef248b&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_227_1&quot;, &quot;bb:user.externalId&quot;: &quot;scott.hurrey@myschool.edu&quot; } }, &quot;organization&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/courses/e9c09e39c7844ae3b2ed677ac4fd90d7&quot;, &quot;type&quot;: &quot;CourseOffering&quot;, &quot;extensions&quot;: { &quot;bb:course.id&quot;: &quot;_124_1&quot; }, &quot;members&quot;: [], &quot;courseNumber&quot;: &quot;og-101&quot; }, &quot;roles&quot;: [&quot;Learner&quot;], &quot;status&quot;: &quot;Active&quot; }, &quot;federatedSession&quot;: { &quot;startedAtTime&quot;: &quot;2021-01-05T16:58:42.126Z&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/sessions/5118E091FCBDF29709BBD9D6F6758679&quot;, &quot;type&quot;: &quot;LtiSession&quot;, &quot;name&quot;: &quot;5118E091FCBDF29709BBD9D6F6758679&quot;, &quot;dateCreated&quot;: &quot;2021-01-05T16:58:42.126Z&quot;, &quot;user&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/users/9c60a9cdb3144d1aa77ff56c34ef248b&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_227_1&quot;, &quot;bb:user.externalId&quot;: &quot;scott.hurrey@myschool.edu&quot; } } }, &quot;extensions&quot;: {}, &quot;session&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/530efc49-6b9f-40a6-918b-966ee83a744c/sessions/5118E091FCBDF29709BBD9D6F6758679&quot;, &quot;type&quot;: &quot;Session&quot; } } ] }  Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Caliper Metric Profiles","type":0,"sectionRef":"#","url":"/docs/blackboard/caliper/getting-started/metric-profiles","content":"","keywords":"","version":null},{"title":"JSON Syntax​","type":1,"pageTitle":"Caliper Metric Profiles","url":"/docs/blackboard/caliper/getting-started/metric-profiles#json-syntax","content":"A Caliper event is essentially a large JSON document, built in a defined format, containing a specific set of data. The top level of this document contains 9 defined objects and two Linked Data elements to illustrate what data is expected. ","version":null,"tagName":"h2"},{"title":"Objects​","type":1,"pageTitle":"Caliper Metric Profiles","url":"/docs/blackboard/caliper/getting-started/metric-profiles#objects","content":"Object\tDescription@context\tDefines the short-hand names used throughout the Caliper event. type\tDefines the type of event being sent. actor\tThe entity performing the event. action\tWhat the actor actually did. object\tWhat the action was performed on. target\tAn entity that represents a particular segment or location within the object. generated\tThe result of the action. eventTime\tThe ISO-compliant date and time that the event happened. edApp\tThe application reporting the event. group\tThe environment that the event took place in, e.g. a course. Can be nested. membership\tInformation about the relationship between the actor and the group. federatedSession\tA unique identifier used to determine what system/tool is reporting data. If the event occurs within the context of an LTI Tool Launch, the actor's tool consumer LtiSession may be referenced. session\tThe user's current session ","version":null,"tagName":"h3"},{"title":"Sample Caliper Event​","type":1,"pageTitle":"Caliper Metric Profiles","url":"/docs/blackboard/caliper/getting-started/metric-profiles#sample-caliper-event","content":"{ &quot;sensor&quot;: &quot;a118bba8-5378-4533-899b-8862ac59db03&quot;, &quot;sendTime&quot;: &quot;2020-12-24T17:38:16.580Z&quot;, &quot;dataVersion&quot;: &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot;, &quot;data&quot;: [ { &quot;@context&quot;: &quot;http://purl.imsglobal.org/ctx/caliper/v1p1&quot;, &quot;type&quot;: &quot;SessionEvent&quot;, &quot;id&quot;: &quot;53d8542f-c4ff-4100-b2a4-1f8e035f0439&quot;, &quot;actor&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/users/ffc08009f0884c059192bac549e117b2&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_1_1&quot;, &quot;bb:user.externalId&quot;: &quot;administrator&quot; } }, &quot;action&quot;: &quot;LoggedIn&quot;, &quot;object&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/applications/learn&quot;, &quot;type&quot;: &quot;SoftwareApplication&quot;, &quot;extensions&quot;: { &quot;bb:request.headers.agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36&quot;, &quot;bb:request.headers.ipAddress&quot;: &quot;186.28.208.123&quot; } }, &quot;target&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03&quot;, &quot;type&quot;: &quot;DigitalResource&quot;, &quot;creators&quot;: [], &quot;learningObjectives&quot;: [], &quot;keywords&quot;: [] }, &quot;eventTime&quot;: &quot;2020-12-24T17:38:09.076Z&quot;, &quot;edApp&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/applications/learn&quot;, &quot;type&quot;: &quot;SoftwareApplication&quot;, &quot;extensions&quot;: { &quot;bb:request.headers.agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36&quot;, &quot;bb:request.headers.ipAddress&quot;: &quot;186.28.208.123&quot; } }, &quot;federatedSession&quot;: { &quot;startedAtTime&quot;: &quot;2020-12-24T17:38:09.076Z&quot;, &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/sessions/0356052DAA966AA071787F54DBFEB1B1&quot;, &quot;type&quot;: &quot;LtiSession&quot;, &quot;name&quot;: &quot;0356052DAA966AA071787F54DBFEB1B1&quot;, &quot;dateCreated&quot;: &quot;2020-12-24T17:38:09.076Z&quot;, &quot;extensions&quot;: { &quot;bb:request.headers.agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36&quot; }, &quot;user&quot;: { &quot;id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/a118bba8-5378-4533-899b-8862ac59db03/users/ffc08009f0884c059192bac549e117b2&quot;, &quot;type&quot;: &quot;Person&quot;, &quot;extensions&quot;: { &quot;bb:user.id&quot;: &quot;_1_1&quot;, &quot;bb:user.externalId&quot;: &quot;administrator&quot; } } }, &quot;extensions&quot;: {} } ] }  ","version":null,"tagName":"h3"},{"title":"Caliper Event Envelopes​","type":1,"pageTitle":"Caliper Metric Profiles","url":"/docs/blackboard/caliper/getting-started/metric-profiles#caliper-event-envelopes","content":"As one might imagine, there can be a huge amount of events being triggered and reported at any given time, and so the Caliper specification includes the concept of an event envelope. This envelope contains three entities: sensor - The sensor is the library creating and sending the events.sendTime - This is the ISO-compliant date and time the envelope was sent.data - an array containing one or more Caliper events. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Handling OIDC Login","type":0,"sectionRef":"#","url":"/docs/blackboard/lti/core/handling-oidc-login","content":"","keywords":"","version":null},{"title":"Overview​","type":1,"pageTitle":"Handling OIDC Login","url":"/docs/blackboard/lti/core/handling-oidc-login#overview","content":"The Open ID Connect 3rd-party-initiated login is the first step in handling an LTI 1.3 launch. From Learn you will receive a GET request to the URL you registered in the developer portal when you registered your application. The handling of this request is straight forward, but you'll need to note a couple of things. You will receive and lti_message_hint as a URL parameter. You must send it back unaltered.We do send the client_id and lti_deployment_id on the request, but note they are not required by the specification.We strongly recommend you create a state parameter value and send that with your response, and store that locally so it can be verified on the subsequent launch request. This is how you prevent CSRF attacks. Note, that Safari currently doesn't support sending 3rd party cookies back if you are hosted in an iframe. ","version":null,"tagName":"h3"},{"title":"Sample​","type":1,"pageTitle":"Handling OIDC Login","url":"/docs/blackboard/lti/core/handling-oidc-login#sample","content":"Some sample code in Node.js is below: exports.oidcLogin = function(req, res) { const state = uuid.v4(); // save this locally, such as in a cookie; optional in the OIDC spec const nonce = uuid.v4(); // Used to prevent playback const client = // You'll need to determine the client ID for this request from parameters on the request const redirectUri = // Get the Redirect URI for this client const oidcAuthUrl = // The URL you were given for this client when you registered your application let url = oidcAuthUrl + &quot;?response_type=id_token&quot; + &quot;&amp;scope=openid&quot; + &quot;&amp;login_hint=&quot; + req.query.login_hint + &quot;&amp;lti_message_hint=&quot; + req.query.lti_message_hint + &quot;&amp;state=&quot; + state + &quot;&amp;redirect_uri=&quot; + encodeURIComponent(redirectUri) + &quot;&amp;client_id=&quot; + clientId + &quot;&amp;nonce=&quot; + nonce; res.redirect(url); };  Contributors on this article: Eric Preston Former Staff Software EngineerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"OIDC Login Without Cookies - Sharing the lti_storage_target Between Platform and Tool","type":0,"sectionRef":"#","url":"/docs/blackboard/lti/core/poidc-login-lti_storage_target","content":"","keywords":"","version":null},{"title":"Motivation​","type":1,"pageTitle":"OIDC Login Without Cookies - Sharing the lti_storage_target Between Platform and Tool","url":"/docs/blackboard/lti/core/poidc-login-lti_storage_target#motivation","content":"We've seen questions from tool developers about the fact that Learn does not append the lti_storage_target parameter to the redirect URL that the tool has pre-registered with the Learn platform. We don't append that because Learn keeps that redirect URL sacrosanct given that https://www.oauth.com/oauth2-servers/redirect-uris/redirect-uri-registration/ indicates it should never be modified from the value given at registration time. You can get the lti_storage_target a couple of ways as shown in this video, one being to use the capabilities request, because Learn supports the optional frame field. The other way that you could get the lti_storage_target as a parameter on your redirect URL is to add that parameter and the value Learn uses: &lt;i_storage_target=lti_storage_frame ","version":null,"tagName":"h3"},{"title":"Details​","type":1,"pageTitle":"OIDC Login Without Cookies - Sharing the lti_storage_target Between Platform and Tool","url":"/docs/blackboard/lti/core/poidc-login-lti_storage_target#details","content":"In the evolving landscape of Learning Tools Interoperability (LTI) and online learning platforms, LTI 1.3 has emerged as a crucial standard for integrating learning applications with Learning Management Systems (Platforms) like Blackboard Learn and others. The core of LTI 1.3 facilitates seamless single sign-on (SSO) from an LMS into a learning application, but it's faced challenges with the move to block third-party cookies in web browsers for privacy reasons. Third-party cookies, used in the original LTI 1.3 Core and LTI Advantage Deep Linking specifications, are crucial for completing the security handshake required for users to SSO into a learning tool's user interface within an iframe in the LMS. However, as browsers increasingly block these cookies to protect user privacy, this poses a significant hurdle for LTI integrations. In response to these challenges, 1EdTech (formerly IMS Global) has developed new specifications to circumvent the use of third-party cookies during LTI 1.3 Core resource link launches, as well as Deep Linking content picker launches. These include allowing the tool to use JavaScript postMessage for accessing an additional iframe for shared storage between the tool and LMS. This approach maintains high security standards, ensuring that neither LTI Core resource link launches nor Deep Linking content picker launches can be spoofed. An essential aspect of this new specification is that it does not require the inclusion of the lti_storage_target parameter in the tool launch process following the OIDC login. Instead, the specifications offer alternative ways to achieve the necessary functionality without relying on this parameter. For example, the LMS can indicate its support for an additional iframe for shared storage through a capabilities endpoint. This flexibility is particularly crucial for platforms like Learn, which adheres strictly to the guidelines that redirect URIs should not be modified from their registered value, as indicated by OAuth 2.0 standards. These changes represent a significant advancement in addressing the challenges posed by the evolving web privacy landscape, ensuring that LTI integrations can continue to provide seamless and secure user experiences in online learning environments. For developers and institutions, it's essential to stay informed about these updates and consider implementing them to maintain the efficacy and security of their LTI integrations. Contributors on this article: Mark Kauffman Sr. Software EngineerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Handling the Launch with id_token JWT","type":0,"sectionRef":"#","url":"/docs/blackboard/lti/core/id-token","content":"","keywords":"","version":null},{"title":"Overview​","type":1,"pageTitle":"Handling the Launch with id_token JWT","url":"/docs/blackboard/lti/core/id-token#overview","content":"Once the OIDC login negotiation has succeeded you will receive a FORM POST from the browser with two form paramaters: id_token - this is the JSON Web Token (JWT) that contains all the launch information. See jwt.io for more information on JWTs. You can also use that site to inspect any JWTs you receive (or create).state - if you sent a state value back in the OIDC auth response you will receive this as a URL parameter. You can (should?) use to to ensure the user who initiated the OIDC login is the same user issuing the launch. These are the basic steps you should upon receiving the id_token JWT: Verify the token Get the header, body, and signature from the JWT (these parts are separated by a period .Verify the signing algorithm is what you expectGet the Client ID and its JWKS URL.Validate the signature, using a JWT library Parse the body into JSON - you now have all the information you need to handle the launch for your tool ","version":null,"tagName":"h3"},{"title":"Sample code​","type":1,"pageTitle":"Handling the Launch with id_token JWT","url":"/docs/blackboard/lti/core/id-token#sample-code","content":"Some sample code in Node.js is below: exports.handleIdToken = function(id_token) { let parts = id_token.split(&quot;.&quot;); let header = JSON.parse(Buffer.from(parts[0], &quot;base64&quot;).toString()); let body = JSON.parse(Buffer.from(parts[1], &quot;base64&quot;).toString()); // Verify launch is from correct party // aud could be an array or a single entry let clientId; if (jwtPayload.body.aud instanceof Array) { clientId = jwtPayload.body.aud[0]; } else { clientId = jwtPayload.body.aud; } let publicKey = // Get public key from the configured JWKS URL using the kid in the header of the JWT jwt.verify(id_token, jwk2pem(publicKey)); // All is good so run with the JWT body };  ","version":null,"tagName":"h3"},{"title":"Sample JWT JSON​","type":1,"pageTitle":"Handling the Launch with id_token JWT","url":"/docs/blackboard/lti/core/id-token#sample-jwt-json","content":"{ &quot;kid&quot;: &quot;53c4573a-1ac8-4484-b036-a7b22b557e8c&quot;, &quot;alg&quot;: &quot;RS256&quot; } { &quot;sub&quot;: &quot;4f1025ffab1846ee9ca0a53299dd51b6&quot;, &quot;https://purl.imsglobal.org/spec/lti/claim/deployment_id&quot;: &quot;c3c37f92-d008-43db-9e8a-e10fd139ec2d&quot;, &quot;https://purl.imsglobal.org/spec/lti/claim/version&quot;: &quot;1.3.0&quot;, &quot;https://purl.imsglobal.org/spec/lti-ags/claim/endpoint&quot;: { &quot;lineitems&quot;: &quot;https://example.com/learn/api/v1/lti/courses/_122_1/lineItems&quot;, &quot;lineitem&quot;: &quot;https://example.com/learn/api/v1/lti/courses/_122_1/lineItems/_7454_1&quot;, &quot;scope&quot;: [ &quot;https://purl.imsglobal.org/spec/lti-ags/scope/lineitem&quot;, &quot;https://purl.imsglobal.org/spec/lti-ags/scope/result.readonly&quot;, &quot;https://purl.imsglobal.org/spec/lti-ags/scope/score&quot; ] }, &quot;iss&quot;: &quot;https://blackboard.com&quot;, &quot;locale&quot;: &quot;en-US&quot;, &quot;https://purl.imsglobal.org/spec/lti/claim/tool_platform&quot;: { &quot;name&quot;: &quot;Blackboard, Inc.&quot;, &quot;description&quot;: &quot;Blackboard, Inc.&quot;, &quot;guid&quot;: &quot;b6932d2ade8c441982b53f99dcf0caf3&quot;, &quot;product_family_code&quot;: &quot;BlackboardLearn&quot;, &quot;version&quot;: &quot;3900.11.0-ci.7045+d7e0341&quot;, &quot;url&quot;: &quot;https://example.com/&quot;, &quot;contact_email&quot;: &quot;admin@example.com&quot; }, &quot;https://purl.imsglobal.org/spec/lti/claim/custom&quot;: { &quot;userNameLTI&quot;: &quot;jcool&quot;, &quot;caliper_profile_url&quot;: &quot;https://example.com/learn/api/v1/telemetry/caliper/profile&quot;, &quot;caliper_federated_session_id&quot;: &quot;https://caliper-mapping.cloudbb.blackboard.com/v1/sites/e0c7f37e-d260-4a83-b086-5cbbdb997bce/sessions/3DE97D40358C65C13681A22C004344DF&quot;, }, &quot;https://purl.imsglobal.org/spec/lti/claim/lis&quot;: { &quot;person_sourcedid&quot;: &quot;9283749283749&quot;, &quot;course_section_sourcedid&quot;: &quot;COURSE1-923749238&quot; }, &quot;https://purl.imsglobal.org/spec/lti/claim/launch_presentation&quot;: { &quot;return_url&quot;: &quot;https://example.com/webapps/blackboard/execute/blti/launchReturn?course_id=_122_1&amp;content_id=_18938_1&amp;toGC=false&amp;launch_id=46e5c1e7-a68a-40e8-80c3-fe24a2ed1195&amp;link_id=_18938_1&amp;launch_time=1614630380476&quot; }, &quot;exp&quot;: 1614633980, &quot;iat&quot;: 1614630380, &quot;email&quot;: &quot;jcool@example.com&quot;, &quot;https://purl.imsglobal.org/spec/lti-nrps/claim/namesroleservice&quot;: { &quot;context_memberships_url&quot;: &quot;https://example.com/learn/api/v1/lti/external/namesandroles/_122_1?placement_id=_553_1&quot;, &quot;scope&quot;: [ &quot;https://purl.imsglobal.org/spec/lti-nrps/scope/contextmembership.readonly&quot; ], &quot;service_versions&quot;: [ &quot;2.0&quot; ] }, &quot;given_name&quot;: &quot;Joe&quot;, &quot;https://purl.imsglobal.org/spec/lti/claim/roles&quot;: [ &quot;http://purl.imsglobal.org/vocab/lis/v2/membership#Instructor&quot; ], &quot;nonce&quot;: &quot;cb972240-2a01-45c6-954f-036c1153722b&quot;, &quot;https://purl.imsglobal.org/spec/lti/claim/target_link_uri&quot;: &quot;https://example.com/lti13&quot;, &quot;https://purl.imsglobal.org/spec/lti/claim/context&quot;: { &quot;id&quot;: &quot;6c19281a08504db5a447b511f00c0c7b&quot;, &quot;label&quot;: &quot;COURSE1&quot;, &quot;title&quot;: &quot;Course One&quot;, &quot;type&quot;: [ &quot;http://purl.imsglobal.org/vocab/lis/v2/course#CourseOffering&quot; ] }, &quot;https://purl.imsglobal.org/spec/lti/claim/resource_link&quot;: { &quot;description&quot;: &quot;A course content link&quot;, &quot;id&quot;: &quot;_18938_1&quot;, &quot;title&quot;: &quot;LTI JWT Content&quot; }, &quot;https://purl.imsglobal.org/spec/lti-gs/claim/groupsservice&quot;: { &quot;context_groups_url&quot;: &quot;https://example.com/learn/api/v1/lti/courses/_122_1/groups&quot;, &quot;context_group_sets_url&quot;: &quot;https://example.com/learn/api/v1/lti/courses/_122_1/groupsets&quot;, &quot;scope&quot;: [ &quot;https://purl.imsglobal.org/spec/lti-gs/scope/contextgroup.readonly&quot; ], &quot;service_versions&quot;: [ &quot;1.0&quot; ] }, &quot;aud&quot;: &quot;53c4573a-1ac8-4484-b036-a7b22b557e8c&quot;, &quot;https://purl.imsglobal.org/spec/lti/claim/message_type&quot;: &quot;LtiResourceLinkRequest&quot;, &quot;name&quot;: &quot;Joe Cool&quot;, &quot;family_name&quot;: &quot;Cool&quot; }  Contributors on this article: Eric Preston Former Staff Software EngineerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Welcome to LTI 1.3 for Blackboard Learn!","type":0,"sectionRef":"#","url":"/docs/blackboard/lti/introduction","content":"","keywords":"","version":null},{"title":"What Specifically is LTI 1.3?​","type":1,"pageTitle":"Welcome to LTI 1.3 for Blackboard Learn!","url":"/docs/blackboard/lti/introduction#what-specifically-is-lti-13","content":"Learning Tools Interoperability (LTI) 1.3 is the latest version of the LTI specification, which is a set of technical standards that enable learning management systems (LMSs) to integrate with external tools and content providers. LTI 1.3 builds upon the previous versions of LTI, adding new features and enhancements that improve the security, interoperability, and user experience of LTI integrations. Overall, LTI 1.3 is a significant improvement over previous versions of the specification, providing enhanced security, improved interoperability, a streamlined user experience, and easier implementation for developers. As a result, it has become the preferred version of LTI for many LMSs and external tool providers. ","version":null,"tagName":"h2"},{"title":"What are the Benefits of LTI 1.3?​","type":1,"pageTitle":"Welcome to LTI 1.3 for Blackboard Learn!","url":"/docs/blackboard/lti/introduction#what-are-the-benefits-of-lti-13","content":"Here are some of the key features and benefits of LTI 1.3: Enhanced security: LTI 1.3 introduces new security features such as JSON Web Tokens (JWTs) and the OpenID Connect (OIDC) authentication protocol, which provide a more secure way to exchange user information between the LMS and external tools. This reduces the risk of unauthorized access to sensitive user data and improves the overall security of LTI integrations. Improved interoperability: LTI 1.3 introduces the Resource Link Launch Request (RLLR) message, which enables better communication between the LMS and external tools regarding the specific context of a learning activity. This makes it easier for external tools to integrate with the LMS and provide a seamless user experience. Streamlined user experience: LTI 1.3 introduces a new Deep Linking feature, which enables instructors to create links to specific resources within external tools and embed them directly within their course content. This makes it easier for students to access external tools and content without leaving the LMS environment, improving the overall user experience. Easier implementation: LTI 1.3 introduces a new Developer Key and Secret mechanism, which simplifies the process of creating and managing LTI integrations. This makes it easier for developers to implement LTI integrations and reduces the time and effort required to maintain them. Contributors on this article: Eric Preston Former Staff Software EngineerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h2"},{"title":"LTI Advantage - Sample JSON","type":0,"sectionRef":"#","url":"/docs/blackboard/lti/lti-deep-linking","content":"","keywords":"","version":null},{"title":"Overview​","type":1,"pageTitle":"LTI Advantage - Sample JSON","url":"/docs/blackboard/lti/lti-deep-linking#overview","content":"This document documents sample JSON between the Learn LMS and an LTI Advantage Tool Provider. We'll be using https://github.com/blackboard/BBDN-LTI-Tool-Provider-Node for our examples. One use case we're often asked about is doing video embeds in Learn content. That will be our first, and for now, only example. How to Embed LTI Link Items into the editor via Deep Linking​ When adding content back from the internal tool for LTI 1.1/Deep Linking 1.0, you can specify custom JSON, use: { &quot;@context&quot;: &quot;http://purl.imsglobal.org/ctx/lti/v1/ContentItem&quot;, &quot;@graph&quot;: [ { &quot;@type&quot;: &quot;LtiLinkItem&quot;, &quot;@id&quot;: &quot;:item1&quot;, &quot;title&quot;: &quot;LTI embedded-app test&quot;, &quot;mediaType&quot;: &quot;text/html&quot;, &quot;url&quot;: &quot;https://lti-tool.dev.bbpd.io/lti&quot;, &quot;placementAdvice&quot;: { &quot;displayWidth&quot;: 147, &quot;displayHeight&quot;: 184, &quot;presentationDocumentTarget&quot;: &quot;iframe&quot; } } ] }  For LTI 1.3+/Deep Linking 2.0+ use: { &quot;type&quot;: &quot;ltiResourceLink&quot;, &quot;title&quot;: &quot;An Embedded Resource&quot;, &quot;text&quot;: &quot;A description&quot;, &quot;url&quot;: &quot;https://lti-tool-jwt.dev.bbpd.io/lti13&quot;, &quot;iframe&quot;: { &quot;width&quot;: 500, &quot;height&quot;: 800 } }  Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Migrating from LTI 1.0/1.1 to 1.3","type":0,"sectionRef":"#","url":"/docs/blackboard/lti/migrating/migrating-from-lt1.1-to-lti1.3","content":"","keywords":"","version":null},{"title":"Overview​","type":1,"pageTitle":"Migrating from LTI 1.0/1.1 to 1.3","url":"/docs/blackboard/lti/migrating/migrating-from-lt1.1-to-lti1.3#overview","content":"For the first time in LTI's history we need to handle migrating from one version to another. Before 1.3 the changes were all additive, but with 1.3 the payload format and security model have changed significantly, so we need a way to migrate existing LTI 1.1 (and 1.0) links to support the 1.3 format. Note that Learn has never allowed two tools or applications to be configured in the same Learn instance with the same fully qualified domain name (fqdn). This means that you cannot have both a 1.1 version and a 1.3 version of a tool configured at the same time if they use the same fqdn. If a tool provider wants to upgrade their tool to LTI 1.3/Advantage but not break all of an institution's existing links then they will need to host their LTI 1.3/Advantage tool at the same fqdn. In Learn we automatically upgrade the links for a tool when a Learn administrator deploys the 1.3 version of the tool. At deployment time, if Learn sees there is an existing 1.1 tool registered with the same domain(s) as the 1.3 tool the admin is prompted to migrate the links. If they choose &quot;yes&quot; then we migrate ALL LTI 1.1 links to the new LTI 1.3 application, effectively removing the LTI 1.1 domain configuration. The links remain and should work fine if the tool developer has done their job correctly. The target_link_uri for the 1.3 tool is the same as the launch URL defined in the LTI 1.1 placement or link. Contributors on this article: Eric Preston Former Staff Software EngineerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Getting Started With LTI","type":0,"sectionRef":"#","url":"/docs/blackboard/lti/getting-started-with-lti","content":"","keywords":"","version":null},{"title":"Overview​","type":1,"pageTitle":"Getting Started With LTI","url":"/docs/blackboard/lti/getting-started-with-lti#overview","content":"Learning Tools Interoperability (LTI) is a standard from the IMS Global consortium. This standard focuses on contextual launches and grade return. For more information about the standard, see Learning Tools Interoperability. Note that Learn supports two versions of LTI: 1. LTI 1.1 2. LTI 1.3/Advantage  This getting started guide is focused on LTI 1.3/Advantage. LTI 1.1 has been deprecated by the IMS Global, and it's been around for over 10 years. Learn will continue support of LTI 1.1 tools for the indeterminate future while LTI 1.1 tool developers migrate their tool to LTI 1.3/Advantage. If you are building a new tool, it is strongly recommended you use LTI 1.3/Advantage. ","version":null,"tagName":"h3"},{"title":"LTI 1.3/Advantage​","type":1,"pageTitle":"Getting Started With LTI","url":"/docs/blackboard/lti/getting-started-with-lti#lti-13advantage","content":"LTI Advantage consists of the following four specifications: 1. LTI Core (AKA LTI 1.3) 2. Deep Linking 3. Names and Roles 4. Assignments and Grades  Additional companion specs will be released as they are developed. Learn supports all of the above LTI Advantage specs, as well as the new Course Group spec which will be published soon. It is imperative that you read the specs from the IMS Global. They refer to other specifications that LTI Advantage is based on, such as the OIDC specification, JWT, and OAuth 2. We highly recommend you familiarize yourself with these specifications. Start with the IMS Security Framework here https://www.imsglobal.org/ims-security-framework Continue with the LTI Advantage specs here https://www.imsglobal.org/activity/learning-tools-interoperability The implementation guide is very helpful as well https://www.imsglobal.org/spec/lti/v1p3/impl/ You can test your tool with the IMS LTI Reference Implementation here: https://lti-ri.imsglobal.org/. It is written in Ruby and is open source. We have a sample LTI tool written in React and Node.js which we discuss in a later section. That can be found here:https://github.com/blackboard/BBDN-LTI-Tool-Provider-Node There are other LTI resources here: https://github.com/IMSGlobal/ltibootcamp ","version":null,"tagName":"h3"},{"title":"Building an LTI 1.3 Application​","type":1,"pageTitle":"Getting Started With LTI","url":"/docs/blackboard/lti/getting-started-with-lti#building-an-lti-13-application","content":"Please see this guide for a recipe on building an LTI 1.3 application. Note that you can develop an LTI application in any programming language and framework, and deploy it to any cloud service provider. We cannot provide guidance on what technologies or hosting platforms to use, but we will cover all the steps required for building an application. Tool Implementation Guide ","version":null,"tagName":"h3"},{"title":"Registering Your Application​","type":1,"pageTitle":"Getting Started With LTI","url":"/docs/blackboard/lti/getting-started-with-lti#registering-your-application","content":"In this section we cover how you register your application with Anthology and deploy it to a Learn instance. Registration and deployment are not covered in the specification (yet), and each LMS vendor handles it slightly differently. Anthology Developer Portal​ The first thing to understand about registering your application is that Anthology has you register your tool ONCE with our developer portal here https://developer.anthology.com. This is a central, self-service application, running in AWS where you enter information about your application, and are given the values you need for your application to work with LTI Advantage and Learn. It is also the same place you get the ID, key, and secret if you are going to use our public REST API. NOTE: Do not ask institutions to register your tool with the Anthology Developer Portal. You register it ONCE with Anthology and institutions can deploy it with the Client ID you give them. They will receive a Deployment ID which they will exchange with you to set up the account. It is the deployment ID, in conjunction with the client ID and issuer, that uniquely identifies the business agreement between the tool vendor and the institution. Information you Provide​ Domain​ We will use the terms Application and Tool interchangeably throughout this document. What we refer to as an Application may be different than how you see it. For Learn, an Application is a web application, accepting GET and POST requests at a URL. That application is defined by its fully-qualified domain name (FQDN). An application can have many FQDNs, but two applications cannot share the same FQDN. The reason has to do with needing to be able to immport course archives, such as from IMS Common Cartridge. If there are LTI links in that archive the only way we have today to map those links to a particular LTI Application is through domain matching. If that seems like a limitation, please read on. ","version":null,"tagName":"h3"},{"title":"LTI 1.3 Fields​","type":1,"pageTitle":"Getting Started With LTI","url":"/docs/blackboard/lti/getting-started-with-lti#lti-13-fields","content":"The LTI 1.3 spec defines the information you must provide to a Platform (LMS) such as Blackbaord Learn. Those values are: OIDC Login initiation URL This is the URL that Learn makes a GET request to in order to initiate an LTI launch. Without going into too much detail, the OIDC login establishes the identity of the user launching and you validate that you recognize this person. Due to the way that 3rd-party-initiated logins work in OIDC, you are not given the Client ID, so you must determine that by including a unique registration ID on the OIDC Login URL. What you provide is completely up to you, but it must distinguish a Learn login request from a request from any other LMS. Tool Redirect URL(s) This is the URL to which the LTI launch is POSTed. An LTI launch is a FORM POST with a form parameter named id_token. That id_token is a JWT that you then parse, verify, and handle. You can provide as many Tool Redirect URLs as you like, separated by commas in the UI, but we strongly recommend you provide only ONE. There is enough information in the id_token JWT for you to determine what to do with the LTI launch. Think of your web application as a router for LTI. You may have one or you may have hundreds of &quot;applications&quot; behind that &quot;router&quot;, directing LTI launches to their appropriate places. Tool JWKS URL This is the URL for your public key with which Learn validates that the messages it receives (such as Deep Linking, Names &amp; Roles, Assignment &amp; Grades) are from your application. It must adhere to the JWKS specification. Signing Algorithm Anthology currently supports RS256 and RS512. We can support more as we are requested to do so. ","version":null,"tagName":"h3"},{"title":"Custom Parameters​","type":1,"pageTitle":"Getting Started With LTI","url":"/docs/blackboard/lti/getting-started-with-lti#custom-parameters","content":"The LTI spec supports the notion of custom parameters with a launch. These are arbitrary name=value tuples that you can provide to uniquely identify the launch, or any other piece of information you need from the platform at launch time. See the following two documents on how to use substitution parameters within custom parameters to receive context-specific data on an LTI launch: IMS LTI 1.3 Parameter Substitution Learn Template Variables Information you Receive​ Once you have registered your application with the Blackboard Developer Portal, you will receive [almost] all the information you need to configuration your application to receive LTI 1.3 launches from a Learn instance. Application ID - this is the same as the Client ID in the OIDC spec. Because we already had the concept of registering an application for using our public REST API, and we use the same UI to register for both, we call it Application ID in some places, and Client ID in others. We apologize in advance for the confusion this causes.Issuer - is always https://blackboard.com because Blackboard is issuing the credentialsPublic keyset URL - Blackboard's public JWKS URL so you can validate the signature of messages a Learn instance sends youAuth token endpoint - the endpoint you use to get an OAuth 2 Bearer Token if you wish to make service calls, such as Assignment &amp; Grades, or Names &amp; Roles back to LearnOIDC auth request endpoint - the endpoint you respond to after you receive an OIDC login initiation request from Learn. NOTE: You will also receive an application key and secret. These are your credentials for using our public REST API. Be sure to save these off as you won't be able to get back at them later. We do not store the secret on our side. ","version":null,"tagName":"h3"},{"title":"LTI Placements​","type":1,"pageTitle":"Getting Started With LTI","url":"/docs/blackboard/lti/getting-started-with-lti#lti-placements","content":"In Learn the way an LTI tool is surfaced in the user interface (UI) is through the definition of one or more Placements. An application developer can define these placements so a Learn admin doesn't have to. There are currently six types of placements you can create: Type\tDescription\tOptionsDeep Linking\tSupports LTI Deep Linking to get content in outline or editor\tAllow student access Course Content\tCan be placed in the course outline or editor\tCan be graded Course\tAppears in Ultra Books &amp; Tools, Original Tools\tAllow student access System\tAppears in Ultra Base Nav Tools, Original Institution module Admin\tAppears in Admin Tools module UEF\tSpecial type for extending the Ultra UI; see UEF docs\t Placement properties​ In the table above some placements allow you to control whether students have access or not. Some placements allow you to configure if it can be graded or not. All placements have the following properties in common: Name - up to 50 charactersDescription - up to 1000 characters; only shows up in the admin area currentlyType - see aboveTarget link URI - because target_link_uri is part of the OIDC spec we support it here, however it's really just property of the placement. It can be anything you want. We don't launch to it, e.g., no FORM POST to this URL. It can be used for routing within your application.Icon - we currently suggest a 50x50 pixel icon (PNG, GIF, JPEG). I don't think we support SVG currently. We will resize as needed.Custom parameters - a list of name=value pairs, each on their own line. These override any set on the Tool level. See the section above on using substitution parameters. ","version":null,"tagName":"h3"},{"title":"Make Your LTI Tool Available to Learn Servers​","type":1,"pageTitle":"Getting Started With LTI","url":"/docs/blackboard/lti/getting-started-with-lti#make-your-lti-tool-available-to-learn-servers","content":"Once you have developed and registered an LTI tool, you can share it with Learn administrators so that they can configure their Learn servers to work with it. To deploy your application to a Learn instance share the Application ID with the administrator of that Learn server. At the point they enter the Application (Client) ID they will see the properties of the application you configured through the developer portal. They will also receive a new piece of information which is the Deployment ID. This deployment ID is sent with every LTI launch, and uniquely identifies the Learn instance that launch is coming from. It is likely that you'll need to use that deployment ID to map which Learn instance a launch is coming from. This is a bit of a chicken and egg problem, in that you have registered your application with the developer portal, but you don't know what Learn instances are using it yet. You can automatically handle that at launch time, e.g., if you haven't seen that deployment ID previously then prompt the user to set it up, or you can do the set up out of band. For more information about registering your application, see Register Your Application. At this point your application is connected to a Learn instance. All that remains is for an instructor or other user to create links in a course or use some of the automatically deployed links, such as a course tool placement. ","version":null,"tagName":"h3"},{"title":"LTI Placement to Building Block Link Mapping​","type":1,"pageTitle":"Getting Started With LTI","url":"/docs/blackboard/lti/getting-started-with-lti#lti-placement-to-building-block-link-mapping","content":"As new LTI Placement options are added to the Learn platform, the naming conventions can be a bit confusing for Building Block Developers. The purpose of this document is to give a high-level mapping of the terminology for Developers. Description\tLTI Placement\tB2 TypeA tool available to all users in a course\tCourse Tool-&gt;Student\ttool A tool available only to instructors in a course\tCourse Tool-&gt;Non-Student\tcourse_tool A course content tool\tCourse Content Tool\tcontent-handler A tool available outside of a course for all users\tSystem Tool\tuser_tool A tool available only to system administrators\tAdministrator Tool\tsystem_tool ","version":null,"tagName":"h3"},{"title":"Caveat​","type":1,"pageTitle":"Getting Started With LTI","url":"/docs/blackboard/lti/getting-started-with-lti#caveat","content":"Deleting a registered LTI domain and/or the associated managed placements from the Administrator Panel -&gt; LTI Tool Providers page will invalidate all of the associated LTI launch links in courses. The data will be gone from the database. There is no way to fix this. NEVER delete a registered domain or managed placements without considering these consequences. If you create an LTI 1.3 Tool that uses the same domain as a currently registered LTI 1.1 tool on a Learn system, there is code in Learn that will prompt you to migrate from LTI 1.1 to LTI 1.3. Generally that's a great option. Finally, only very brave people make changes on a production system without testing first on a test or staging system. We recommend you be more cautious than brave. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Sanctioned LTI Registration and Deployment with Learn","type":0,"sectionRef":"#","url":"/docs/blackboard/lti/lti-registration-deployment","content":"","keywords":"","version":null},{"title":"Motivation​","type":1,"pageTitle":"Sanctioned LTI Registration and Deployment with Learn","url":"/docs/blackboard/lti/lti-registration-deployment#motivation","content":"At Anthology we want our clients to have the best possible experience with Learn and the products that are integrated with it. To that end we developed a central registration service on our developer portal for use by 3rd-party vendors that are LTI 1.3 Tool providers. Using the central registration service, the Tool provider can go through the complexities of Tool registration and get a Client ID. That Client ID is all our mutual clients need to deploy a Tool. When the Tool is deployed a Deployment ID is generated that the client then provides the Tool vendor. The Client ID and Deployment ID are included in all LTI 1.3 communication, giving the Tool everything needed to identify the client's LMS. Reference LTI Registration and Deployment. ","version":null,"tagName":"h2"},{"title":"Why Vendor Tool-registration Is Best​","type":1,"pageTitle":"Sanctioned LTI Registration and Deployment with Learn","url":"/docs/blackboard/lti/lti-registration-deployment#why-vendor-tool-registration-is-best","content":"Why do we only sanction vendor Tool registration? First, the vendor owns the Tool, hence it should be their responsibility to manage it. Second, there are about nine pieces of information to exchange during the registration process. Those are vendor specific settings, and the client doesn't need to be aware of any of those. Third, and especially important, should the vendor need to change any details about their Tool, if they own the registration, they can change it in a one-time action on their registration for all clients with negligible impact on our mutual clients. If the vendor has requested the client register the vendor Tool, then every client will need to make the changes on the central registration system. This latter option is error prone and likely to produce Tool downtime for our mutual clients. Hence, a Tool vendor can always design their system and processes so that our mutual clients never have to register a Tool on the central registration service. Two limited exceptions apply: Unique Client Subdomains or a unique Login Initiation URL: In this case the vendor provides a unique subdomain and/or a unique Login Initiation URL for each client's Tool. In all other cases, the vendor can always take responsibility for registration of the Tool, get the Client ID and provide that with their documentation. Then the client can provide the Deployment ID to the Tool vendor, by whatever means, a self-service portal, email, etc. after deploying the Tool. On-premise deployments: In this case the vendor provides an installable extension to their product which the client must install on-premise. In this case it is required that the client registers the application and installs it. The bottom line is that having the vendor register their Tool(s) to get Client ID(s) and having our mutual clients simply deploy their Client ID in exchange for a Deployment is the best process. But, if a vendor believes that it’s necessary for clients to register an LTI Tool, then clients are free to do so, while knowing that said vendor can likely make the process easier and simpler. We ask that the vendor talk to us and consider improving their architecture and processes to make our mutual clients work easier on deployment. And again, for REST Applications or for LTI Applications using REST APIs, the client should never register except in the case that the client owns, hosts, and manages the REST Application on-premise. ","version":null,"tagName":"h2"},{"title":"tl;dr​","type":1,"pageTitle":"Sanctioned LTI Registration and Deployment with Learn","url":"/docs/blackboard/lti/lti-registration-deployment#tldr","content":"For LTI 1.3 only integrations the best client experience is given by a vendor when the vendor registers on the Anthology central registration portal and shares the client_id with the client. There are other processes that involve the vendor asking the client to register the LTI-1.3-only integration. While not ideal, that’s OK, as long as the integration is not using the associated REST API key/secret. Contributors on this article: Mark Kauffman Sr. Software EngineerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h2"},{"title":"Ultra Proctoring Service Integration - IMS Proctoring Spec + UEF","type":0,"sectionRef":"#","url":"/docs/blackboard/lti/proctoring/proctoring-service-integration","content":"","keywords":"","version":null},{"title":"Overview​","type":1,"pageTitle":"Ultra Proctoring Service Integration - IMS Proctoring Spec + UEF","url":"/docs/blackboard/lti/proctoring/proctoring-service-integration#overview","content":"There are many proctoring solutions available in the market today. Our clients license a variety of these services and would like to continue to use them in Ultra. Given the sheer number of proctoring services out there, it is not feasible for Blackboard to build and maintain customized integrations with each one. Therefore there was a need for us to develop a solution that would allow all proctoring solutions to be able to integrate with Ultra. ","version":null,"tagName":"h2"},{"title":"Frameworks and Specifications​","type":1,"pageTitle":"Ultra Proctoring Service Integration - IMS Proctoring Spec + UEF","url":"/docs/blackboard/lti/proctoring/proctoring-service-integration#frameworks-and-specifications","content":"Ultra Extension Framework: This solution utilizes Ultra Extension Framework, allowing proctoring services to render settings directly inside of Ultra assessment settings. This provides a uniform experience for instructors as proctoring settings are now amongst other settings. IMS Proctoring Specification: IMS global recently released V1 of a proctoring spec. This spec is built on top of LTI and provides a baseline for how assessment platforms communicate with proctoring services. As part of this solution, Learn has been updated (and certified by IMS) to support this spec and utilize it for proctoring. Below is a diagram outlining the spec:  ","version":null,"tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Ultra Proctoring Service Integration - IMS Proctoring Spec + UEF","url":"/docs/blackboard/lti/proctoring/proctoring-service-integration#configuration","content":"","version":null,"tagName":"h2"},{"title":"LTI Tool​","type":1,"pageTitle":"Ultra Proctoring Service Integration - IMS Proctoring Spec + UEF","url":"/docs/blackboard/lti/proctoring/proctoring-service-integration#lti-tool","content":"Each proctoring provider will need to create an account on the Dev Portal and register an application. Follow the steps below: Create a new group for your organization​ Click &quot;My Groups&quot; in the headerClick &quot;Create new group&quot;Enter your organization name as the group name Note: Ultra Extension Framework requires Premium API Access. This will need to be granted to your group by a dev portal administrator. Register a new application (if you do not already have one)​ Click + sign to add a new applicationFill out all required fieldsSelect the group name that you created above in step 1Slide the toggle next to &quot;My Integration supports LTI 1.3&quot; to enter information for LTI 1.3 ","version":null,"tagName":"h3"},{"title":"LTI Placements​","type":1,"pageTitle":"Ultra Proctoring Service Integration - IMS Proctoring Spec + UEF","url":"/docs/blackboard/lti/proctoring/proctoring-service-integration#lti-placements","content":"Two types of LTI placements will need to be created to successfully integrates as a proctoring service. Ultra Extension​ id: rest_apis-premium-apis-uef-getting_started id: rest_apis-premium-apis-uef-getting_started This placement will be the primary means of communication between your application and Ultra Extension Framework. Ultra Extension Framework will be used to render the settings of each proctoring service inside the assessment settings of Ultra. Once your application is authorized with Ultra Extension Framework, your app will be able to use the API to register as a proctoring service and provide HTML to display. See for more information about UEF including tutorials on how to get started. Create new Ultra Extension placement:​ From the &quot;My Applications&quot; screen click the ... menu next to your applicationSelect &quot;Manage Placements&quot;Click the &quot;Register&quot; ButtonFill out required fields. Be sure to select &quot;Ultra extension&quot; as Type:Click &quot;Register placement&quot; Proctoring​ This placement will be used to communicate with your application when a student takes starts a proctored assessment. This placement type is restricted and will need to be created by a Dev Portal admin at Blackboard. Create new Ultra Extension placement:​ From the &quot;My Applications&quot; screen click the ... menu next to your applicationSelect &quot;Manage Placements&quot;Click the &quot;Register&quot; ButtonFill out required fields. Be sure to select &quot;Proctoring&quot; as Type:Click &quot;Register placement&quot; ","version":null,"tagName":"h3"},{"title":"Ultra Extension Framework​","type":1,"pageTitle":"Ultra Proctoring Service Integration - IMS Proctoring Spec + UEF","url":"/docs/blackboard/lti/proctoring/proctoring-service-integration#ultra-extension-framework","content":"Now that your LTI tool and placements are configured and you have authorized with UEF, it's time to register as a proctoring service with UEF. Below is an outline of events that will be of interest to you. proctoring-service:register​ You will need to register as a proctoring service with UEF. At this step, you will need the unique handle of the proctoring placement supplied by Blackboard. proctoring-service:register​ // Tell UEF we are a proctoring service sendMessage({ type: 'proctoring-service:register', proctoringPlacementHandle: &lt;unique_handle_goes_here&gt; }); // UEF sent a new message if (msg.data.type === 'proctoring-service:register') { // This is UEF responding to your message. A status will be included as well as an error if something went wrong console.log(msg.data.proctoringPlacementHandle); console.log(msg.data.status); console.log(msg.data.errorMessage); }  proctoring-service:settings-saved​ UEF will send this message when the user saves the assessment settings. This is to notify the proctoring service to save off the current settings for this assessment. This is an asynchronous message so UEF will wait for your response until the timeout is reached. proctoring-service:settings-saved​ if (msg.data.type === 'proctoring-service:settings-saved') { // Settings were saved for this contentId console.log(msg.data.contentId); // Status of proctoring console.log(msg.data.enabled); // Your response back to UEF after you have done what you need to sendMessage({ type: 'proctoring-service:settings-saved:response', correlationId: msg.data.correlationId, success: true, error: undefined }); }  event:subscribe​ You will need to subscribe to portal:new events. Once subscribed, UEF will notify you when a portal (an area to host content) becomes visible in the UI. In this case when the proctoring configuration panel is opened. event:subscribe // Tell UEF we want to subscribe to portal events sendMessage({ type: 'event:subscribe', subscriptions: ['portal:new', 'portal:remove'] }); // UEF sent a new message if (msg.data.type === 'event:event') { // The event type is a new portal if (msg.data.eventType === 'portal:new') { // Name of the portal in view console.log(msg.data.selector) // ID of portal in view console.log(msg.data.portalId) // Any specific data relavant to this portal console.log(msg.data.selectorData) } }  portal:render​ This is the message the proctoring service will send to UEF to render the proctoring settings. The selector for proctoring panel is course.content.assessment.settings.proctoring.panel.settings: portal:render // UEF sent a new message if (msg.data.type === 'event:event') { // The event type is a new portal if (msg.data.eventType === 'portal:new') { // Check if this matches the proctoring panel selector if (msg.data.selector === 'course.content.assessment.settings.proctoring.panel.settings') { // ID of this portal. This must be sent back to UEF in the portal:render message const portalId = msg.data.portalId; // contentId is included for convience in the selectorData console.log(msg.data.selectorData.contentId); const contentsToSend = { tag: 'div', children: [{ tag: 'span', children: `Proctoring Service Settings` }] }; // Send message to UEF to render this content sendMessage({ type: &quot;portal:render&quot;, portalId: portalId, contents: contentsToSend }); } } }  ","version":null,"tagName":"h3"},{"title":"Accessing assessment settings​","type":1,"pageTitle":"Ultra Proctoring Service Integration - IMS Proctoring Spec + UEF","url":"/docs/blackboard/lti/proctoring/proctoring-service-integration#accessing-assessment-settings","content":"Pre-requisites: Create an Ultra courseCreate a Test or Assignment Click the gear icon next to &quot;Test Settings&quot; Scroll down and click the &quot;Configure proctoring settings&quot; linkNote: If this section is not present, the proctoring placement has likely not been created or is set to unavailable. If the setup was done correctly, you should see your proctoring service in the dropdown menu. If the toggle is enabled the contents you passed to Ultra Extension Framework in the portal:render message should display in the (red) box in the image below If the following error message is shown One of the following may be true: Ultra Extension placement has not been created or is set to unavailableAuthorization with Ultra Extension Framework failedError in your JS script Ultra Extension Framework is calling Contributors on this article: Mark Kauffman Sr. Software EngineerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h2"},{"title":"Ultra Proctoring Service Tutorials - IMS Proctoring Spec + UEF","type":0,"sectionRef":"#","url":"/docs/blackboard/lti/proctoring/proctoring-service-tutorials","content":"Ultra Proctoring Service Tutorials - IMS Proctoring Spec + UEF Overview​ This series explains how to set up the UEF and and LTI Proctoring Learn. We use the Blackboard GitHub repos BBDN-UEF-Python and BBDN-LTI-Tool-Provider-Node to demonstrate. Our modified BBDN-UEF-Python code is the portion of the integration that displays the proctoring settings to the instructor. The BBDN-LTI-Tool-Provider-Node code contains stubs for the LTI Proctoring Service. Part 1​ In the Part 1 video we get you through the configuration of the two tools. You will learn how to get a proctoring managed placement from Blackboard. At the end of this video you will not have yet set up the UEF registration for the Proctoring managed placement. Hence when you click the &quot;Configure proctoring settings&quot; link in the assessment settings you will see an error in the JavaScript console. Part 2​ In the Part 2 video we show how to add code to the UEF Python tutorial-integration.js to register the proctoring placement, after which the &quot;Configure proctoring settings&quot; link will work to show the proctoring managed placement. Part 3​ In the Part 3 video we show how to display your proctoring configuration. Recap and Review​ In the Recap and Review video we review the fundamentals of the setup and demonstrate it working on the cookieless solution provided with Learn(tm) build 3900.13.rel31. Also shown is that the solution works great with the student preview feature. Contributors on this article: Mark Kauffman Sr. Software EngineerIntegrations, Developer Relations and Standards Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards Eric Preston Former Staff Software EngineerIntegrations, Developer Relations and Standards","keywords":"","version":null},{"title":"LTI In Learn - Turn On All The Switches","type":0,"sectionRef":"#","url":"/docs/blackboard/lti/turn-on-all-switches","content":"","keywords":"","version":null},{"title":"Overview​","type":1,"pageTitle":"LTI In Learn - Turn On All The Switches","url":"/docs/blackboard/lti/turn-on-all-switches#overview","content":"We often hear about this message &quot;The Tool Provider has been disabled by the System Administrator&quot; The usual cause is that one of the 3 LTI switches is disabled. There are 3 places you need to enable LTI: (1) at the tool level, (2) at the course/organization level, and (3) at the LTI Global Properties level. Screenshots follow. LAST, BUT NOT LEAST - Make certain you are enrolled in the course, as an instructor or student, before using the LTI placements you create in a course! Your launch will fail if you don't have a role in the course. ","version":null,"tagName":"h3"},{"title":"All the Switches​","type":1,"pageTitle":"LTI In Learn - Turn On All The Switches","url":"/docs/blackboard/lti/turn-on-all-switches#all-the-switches","content":"(1) Administrator Panel -&gt; Tools &amp; Utilities section -&gt; Tools  (2) In a Course/Organization, Start at the Left Nav Menu  (3) Administrator Panel -&gt; Integrations section -&gt; LTI Tool Providers -&gt; Manage Global Properties  Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"LTI Registration and Deployment with Learn","type":0,"sectionRef":"#","url":"/docs/blackboard/lti/registration-deployment","content":"","keywords":"","version":null},{"title":"Why do we use a central service at Anthology?​","type":1,"pageTitle":"LTI Registration and Deployment with Learn","url":"/docs/blackboard/lti/registration-deployment#why-do-we-use-a-central-service-at-anthology","content":"We believe that having Tool vendors register an LTI Tool once through the Developer Portal is the best approach. It allows Learn admins to deploy that tool by entering just one piece of information (the Client ID) in the Admin Panel and sharing another piece of information (the Deployment ID) with the Tool vendor. Tool vendor's clients don't need to register individual applications with the Developer Portal. That defeats the entire purpose of building this centralized service to make everyone's life a little simpler. When a Tool vendor needs to make changes to their tool configuration they do it in one place for Learn: the Developer Portal. If they add a new redirect URL, change the name of their application, or if they need to change the attributes of a placement (such as the icon, name, or target link URL) they can do so in one place. Learn admins can then synchronize their deployment without having to make those changes themselves: all the information required to perform an LTI launch is retrieved from the Developer Portal. ","version":null,"tagName":"h2"},{"title":"LTI 1.3/Advantage Security​","type":1,"pageTitle":"LTI Registration and Deployment with Learn","url":"/docs/blackboard/lti/registration-deployment#lti-13advantage-security","content":"With LTI 1.3, an LTI Tool or Tool Provider shares a lot of information with a Tool Consumer or Platform and we must manage the signing and validation of the payload in a very different way than with the previous versions. With LTI 1.1, we used to exchange just 3 pieces of information: Key, Secret, and URL. LTI 1.1 uses OAuth 1.0a signing of the FORM POST parameters to ensure that the data is secure. With LTI 1.3, the entire security model has changed. The LTI 1.3/Advantage security model is based on OAuth 2 and OpenID Connect. It uses client credentials grant for getting bearer tokens, just like our REST API mechanism but rather than issuing keys and secrets we rely on asymmetric public/private key pairs. Learn is responsible for generating a private key that signs the LTI messages it sends to the tool, and it makes its public key(s) available via a JWKS URL for the tool to validate the signature of those messages. A tool is responsible for generating a private key that it uses to sign OAuth 2 bearer token requests for LTI messages it sends to Learn, such as Deep Linking response, Names and Roles, and Assignment and Grades. It provides a JWKS URL for its public key(s) so Learn can validate the signature of messages the tool sends to Learn. ","version":null,"tagName":"h2"},{"title":"LTI 1.3 Registration​","type":1,"pageTitle":"LTI Registration and Deployment with Learn","url":"/docs/blackboard/lti/registration-deployment#lti-13-registration","content":"Because of the new security model and because LTI 1.3 has built-in support for preventing cross-site request forgery attacks (CSRF or XSRF), there is more information that needs to be shared between a tool and a platform. The LTI 1.3 specification requires that a Tool share the following: Login Initiation URLTool Redirect URL(s)Tool JWKS URLSigning Algorithm (RS256 or RS512 are the current choices) The above values are defined by the OpenID Connect 3rd-party-initiated login flow and the fact that we are using asymmetric keys. The specification also requires that a Platform share the following information with the tool: Client IDIssuerAuth token endpointOIDC auth request endpointPlatform JWKS URLDeployment ID The first 5 come from the OAuth 2 and OpenID Connect specifications upon which the LTI 1.3 security model is built. The Deployment ID is an LTI 1.3 construct to allow multiple deployments of a tool for a single Client ID, such as different colleges at a university. We've gone from three pieces of information to share between a platform and tool in LTI 1.1 to ten pieces of information that must be shared. ","version":null,"tagName":"h2"},{"title":"Anthology Developer Portal​","type":1,"pageTitle":"LTI Registration and Deployment with Learn","url":"/docs/blackboard/lti/registration-deployment#anthology-developer-portal","content":"With LTI 1.3, since keys and secrets are no longer shared, and the signing of messages uses asymmetric public/private key pairs, Blackboard has the opportunity to generate its keys in a central service and do the signing and validation of messages there. With Learn we have split the registration of a tool from the deployment of a tool. Rather than ask a Learn administrator to exchange all of the above information with a Tool vendor (which is information the Learn admin doesn't care about and could easily make mistakes in entering) and in order to make both the Tool vendor and the Learn admin lives a bit better, we have centralized the registration of a tool. A Tool vendor registers their tool once with the Blackboard Developer Portal, exchanging all of the information above except the Deployment ID. The tool vendor is granted a Client ID and shares it with their clients. A Learn admin takes that Client ID and deploys it to Learn by entering a single value (the Client ID) in the Admin Panel. All the rest of the information required to perform an LTI launch from that Learn instance is retrieved from the Developer Portal. A Learn admin is granted a Deployment ID that it shares with the Tool vendor to uniquely identify the account associated with that institution. A Tool vendor now has all the information they need to accept LTI launches from that institution. ","version":null,"tagName":"h2"},{"title":"LTI Links or Placements​","type":1,"pageTitle":"LTI Registration and Deployment with Learn","url":"/docs/blackboard/lti/registration-deployment#lti-links-or-placements","content":"Another aspect of LTI that the specification does not address is the issue of where an LTI link gets surfaced and what type of links do they support. A tool may want a link in the course outline, or in the rich content editor, or in a system-wide area, or as a link for a course but not in the outline. A tool may want to support Deep Linking so an instructor can select or create content in the Tool and have the links appear in the course. Learn has the concept of LTI Placements to support this. Blackboard allows a Tool vendor to register those placements with the Developer Portal, so an admin doesn't have to do that work.  If you have any other questions about LTI Registration and Deployment with Learn, let us know. Contributors on this article: Eric Preston Former Staff Software EngineerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h2"},{"title":"Developing an LTI 1.3/Advantage Solution - Recordings and Resources","type":0,"sectionRef":"#","url":"/docs/blackboard/lti/tutorials/develop-lti-advantage","content":"","keywords":"","version":null},{"title":"Caveat​","type":1,"pageTitle":"Developing an LTI 1.3/Advantage Solution - Recordings and Resources","url":"/docs/blackboard/lti/tutorials/develop-lti-advantage#caveat","content":"Deleting a registered LTI domain and/or the associated managed placements from the Administrator Panel -&gt; LTI Tool Providers page will invalidate all of the associated LTI launch links in courses. The data will be gone from the database. There is no way to fix this. NEVER delete a registered domain or managed placements without considering these consequences. If you create an LTI 1.3 Tool that uses the same domain as a currently registered LTI 1.1 tool on a Learn system, there is code in Learn that will prompt you to migrate from LTI 1.1 to LTI 1.3. Generally that's a great option. Finally, only very brave people make changes on a production system without testing first on a test or staging system. We recommend you be more cautious than brave. ","version":null,"tagName":"h3"},{"title":"Webinars​","type":1,"pageTitle":"Developing an LTI 1.3/Advantage Solution - Recordings and Resources","url":"/docs/blackboard/lti/tutorials/develop-lti-advantage#webinars","content":"NEW!! During DevCon 2020 Eric Preston presented the following on developing an LTI 1.3/Advantage solution. This is a must-watch if you are starting out on your LTI 1.3/Advantage journey. Or, if you have questions, you will likely find the answers here. Watch this recording. Here are the slides On April 10, 2019, Eric Preston, Blackboard's resident LTI expert, spoke with us in Technical Office Hours. He gave us an overview of LTI technology. Watch recording the recording in Bb Collaborate. On May 1, 2019, Eric followed up with another, deeper dive into coding an LTI integration. Watch the recording in Bb Collaborate. This is the associated slide deck.) Here is the sample code referenced in the presentations: https://github.com/blackboard/BBDN-LTI-Tool-Provider-Node Contributors on this article: Mark Kauffman Sr. Software EngineerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"LTI 1.3 Tool Implementation Guide","type":0,"sectionRef":"#","url":"/docs/blackboard/lti/tutorials/lti-implementation-guide","content":"","keywords":"","version":null},{"title":"Overview​","type":1,"pageTitle":"LTI 1.3 Tool Implementation Guide","url":"/docs/blackboard/lti/tutorials/lti-implementation-guide#overview","content":"Implementing an LTI 1.3 + Advantage tool is involved, but we'll break down the steps here. There are many good resources for building an LTI 1.3 tool as well: IMS LTI Implementation GuideLTI Bootcamp Resources ","version":null,"tagName":"h3"},{"title":"What is LTI?​","type":1,"pageTitle":"LTI 1.3 Tool Implementation Guide","url":"/docs/blackboard/lti/tutorials/lti-implementation-guide#what-is-lti","content":"At the end of the day all LTI is is a hyperlink from one web application (a Learning Management System or Virtual Learning Environment, called a Platform in the LTI specs) to another web application, called a Tool. The tool is normally hosted at a different domain and often created and supported by another vendor or the learning institution. The difference with LTI from a regular hyperlink is it includes data such as the user making the request, the course context and possibly information about the resource (e.g., assignment, discussion, book chapter). For this reason an LTI message must be sent as an HTTP FORM POST to the receiving web application. ","version":null,"tagName":"h3"},{"title":"Security​","type":1,"pageTitle":"LTI 1.3 Tool Implementation Guide","url":"/docs/blackboard/lti/tutorials/lti-implementation-guide#security","content":"Why is LTI complicated if all it is is a hyperlink with data? The answer is: security. A tool cannot blindly receive an HTTP POST with data from just anywhere. It needs to know who is sending that data and that it can trust the sender. A security contract must be established between the learning institution hosting the LMS and the tool. Additionally, because all LTI traffic is being transfered via a web browser, that traffic needs to be secured, both from an encryption standpoint as well as from a request forgery standpoint. Cross-site Request Forgery​ When a browser-based application has links that a user can click on to make something happen, there is an inherent risk of a cross-site request forgery attack, often abbreviated as CSRF or XSRF. If you are logged into your bank account's web site and they have a link or a URL that allows you to transfer money from one account to another, you run the risk of a malicious party offering you a link via email or social media that could get you to transfer money from your account to accounts you don't intend to send money. In the world of teaching and learning, with an LTI tool link, there exists the possibility that a malicious user could offer you a link via email or social media to get you to act on their behalf, such as take a quiz or buy a book. We'll soon see how the LTI specs prevent this sort of attack. Encryption​ Sensitive personal data are sent in LTI messages, so those data must be encrypted and LTI requires the use of TLS 1.2 or higher protocol from the browser. The days of insecure http transport are over. You must run your tool behind SSL supporting the TLS 1.2 or higher protocol. Authentication​ A tool needs to have a trust relationship with any LMS sending them an LTI message. They can't just accept a message from anyone. Messages must be signed by the sending party and that signature must be validated by the receiving party. The solution the IMS Global has adopted is to use OAuth 2, OpenID Connect, JSON Web Tokens (JWT), and asymmetric public/private key pairs. These are all industry standard specifications for security, and LTI builds upon those. When a platform sends a message it packages it up as a JSON Web Token (JWT) and signs the token with its private key that it has minted and stores securely. The platform publishes its public key at a publicly-accessibly URL and the tool uses that public key to validate the signer of the message. ","version":null,"tagName":"h3"},{"title":"Registration Information​","type":1,"pageTitle":"LTI 1.3 Tool Implementation Guide","url":"/docs/blackboard/lti/tutorials/lti-implementation-guide#registration-information","content":"In order to achieve the security objectives, there are some pieces of information that must be exchanged between the platform and the tool. This is the security contract. The platform must receive the following information from the tool: The fully-qualified domain name(s) where the tool is hosted, e.g., example.comThe OIDC Login URI - a URL to the tool's endpoint for initiating the 3rd-party initiated login flow, which protects agains CSRF. See the OIDC 3rd-party intiated login specification.One or more Redirect URIs - a URL where the tool will receive the LTI FORM POST with the id_token (JWT) containing the LTI message payload. Note, the redirect URIs must use the fully-qualified domain names referenced above.JWKS URL - The URL for the tool's public key set. If the tool is going to send messages to the platform, such as a Deep Linking response or a request for an OAuth access token, then the tool must sign those messages with a private key that it has minted, and provide the public key associated with that private key. This is the asymmetric part mentioned above. See https://tools.ietf.org/id/draft-ietf-jose-json-web-key-00.html for more information.A signing algorithm, e.g., RS-256 or RS-512. Both sides need to agree on the algorithm to sign and verify messages. The tool must receive and store for later use the following information from the platform: Issuer - the issuer of the credentials. In Learn's case it is always https://blackboard.comClient ID - in Learn this is labeled the Application ID. An issuer can have one or more client IDs associated with it.Public JWKS URL - the JWKS URL of the platform (Learn in this case) with which the tool validates the signature of incoming LTI messagesOAuth 2 Token URL - the URL of the platform's OAuth 2 token issuer for use when making LTI service calls, such as for Assignment and Grades, or Names and Roles.OIDC Auth Request URL - the URL the tool must redirect back to after an OIDC login request. This is part of the OIDC login flow for protecting agains CSRF attacksDeployment ID - a single client ID can have one or more deployments, so tools must track each of those deployments. This is an extension created by the LTI specification. With Learn you will also receive an Application Key and and Application Secret. Store these securely. These are what you use if you want to use the Learn public REST API. ","version":null,"tagName":"h3"},{"title":"LTI Message Launch Flow​","type":1,"pageTitle":"LTI 1.3 Tool Implementation Guide","url":"/docs/blackboard/lti/tutorials/lti-implementation-guide#lti-message-launch-flow","content":"We have covered the information the two parties need to exchange and why that information is needed, at a high level. Now we look at the specifics of implementing the reception of an LTI launch by a tool from a platform. The UML sequence diagram below shows all the steps, including some optional ones, for implementing the reception of an LTI message launch. We'll break each step down in words.  ","version":null,"tagName":"h2"},{"title":"LTI Launch​","type":1,"pageTitle":"LTI 1.3 Tool Implementation Guide","url":"/docs/blackboard/lti/tutorials/lti-implementation-guide#lti-launch","content":"OIDC Login​ When a user clicks on an LTI link within Learn the Learn server receives a GET request from the browser with information about that LTI link. Once it loads the tool configuration associated with that link the first thing it does is initiate the OIDC Login request with a browser redirect to the registered OIDC Login URI provided by the tool. It passes some information along with the request as query parameters. The data sent by the platform on the OIDC login are: issuerlogin_hint - an opaque value to the tool that must be returned backtarget_link_uri - the URI configured by the tool for this LTI linklti_message_hint - an opaque value to the tool that must be returned backlti_deployment_id - this is optional, but Learn always sends itclient_id - this is optional, but Learn always sends itlti_storage_target - for use if cookies aren't possible The tool must then redirect or post back to the registered OIDC Authentication Request URI provided by the platform, including a Redirect URI (which must be pre-registered) and a state value, along with the other values passed in by the platform. The Redirect URI declares where the tool wants the subsequent LTI launch to go, and the state is what protects against CSRF. The state should be saved in a cookie, so the tool can verify that the initiator of the request is the same browser that sends the LTI message launch. If a cookie cannot work because of browser restrictions preventing setting of cookies by 3rd parties in iframes, then another option must be pursued. There is a new spec coming soon to help with that. The fields the tool must send back are: response_type=id_tokenscope=open_idlogin_hint - that was passed in on the login requestlti_message_hint - that was passed in on the login requeststate - a value the tool generates for protecting against CSRFnonce - a value the tool generates to protect against duplicate requestsredirect_uri - a pre-registered URL the tool wants the subsequent LTI POST to be madeclient_id - the client ID of this registration Receive JWT​ The platform receives the OIDC authentication request from the tool and validates that the redirect URI is registered. It then builds the id_token (JWT) that contains the LTI payload (user, course, resource, etc.) and signs it with its private key. The platform then auto-submits a FORM with the POST method to the redirect URI the tool specified with two form parameters: id_token - the JWTstate - the state the tool passed to the platform in the OIDC login response The tool receives this FORM POST from the browser and the first thing it should do is validate the state is what it stored in the cookie. If it doesn't match the tool should reject the request. The next step is to unpack the JWT and validate the signature. JWTs are comprised of three Base64-encoded strings separated by the period (.) sign. The first part is the header which contains the key ID (kid) and signing algorithm. The second part is the payload in JSON format, and it contains the issuer (iss), client ID (aud), user ID (sub) and other information about the launch. The tool must look up the platform configuration for that issuer/client ID/deployment ID combination and get the platform's public key from the registered public key URL, using the kid in the JWT header for selecting the particular public key the platform requires. The third part is the signature, which normally the tool code won't work with directly. The tool then uses a library of their choosing to validate the signature of the JWT. If the signature is valid then the tool can proceed to process the rest of the JWT information and render its UI with the information it has about the LTI message. Optional Steps​ There are two optional steps in the sequence diagram above. Learn REST Token​ If your tool is going to use the Learn public REST API in order to get or set information it can't via LTI then it should retrive a Learn OAuth 2 access token at this time and cache it. There are choices as to what OAuth 2 flow you can use, so please refer to this document on how to retrieve a Learn OAuth 2 access token. In the diagram above we show using the AuthCode flow as its the most common for UI-based work where you want the API call to be done on behalf of the interacting user. See this document on using three-legged oauth. LTI Rest Token​ If your tool wants to take advantage of the LTI services, such as Assignment &amp; Grades, or Names &amp; Roles, then you'll need to retrieve an LTI access token. This token is of a different format and uses a different security model than the Learn public API. You'll need to construct a signed (with your private key) JWT and post that to the OAuth 2 Token URL registered with the tool. If all is well you will receive an access token back, which you should cache, and use for making service calls back to Learn. We'll cover making service calls in a later section. ","version":null,"tagName":"h3"},{"title":"LTI Deep Linking​","type":1,"pageTitle":"LTI 1.3 Tool Implementation Guide","url":"/docs/blackboard/lti/tutorials/lti-implementation-guide#lti-deep-linking","content":"LTI Deep Linking is a UI flow that allows a user, often an instructor, to launch from the platform to the tool, via the browser, and display a UI from the tool from which to select or create content that will end up back in the platform. For example, you may wish to include links to publisher content in the course outline. You may wish to embed an instructional video in the rich text editor of a discussion or assignment. You may wish to create an assignment via a plagiarism detection service and include that in a learning module. There are unlimited use cases for deep linking. The key point to understand is that it's about getting content from a 3rd party LTI provider into the Learning Management System of your choice. Rather than having an instructor copy and paste URLs the tool vendor provides, which is the old way of doing things, deep linking allows the instructor (or student, in the case of submitting an assignment or contributing to a discussion) to select content via the tool's browser-based UI. An LTI Deep Linking launch is much like a Resource Link launch, except the message type is different, and you receive an additional claim: https://purl.imsglobal.org/spec/lti-dl/claim/deep_linking_settings This claim contains information about what the platform accepts, and a data field that must be sent back. The tool then presents a UI allowing the user to select or create content the tool provides. It can be LTI links, web links, files, images, or html. Learn only supports LTI links and web links at the moment. You can return one or more content items, and depending on from where the tool was launched the links will appear in the course outline or the rich text editor. If returned to the rich text editor they can be displayed as hyperlinks or embedded in the editor. See Deep Linking JSON for details on how to configure the rendering of LTI links in the rich text editor. Contributors on this article: Eric Preston Former Staff Software EngineerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h2"},{"title":"LTI Advantage - Names and Roles","type":0,"sectionRef":"#","url":"/docs/blackboard/lti/tutorials/names-and-roles","content":"","keywords":"","version":null},{"title":"Overview​","type":1,"pageTitle":"LTI Advantage - Names and Roles","url":"/docs/blackboard/lti/tutorials/names-and-roles#overview","content":"This document documents gives updates on Names and Roles as new features become available. For the definitive specifications, always refer to the published IMS documenation. ","version":null,"tagName":"h3"},{"title":"Student Preview User Now Indicated By TestUser Role via Names and Roles Service​","type":1,"pageTitle":"LTI Advantage - Names and Roles","url":"/docs/blackboard/lti/tutorials/names-and-roles#student-preview-user-now-indicated-by-testuser-role-via-names-and-roles-service","content":"This new functionality is seen in the Names and Roles service as implemented in Learn. When your LTI 1.3 tool reaches back to Learn using the Names and Roles service to get a list of memberships, a Student Preview user listed in the course memberships will have a new role listed in the roles claim. Ex &quot;https://purl.imsglobal.org/spec/lti/claim/roles&quot;: [ &quot;http://purl.imsglobal.org/vocab/lti/system/person#TestUser&quot; ],  As of this writing, 2020.04.07, this addition to the Names and Roles service has not yet been added to the IMS Names and Role Provisioning Services documentation. It will likely be added as an addendum soon. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"LTI 1.3/Advantage - 4-Part Webinar","type":0,"sectionRef":"#","url":"/docs/blackboard/lti/tutorials/migrating-testing-tool","content":"","keywords":"","version":null},{"title":"Overview​","type":1,"pageTitle":"LTI 1.3/Advantage - 4-Part Webinar","url":"/docs/blackboard/lti/tutorials/migrating-testing-tool#overview","content":"This document contains links to a complete demonstration of setting up and using https://github.com/blackboard/BBDN-LTI-Tool-Provider-Node. Shout out to Scott Hurrey &amp; Eric Preston and the team (everyone you see on the commit list at the repo!) for all their work and help with this. ","version":null,"tagName":"h2"},{"title":"Getting Started​","type":1,"pageTitle":"LTI 1.3/Advantage - 4-Part Webinar","url":"/docs/blackboard/lti/tutorials/migrating-testing-tool#getting-started","content":"The most important thing you can do to begin is to read, and understand the specification. We STRONGLY encourage you to join the IMS. There are many members-only resources. ","version":null,"tagName":"h3"},{"title":"Video Part I.​","type":1,"pageTitle":"LTI 1.3/Advantage - 4-Part Webinar","url":"/docs/blackboard/lti/tutorials/migrating-testing-tool#video-part-i","content":"Video Part I is a demonstration of setting up and running https://github.com/blackboard/BBDN-LTI-Tool-Provider-Node on your local box to use SSL. Prerequisite: Follow ALL OF THE INSTRUCTIONS in the README of the git repo to clone a local copy and set up Redis. ","version":null,"tagName":"h3"},{"title":"Video Part II.​","type":1,"pageTitle":"LTI 1.3/Advantage - 4-Part Webinar","url":"/docs/blackboard/lti/tutorials/migrating-testing-tool#video-part-ii","content":"Video Part II demonstrates registration of your local copy of BBDN-LTI-Tool-Provider-Node (BLTPN) on the developer portal and using the values from the registration to configure your local BLTPN. ","version":null,"tagName":"h3"},{"title":"Video Part III.​","type":1,"pageTitle":"LTI 1.3/Advantage - 4-Part Webinar","url":"/docs/blackboard/lti/tutorials/migrating-testing-tool#video-part-iii","content":"Video Part III demonstrates use of the 1.3 Tool in Learn, creating a deep-linking managed placement, using the link to create content with the BLTPN tool. Near the end of the video we look at how to use LTI 1.3 Names and Roles to get all of the users in the course from which the link was clicked/launched. ","version":null,"tagName":"h3"},{"title":"Video Part IV.​","type":1,"pageTitle":"LTI 1.3/Advantage - 4-Part Webinar","url":"/docs/blackboard/lti/tutorials/migrating-testing-tool#video-part-iv","content":"Video Part IV is a demonstration of custom parameters from the Deep Link launch request and also a review of Names and Roles in that request. The purpose of Names and Roles is to let the Tool Provider get all of the memberships in the course, and the role of each member with a call to one endpoint using LTI 1.3 security. Comming soon: A screenshot of how this looks from the BLTPN - showing the first two members and their roles that were retrieved from the course. Contributors on this article: Mark Kauffman Sr. Software EngineerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Using the pyLTI1p3 Library with Learn","type":0,"sectionRef":"#","url":"/docs/blackboard/lti/tutorials/pylti13","content":"","keywords":"","version":null},{"title":"About The Project​","type":1,"pageTitle":"Using the pyLTI1p3 Library with Learn","url":"/docs/blackboard/lti/tutorials/pylti13#about-the-project","content":"The Flask sample is a simple way to test all the LTI Advantage capabilities of any platform that supports it. Essentially, the application is a brick breaker type game. It uses a basic launch to load the game. It uses the Names and Roles Provisioning Service to load a leaderboard, it uses the Assignments and Grades Service to save your score, and you can use Deep Linking to create links to the game with varying degrees of difficulty. Best of all, with a few minor configuration changes, this project works with Learn out of the box! ","version":null,"tagName":"h3"},{"title":"Getting Started​","type":1,"pageTitle":"Using the pyLTI1p3 Library with Learn","url":"/docs/blackboard/lti/tutorials/pylti13#getting-started","content":"As with any project, the first step is to clone the project to your local desktop. To do this, simply open a terminal, navigate to the directory you wish to clone the application to, and type git clone https://github.com/dmitry-viskov/pylti1.3-flask-example.git. If you are interested in making changes, you should fork the repo to your own account, and clone from there. ","version":null,"tagName":"h2"},{"title":"Setting Up Learn​","type":1,"pageTitle":"Using the pyLTI1p3 Library with Learn","url":"/docs/blackboard/lti/tutorials/pylti13#setting-up-learn","content":"Developer Portal​ Now that we have the project cloned locally, we need to register the application for use with Learn. We do this via the developer portal. For more information on this process, check out this document. Once you have an account set up, you can simply register a new application. You will be prompted to enter several pieces of information. For this project, here is what we need to enter: Field\tDescription\tExampleApplication Name\tYou can enter anything you like, but this name will display in Learn\tPy LTI 1.3 Game Description\tThis is a free-form field. You can enter anything you like.\tA brick-breaker-style game written by Dmitry Viskov to demonstrate LTI Advantage in Python Domain(s)\tThis should be the domain you plan to host the tool from. We use Heroku, in our example. This requires some additional code changes, documented here\tpylti1p3-game.herokuapp.com Login Initiation URL\tThis is the URL that Learn will use to launch into your application to begin the OIDCLogin process\thttps:pylti1p3-game.herokuapp.com/login/ Tool Redirect URL(s)\tThe URL to redirect to upon successful completion of the OIDC Login\thttps:pylti1p3-game.herokuapp.com/launch/ Tool JWKS URL\tThe publicly accessible URL to the tool's public key. We do not use this in this project, so we will leave it blank and let the portal generate our private key Signing Algorithm\tThe cryptographic algorithm used to sign the JWT. Leave this as RS256 Group\tThe developer group to associate with the integration. Here is more information on groups\t Once you fill out this form, click the Register application and generate API key button, and you will be prompted with several pieces of information. You will only see this once, so make sure you save the data somewhere. Click Done to take you back to the applications page. We have one more step to go. Next to the name of your game, click the ellipsis ... icon to launch the context menu and select Manage Placements. Click the Register button. In the Name field, give the placement a name that you want to display to the instructor. In the Desciption field, type anything you like. Under Type, select Deep Linking content tool. Under Target link URI, enter the launch URL to your tool. In our case it is https://pylti1p3-game.herokuapp.com/launch/. Now click Register placement, and we are ready to deploy the tool in Learn. Learn System Admin​ Now that we have our application registered, we have to tell our Learn instance that we have an application we want to integrate. To do this, you will need administrator privileges. Navigate to your Learn server in your browser and login as an appropriate user. Click the Admin link in the Ultra Base Navigation to access the System Administrator panel. In the Integrations module, click the link for LTI Tool Providers. Then in the menu bar, click Register LTI 1.3 Tool. You are prompted for a Client ID. In the data you received from the developer portal, there was an Application ID. In LTI, this is your Client ID, and we will need it here. Paste in your Client ID and click submit. Learn will reach out to the Developer Portal, verify your Client ID and then display a form with all the settings available. Many of these settings are read-only. We need to save the Deployment ID, make sure the tool is marked as 'Approved', and be sure to enable memberships and posting of grades. Then click submit. Our game is now installed in Learn! ","version":null,"tagName":"h3"},{"title":"Setting Up The Tool​","type":1,"pageTitle":"Using the pyLTI1p3 Library with Learn","url":"/docs/blackboard/lti/tutorials/pylti13#setting-up-the-tool","content":"There are four files we need to modify in our tool in order to run it. In the repository you cloned to your desktop, you will see a configs directory. game.json​ In game.json, you will already see a section for Blackboard. It will look like this: &quot;https://blackboard.com&quot;: { &quot;client_id&quot;: &quot;your client id&quot;, &quot;auth_login_url&quot;: &quot;https://developer.anthology.com/api/v1/gateway/oidcauth&quot;, &quot;auth_token_url&quot;: &quot;https://developer.anthology.com/api/v1/gateway/oauth2/jwttoken&quot;, &quot;key_set_url&quot;: &quot;https://developer.anthology.com/api/v1/management/applications/&lt;your client id&gt;/jwks.json&quot;, &quot;key_set&quot;: null, &quot;private_key_file&quot;: &quot;private.key&quot;, &quot;deployment_ids&quot;: [&quot;your deployment id&quot;] }  The Blackboard URL is the Issuer sent in the LTI launch JWT. This is always the value in Learn. The value for client_id should be set to your client ID (application ID from the Developer Portal). The auth_login_url and auth_token_url settings are always the same, and do not need to be changed. The key_set_url is always the same, as well, though it contains your client ID, so you will need to replace &lt;your client id&gt; with, you guessed it, your client ID. The deployment ID that you received when you registered your tool in learn goes in the deployment_ids setting. Save this file. Private/public key pair​ You need to generate your own private/public key pair in RSA format. There are many online tools or command-line tools to do this. The next file we need to modify is the private.key file, also in the configs directory. Delete the current contents, and paste the private key you generated. You should put your public keyi in the public.key file. Last, you'll need to convert your public key to the JWK format and put that in the public.jwk.json file. We are now ready to run our code! The final step is to deploy the Game application to the server it will run on and run python game/app.py. ","version":null,"tagName":"h3"},{"title":"Using Heroku​","type":1,"pageTitle":"Using the pyLTI1p3 Library with Learn","url":"/docs/blackboard/lti/tutorials/pylti13#using-heroku","content":"If you are planning to run this on Heroku, there are a few additional changes that need to be made before you deploy your code. First, Heroku needs to know what to do when your code is committed. Enter Procfile. Simply create a file named Procfile at the root level of the game, and in it place: web: python game/app.py  Now save this file. Next, open up game/app.py. At the very bottom of the page, you will see an entry that looks like this: if __name__ == '__main__': app.run(host='0.0.0.0', port=9017)  Heroku controls the ports that your application runs on, and setting it incorrectly renders your application useless. Furthermore, it can change from deploy-to-deploy. As such, we need to pull the port number from environment variables. To do so, replace the code above with the code below: if __name__ == '__main__': port = int(os.environ.get('PORT', 33507)) app.run(host='0.0.0.0', port=port)  Lastly, app.py is in the game directory rather than the root directory, so we need to make a few small adjustments. Towards the top (around line 27), you will see the Flask app being initialized: app = Flask('pylti1p3-game-example', template_folder='templates', static_folder='static')  We need to account for the directory we are running in, and add the path to this declaration: app = Flask('pylti1p3-game-example', template_folder='game/templates', static_folder='game/static')  And finally, we need to make sure our application can find the LTI configuration file. Around line 65, you will see a method called get_lti_config_path and it will look like this: def get_lti_config_path(): return os.path.join(app.root_path, '..', 'configs', 'game.json')  Make it look like this: def get_lti_config_path(): return os.path.join(app.root_path, 'configs', 'game.json')  And that's it. You can now check in your code to your Heroku dyno - git push -u heroku master - and Heroku will build and run your application. Once its complete, you can run heroku logs --tailto see the communication between Learn and our game. ","version":null,"tagName":"h3"},{"title":"Running The Game From Learn​","type":1,"pageTitle":"Using the pyLTI1p3 Library with Learn","url":"/docs/blackboard/lti/tutorials/pylti13#running-the-game-from-learn","content":"Now that all the setup is done, we are ready to play our game. As a user in a course with Instructor privileges, login to Blackboard and navigate to your Ultra course. In the left-hand navigation, you will see a link to View course &amp; institution tools. Click this link. In teh corresponding peek panel, click the link to Browse all course tools. Under the Institution Tools header, you will find the placement we created. It will be listed under the label you defined when creating the placement. Click this link, and you will be launched via LTI to a simple form that allows you to select the difficulty of the game you wish to play. Click the button for your selected difficulty, and the tool will automatically create a link to the game with the selected difficulty in your course outline. NOTE: If you selected 'Launch in a new window' when you created the placement, you will have to refresh the course outline before you will see the content item. You should now have a content item called Breakout &lt;your selected difficulty&gt; mode!. Click it to play!​ In the background, the tool uses the Names and Roles Provisioning service to create a leaderboard with the course members. Further, it uses the Assignments and Grades Service to store your latest score. Pretty fancy, right? Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h2"},{"title":"Service Maintenances and Releases","type":0,"sectionRef":"#","url":"/docs/blackboard/premium-apis/maintenance-page","content":"Service Maintenances and Releases Published: July 26, 2024 Last Update: July 26, 2024 Contributors on this article: Sebastian Silva Software EngineerIntegrations, Developer Relations and Standards","keywords":"","version":null},{"title":"What are Premium APIs","type":0,"sectionRef":"#","url":"/docs/blackboard/premium-apis/requesting-premium-apis","content":"","keywords":"","version":null},{"title":"Our Premium APIs​","type":1,"pageTitle":"What are Premium APIs","url":"/docs/blackboard/premium-apis/requesting-premium-apis#our-premium-apis","content":"","version":null,"tagName":"h2"},{"title":"Ultra Extension Framework​","type":1,"pageTitle":"What are Premium APIs","url":"/docs/blackboard/premium-apis/requesting-premium-apis#ultra-extension-framework","content":"UEF is a set of Premium APIs that augment the Ultra experience of Learn. We designed a robust set of capabilities such as telemetry, help provider registration, and UI element rendering to enable better integrations and richer user experience. Take a look at First steps with UEF to get started. ","version":null,"tagName":"h3"},{"title":"How to request a Premium API​","type":1,"pageTitle":"What are Premium APIs","url":"/docs/blackboard/premium-apis/requesting-premium-apis#how-to-request-a-premium-api","content":"If you’re an Anthology client or a partner in Bronze level or above, please submit a Behind the Blackboard ticketand we’ll get back to you as soon as possible. If you’re a Blackboard Developer Network Partner (BbDN), a Community Partner or a third-party developer interested in our Premium APIs, we offer a variety of partnership levels in theAnthology Partnership Program. Once you upgrade your partnership level, please submit a Behind the Blackboard ticket. Contributors on this article: Hernan Ortiz Former Sr. Content DesignerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h2"},{"title":"Learn's Ultra Extension Framework","type":0,"sectionRef":"#","url":"/docs/blackboard/premium-apis/uef/getting-started","content":"","keywords":"","version":null},{"title":"Introducing Learn's Ultra Extension Framework​","type":1,"pageTitle":"Learn's Ultra Extension Framework","url":"/docs/blackboard/premium-apis/uef/getting-started#introducing-learns-ultra-extension-framework","content":"We’re excited to introduce a new means of integration with the Learn Ultra Experience, known as the Ultra Extension Framework (UEF). The UEF is a set of Premium APIs that augment the Ultra experience of Learn with a robust set of capabilities including telemetry, help provider registration, and UI element rendering - all designed to enable better integrations and richer user experience. What can you do with the UEF? The UEF is a set of Premium APIs that offers several new capabilities for integrations with the Learn Ultra Experience. Telemetry: Receiving of detailed user navigation behavior data, including click, route, and hoover events: Here you may find a demo User Interface Elements: Ability to populate UI elements and content, including capabilities for banners, modals, and notifications. Help Provider Registration: Option to override the default behavior of the native help tool in Ultra. We gave several partners early access to the UEF. The following videos are examples of how these partners used the UEF to better deliver their integration in Ultra. Video: Eesysoft uses help provider registration, telemetry, notifications and modals to deliver enhanced, context-sensitive help to the user. Screenshots eXplorance Video: eXplorance uses telemetry, notifications, and a modal peek-panel to prompt for Blue Course Evaluations. Screenshots Qwickly Video: Qwickly delivers capabilities to a student in an Ultra Course banner without the need to launch a separate LTI peek-panel. Screenshots If you are a developer and interested in pursuing use of the UEF Premium APIs in your integration with the Learn Ultra Experience, what are your next steps? Send an email to BbPartnerTeam bbpartnerteam@blackboard.com with the subject &quot;Interested in Partnership That Includes Premium API Access.&quot; Ask for time to discuss such with a member of our partnership team. Note that if you are a partner with a partnership-level of Bronze or higher, or you are a client, then you can simply file a Behind the Blackbaord ticket requesting UEF access. In the ticket include the email used to register the REST application, and the name of the group where you will place applications that you want UEF enabled. Check back here often as this page will be updated frequently with more details. Contributors on this article: Anthology Inc Integrations, Developer Relations and Standards TeamAnthology Inc ","version":null,"tagName":"h2"},{"title":"UEF Tutorials","type":0,"sectionRef":"#","url":"/docs/blackboard/premium-apis/uef/tutorials","content":"","keywords":"","version":null},{"title":"Ultra Extension Framework​","type":1,"pageTitle":"UEF Tutorials","url":"/docs/blackboard/premium-apis/uef/tutorials#ultra-extension-framework","content":"This tutorial starts with a Python-based LTI 1.3 Hello World application and shows you how to convert that project into a UEF integration. The tutorial is also available in a Youtube playlist, if you prefer to learn in this way. If you prefer to go directly to Youtube, click here  ","version":null,"tagName":"h3"},{"title":"Sample Code!​","type":1,"pageTitle":"UEF Tutorials","url":"/docs/blackboard/premium-apis/uef/tutorials#sample-code","content":"You may find the related code used on the videos here: GitHub BBDN-UEF-Python ","version":null,"tagName":"h3"},{"title":"Advanced UEF​","type":1,"pageTitle":"UEF Tutorials","url":"/docs/blackboard/premium-apis/uef/tutorials#advanced-uef","content":"Add a course banner. See this tutorial/demo video. GitHub BBDN-UEF-Python/101-UEF-COURSE-BANNER ","version":null,"tagName":"h3"},{"title":"Notice​","type":1,"pageTitle":"UEF Tutorials","url":"/docs/blackboard/premium-apis/uef/tutorials#notice","content":"Before releasing a UEF integration, that uses the UEF Premium APIs, to production you will be required to meet a certain level of Blackboard Partnership. See Become a Blackboard Partner. Contributors on this article: Mark Kauffman Sr. Software EngineerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Configuring Ultra Extension Framework in Learn","type":0,"sectionRef":"#","url":"/docs/blackboard/premium-apis/uef/tutorials/configuring-uef","content":"Configuring Ultra Extension Framework in Learn Published: Not Available Last Update: Not Available The Ultra Extension Framework (UEF) encompasses a broad array of features and functionality, and as such, each UEF-enabled integration will have its own specific configuration settings. However, the setup process followed by a Learn System Administrator leverages existing standard configuration workflows already in place. Adding a UEF-enabled integration to a Learn environment requires a System Admin to make configuration changes to one or more of the following areas: REST API Integrations: UEF-enabled integrations will need to be added as a REST API integration [Administrator Panel ⇨ REST API Integrations ⇨ Create Integration]. LTI Tool Providers: UEF-enabled integrations will need to be registered as an LTI Tool Provider. We recommend using LTI 1.3, though LTI 1.1 will work. To register an LTI 1.3 tool: [Administrator Panel ⇨ LTI Tool Providers ⇨ Register LTI 1.3 Tool] To register an LTI 1.1 tool: [Administrator Panel ⇨ LTI Tool Providers ⇨ Register Provider Domain] New LTI Placement Type: &quot;Ultra extension&quot; As part of the Ultra integration framework development, it's necessary to define a way for Learn admins to register an Ultra integration and how the registered integrations are going to be loaded inside Ultra: • We'll keep the current registration workflow for LTI 3rd party tools, but a new placement type will be added so that is possible to know when an LTI tool is expected to work as an Ultra UI integration. • The new LTI placement type will be known as &quot;Ultra extension&quot; and such type will only be visible for Learn Ultra instances. NOTE: When registering an LTI 1.1 Placement, you must include the following information: Tool Provider URLTool Provider KeyTool Provider Secret The Tool Provider Key and Tool Provider Secret would be the ones given by the devportal when the application is created and the Tool Provider URL must follow this format: https://example.provider.com/lti-launch?id=&lt;PlacementId&gt;&amp;appkey=&lt;Tool Provider Key&gt; Cross-Origin Resource Sharing: For UEF-enabled integrations that make direct calls to their Learn instance's REST API will need be be configured via the Cross-Origin Resource Sharing (CORS) tool [Administrator Panel ⇨ Cross-Origin Resource Sharing ⇨ Create Configuration]. Contributors on this article: Mark Kauffman Sr. Software EngineerIntegrations, Developer Relations and Standards","keywords":"","version":null},{"title":"LTI Launch context added in new Window Launches","type":0,"sectionRef":"#","url":"/docs/blackboard/premium-apis/uef/tutorials/launch-context-added-nwl","content":"","keywords":"","version":null},{"title":"Introduction​","type":1,"pageTitle":"LTI Launch context added in new Window Launches","url":"/docs/blackboard/premium-apis/uef/tutorials/launch-context-added-nwl#introduction","content":"This enhancement to the UEF integration framework provides the ability for an integration to send a newEvent lti:launch even when the route is directed to new window launch from the LTI service, which inclujdes toolHref (launchUrl) and the placementId along with it. ","version":null,"tagName":"h2"},{"title":"Updated response for existing EventTypes​","type":1,"pageTitle":"LTI Launch context added in new Window Launches","url":"/docs/blackboard/premium-apis/uef/tutorials/launch-context-added-nwl#updated-response-for-existing-eventtypes","content":"Currently when navigation to the LTI laumch inside the same page, the route event type we subscribe to is eventType: &quot;route&quot;,&quot;route:changing&quot;. As expected the LTI launch in the same window, will have the previously defined events and the launch URL is added as toolHref and the placementId in the same url as the blti_placement_id. Sample Response:​ Existing - Subscribing Events { type: &quot;event:event&quot;, eventType: &quot;route&quot;, routeData: { &quot;coursesOrOrganizations&quot;: &quot;courses&quot;, &quot;courseId&quot;: &quot;_3_1&quot;, &quot;isLaunchedInNewWindow&quot;: true/false, &quot;toolHref&quot;: &quot;https://mylearn.int.bbpd.io/webapps/blackboard/execute/blti/launchPlacement?blti_placement_id=_12_1&amp;content_id=_35_1&amp;course_id=_3_1&amp;wrapped=true&amp;from_ultra=true&quot; } ... }  ","version":null,"tagName":"h3"},{"title":"New response for new EventTypes​","type":1,"pageTitle":"LTI Launch context added in new Window Launches","url":"/docs/blackboard/premium-apis/uef/tutorials/launch-context-added-nwl#new-response-for-new-eventtypes","content":"This is when we select new window options while creating placements in LTI. As expected the LTI launch in a new window will have the new mentioned events and launch url is added as toolHref and placementId in the same irl as blti_placement_id. Sample response:​ New - Subscribing Events - eventType: &quot;lti:launch&quot; { type: &quot;event:event&quot;, eventType: &quot;lti:launch&quot;, launchData: { &quot;coursesOrOrganizations&quot;: &quot;courses&quot;, &quot;courseId&quot;: &quot;_3_1&quot;, &quot;isLaunchedInNewWindow&quot;: true/false, &quot;toolHref&quot;: &quot;https://mylearn.int.bbpd.io/webapps/blackboard/execute/blti/launchPlacement?blti_placement_id=_12_1&amp;content_id=_35_1&amp;course_id=_3_1&amp;wrapped=true&amp;from_ultra=true&quot; } ... }   Contributors on this article: Subitha Muniasamy Sr. Software EngineerProduct Development Blackboard Learn ","version":null,"tagName":"h3"},{"title":"LTI Launch context added in new Window Launches","type":0,"sectionRef":"#","url":"/docs/blackboard/premium-apis/uef/tutorials/communication-page-lvl-analytics","content":"","keywords":"","version":null},{"title":"Introduction​","type":1,"pageTitle":"LTI Launch context added in new Window Launches","url":"/docs/blackboard/premium-apis/uef/tutorials/communication-page-lvl-analytics#introduction","content":"This enhancement to the UEF integration allows the framework to know if an analytics-id exists (or not) on the page, so should partners want to add functionality onto a page based on an elements visibility they are sure of the object they want to target. ","version":null,"tagName":"h2"},{"title":"Outline of page-level analytics-id to integration​","type":1,"pageTitle":"LTI Launch context added in new Window Launches","url":"/docs/blackboard/premium-apis/uef/tutorials/communication-page-lvl-analytics#outline-of-page-level-analytics-id-to-integration","content":"In order to provide a number of key functionalities that are already being supported in Learn Original, Some partner integration need the ability to ask UEF about the presence of specific elements in the current focused panel and in view port on the page based on the analytics-id. The response will be a true or false as to whether the element is present on screen. ","version":null,"tagName":"h2"},{"title":"Batch Processing and Rate-limiting​","type":1,"pageTitle":"LTI Launch context added in new Window Launches","url":"/docs/blackboard/premium-apis/uef/tutorials/communication-page-lvl-analytics#batch-processing-and-rate-limiting","content":"All of the requests received under one second will be batched and a single response will be sent at the end of one second to its respective integration portal. If Single Integration - rate limiting to 20 requests / second.If Multiple Integration - rate limiting to 15 requests /second to each integration. The timer will be initiated on any first request. ","version":null,"tagName":"h2"},{"title":"Request Structure​","type":1,"pageTitle":"LTI Launch context added in new Window Launches","url":"/docs/blackboard/premium-apis/uef/tutorials/communication-page-lvl-analytics#request-structure","content":"Two key's must be present in request Json -&gt; Type and AnalyticsIds. Type → This key must contain the String value which indicates the request type and purpose of request. AnalyticsIds → This key should have the list of analytics Id's for which the page components presence will be checked in the current view port and in the active panel with 100% visibility. The type of this request event integration will always be &quot;analytics:visible&quot; Below is the example of the request structure ","version":null,"tagName":"h2"},{"title":"Request Event​","type":1,"pageTitle":"LTI Launch context added in new Window Launches","url":"/docs/blackboard/premium-apis/uef/tutorials/communication-page-lvl-analytics#request-event","content":"{ &quot;type&quot;:&quot;analytics:visible&quot;, &quot;analyticsIds&quot;:[&quot;analyticsId&quot;, &quot;analyticsId&quot;, ...] }  ","version":null,"tagName":"h3"},{"title":"Response Structure​","type":1,"pageTitle":"LTI Launch context added in new Window Launches","url":"/docs/blackboard/premium-apis/uef/tutorials/communication-page-lvl-analytics#response-structure","content":"Two key's will be present in the response Json -&gt; Type and Result. This response will have all &quot;analyticsId&quot; which was sent in the request event along with &quot;isElementVisible&quot; flag to indicate whether the requested analytic Id is present in the view port and in the active panel with 100% visibility or not. Type → This will have the String value that indicates the request type and the purpose of the request.Result → This will have two parameters -&gt; AnalyticsId and isElementVisible.AnalyticsId → This key will have the analytics id that was sent in the request event.isElementVisible → This key will have either True/False that indicates whether the given analytics ID is visible in view port and in active panel with 100% visibility or not. ","version":null,"tagName":"h2"},{"title":"Response event​","type":1,"pageTitle":"LTI Launch context added in new Window Launches","url":"/docs/blackboard/premium-apis/uef/tutorials/communication-page-lvl-analytics#response-event","content":"{ &quot;type&quot;: &quot;analytics:visible&quot;, &quot;results&quot; : [ { &quot;analyticsId&quot;: &quot;analyticsId from UEF&quot;, &quot;isElementVisible&quot;: true/false }, { &quot;analyticsId&quot;: &quot;analyticsId from UEF&quot;, &quot;isElementVisible&quot;: true/false } , ... ] }  ","version":null,"tagName":"h3"},{"title":"Page-Level analytics-id integration Workflow​","type":1,"pageTitle":"LTI Launch context added in new Window Launches","url":"/docs/blackboard/premium-apis/uef/tutorials/communication-page-lvl-analytics#page-level-analytics-id-integration-workflow","content":" ","version":null,"tagName":"h2"},{"title":"Result Behaviour Of Page-level analytics-id Integration:​","type":1,"pageTitle":"LTI Launch context added in new Window Launches","url":"/docs/blackboard/premium-apis/uef/tutorials/communication-page-lvl-analytics#result-behaviour-of-page-level-analytics-id-integration","content":" ","version":null,"tagName":"h2"},{"title":"Interface​","type":1,"pageTitle":"LTI Launch context added in new Window Launches","url":"/docs/blackboard/premium-apis/uef/tutorials/communication-page-lvl-analytics#interface","content":"1. IIntegrationPageAnalyticsRequest { type: typeof ANALYTICS_VISIBLE_TYPE; analyticsIds: string[]; } 2. IIntegrationPageAnalyticsResult { analyticsId: string; isElementVisible: boolean; } 3. IIntegrationPageAnalyticsResponse { type: typeof ANALYTICS_VISIBLE_TYPE; Results: IIntegrationPageAnalyticsResult[]; }  ","version":null,"tagName":"h3"},{"title":"Enum​","type":1,"pageTitle":"LTI Launch context added in new Window Launches","url":"/docs/blackboard/premium-apis/uef/tutorials/communication-page-lvl-analytics#enum","content":"IntegrationPageAnalytics ANALYTICS_RATE_LIMIT = 20MULTIPLE_INTEGRATION_ANALYTICS_RATE_LIMIT = 15ANALYTICS_TIMEOUT = 1000 ","version":null,"tagName":"h3"},{"title":"Const:​","type":1,"pageTitle":"LTI Launch context added in new Window Launches","url":"/docs/blackboard/premium-apis/uef/tutorials/communication-page-lvl-analytics#const","content":"ANALYTICS_VISIBLE_TYPE = 'analytics:visible'; Contributors on this article: Gokulakrishnan Raman Software EngineerProduct Development Blackboard Learn ","version":null,"tagName":"h3"},{"title":"Security and Tokens - Authentication","type":0,"sectionRef":"#","url":"/docs/blackboard/premium-apis/uef/tutorials/security-and-tokens","content":"","keywords":"","version":null},{"title":"How Authentication/Authorization Works​","type":1,"pageTitle":"Security and Tokens - Authentication","url":"/docs/blackboard/premium-apis/uef/tutorials/security-and-tokens#how-authenticationauthorization-works","content":"Ok, now that we have talked through the prerequisites and iframe/cookie connection, we are ready to get started. At its most basic, authenticating and authorizing your Ultra Extension is fairly straightforward. Everything starts when a user logs in to Learn.  At login, Ultra looks for Ultra Extension placements. When it finds one, a Learning Tools Interoperability (LTI) launch takes place. UEF can support either LTI 1.1 or 1.3 launches. LTI 1.3 is the preferred method. Once the LTI handshake is complete, your app must then initiate a Learn REST token retrieval. Important to note, this must be a done with the Authorization Code workflow. UEF runs at login on behalf of a specific user, and as such, the REST token must also act on behalf of that user. We will talk more about that in a bit. Once the token is obtained, your application will render javascript, which now lives in a hidden iframe in Ultra. You Javascript can then attach to a message channel and being talking with Ultra! ","version":null,"tagName":"h3"},{"title":"LTI Launches​","type":1,"pageTitle":"Security and Tokens - Authentication","url":"/docs/blackboard/premium-apis/uef/tutorials/security-and-tokens#lti-launches","content":"LTI is a powerful mechanism for allowing a trusted launch with context from one system to another. LTI 1.3 gives you access to the most secure method possible, and it is for this reason that we consider this a best-practice for UEF. Bear in mind, that because it is more secure, it is also a bit more complicated. The basic workflow can be summed up in a few steps: The user logs inUEF issues a GET to your login URL with query parameters that include information like the issuer and the target link urlYour tool redirects the launch to the developer portal to perform the OIDC loginUpon success, Learn issues a GET to your launch URL with the JWT containing the contextual informationYour application verifies the signature using the public/private key setYour application does what it does best If you want an excellent overview of this process, you can check out this youtube video by Claude Vervoort.  ","version":null,"tagName":"h3"},{"title":"Adding OAuth 2.0 Authorization Code Flow​","type":1,"pageTitle":"Security and Tokens - Authentication","url":"/docs/blackboard/premium-apis/uef/tutorials/security-and-tokens#adding-oauth-20-authorization-code-flow","content":"Authorization Code token management is a standard way of authenticating against REST APIs across the web. This is a little tricky when combining with LTI for the purposes of UEF. Let’s look at an updated version of the steps listed above to highlight how this is done with regards to UEF specifically. The user logs inUEF issues a GET to your login URL with query parameters that include information like the issuer and the target link urlYour tool redirects the launch to the developer portal to perform the OIDC loginUpon success, Learn issues a GET to your launch URL with the JWT containing the contextual informationYour application verifies the signature using the public/private key setYour application redirects to the /learn/api/public/v1/oauth2/authorizationcode endpoint (important note below)Learn sends your application an authorization code, which your application must use to request a token from /learn/api/public/v1/oauth2/token endpointYour application then tells your UEF javascript what this token Id isYour application renders that javascript in the Ultra iframe.Your application does what it does best NOTE: It is important to note that in the next step, we will talk about how to authorize your javascript to talk to UEF’s message channel. This process requires scopes, and these scopes are set when you request your access code. If you do not request the appropriate scopes in this step, the next step WILL NOT WORK. For all scopes, just set scope=&quot;*&quot;. This table lists all of the available scopes and what you might need them for. Scope name\tSyntax\tAssociated EventsALL_AUTH_TYPE\t*\tGives all scopes ANALYTICS_AUTH_TYPE\t“ultra:analytics-event”\tclick,hover HELP_PROVIDER_TYPE\t“ultra:help”\thelp:register PORTAL_AUTH_TYPE\t“ultra:portal”\tportal:new,portal:remove PORTAL_MODAL_AUTH_TYPE\t“ultra:modal”\tportal:modal PORTAL_NOTIFICATION_AUTH_TYPE\t“ultra:notification”\tportal:notification ROUTE_AUTH_TYPE\t“ultra:route-event”\troute,route:changing ","version":null,"tagName":"h3"},{"title":"Authorizing Your Javascript​","type":1,"pageTitle":"Security and Tokens - Authentication","url":"/docs/blackboard/premium-apis/uef/tutorials/security-and-tokens#authorizing-your-javascript","content":"Once your javascript is rendered in the UEF, you must connect to a message channel to receive and send events to Ultra. The first step is to set up a window.postMessage listener for the integration handshake and send an integration:hello message: console.log(&quot;addEventListener&quot;); window.addEventListener(&quot;message&quot;, onPostMessageReceived, false); console.log(&quot;say hello to &quot; + integrationHost); window.parent.postMessage( { type: &quot;integration:hello&quot; }, integrationHost + &quot;/*&quot; );  In most cases, the integrationHost variable will be set to your Learn domain, for example: integrationHost = 'https://ultra.myschool.edu';. At this point, Ultra will respond with an event of type integration:hello back. This message will contain a port number that you then attach to for communication and send an authorization request including your OAuth 2.0 token retrieved above: function onPostMessageReceived(evt) { // Do some basic message validation. const fromTrustedHost = evt.origin === window.__lmsHost || evt.origin === integrationHost; if (!fromTrustedHost || !evt.data || !evt.data.type) { return; } // (2) A majority of the communication between the integration and Learn // Ultra will be over a &quot;secure&quot; MessageChannel. // As response to the integration handshake, Learn Ultra will send a // MessageChannel port to the integration. if (evt.data.type === &quot;integration:hello&quot;) { // Store the MessageChannel port for future use messageChannel = new LoggedMessageChannel(evt.ports[0]); messageChannel.onmessage = onMessageFromUltra; // (3) Now, we need to authorize with Learn Ultra using the OAuth2 token // that the server negotiated for us messageChannel.postMessage({ type: &quot;authorization:authorize&quot;, // Your OAuth 2.0 REST token token: token, }); } }  Remember when we talked about scopes? This is where they come into play. You are passing that REST token and requesting authorization. This step attaches those scope requests to your integration. Ultra will respond and tell you either your are authorized or you are not. Upon receipt of a successful authorization, we will need to subscribe to the event types we want to listen to.  function onMessageFromUltra(message) { // (4) If our authorization token was valid, Learn Ultra will send us a // response, notifying us that the authorization // was successful if (message.data.type === 'authorization:authorize') { onAuthorizedWithUltra(); } // All of your other events are processed here } function onAuthorizedWithUltra() { console.log('Authorization was successful'); // (5) Once we are authorized, we can subscribe to events, such as telemetry // events messageChannel.postMessage({ type: 'event:subscribe', subscriptions: ['click','route','route:changing','portal:new','portal:remove'], });  Assuming the scopes provided allow you access to the events you are subscribing to, you are off and running! ","version":null,"tagName":"h3"},{"title":"Tips and Tricks​","type":1,"pageTitle":"Security and Tokens - Authentication","url":"/docs/blackboard/premium-apis/uef/tutorials/security-and-tokens#tips-and-tricks","content":"The best tip we can give is that all of the communication happens in the browser, so if you are having trouble with the javascript, using console.log() will print messages to the javascript console in the Chrome or Firefox developer tools. In addition, you can click things in the Ultra UI and see interactions in the Network tab of those same developer tools. This helps you identify the routeName for route events or the analyticsId in click events. These are how your application knows where they user is and what they are doing so you can insert your functionality in the right place. Contributors on this article: Anthology Inc Integrations, Developer Relations and Standards TeamAnthology Inc ","version":null,"tagName":"h3"},{"title":"UEF Tutorials - LTI Launch From Ultra Course Leftnav","type":0,"sectionRef":"#","url":"/docs/blackboard/premium-apis/uef/tutorials/tutorials-course-leftnav","content":"","keywords":"","version":null},{"title":"Overview​","type":1,"pageTitle":"UEF Tutorials - LTI Launch From Ultra Course Leftnav","url":"/docs/blackboard/premium-apis/uef/tutorials/tutorials-course-leftnav#overview","content":"We've had a lot of requests asking about how to add an LTI launch to an Ultra course's left navigation (Details &amp; Actions). If you have that question, this page is for you. ","version":null,"tagName":"h3"},{"title":"Prerequisites​","type":1,"pageTitle":"UEF Tutorials - LTI Launch From Ultra Course Leftnav","url":"/docs/blackboard/premium-apis/uef/tutorials/tutorials-course-leftnav#prerequisites","content":"The Group your application is in must be UEF enabled. If it's not, file a Behind the Blackboard Support ticket. Provide the developer email address and the Group your UEF application will be in, NOT the application ID. The application ID is usless informaiton for this. If you are a vendor, you must have a Partnership level that is Bronze or higher. See See Become a Blackboard Partner. Complete the Ultra Extension Framework tutorial. You know the handle of the managed placement for your LTI tool that you want the click on the link in the left nav to launch. You can find this by going to the Learn admin page, opening the LTI tools, looking at your tool's managed placements, click edit on the one you want, and copy the handle. You'll see where this is used in the code in number six of the explanation below. ","version":null,"tagName":"h3"},{"title":"How To Ultra Extension Framework - Create A Link to Launch An LTI Managed Placement​","type":1,"pageTitle":"UEF Tutorials - LTI Launch From Ultra Course Leftnav","url":"/docs/blackboard/premium-apis/uef/tutorials/tutorials-course-leftnav#how-to-ultra-extension-framework---create-a-link-to-launch-an-lti-managed-placement","content":"This video demonstrates creating a link in the Ultra course Details &amp; Actions section that does an LTI launch. ","version":null,"tagName":"h3"},{"title":"Sample Code​","type":1,"pageTitle":"UEF Tutorials - LTI Launch From Ultra Course Leftnav","url":"/docs/blackboard/premium-apis/uef/tutorials/tutorials-course-leftnav#sample-code","content":"You may find the related code used on the video here: GitHub BBDN-UEF-Python ","version":null,"tagName":"h3"},{"title":"Explanation of the Video and Associated Code​","type":1,"pageTitle":"UEF Tutorials - LTI Launch From Ultra Course Leftnav","url":"/docs/blackboard/premium-apis/uef/tutorials/tutorials-course-leftnav#explanation-of-the-video-and-associated-code","content":"We clear the browser cache often when making changes to integration file. Your browser will cache it so when you make changes if you don't clear the browser cache you won't see your work. Registration for a course detail message. In our onAuthorizedWithUltra function we add the following: messageChannel.postMessage({ type: &quot;course:detail:register&quot;, registrationName: 'UEF course:detail Test', });  Add our link to the course details section. Do this as follows. if (message.data.eventType === 'portal:new' &amp;&amp; message.data.selector === 'course.outline.details') { showCourseDetails(message.data.portalId, 'UEF cod Test', 'Click Here'); } function showCourseDetails (portalId, titleName, linkName) { messageChannel.postMessage({ type: 'portal:render', portalId: portalId, contents: { tag: 'div', props: { className: 'uef--course-details--container', }, children: [ { tag: 'button', props: { className: 'uef--button--course-details', onClick: { callbackId: 'course-details-test', mode: 'sync', } }, ... for brevity. Read the rest of the code. Of interest here is the callbackId: 'course-details-test'  In our onMessageFromUltra function we add code to watch for the user clicking the link, the callback. It will call the openPanelCD function to open the panel that causes the LTI launch and displays its contents. // Our link was clicked. We get a callback and tell Ultra to open our course details panel if (message.data.type === 'portal:callback') { switch(message.data.callbackId) { case 'course-details-test': openPanelCD('full', localStorage.getItem('context')); break; } }  Our openPanelCD fuction posts a message to Ultra to open a new panel. We'll have this panel opening make the LTI launch and display the response. // COURSE-LEFTNAV tell Ultra to open our panel. It will send us a message back after // it does. Then we render some content there in panel-3 function openPanelCD(panelSize, data) { localStorage.setItem('context', data); localStorage.setItem('action', 'SHOW_PANEL'); messageChannel.postMessage({ type: 'portal:panel', correlationId: 'panel-3', panelType: panelSize, panelTitle: 'UEF Courses Details Demo', attributes: { onClose: { callbackId: 'panel-3-close', }, }, }); }  We add code to our renderPanelContents function. renderPanelContents gets called when Ultra responds to any of our requests to open a new panel. Remember that the handle in the code will be unique to your tool's managed placement. function renderPanelContents(message) { ... for brevity // You MUST change the handle: value to match that of your LTI managed placment handle. // In summary the panel got opened so we put the contents of an LTI launch within. if (message.data.correlationId === 'panel-3') { panelId = message.data.portalId; const contentsToSendLti = { tag: 'LtiLaunch', props: { handle: 'ce9718549a1d4151b62e9fdfeff15dff', customParameters: JSON.stringify({ 'keya': 'foo', 'keyb': 'bar', 'keyc': 'baz' }), style: { width: '75%', height: '75%', }, } } messageChannel.postMessage({ type: 'portal:render', portalId: message.data.portalId, contents: contentsToSendLti }); }  ","version":null,"tagName":"h3"},{"title":"Notice​","type":1,"pageTitle":"UEF Tutorials - LTI Launch From Ultra Course Leftnav","url":"/docs/blackboard/premium-apis/uef/tutorials/tutorials-course-leftnav#notice","content":"Before releasing a UEF integration, that uses the UEF Premium APIs, to production you will be required to meet a certain level of Blackboard Partnership. See Become a Blackboard Partner. Contributors on this article: Mark Kauffman Sr. Software EngineerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Data types for contentHandler","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/advanced/content-handler","content":"","keywords":"","version":null},{"title":"resource/x-bb-document​","type":1,"pageTitle":"Data types for contentHandler","url":"/docs/blackboard/rest-apis/advanced/content-handler#resourcex-bb-document","content":"Original experience: Base content type consisting of rich text with an associated title.Ultra: represents the body of an Ultra document object. It must be the child of a resource/x-bb-folder content item for which isBbPage=true. ","version":null,"tagName":"h3"},{"title":"resource/x-bb-externallink​","type":1,"pageTitle":"Data types for contentHandler","url":"/docs/blackboard/rest-apis/advanced/content-handler#resourcex-bb-externallink","content":"Link to an external resource. It has the following properties: id (string, read-only) of the object in Learnurl (string) of the external resource ","version":null,"tagName":"h3"},{"title":"resource/x-bb-folder​","type":1,"pageTitle":"Data types for contentHandler","url":"/docs/blackboard/rest-apis/advanced/content-handler#resourcex-bb-folder","content":"Content item that contains child content items. It has the following properties: id (string, read-only) of the object in LearnisBbPage (boolean) whether the object represents a page in its own right ","version":null,"tagName":"h3"},{"title":"resource/x-bb-courselink​","type":1,"pageTitle":"Data types for contentHandler","url":"/docs/blackboard/rest-apis/advanced/content-handler#resourcex-bb-courselink","content":"Content item with a link to other objects within Learn. It has the following properties: id (string, read-only) of the object in LearntargetId (string) of the linked Learn objecttargetType (string) is the Blackboard object type of the linked object. Possible values include: UnsetCourseAssessmentCourseTOCForumToolCollabSession (deprecated since 3000.1.0)GroupBlogJournalStaffInfoModulePage ","version":null,"tagName":"h3"},{"title":"resource/x-bb-forumlink​","type":1,"pageTitle":"Data types for contentHandler","url":"/docs/blackboard/rest-apis/advanced/content-handler#resourcex-bb-forumlink","content":"Content item with a link to a discussion object. It has the following properties: id (string, read-only) of the object in LearndiscussionId (string) for the discussion object in Learn ","version":null,"tagName":"h3"},{"title":"resource/x-bb-blti-link​","type":1,"pageTitle":"Data types for contentHandler","url":"/docs/blackboard/rest-apis/advanced/content-handler#resourcex-bb-blti-link","content":"Representation of an LTI link within course content. It has the following properties: id (string, read-only) of the object in Learnurl (string) of the the LTI linkcustomParameters is a map of custom parameters to POST to the specified launch URL. Learn serializes the entire custom parameters map, so you should specify all custom parameters when the map is changed. ","version":null,"tagName":"h3"},{"title":"resource/x-bb-file​","type":1,"pageTitle":"Data types for contentHandler","url":"/docs/blackboard/rest-apis/advanced/content-handler#resourcex-bb-file","content":"Representation of a file uploaded to course content. id (string, read-only) of the object in Learnfile is an object with the following properties: uploadId (string, read-only) is the system-assigned ID of the uploaded filefileName (string) is the name of the filemimeType (string, read-only) is the MIME type. Learn uses IANA standards to assign MIME type based on the filename extension.duplicateFileHandling (string, optional) used to describe behavior when a file is uploaded that duplicates an existing filename. Options include: Rename (default) causes the new file with the duplicate name to be renamed.Replace causes the new file to replace the earlier file with the same name.ThrowError causes Learn to throw an error. ","version":null,"tagName":"h3"},{"title":"resource/x-bb-asmt-test-link​","type":1,"pageTitle":"Data types for contentHandler","url":"/docs/blackboard/rest-apis/advanced/content-handler#resourcex-bb-asmt-test-link","content":"(Ultra experience only) Representation of an assignment/test link object id (string, read-only) of the object in LearnassessmentId (string) is the ID of the associated assessmentgradeColumnId (string) is the ID of the associated grade column ","version":null,"tagName":"h3"},{"title":"resource/x-bb-assignment​","type":1,"pageTitle":"Data types for contentHandler","url":"/docs/blackboard/rest-apis/advanced/content-handler#resourcex-bb-assignment","content":"(Original experience only) id (string, read-only) of the object in LearngradeColumnId (string, read only) ID of the associated grade columngroupContent (boolean) specifies whether or not the content is group content. Contributors on this article: Ryan Haber Sr. Content DesignerContent Team - Blackboard Learn ","version":null,"tagName":"h3"},{"title":"Tutorial: Migrate a Python LTI Tool to Ultra Extension","type":0,"sectionRef":"#","url":"/docs/blackboard/premium-apis/uef/tutorials/tutorial-lti","content":"","keywords":"","version":null},{"title":"Preparing the development environment​","type":1,"pageTitle":"Tutorial: Migrate a Python LTI Tool to Ultra Extension","url":"/docs/blackboard/premium-apis/uef/tutorials/tutorial-lti#preparing-the-development-environment","content":"This section will help you set up your development environment and ensure that you are ready to participate in this tutorial. ","version":null,"tagName":"h2"},{"title":"Step 1: Install ngrok.io​","type":1,"pageTitle":"Tutorial: Migrate a Python LTI Tool to Ultra Extension","url":"/docs/blackboard/premium-apis/uef/tutorials/tutorial-lti#step-1-install-ngrokio","content":"We will need a way to host our UEF integration on our desktop so we don't have to deploy to a third party server every time. Ngrok makes this extremely easy. You will need to follow these steps. Below is a video to help with the process.  Go to https://ngrok.ioSign up for a free account if you don't already have one and loginDownload the installer for your system https://ngrok.com/downloadVisit https://dashboard.ngrok.com/get-started/setup and copy your authtokenIf on Mac, expand ngrok into your applications folder and add the application folder to your path. If on Windows, expand, create a folder to put ngrok.exe in, and add that folder to your windows Path system variable.In a terminal cd to your ngrok directory and enter $ ngrok authtoken &lt;your authtoken&gt;Start a tunnel on port (5000): $ ./ngrok http 5000 --hostname uef.ngrok.io NOTE: Do not close your terminal - it must stay open while you are using the TLS connection. ","version":null,"tagName":"h3"},{"title":"Step 2: Register your LTI Application in the Developer Portal​","type":1,"pageTitle":"Tutorial: Migrate a Python LTI Tool to Ultra Extension","url":"/docs/blackboard/premium-apis/uef/tutorials/tutorial-lti#step-2-register-your-lti-application-in-the-developer-portal","content":"The next step is to register our application. Notice that we don't have any code yet. But we do know what our endpoints will be, and the developer portal doesn't really care about your code. It is simply a centralized repository that allows you to register your application once and deploy to any Learn instance. We are the only LMS that provides this centralized registration process. At 2:07 of the video there is discussion of not entering a JWKS URL, leaving that field blank, and having Learn generate a private key for you. The developer portal will no longer allow that. You will need to enter a JWKS URL of https:&lt;yourfqdn&gt;/jwks/ You will need to generate your own public.key and private.key file for your tool's use.  Browse to the developer portalIf you do not have an account, register for one. The password restrictions are crazy, so be sure to read them before creating your password to save yourself some time and frustration.Login to your accountUnder My Apps, click the + icon to create a new application.Give your application a nameGive your application a descriptionUnder domain, simply add uef.ngrok.io. If you are using the shared system, we will provide shared credentials, as the system will not allow you to create multiple providers with the same domain.Click the toggle to expand the LTI 1.3 fieldsLeave the group as isFor the Login Initiation URL, enter https://uef.ngrok.io/login/. Note the trailing slash. This is required by Flask.For the Tool Redirect URL, enter https://uef.ngrok.io/launch/. Note the trailing slash. This is required by Flask.For the Tool JWKS URL, enter https://uef.ngrok.io/jwks/. This is a required update from what is shown in the video.Leave the signing algorithm as isClick 'Register application and generate API Key' NOTE Leave this page open for the duration of this tutorial or save the information in a text file. Once you leave this screen, you will not be able to retrieve the private key or the application secret. ","version":null,"tagName":"h3"},{"title":"Step 3: Clone the repository​","type":1,"pageTitle":"Tutorial: Migrate a Python LTI Tool to Ultra Extension","url":"/docs/blackboard/premium-apis/uef/tutorials/tutorial-lti#step-3-clone-the-repository","content":"The next step is to clone the repository. You do not need a github account for this.  Navigate to https://github.com/blackboard/BBDN-UEF-Python, click the green code button, and copy the URL.Open a terminal and navigate to the directory you wish to place the project in.At the command-line, type: git clone https://github.com/blackboard/BBDN-UEF-Python.gitOpen this project in your favorite IDEIn the app directory, there is a file called ConfigTemplate.py. Copy this file and paste it into the app directory. Rename it to Config.py. This IS case-sensitive.Replace learnURL with the URL to your Learn instance, without the https:// &lt;-Common GotchaReplace restKey with your REST application key.Replace restSecret with your REST application secret.Replace myUrl with the https ngrok link created in step 1. Include the https:// &lt;-Common GotchaSave the fileIn the app directory, there is a file called lti-template.json. Copy this file and paste it into the app directory. Rename it to lti.json. This IS case-sensitive.Replace both instances of clientId with your application ID.Save the file.In the app directory, generate files called private.key and public.key. These ARE case-sensitive. Example: On an NIX system with openssl installed do the following. openssl genrsa -out private.key 2048 openssl rsa -in private.key -pubout -out public.key  Create a directory outside of your project, and copy these four files, Config.py, lti.json, public.key and private.key, and paste them there to prevent accidental loss of these files so you don't have to recreate them later. ","version":null,"tagName":"h3"},{"title":"Step 4: Configure your Learn environment​","type":1,"pageTitle":"Tutorial: Migrate a Python LTI Tool to Ultra Extension","url":"/docs/blackboard/premium-apis/uef/tutorials/tutorial-lti#step-4-configure-your-learn-environment","content":"Now that we have our registration complete, and our application mostly configured, we need to deploy our application to Learn. Again, if you are using the shared system, we will have already done this for you. That information will be displayed at the bottom of this document.  Login to Learn with Admin credentialsOpen the Admin panelClick on LTI Tool ProvidersClick on Register LTI 1.3 ToolPaste your application ID and click submitFrom the resulting screen, change the radio button from Exclude to Approve.Copy your deployment Id.In your IDE, open the lti.json file, and replace deploymentId with this value and save the fileBack in Learn, click submit.From the context menu next to your application, select Manage PlacementsOn the Manage Placements screen, click create placementGive the placement a label. This is how your tool will be referenced in the user interface.Provide a handle. This must be unique across this Learn instance.Ensure Availability is set to YesIf you wish, you can add an icon file. This should be 50x50 and a PNG or JPG.In the Tool Provider URL field, enter https://uef.ngrok.io/launch/. Be sure to include the trailing slash. This is required by Flask.Click submit.Return to the System Admin panel.Click REST API IntegrationsClick Create IntegrationPaste your application ID in the application ID fieldAssign a user. Because we are using three-legged oauth, the user you assign does not have to have any specific entitlements.Ensure End User Access is set to Yes. This allows the use of three-legged oauthSet Authorized to Act as User to Yes. In normal circumstances, we would leave this as Service Default. For UEF, the user won't be able to authorize the application, so we are preemptively disabling this requirement.Click Submit. ","version":null,"tagName":"h3"},{"title":"Step 5: Install Docker Desktop​","type":1,"pageTitle":"Tutorial: Migrate a Python LTI Tool to Ultra Extension","url":"/docs/blackboard/premium-apis/uef/tutorials/tutorial-lti#step-5-install-docker-desktop","content":"For ease of use, we will be using Docker. This will create the environment for us the same way every time, allowing us to focus on the code. It is Python code, so you can use ngrok and run directly on your machine, or you can push the code to a cloud repository, but in this tutorial, we will assume that you are using Docker.  Install Docker Desktop Note: If you are installing Docker Desktop on Windows 10, you will need to be sure Virtualization is configured correctly. This article will help you get things configured correctly. Of note are that virtualization must be enabled in your bios, and with Windows Linux System 2, you must install the linux kernel manually. ","version":null,"tagName":"h3"},{"title":"Step 6: Test the application​","type":1,"pageTitle":"Tutorial: Migrate a Python LTI Tool to Ultra Extension","url":"/docs/blackboard/premium-apis/uef/tutorials/tutorial-lti#step-6-test-the-application","content":" Get the deployment ID from LearnAdd the deployment id to the lti.json file in your project and save it.Open a terminal, cd to the directory where you cloned the application, and type:docker build -t uef-tutorial:0.1 .. Note the period at the end.This creates your image. Now let's run it. From the terminal, type:docker run -p 5000:5000 --name UEFTutorial uef-tutorial:0.1Open your Docker Desktop Dashboard to inspect that the UEFTutorial app is runningBrowse to https URL provided by ngrok and you should see a message that the application is running.Now open Learn, navigate to a course.In the course outline, click the + icon and select content market.Find the placement we created, and click the + icon to add it to your course outline.Click the new content item. You should see your hello world message. ","version":null,"tagName":"h3"},{"title":"Troubleshooting​","type":1,"pageTitle":"Tutorial: Migrate a Python LTI Tool to Ultra Extension","url":"/docs/blackboard/premium-apis/uef/tutorials/tutorial-lti#troubleshooting","content":"If for some reason you get an error loading the site there are a few things to check: Ensure the tool is properly installed in LearnIf you see an error similar to the one below - check your Dockerfile syntax - especially those gnarly double and single quotes: ERROR: yaml.parser.ParserError: while parsing a block mapping in &quot;./docker-compose.yaml&quot;, line 14, column 1 expected &lt;block end&gt;, but found '&lt;scalar&gt;' in &quot;./Dockerfile&quot;, line 16, column 34  If you need to re-deploy, open docker desktop's dashboard, and click the garbage bin icon to delete the image, and then run the build and run docker commands again. ","version":null,"tagName":"h3"},{"title":"Let's Code​","type":1,"pageTitle":"Tutorial: Migrate a Python LTI Tool to Ultra Extension","url":"/docs/blackboard/premium-apis/uef/tutorials/tutorial-lti#lets-code","content":"Now that we have our development environment set up and configured, its time to get to work! A couple of notes to help you navigate this tutorial. Each step has a branch. You can use git checkout -b &lt;branchname&gt; to get the code for that branch.Don't forget to update the contentId in steps 3 and 4 to point to your content item. ","version":null,"tagName":"h2"},{"title":"Step 1: Build a UEF shell​","type":1,"pageTitle":"Tutorial: Migrate a Python LTI Tool to Ultra Extension","url":"/docs/blackboard/premium-apis/uef/tutorials/tutorial-lti#step-1-build-a-uef-shell","content":"In the first step, we will make a few minor changes to our LTI tool the create an Ultra Extension Framework shell running in our Learn instance!  ","version":null,"tagName":"h3"},{"title":"Step 2: Set up communication​","type":1,"pageTitle":"Tutorial: Migrate a Python LTI Tool to Ultra Extension","url":"/docs/blackboard/premium-apis/uef/tutorials/tutorial-lti#step-2-set-up-communication","content":"Next we will add to our javascript file to set up a message channel between our iframe and the Ultra UI, authorize the application using our REST Bearer Token, and subscribe to the events we want Ultra to notify us of.  ","version":null,"tagName":"h3"},{"title":"Step 3: Create a peek panel​","type":1,"pageTitle":"Tutorial: Migrate a Python LTI Tool to Ultra Extension","url":"/docs/blackboard/premium-apis/uef/tutorials/tutorial-lti#step-3-create-a-peek-panel","content":"Now we have a functioning Ultra Extension running, so let's do something with it. In this case, we are going to create a content item, and then listen for a user to enter a course and click on that item. When the item loads, we will open a peek panel. Remember our Hello World that we started with in our LTI tool? Well now we are displaying that same hello world in a peek panel inside of Ultra! Don't forget to change the contentId in the code to point to your content item.  ","version":null,"tagName":"h3"},{"title":"Step 4: Implement localStorage​","type":1,"pageTitle":"Tutorial: Migrate a Python LTI Tool to Ultra Extension","url":"/docs/blackboard/premium-apis/uef/tutorials/tutorial-lti#step-4-implement-localstorage","content":"Cool, right? But let's put the finishing touches on this thing. We might need data in the rest of our application that only our javascript file has. We also might need a way for the rest of our application to talk to Ultra. Enter localStorage. Local Storage is a way to store things in memory that is accessible in your browser. Since all of our components are running in the same browser, we can use this to pass information around. In our example, we will take data from the message that Ultra sends us, pass it to our app, and display it in our hello world app. In addition, we will add a button to our hello world page that sends a message to our javascript file, asking Ultra to close the panel for us. Don't forget to change the contentId in the code to point to your content item.  ","version":null,"tagName":"h3"},{"title":"Summary​","type":1,"pageTitle":"Tutorial: Migrate a Python LTI Tool to Ultra Extension","url":"/docs/blackboard/premium-apis/uef/tutorials/tutorial-lti#summary","content":"I hope you found that fun and enlightening. As always, if you have questions, comments, or concerns, reach out to us at developers@anthology.com and let us know! -Happy Coding Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h2"},{"title":"Use APIs to Merge and Cross-list Courses","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/advanced/crosslist-courses","content":"","keywords":"","version":null},{"title":"Overview​","type":1,"pageTitle":"Use APIs to Merge and Cross-list Courses","url":"/docs/blackboard/rest-apis/advanced/crosslist-courses#overview","content":"Your institution often needs to manage many courses or sections together. The mechanism that Learn provides for doing this is referred to as course merging or cross-listing. Merged and cross-listed courses are, under the hood, the same thing: two or more courses in a parent-child relationship. A course set is a parent course together with all its child courses. In physical terms, these students might have different courses listed on their schedules. If their courses are merged in Learn, their schedules show the time and place as determined by the registrar and they receive instruction from the same instructor(s). All students in the child courses have access to the same online content. Learn synchronizes enrollments in child courses with their parent course. Users enrolled in a child course thus have access to the content of the parent course. Likewise, when you use management tools in a parent course, you will also affect users enrolled in its children courses. Learn preserves user roles from the last time a user is enrolled into any of the courses in the course set. A student can only exist in one course in a course set; Learn ignores duplicate enrollments. Users with administrative entitlements can merge courses. ","version":null,"tagName":"h3"},{"title":"Before you begin​","type":1,"pageTitle":"Use APIs to Merge and Cross-list Courses","url":"/docs/blackboard/rest-apis/advanced/crosslist-courses#before-you-begin","content":"You need an authentication token from a user with administrative entitlements to merge courses. For a complete list of specific requirements for any particular method, see the Learn API reference. ","version":null,"tagName":"h3"},{"title":"Merge a course​","type":1,"pageTitle":"Use APIs to Merge and Cross-list Courses","url":"/docs/blackboard/rest-apis/advanced/crosslist-courses#merge-a-course","content":"To merge one course as a child of another: Find the courseId of the course that you want to be the parent.Find the courseId of the course you want to be the child.Make a PUT request to /learn/api/public/v1/courses/{courseId}/children/{childCourseId}. ","version":null,"tagName":"h3"},{"title":"Get the children of a course​","type":1,"pageTitle":"Use APIs to Merge and Cross-list Courses","url":"/docs/blackboard/rest-apis/advanced/crosslist-courses#get-the-children-of-a-course","content":"To identify the children courses of a course: Find the courseId of the parent course.Make a GET request to /learn/api/public/v1/courses/{courseId}/children. ","version":null,"tagName":"h3"},{"title":"Get the course set that a course belongs to​","type":1,"pageTitle":"Use APIs to Merge and Cross-list Courses","url":"/docs/blackboard/rest-apis/advanced/crosslist-courses#get-the-course-set-that-a-course-belongs-to","content":"To get a list of all the courses merged with a particular course, regardless of which are children and which is the parent, make a GET request to /learn/api/public/v1/courses/{courseId}/crossListSet. Contributors on this article: Ryan Haber Sr. Content DesignerContent Team - Blackboard Learn ","version":null,"tagName":"h3"},{"title":"Dynamic Rendering with Template Variables","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/advanced/dynamic-rendering","content":"","keywords":"","version":null},{"title":"Using context variables​","type":1,"pageTitle":"Dynamic Rendering with Template Variables","url":"/docs/blackboard/rest-apis/advanced/dynamic-rendering#using-context-variables","content":"Context item\tContext variable\tExample outputUser external person key\t@X@user.batch_uid@X@\t123-45-6789 User username (user id)\t@X@user.id@X@\tjsmith User student_id (student id)\t@X@user.student_id@X@\tjsmith User full name\t@X@user.full_name@X@\tJohn Smith User primary key identifier\t@X@user.pk_string@X@\t_521_1 User locale\t@X@user.locale@X@\ten_GB User system role(s)\t@X@user.role@X@\tSystem Roles: C- Course Administrator U- Guest N- None O- Observer Y- Community Administrator R- Support Z- System Admin H- System Support * A- User Administrator User primary institution role\t@X@user.institution_role@X@ @X@user.primary_institution_role@X@\tstudent User secondary institution role(s)\t@X@user.secondary_institution_role@X@\tstudent,faculty User company (as of 3900.34)\t@X@user.company@X@\tAnthology User institution email (as of 3900.34)\t@X@user.email.institution_email@X@\tjohn.smith@anthology.com User other name (as of 3900.34)\t@X@user.name.other@X@\tJohnie User title (as of 3900.34)\t@X@user.name.title@X@\tDr. User mobile phone (as of 3900.34)\t@X@user.mobile_phone@X@\t0-123-456-7890 User website (as of 3900.34)\t@X@user.website@X@\thttps://smithjohn.anthology.com Course membership role\t@X@membership.role@X@\tCourse/Organization Roles: B- Course Builder/Organization Builder G- Grader/Grader U- Guest/Guest P- Instructor/Leader S- Student/Participant T- Teacher's Assistant/Assistant Course external course key\t@X@course.batch_uid@X@\tABC123ABC Course course id\t@X@course.id@X@\tBIO101 Course name\t@X@course.course_name@X@\tIntroduction to Concepts in Biology Course primary key identifier\t@X@course.pk_string@X@\t_12344_1 Course URL\t@X@course.url@X@\t/courses/1/BIO101/ Course membership role\t@X@course.role@X@\tstudent Course locale (As of 3900.32)\t@X@course.locale@X@\ten_US Institution hierarchy nodes (As of 3900.32 use with caution. The output can be a long list that might affect an LTI launch.)\t@X@course.ih_nodes@X@\tdb75df7b-04e8-4d3c-b7f9-7f1371a3f325,fb11e84b-ff7f-44ab-bf77-89299b053232 Institution primary node (As of 3900.32)\t@X@course.ih_primary_node@X@\tfb11e84b-ff7f-44ab-bf77-89299b053232 Is it an Ultra course? (As of 3900.32)\t@X@course.ultra_status@X@\tfalse Content primary key identifier\t@X@content.id@X@ @X@content.pk_string@X@\t_23_1 Content URL\t@X@content.url@X@\t/courses/1/BOB101/content/_221_1 Request UUID\t@X@request.id@X@ Request locale\t@X@request.locale@X@ Request return URL\t@X@request.return@X@ System host name\t@X@system.site_id@X@ Raw course id\t@X@course.raw_course_id@X@\tReturns the course.getCourseId() for the current course ignoring the rule that a student is supposed to see the id of the course they are actually enrolled in. Effectively gives the parent course ID to a student LTI launch from the parent of a cross listed corse, not the child section course ID the are enrolled in. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h2"},{"title":"BbML","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/advanced/bbml","content":"","keywords":"","version":null},{"title":"Overview​","type":1,"pageTitle":"BbML","url":"/docs/blackboard/rest-apis/advanced/bbml#overview","content":"BbML is a subset of HTML. The parameters of some methods accept BbML-formatted text. For more information about particular Learn REST endpoints, see theREST API documentation ","version":null,"tagName":"h3"},{"title":"BbML specification - version 1​","type":1,"pageTitle":"BbML","url":"/docs/blackboard/rest-apis/advanced/bbml#bbml-specification---version-1","content":"A BbML field accepts text containing either: Ultra experience courses: BbMLOriginal experience: safe HTMLEither experience outside of the context of courses: safe HTML Valid BbML uses only following HTML elements and only the attributes accepted for each element. You can use attributes marked Internal use only as part of a REST API GET method when you are patching/updating an existing resource. Do not use them to create a resource from scratch. abrdeldivemh4h5h6imgliolpspanstrongsubsupul For more information about each accepted element, see below. a​ Attribute\tCommentdata-bbid\tDeprecated Internal use only. data-bbfile\tRendering control for use with Ultra UI. data-bbfile=&quot;{&amp;quot;render&amp;quot;:&amp;quot;inline&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;1.jpg&amp;quot;,&amp;quot;mimeType&amp;quot;:&amp;quot;image/jpeg&amp;quot;}&quot; data-bbtype\tInternal use only. data-mce-href\tInternal use only. href rel[nofollow]\t br​ Attribute\tCommentdata-mce-bogus\tInternal use only. del​ div​ Attribute\tCommentdata-bbid\tInternal use only. em​ h4​ h5​ h6​ img​ Attribute\tCommentalign alt class data-mathml\tMathML from which the image was created if applicable. data-mce-src\tInternal use only. src\t li​ ol​ Attribute\tCommentdata-mce-style\tInternal use only. style[list-style-type: *]\t p​ span​ Attribute\tCommentdata-mce-bogus\tInternal use only. data-mce-style\tInternal use only. style[font-style: ,font-weight: ,text-decoration:*]\t strong​ sub​ sup​ ul​ Attribute\tCommentdata-mce-style\tInternal use only. style[list-style-type: *]\t ","version":null,"tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"BbML","url":"/docs/blackboard/rest-apis/advanced/bbml#examples","content":"If one were to use the following as the input to a BbML field of a resource within an Ultra course context, such as an Ultra Document: &lt;!-- {&quot;bbMLEditorVersion&quot;:1} --&gt; &lt;div data-bbid=&quot;bbml-editor-id_9c6a9556-80a5-496c-b10d-af2a9ab22d45&quot;&gt; &lt;h2&gt;Header Large&lt;/h2&gt; &lt;h5&gt;Header Medium&lt;/h5&gt; &lt;h6&gt;Header Small&lt;/h6&gt; &lt;p&gt; &lt;strong&gt;Bold &lt;/strong &gt;&lt;em &gt;Italic &lt;span style=&quot;text-decoration: underline;&quot; &gt;Italic Underline&lt;/span &gt;&lt;/em &gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;em&gt;&lt;/em&gt;&lt;/span&gt;Bullet 1 &lt;/li&gt; &lt;li&gt;Bullet 2&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img /&gt;&lt;/p&gt; &lt;p&gt; &lt;span &gt;&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris.&quot;&lt;/span &gt; &lt;/p&gt; &lt;p&gt;&lt;span&gt;&amp;lt;braces test=&quot;values&quot; other=&quot;encoded values&quot;&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Header Small&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Number 1&lt;/li&gt; &lt;li&gt;Number 2&lt;/li&gt; &lt;/ol&gt; &lt;p&gt; Just words followed by a formula &lt;img align=&quot;middle&quot; alt=&quot;3 divided by 4 2 root of 7&quot; class=&quot;Wirisformula&quot; data-mathml=&quot;Â«math xmlns=Â¨[http://www.w3.org/1998/Math/MathMLÂ¨Â»Â«mnÂ»3Â«/mnÂ»Â«moÂ»/Â«/moÂ»Â«m nÂ»4Â«/mnÂ»Â«mrootÂ»Â«mnÂ»7Â«/mnÂ»Â«mnÂ»2Â«/mnÂ»Â« /mrootÂ»Â«/mathÂ»](https://community.blackboard.com/external-link.jspa?url=htt p%3A//www.w3.org/1998/Math/MathML%25C2%25A8%25C2%25BB%25C2%25ABmn%25 C2%25BB3%25C2%25AB/mn%25C2%25BB%25C2%25ABmo%25C2%25BB/%25C2%25AB/mo%25C2 %25BB%25C2%25ABmn%25C2%25BB4%25C2%25AB/mn%25C2%25BB%25C2%25ABmroot%25C2%25BB %25C2%25ABmn%25C2%25BB7%25C2%25AB/mn%25C2%25BB%25C2%25ABmn%25C2%25BB2%25C2%2 5AB/mn%25C2%25BB%25C2%25AB/mroot%25C2%25BB%25C2%25AB/math%25C2%25BB)&quot; /&gt; &lt;/p&gt; &lt;p&gt; &lt;a href=&quot;[http://www.blackboard.com](https://community.blackboard.com/external- link.jspa?url=http%3A//www.blackboard.com/)&quot; &gt;Blackboard&lt;/a &gt; &lt;/p&gt; &lt;/div&gt;  ","version":null,"tagName":"h3"},{"title":"Render​","type":1,"pageTitle":"BbML","url":"/docs/blackboard/rest-apis/advanced/bbml#render","content":"It would render as follows in Ultra UI:  ","version":null,"tagName":"h3"},{"title":"Uploaded files​","type":1,"pageTitle":"BbML","url":"/docs/blackboard/rest-apis/advanced/bbml#uploaded-files","content":"When creating content using the Learn Public REST API, it is expected that any related file content be uploaded prior to creation. Uploading files can be done using the upload file endpoint documented athttps://developer.anthology.com/portal/displayApi Once a file has been uploaded, the upload file endpoint will have provided an Id which will be used to reference the associated file. Using the upload file id withing the Learn Public REST API, any BbML anchor tag href attribute can be used to associate the uploaded file using the following notation: &lt;a href=&quot;bbupload://&lt;uploadFileId&gt;&quot;&gt;filename.ext&lt;/a&gt;  For proper formatting and rendering within the ULTRA environment, it is recommened to also include a data-bbfile attribute. An example value of this can be seen above in the BbML specification section. However, to describe it a bit more, the data-bbfile attribute's value is an HTML encoded json string: HTML encoded: `{&quot;render&quot;:&quot;inline&quot;,&quot;linkName&quot;:&quot;1.jpg&quot;,&quot;mimeType&quot;:&quot;image/jpeg&quot;}`&lt;br /&gt; HTML decoded: `{&quot;render&quot;:&quot;inline&quot;,&quot;linkName&quot;:&quot;filename.ext&quot;,&quot;mimeType&quot;:&quot;image/jpeg&quot;}`  render: At this time, it is recommended to only use 'inline.'linkName: The filename of the uploaded file.mimeType: The MIME type of the uploaded file.` The end result of all this would be as follows: &lt;a href=&quot;bbupload://&lt;uploadFileId&gt;&quot; data-bbfile='{&quot;render&quot;:&quot;inline&quot;,&quot;linkName&quot;:&quot;filename.ext&quot;,&quot;mimeType&quot;:&quot;image/jpeg&quot;}'&gt; filename.ext &lt;/a&gt;  You can also use files that are already uploaded to the content collection by referencing the id of the file you want to attach to the BbML. Once the file has been uploaded into the content collection, the upload endpoint will return an id that will be used to associate the respective file. Similar to the anchor tag with the “bbupload” notation and adding a data-bbfileattribute as seen above, the anchor tag should look like this: &lt;a href=&quot;bbresource://&lt;resourceFileId&gt;&quot; data-bbfile='{&quot;render&quot;:&quot;inline&quot;,&quot;linkName&quot;:&quot;filename.ext&quot;,&quot;mimeType&quot;:&quot;image/jpeg&quot;}'&gt; filename.ext &lt;/a&gt;  Be careful with the resourceFileId, it should match one of the next formats _1234_1 orxid-1234_1 any other format will not be received ","version":null,"tagName":"h3"},{"title":"File Type Documentation​","type":1,"pageTitle":"BbML","url":"/docs/blackboard/rest-apis/advanced/bbml#file-type-documentation","content":"The editor recognizes the following values for data-bbfile, with the arguments it accepts for data-bbtype. For each plugin, the bbml element is given (usually a); the value of data-bbtype which selects that plugin; and the fields of data-bbfile which are expected. (data-bbfile is a JSON-encoded object.) For example, for the Attachment plugin, the generated bbml is as follows (minus unneccessary whitespace I've added for easy viewing): &lt;a href=&quot;https://ultra-integ.int.bbpd.io/bbcswebdav/pid-486306-dt-content-rid-13383141_1/xid-13383141_1&quot; data-bbtype=&quot;attachment&quot; data-bbfile='{&quot;extension&quot;:&quot;pdf&quot;,&quot;linkName&quot;:&quot;1-23MB&quot;,&quot;render&quot;:&quot;inline&quot;,&quot;alternativeText&quot;:&quot;1-23MB.pdf&quot;,&quot;mimeType&quot;:&quot;application/pdf&quot;,&quot;isDecorative&quot;:false'&gt; 1-23MB &lt;/a&gt;  Tags without a data-bbfile attribute, or with an unrecognized value fordata-bbfile, are displayed normally.  Plugin Name: Attachment element: &lt;a href=&quot;${link}&quot;&gt; data-bbtype: attachment data-bbfile: linkName - the name of the filerender - &quot;inline&quot; to render images/video/audio/etc inline&quot;attachment&quot; to show as a block alternativeText - alt text for accessibilitymimeType - the mime type of the fileisDecorative - a flag indicating whether the image is decorative. Currently always false for images generated in Ultra. Notes: The href attribute is the download url for the document.Attachments can be add from the local file system or the cloud (via Kloudless). After the item has been added, there is no way of distinguishing this.Attachments, whether displayed inline or not, are full-width.  Plugin Name: Block Images element: &lt;a href=&quot;${src}&quot;&gt; data-bbtype: image data-bbfile: alt - the image alt text Notes: Displays an image as a full-width block (instead of inline.)All images generated by Ultra are full-width blocks, but images converted from Learn are regular &lt;img&gt; elements.The href attribute in the bbml tag becomes the src attribute of the img tag.Mathml images (as generated by Wiris) are regular img elements that have the data-mathml attribute. It is beyond the scope of this document to describe the wiris service; however, no additional processing beyond that of a regular img tag is required to render mathml images.  Plugin Name: Custom Class element: &lt;a&gt; data-bbtype: customClass data-bbfile: className Notes: Transforms into &lt;span class=&quot;${className}&quot;&gt;.This type will never be encountered in saved bbml; it is generated at runtime to modify the editor display.  Plugin Name: Embedded Video element: &lt;a&gt; data-bbtype: video data-bbfile: src - The link for the embedded video Notes: Links to an embedded video from Youtube or Video which is shown in an iframe.Only links from Youtube or Vimeo are allowed.  Plugin Name: LTI Content Market element: a data-bbtype: lti data-bbfile:Placement linkType - 'resource/x-bb-bltiplacement'linkRefId - The PK of the placement recordPartner Cloud &quot;linkType&quot; - 'resource/x-bbgs-partner-cloud'&quot;linkRefId&quot; - The partner tool ID. Usually some concatenation of partner ID + the tool ID LTI Link &quot;linkType&quot; - 'resource/x-bb-blti-link'&quot;linkRefId&quot; - The PK of the parent IMS Deep Linking placement. Used to look up key/secret at launch&quot;url&quot; - LTI Tool Url&quot;launchInNewWindow&quot; - Whether to launch in an iframe or new window&quot;customParameters&quot; - Custom parameters to pass with the launch as JSON Notes: It is beyond the scope of this document to describe LTI links.  Plugin Name: Video Everywhere (aka Collab Integration; aka Collab Video; aka Video Integration) element: &lt;img title=&quot;description&quot; alt=&quot;alt text&quot;&gt; data-bbtype: collab_video data-bbfile: video_uuid - The uuid of the collab video. Notes: src is a relative image link returned by the collab service.title is the description of the video.alt is the alt text of the image.It is beyond the scope of this document to describe the collab service api. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"SOAP-to-REST","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/advanced/soap-to-rest","content":"","keywords":"","version":null},{"title":"Announcements​","type":1,"pageTitle":"SOAP-to-REST","url":"/docs/blackboard/rest-apis/advanced/soap-to-rest#announcements","content":"Use Case\tSOAP WS Call\tREST EndpointCreate Course Announcement\tAnnouncementWS.createCourseAnnouncements()\tPOST /learn/api/public/v1/courses/{courseId}/announcements Read Course Announcement\tAnnouncementWS.getCourseAnnouncements()\tGET /learn/api/public/v1/courses/{courseId}/announcements/{announcementId} Read All Course Announcements\tAnnouncementWS.getCourseAnnouncements()\tGET /learn/api/public/v1/courses/{courseId}/announcements Update Course Announcement\tAnnouncementWS.updateCourseAnnouncements()\tPATCH /learn/api/public/v1/courses/{courseId}/announcements/{announcementId} Delete Course Announcement\tAnnouncementWS.deleteCourseAnnouncements()\tDELETE /learn/api/public/v1/courses/{courseId}/announcements/{announcementId} Create Organization Announcement\tAnnouncementWS.createOrgAnnouncements()\tPOST /learn/api/public/v1/courses/{courseId}/announcements Read Organization Announcement\tAnnouncementWS.getOrgAnnouncements()\tGET /learn/api/public/v1/courses/{courseId}/announcements/{announcementId} Read All Organization Announcements\tAnnouncementWS.getOrgAnnouncements()\tGET /learn/api/public/v1/courses/{courseId}/announcements Update Organization Announcement\tAnnouncementWS.updateOrgAnnouncements()\tPATCH /learn/api/public/v1/courses/{courseId}/announcements/{announcementId} Delete Organization Announcement\tAnnouncementWS.deleteOrgAnnouncements()\tDELETE /learn/api/public/v1/courses/{courseId}/announcements/{announcementId} Create System Announcement\tAnnouncementWS.createSystemAnnouncements()\tPOST /learn/api/public/v1/announcements Read System Announcement\tAnnouncementWS.getSystemAnnouncements()\tGET /learn/api/public/v1/announcements/{announcementId} Read All System Announcements\tAnnouncementWS.getSystemAnnouncements()\tGET /learn/api/public/v1/announcements Update System Announcement\tAnnouncementWS.updateSystemAnnouncements()\tPATCH /learn/api/public/v1/announcements/{announcementId} Delete System Announcement\tAnnouncementWS.deleteSystemAnnouncements()\tDELETE /learn/api/public/v1/announcements/{announcementId} ","version":null,"tagName":"h2"},{"title":"Calendar​","type":1,"pageTitle":"SOAP-to-REST","url":"/docs/blackboard/rest-apis/advanced/soap-to-rest#calendar","content":"Use Case\tSOAP WS Call\tREST EndpointCreate a Course Calendar Item\tCalendarWS.createCourseCalendarItem() CalendarWS.saveCourseCalendarItem()\tPOST /learn/api/public/v1/calendars/items Read a Course Calendar Item\tCalendarWS.getCalendarItem()\tGET /learn/api/public/v1/calendars/items/{calendar type}/{calendar item id} Read all Course Calendar Items\tCalendarWS.getCalendarItem()\tGET /learn/api/public/v1/calendars GET /learn/api/public/v1/calendars/items Update a Course Calendar Item\tCalendarWS.updateCourseCalendarItem() CalendarWS.saveCourseCalendarItem()\tPATCH /learn/api/public/v1/calendars/items/{calendar type}/{calendar item id} Delete a Course Calendar Item\tCalendarWS.deleteCourseCalendarItem()\tDELETE /learn/api/public/v1/calendars/items/{calendar type}/{calendar item id} Create an Institutional Calendar Item\tCalendarWS.createInstitutionalCalendarItem() CalendarWS.saveInstitutionalCalendarItem()\tPOST /learn/api/public/v1/calendars/items Read an Institutional Calendar Item\tCalendarWS.getCalendarItem()\tGET /learn/api/public/v1/calendars/items/{calendar type}/{calendar item id} Read all Institutional Calendar Items\tCalendarWS.getCalendarItem()\tGET /learn/api/public/v1/calendars GET /learn/api/public/v1/calendars/items Update an Institutional Calendar Item\tCalendarWS.updateInstitutionalCalendarItem() CalendarWS.saveInstitutionalCalendarItem()\tPATCH /learn/api/public/v1/calendars/items/{calendar type}/{calendar item id} Delete an Institutional Calendar Item\tCalendarWS.deleteInstitutionalCalendarItem()\tDELETE /learn/api/public/v1/calendars/items/{calendar type}/{calendar item id} Create a Personal Calendar Item\tCalendarWS.createPersonalCalendarItem() CalendarWS.savePersonalCalendarItem()\tPOST /learn/api/public/v1/calendars/items Read a Personal Calendar Item\tCalendarWS.getCalendarItem()\tGET /learn/api/public/v1/calendars/items/{calendar type}/{calendar item id} Read all Personal Calendar Items\tCalendarWS.getCalendarItem()\tGET /learn/api/public/v1/calendars GET /learn/api/public/v1/calendars/items Update a Personal Calendar Item\tCalendarWS.updatePersonalCalendarItem() CalendarWS.savePersonalCalendarItem()\tPATCH /learn/api/public/v1/calendars/items/{calendar type}/{calendar item id} Delete a Personal Calendar Item\tCalendarWS.deletePersonalCalendarItem()\tDELETE /learn/api/public/v1/calendars/items/{calendar type}/{calendar item id} ","version":null,"tagName":"h2"},{"title":"Content​","type":1,"pageTitle":"SOAP-to-REST","url":"/docs/blackboard/rest-apis/advanced/soap-to-rest#content","content":"Use Case\tSOAP WS Call\tREST EndpointCreate Course TOC\tContentWS.saveCourseTOC()\tPOST /learn/api/public/v1/courses/{courseId}/contents Read Course TOC\tContentWS.getTOCsByCourseId()\tGET /learn/api/public/v1/courses/{courseId}/contents/{content ID} Read All Course TOC\tContentWS.getTOCsByCourseId()\tGET /learn/api/public/v1/courses/{courseId}/contents Update Course TOC\tContentWS.saveCourseTOC()\tPATCH /learn/api/public/v1/courses/{courseId}/contents Delete Course TOC\tContentWS.deleteCourseTOCs()\tDELETE /learn/api/public/v1/courses/{courseId}/contents Create Content Item\tContentWS.saveContent()\tPOST /learn/api/public/v1/courses/{courseId}/contents/{content ID)/children Read Content Item\tContentWS.getFilteredContent()\tGET /learn/api/public/v1/courses/{courseId}/contents/{content ID} Read All Content Items\tContentWS.getFilteredContent()\tGET /learn/api/public/v1/courses/{courseId}/contents/{content ID)/children Update Content Item\tContentWS.saveContent()\tPATCH /learn/api/public/v1/courses/{courseId}/contents Delete Content Item\tContentWS.deleteContents()\tDELETE /learn/api/public/v1/courses/{courseId}/contents Attach File\tContentWS.addContentFile()\tPOST /learn/api/public/v1/courses/{courseId}/contents/{content ID}/attachment Remove File\tContentWS.deleteContentFiles()\tDELETE /learn/api/public/v1/courses/{courseId}/contents/{contentID}/attachment/{attachment ID} Update File\tContentWS.updateContentFileLinkName()\tDELETE /learn/api/public/v1/courses/{courseId}/contents/{contentID}/attachment/{attachment ID} POST /learn/api/public/v1/courses/{courseId}/contents/{content ID}/attachment Read Content File\tContentWS.getContentFiles()\tGET /learn/api/public/v1/courses/{courseId}/contents/{contentID}/attachment/{attachment ID} Read All Content Files\tContentWS.getContentFiles()\tGET /learn/api/public/v1/courses/{courseId}/contents/{content ID}/attachment Download Content File\tContentWS.getContentFiles()\tGET /learn/api/public/v1/courses/{courseId}/contents/{contentID}/attachment/{attachment ID}/downloads Create Link\tContentWS.saveLink()\tPOST /learn/api/public/v1/courses/{courseId}/contents/{content ID}/children Read Link\tContentWS.getLinksByReferredToType() ContentWS.getLinksByReferrerType()\tGET /learn/api/public/v1/courses/{courseId}/contents/{content ID} Read All Links\tContentWS.getLinksByReferredToType() ContentWS.getLinksByReferrerType()\tGET /learn/api/public/v1/courses/{courseId}/contents Update Link\tContentWS.saveLink()\tPATCH /learn/api/public/v1/courses/{courseId}/contents/{content ID} Delete Link\tContentWS.deleteLink()\tDELETE /learn/api/public/v1/courses/{courseId}/contents/{content ID} Get Reviewed Status\tContentWS.getReviewStatusByCourseId()\tGET /learn/api/public/v1/courses/{courseId}/contents/{contentId}/users/{userId}/reviewStatus Set Reviewed Status\tContentWS.setContentReviewed()\tPATCH /learn/api/public/v1/courses/{courseId}/contents/{contentId}/users/{userId}/reviewStatus ","version":null,"tagName":"h2"},{"title":"Context​","type":1,"pageTitle":"SOAP-to-REST","url":"/docs/blackboard/rest-apis/advanced/soap-to-rest#context","content":"Use Case\tSOAP WS Call\tREST EndpointRegister Tool\tContextWS.registerTool()\tN/A Emulate a User\tContextWS.emulateUser()\tGET /learn/api/public/v1/oauth2/authorizationcode POST /learn/api/public/v1/oauth2/token Extend Session Life\tContextWS.extendSessionLife()\tPOST /learn/api/public/v1/oauth2/token Get Memberships By UserID\tContextWS.getMemberships()\tGET /learn/api/public/v1/users/{user id}/courses Get Current User's Memberships\tContextWS.getMyMemberships()\tGET /learn/api/public/v1/users/me/courses Get System Installation ID\tContextWS.getSystemInstallationId()\tUse LTI Login as User\tContextWS.login()\tGET /learn/api/public/v1/oauth2/authorizationcode POST /learn/api/public/v1/oauth2/token Login with Access Ticket\tContextWS.loginTicket()\tN/A Login as Tool\tContextWS.loginTool()\tPOST /learn/api/public/v1/oauth2/token Logout\tContextWS.logout()\tN/A ","version":null,"tagName":"h2"},{"title":"Courses​","type":1,"pageTitle":"SOAP-to-REST","url":"/docs/blackboard/rest-apis/advanced/soap-to-rest#courses","content":"Use Case\tSOAP WS Call\tREST EndpointCreate Course\tCourseWS.createCourse() CourseWS.saveCourse()\tPOST /learn/api/public/v2/courses Read Course\tCourseWS.getCourse()\tGET /learn/api/public/v2/courses/{courseId} Read All Courses\tCourseWS.getCourse()\tGET /learn/api/public/v2/courses Update Course\tCourseWS.saveCourse()\tPATCH /learn/api/public/v2/courses/{courseId} Update Course BatchUID\tCourseWS.changeCourseBatchUid()\tPATCH /learn/api/public/v2/courses/{courseId} Update Course Category\tCourseWS.changeCourseCategoryBatchUid()\tPATCH /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId} Update Course Datasource\tCourseWS.changeCourseDataSourceId()\tPATCH /learn/api/public/v2/courses/{courseId} Delete Course\tCourseWS.deleteCourse()\tDELETE /learn/api/public/v2/courses/{courseId} Create Organization\tCourseWS.createOrg()\tPOST /learn/api/public/v2/courses Read Organization\tCourseWS.getOrg()\tGET /learn/api/public/v2/courses/{courseId} Read All Organizations\tCourseWS.getOrg()\tGET /learn/api/public/v2/courses Update Organization\tCourseWS.saveCourse()\tPATCH /learn/api/public/v2/courses/{courseId} Update Organization BatchUID\tCourseWS.changeOrgBatchUid()\tPATCH /learn/api/public/v2/courses/{courseId} Update Organization Category\tCourseWS.changeOrgCategoryBatchUid()\tPATCH /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId} Update Organization Datasource\tCourseWS.changeOrgDataSourceId()\tPATCH /learn/api/public/v2/courses/{courseId} Delete Organization\tCourseWS.deleteOrg()\tDELETE /learn/api/public/v2/courses/{courseId} Create Group\tCourseWS.saveGroup()\tPOST /learn/api/public/v1/courses/{courseId}/groups Read Group\tCourseWS.getGroup()\tGET /learn/api/public/v1/courses/{courseId}/groups/{group Id} Read All Groups\tCourseWS.getGroup()\tGET /learn/api/public/v1/courses/{courseId}/groups Update Group\tCourseWS.saveGroup()\tPATCH /learn/api/public/v1/courses/{courseId}/groups/{group Id} Delete Group\tCourseWS.deleteGroup()\tDELETE /learn/api/public/v1/courses/{courseId}/groups/{group Id} Create Term\tCourseWS.saveTerm()\tPOST /learn/api/public/v1/terms Read Term\tCourseWS.loadTerm() CourseWS.loadTermByCourseId()\tGET /learn/api/public/v1/terms/{term id} Read All Terms\tCourseWS.loadTerms() CourseWS.loadTermsByName()\tGET /learn/api/public/v1/terms Update Term\tCourseWS.saveTerm()\tPATCH /learn/api/public/v1/terms/{term id} Delete Term\tCourseWS.deleteTerm()\tDELETE /learn/api/public/v1/terms/{term id} Add Course to Term\tCourseWS.addCourseToTerm()\tPATCH /learn/api/public/v2/courses/{courseId} Get Courses in Term\tCourseWS.loadCoursesInTerm()\tGET /learn/api/public/v2/courses?termId={term id} Remove Course From Term\tCourseWS.removeCourseFromTerm()\tPATCH /learn/api/public/v2/courses/{courseId} Create Course Category\tCourseWS.saveCourseCategory()\tPOST /learn/api/public/v1/catalog/categories/{categoryType} Read Course Category\tCourseWS.getCategories()\tGET /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId} Read All Course Categories\tCourseWS.getCategories()\tGET /learn/api/public/v1/catalog/categories/{categoryType} Update Course Category\tCourseWS.saveCourseCategory()\tPATCH /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId} Delete Course Category\tCourseWS.deleteCourseCategory()\tDELETE /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId} Create Course Category Membership\tCourseWS.saveCourseCategoryMembership()\tPUT /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses/{courseId} Read Course Category Membership\tCourseWS.getCourseCategoryMembership()\tGET /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses/{courseId} GET /learn/api/public/v1/courses/{courseId}/categories Read All Course Category Memberships\tCourseWS.getCourseCategoryMembership()\tGET /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses Update Course Category Membership\tCourseWS.saveCourseCategoryMembership()\tPUT /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses/{courseId} Delete Course Category Membership\tCourseWS.deleteCourseCategoryMembership()\tDELETE /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses/{courseId} Create Organization Category\tCourseWS.saveOrgCategory()\tPOST /learn/api/public/v1/catalog/categories/{categoryType} Read Organization Category\tCourseWS.getCategories()\tGET /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId} Read All Organization Categories\tCourseWS.getCategories()\tGET /learn/api/public/v1/catalog/categories/{categoryType} Update Organization Category\tCourseWS.saveOrgCategory()\tPATCH /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId} Delete Organization Category\tCourseWS.deleteOrgCategory()\tDELETE /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId} Create Organization Category Membership\tCourseWS.saveOrgCategoryMembership()\tPUT /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses/{courseId} Read Organization Category Membership\tCourseWS.getOrgCategoryMembership()\tGET /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses/{courseId} GET /learn/api/public/v1/courses/{courseId}/categories Read All Organization Category Memberships\tCourseWS.getOrgCategoryMembership()\tGET /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses Update Organization Category Membership\tCourseWS.saveOrgCategoryMembership()\tPUT /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses/{courseId} Delete Organization Category Membership\tCourseWS.deleteOrgCategoryMembership()\tDELETE /learn/api/public/v1/catalog/categories/{categoryType}/{categoryId}/courses/{courseId} Create Cartridge\tCourseWS.saveCartridge()\tN/A Read Cartridge\tCourseWS.getCartridge()\tN/A Update Cartridge\tCourseWS.saveCartridge()\tN/A Delete Cartridge\tCourseWS.deleteCartridge()\tN/A Create StaffInfo\tCourseWS.saveStaffInfo()\tPOST /learn/api/public/v1/users PUT /learn/api/public/v1/courses/{course id}/users/{user id} Read StaffInfo\tCourseWS.getStaffInfo()\tGET /learn/api/public/v1/users/{user id} Update StaffInfo\tCourseWS.saveStaffInfo()\tPATCH /learn/api/public/v1/users/{user id} Delete StaffInfo\tCourseWS.deleteStaffInfo()\tDELETE /learn/api/public/v1/users/{user id} Set Course Banner\tCourseWS.setCourseBannerImage()\tN/A Get Group Tools\tCourseWS.getAvailableGroupTools()\t2020 Roadmap Read Classification\tCourseWS.getClassifications()\tN/A ","version":null,"tagName":"h2"},{"title":"Course Memberships​","type":1,"pageTitle":"SOAP-to-REST","url":"/docs/blackboard/rest-apis/advanced/soap-to-rest#course-memberships","content":"Use Case\tSOAP WS Call\tREST EndpointCreate Course Membership CourseMembershipWS.saveCourseMembership()\tPUT /learn/api/public/v1/courses/{courseId}/users/{user id} Read Course Membership\tCourseMembershipWS.getCourseMembership()\tGET /learn/api/public/v1/courses/{courseId}/users/{user id} Read All Course Memberships\tCourseMembershipWS.getCourseMembership()\tGET /learn/api/public/v1/courses/{courseId}/users Update Course Memberships\tCourseMembershipWS.saveCourseMembership()\tPATCH /learn/api/public/v1/courses/{courseId}/users/{userId} Delete Course Memberships\tCourseMembershipWS.deleteCourseMembership()\tDELETE /learn/api/public/v1/courses/{courseId}/users/{userId} Create Organization Membership\tCourseMembershipWS.saveCourseMembership()\tPUT /learn/api/public/v1/courses/{courseId}/users/{user id} Read Organization Membership\tCourseMembershipWS.getCourseMembership()\tGET /learn/api/public/v1/courses/{courseId}/users/{user id} Read All Organization Memberships\tCourseMembershipWS.getCourseMembership()\tGET /learn/api/public/v1/courses/{courseId}/users Update Organization Memberships\tCourseMembershipWS.saveCourseMembership()\tPATCH /learn/api/public/v1/courses/{courseId}/users/{userId} Delete Organization Memberships\tCourseMembershipWS.deleteCourseMembership()\tDELETE /learn/api/public/v1/courses/{courseId}/users/{userId} Create Group Membership\tCourseMembershipWS.saveGroupMembership()\tPUT /learn/api/public/v1/courses/{courseId}/groups/{groupId}/users/{userId} Read Group Membership\tCourseMembershipWS.getGroupMembership()\tGET /learn/api/public/v1/courses/{courseId}/groups/{groupId}/users/{userId} Read All Group Memberships\tCourseMembershipWS.getGroupMembership()\tGET /learn/api/public/v1/courses/{courseId}/groups/{groupId}/users Delete Group Memberships\tCourseMembershipWS.deleteGroupMembership()\tDELETE /learn/api/public/v1/courses/{courseId}/groups/{groupId}/users/{userId} Get Course Roles\tCourseMembershipWS.getCourseRoles()\tGET /learn/api/public/v1/courseRoles ","version":null,"tagName":"h2"},{"title":"Gradebook​","type":1,"pageTitle":"SOAP-to-REST","url":"/docs/blackboard/rest-apis/advanced/soap-to-rest#gradebook","content":"Use Case\tSOAP WS Call\tREST EndpointCreate an Attempt\tGradebookWS.saveAttempts()\tPOST /learn/api/public/v2/course/{courseId}/gradebook/columns/{columnid}/attempts Read an Attempt\tGradebookWS.getAttempts()\tGET /learn/api/public/v2/course/{courseId}/gradebook/columns/{columnid}/attempts/{attempt id} Read All Attempts\tGradebookWS.getAttempts()\tGET /learn/api/public/v2/course/{courseId}/gradebook/columns/{columnid}/attempts Update an Attempt\tGradebookWS.saveAttempts()\tPATCH /learn/api/public/v2/course/{courseId}/gradebook/columns/{columnid}/attempts/{attempt id} Delete an Attempt\tGradebookWS.deleteAttempts()\tPATCH /learn/api/public/v2/course/{courseId}/gradebook/columns/{columnid}/attempts/{attempt id} (set to 0) Create a Column\tGradebookWS.saveColumns()\tPOST /learn/api/public/v2/course/{courseId}/gradebook/columns Read a Column\tGradebookWS.getGradebookColumns()\tGET /learn/api/public/v2/course/{courseId}/gradebook/columns/{column id} Read All Columns\tGradebookWS.getGradebookColumns()\tGET /learn/api/public/v2/course/{courseId}/gradebook/columns Update a Column\tGradebookWS.saveColumns()\tPATCH /learn/api/public/v2/course/{courseId}/gradebook/columns/{column id} Delete a Column\tGradebookWS.deleteColumns()\tDELETE /learn/api/public/v2/course/{courseId}/gradebook/columns/{column id} Create a Gradebook Type\tGradebookWS.saveGradebookTypes()\tPOST /learn/api/public/v2/course/{courseId}/gradebook/columns Read a Gradebook Type\tGradebookWS.getGradebookTypes()\tGET /learn/api/public/v2/course/{courseId}/gradebook/columns/{column id} Read All Gradebook Types\tGradebookWS.getGradebookTypes()\tGET /learn/api/public/v2/course/{courseId}/gradebook/columns Update a Gradebook Type\tGradebookWS.saveGradebookTypes()\tPATCH /learn/api/public/v2/course/{courseId}/gradebook/columns/{column id} Delete a Gradebook Type\tGradebookWS.deleteGradebookTypes()\tDELETE /learn/api/public/v2/course/{courseId}/gradebook/columns/{column id} Create a Grade\tGradebookWS.saveGrades()\tPOST /learn/api/public/v2/course/{courseId}/gradebook/columns/{columnid}/attempts Read a Grade\tGradebookWS.getGrades()\tGET /learn/api/public/v2/course/{courseId}/gradebook/columns/{columnid}/attempts/{attempt id} Read All Grades\tGradebookWS.getGrades()\tGET /learn/api/public/v2/course/{courseId}/gradebook/columns/{columnid}/attempts Update a Grade\tGradebookWS.saveGrades()\tPATCH /learn/api/public/v2/course/{courseId}/gradebook/columns/{columnid}/attempts/{attempt id} Delete a Grade\tGradebookWS.deleteGrades()\tPATCH /learn/api/public/v2/course/{courseId}/gradebook/columns/{columnid}/attempts/{attempt id} (set to 0) Create a Grading Schema\tGradebookWS.saveGradingSchemas()\tPOST /learn/api/public/v1/courses/{course id]/gradebook/schemas Read a Grading Schema\tGradebookWS.getGradingSchemas()\tGET /learn/api/public/v1/courses/{course id]/gradebook/schemas/{schema id} Read All Grading Schemas\tGradebookWS.getGradingSchemas()\tGET /learn/api/public/v1/courses/{course id]/gradebook/schemas Update a Grading Schema\tGradebookWS.saveGradingSchemas()\tPATCH /learn/api/public/v1/courses/{course id]/gradebook/schemas/{schema id} Delete a Grading Schema\tGradebookWS.deleteGradingSchemas()\tDELETE /learn/api/public/v1/courses/{course id]/gradebook/schemas/{schema id} ","version":null,"tagName":"h2"},{"title":"Users​","type":1,"pageTitle":"SOAP-to-REST","url":"/docs/blackboard/rest-apis/advanced/soap-to-rest#users","content":"Use Case\tSOAP WS Call\tREST EndpointCreate a User\tUserWS.saveUser()\tPOST /learn/api/public/v1/users Read a User\tUserWS.getUser()\tGET /learn/api/public/v1/users/{userId} Read All Users\tUserWS.getUser()\tGET /learn/api/public/v1/users Update a User\tUserWS.saveUser()\tPATCH /learn/api/public/v1/users/{userId} Delete a User\tUserWS.deleteUser()\tDELETE /learn/api/public/v1/users/{userId} Update a User's BatchUid\tUserWS.changeUserBatchUid()\tPATCH /learn/api/public/v1/users/{userId} Update a User's DataSource ID\tUserWS.changeUserDataSourceId()\tPATCH /learn/api/public/v1/users/{userId} Delete User by Role\tUserWS.deleteUserByInstitutionRole()\tN/A Create a User's Address Book Entry\tUserWS.saveAddressbookEntry()\tPOST /learn/api/public/v1/users Read a User's Address Book Entry\tUserWS.getAddressbookEntry()\tGET /learn/api/public/v1/users/{userId} Read All a User's Address Book Entries\tUserWS.getAddressbookEntry()\tGET /learn/api/public/v1/users Update a User's Address Book Entry\tUserWS.saveAddressBbookEntry()\tPATCH /learn/api/public/v1/users/{userId} Delete a User's Address Book Entry\tUserWS.deleteAddressBookEntry()\tDELETE /learn/api/public/v1/users/{userId} Read All Institution Roles\tUserWS.getInstitutionRoles()\tGET /learn/api/public/v1/institutionRoles Read All System Roles\tUserWS.getSystemRoles()\tGET /learn/api/public/v1/systemRoles Read All Institution Roles Assigned to a User\tUserWS.getUserInstitutionRoles()\tGET /learn/api/public/v1/users/{userId} Create Observer Association\tUserWS.saveObserverAssociation()\tPUT /learn/api/public/v1/users/{userId}/observers/{observerId} Read Observer Association\tUserWS.getObservee()\tGET /learn/api/public/v1/users/{userId}/observees GET /learn/api/public/v1/users/{userId}/observers Read All Observer Association\tUserWS.getObservee()\tGET /learn/api/public/v1/users/{userId}/observees GET /learn/api/public/v1/users/{userId}/observers Update Observer Association\tUserWS.saveObserverAssociation()\tPUT /learn/api/public/v1/users/{userId}/observers/{observerId} Delete Observer Association\tUserWS.deleteOverserverAssociation()\tDELETE /learn/api/public/v1/users/{userId}/observers/{observerId} ","version":null,"tagName":"h2"},{"title":"Util​","type":1,"pageTitle":"SOAP-to-REST","url":"/docs/blackboard/rest-apis/advanced/soap-to-rest#util","content":"Use Case\tSOAP WS Call\tREST EndpointRead All Datasources\tUtilWS.getDataSources()\tGET /learn/api/public/v1/dataSources Get Required Entitlements By Method\tUtilWS.getRequiredEntitlements()\tN/A Check a User's Entitlements\tUtilWS.checkEntitlement()\tN/A Create a Setting\tUtilWS.saveSetting()\tN/A Load a Setting\tUtilWS.loadSetting()\tN/A Update a Setting\tUtilWS.saveSetting()\tN/A Delete a Setting\tUtilWS.deleteSetting()\tN/A Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h2"},{"title":"Blackboard App for Students Launch Schema","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/advanced/student-launch-schema","content":"Blackboard App for Students Launch Schema Published: Not Available Last Update: Not Available You can link into the Blackboard app from other applications. With deep linking, a uniform resource identifier (URI) links to a specific location within the mobile app rather than simply launching the app. Use the provided schemas to link to specific features in the Blackboard app. Note: the app-to-app launch schema changed from the bbstudent:// prefix to the blackboard:// prefix in June, 2017. Please be sure your schema is updated. This functionality is not available for the Blackboard Instructor app. Activity Stream​ Endpoint: blackboard://activity Version: &quot;Blackboard 3.0+&quot; Course Base​ Endpoint: blackboard://courses Version: &quot;Blackboard 3.0+&quot; Organization Base​ Endpoint: blackboard://org Version: &quot;Blackboard 3.2+&quot; Grades​ Endpoint: blackboard://grades Version: &quot;Blackboard 3.0+&quot; Due Dates​ Endpoint: blackboard://calendar Version: &quot;Blackboard 3.0+&quot; Profile​ Endpoint: blackboard://profile Version: &quot;Blackboard 3.0+&quot; Settings​ Endpoint: blackboard://settings Version: &quot;Blackboard 3.0+&quot; Linked Accounts​ Endpoint: blackboard://settings/linkedAccounts Version: &quot;Blackboard 3.0+&quot; Feedback​ Endpoint: blackboard://feedback Version: &quot;Blackboard 3.0+&quot; Course Overview​ Endpoint: blackboard://course/[course_id]/overview Notes: [course_id] is the id of the course you would like to open Version: &quot;Blackboard 3.0+&quot; Organization Overview​ Endpoint: blackboard://org/[org_id]/overview Notes: [org_id] is the id of the organization you would like to open Version: &quot;Blackboard 3.2+&quot; Course/Content​ Endpoint: blackboard://course/[course_id]/content Notes: [course_id] is the id of the course you would like to open Version: &quot;Blackboard 3.0+&quot; Organization/Content​ Endpoint: blackboard://org/[org_id]/content Notes: [org_id] is the id of the organization you would like to open Version: &quot;Blackboard 3.2+&quot; Course/Announcements​ Endpoint: blackboard://course/[course_id]/announcement Notes: [course_id] is the id of the course you would like to open Version: &quot;Blackboard 3.0+&quot; Organization/Announcements​ Endpoint: blackboard://org/[org_id]/announcement Notes: [org_id] is the id of the organization you would like to open Version: &quot;Blackboard 3.2+&quot; Course/Calendar​ Endpoint: blackboard://course/[course_id]/calendar Notes: [course_id] is the id of the course you would like to open Version: &quot;Blackboard 3.0+&quot; Organization/Calendar​ Endpoint: blackboard://org/[org_id]/calendar Notes: [org_id] is the id of the organization you would like to open Version: &quot;Blackboard 3.2+&quot; Course/Grades​ Endpoint: blackboard://course/[course_id]/grades Notes: [course_id] is the id of the course you would like to open Version: &quot;Blackboard 3.0+&quot; Organization/Grades​ Endpoint: blackboard://org/[org_id]/grades Notes: [org_id] is the id of the organization you would like to open Version: &quot;Blackboard 3.2+&quot; Course/Discussion Panel​ Endpoint: blackboard://course/[course_id]/discussion Notes: [course_id] is the id of the course you would like to open Version: &quot;Blackboard 3.0+&quot; Organization/Discussion Panel​ Endpoint: blackboard://org/[org_id]/discussion Notes: [org_id] is the id of the organization you would like to open Version: &quot;Blackboard 3.2+&quot; Course/Assignment/Overview​ Endpoint: blackboard://course/[course_id]/assessment/assignment/[assignment_id]/overview Notes: [course_id] is the id of the course the assignment resides in[assignment_id] is the id of the assignment you would like to open Version: &quot;Blackboard 3.0+&quot; Organization/Assignment/Overview​ Endpoint: blackboard://org/[org_id]/assessment/assignment/[assignment_id]/overview Notes: [org_id] is the id of the organization you would like to open[assignment_id] is the id of the assignment you would like to open Version: &quot;Blackboard 3.2+&quot; Course/Assignment/Submissions​ Endpoint: blackboard://course/[course_id]/assessment/assignment/[assignment_id]/submissions Notes: [course_id] is the id of the course the assignment resides in[assignment_id] is the id of the assignment you would like to open Version: &quot;Blackboard 3.0+&quot; Organization/Assignment/Submissions​ Endpoint: blackboard://org/[org_id]/assessment/assignment/[assignment_id]/submissions Notes: [org_id] is the id of the organization you would like to open[assignment_id] is the id of the assignment you would like to open Version: &quot;Blackboard 3.2+&quot; Course/Test/Overview​ Endpoint: blackboard://course/[course_id]/assessment/test/[test_id]/overview Notes: [course_id] is the id of the course the test resides in[test_id] is the id of the test you would like to open Version: &quot;Blackboard 3.0+&quot; Organization/Test/Overview​ Endpoint: blackboard://org/[org_id]/assessment/test/[test_id]/overview Notes: [org_id] is the id of the course the test resides in[test_id] is the id of the test you would like to open Version: &quot;Blackboard 3.2+&quot; Course/Test/Submissions​ Endpoint: blackboard://course/[course_id]/assessment/test/[test_id]/submissions Notes: [course_id] is the id of the course the test resides in[test_id] is the id of the test you would like to open Version: &quot;Blackboard 3.0+&quot; Organization/Test/Submissions​ Endpoint: blackboard://org/[org_id]/assessment/test/[test_id]/submissions Notes: [org_id] is the id of the course the test resides in[test_id] is the id of the test you would like to open Version: &quot;Blackboard 3.2+&quot; Course/Content Item​ Endpoint: blackboard://course/[course_id]/item/[item_id] Notes: [course_id] is the id of the course the item is linked to[item_id] is the id of the item you would like to open Version: &quot;Blackboard 3.0+&quot; Organization/Content Item​ Endpoint: blackboard://org/[org_id]/item/[item_id] Notes: [org_id] is the id of the course the item is linked to[item_id] is the id of the item you would like to open Version: &quot;Blackboard 3.2+&quot; Course/Content File​ Endpoint: blackboard://course/[course_id]/file/[file_id] Notes: [course_id] is the id of the course the file is linked to[file_id] is the id of the file you would like to open Version: &quot;Blackboard 3.0+&quot; Organization/Content File​ Endpoint: blackboard://org/[org_id]/file/[file_id] Notes: [org_id] is the id of the course the file is linked to[file_id] is the id of the file you would like to open Version: &quot;Blackboard 3.2+&quot; Original Course/Discussion Group​ Endpoint: blackboard://course/[course_id]/discussion/discussionBoard/[discussion_board_id] Notes: [course_id] is the id of the course the discussion board is linked to[discussion_board_id] is the id of the discussion board you would like to open Version: &quot;Blackboard 3.0+&quot; Original Organization/Discussion Group​ Endpoint: blackboard://org/[org_id]/discussion/discussionBoard/[discussion_board_id] Notes: [org_id] is the id of the course the discussion board is linked to[discussion_board_id] is the id of the discussion board you would like to open Version: &quot;Blackboard 3.2+&quot; Original Course/Discussion Thread​ Endpoint: blackboard://course/[course_id]/discussion/discussionThread/[discussion_thread_id] Notes: [course_id] is the id of the course the discussion thread is linked to[discussion_thread_id] is the id of the discussion thread you would like to open Version: &quot;Blackboard 3.0+&quot; Original Organization/Discussion Thread​ Endpoint: blackboard://org/[org_id]/discussion/discussionThread/[discussion_thread_id] Notes: [org_id] is the id of the course the discussion thread is linked to[discussion_thread_id] is the id of the discussion thread you would like to open Version: &quot;Blackboard 3.2+&quot; Ultra Course/Discussion Thread​ Endpoint: blackboard://course/[course_id]/discussion/discussionThread/[discussion_thread_id]/discussionGroup/[discussion_group_id]/contentId/[content_id] Notes: [course_id] is the id of the course the discussion thread is linked to[discussion_thread_id] is the id of the discussion thread you would like to open[discussion_group_id] is the id of a virtual discussion group the discussion thread is linked to[content_id] is the content id of this discussion thread[discussion_group_id] and [content_id] are ultra course required only Version: &quot;Blackboard 3.0+&quot; Ultra Organization/Discussion Thread​ Endpoint: blackboard://org/[org_id]/discussion/discussionThread/[discussion_thread_id]/discussionGroup/[discussion_group_id]/contentId/[content_id] Notes: [org_id] is the id of the course the discussion thread is linked to[discussion_thread_id] is the id of the discussion thread you would like to open[discussion_group_id] is the id of a virtual discussion group the discussion thread is linked to[content_id] is the content id of this discussion thread[discussion_group_id] and [content_id] are ultra course required only Version: &quot;Blackboard 3.2+&quot; Ultra Course/Discussion Folder​ Endpoint: blackboard://course/[course_id]/discussion/discussionFolder/contentId/[content_id] Notes: [course_id] is the id of the course the discussion folder is linked to[content_id] is the content id of this discussion folder[content_id] are ultra course required only Version: &quot;Blackboard 3.0+&quot; Ultra Organization/Discussion Folder​ Endpoint: blackboard://org/[org_id]/discussion/discussionFolder/contentId/[content_id] Notes: [org_id] is the id of the course the discussion folder is linked to[content_id] is the content id of this discussion folder[content_id] are ultra course required only Version: &quot;Blackboard 3.2+&quot; Course/Content Folder​ Endpoint: blackboard://course/[course_id]/folder/[folder_id] Notes: [course_id] is the id of the course the content folder resides in[folder_id] is the folder id of the content folder Version: &quot;Blackboard 3.0+&quot; Organization/Content Folder​ Endpoint: blackboard://org/[org_id]/folder/[folder_id] Notes: [org_id] is the id of the course the content folder resides in[folder_id] is the folder id of the content folder Version: &quot;Blackboard 3.2+&quot; Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards","keywords":"","version":null},{"title":"Use APIs to Work with Ultra Assignments","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/advanced/ultra-assignments","content":"","keywords":"","version":null},{"title":"Overview​","type":1,"pageTitle":"Use APIs to Work with Ultra Assignments","url":"/docs/blackboard/rest-apis/advanced/ultra-assignments#overview","content":"Learn Ultra experience offers a REST API for managing assessments. In Ultra, an assessment is effectively the same thing as an assignment except for how they are stored internally. In an assessment, there are questions of various types. Each 'question' is a slot for content that may not actually contain what you normally think of as a question. For more information about assignments and questions and how Learn users experience them, see Ultra: Create an Assignment in Blackboard Help. An assignment is made up of one or more questions. The following question types are available for use with Ultra via REST API. EitherOr - questions that allow one of two possible responses, such as &quot;true or false&quot;Essay - questions that provide a WYSIWYG editor and allow long text responseMultipleAnswer - allow students to choose more than one answerPresentation - represents a 'question' that only has text and/or attached files referenced from within question.text, but that has no actual answer, points, or evaluation associated with it As of version 3300.9.0, you can use the public API to read any type of question. You can use the public API to create, update, and delete methods only with presentation-type questions. ","version":null,"tagName":"h3"},{"title":"Before You Begin​","type":1,"pageTitle":"Use APIs to Work with Ultra Assignments","url":"/docs/blackboard/rest-apis/advanced/ultra-assignments#before-you-begin","content":"To work with assignments, you need the entitlements listed for each endpoint in the API reference documents.If you want to use a file with a new assignment, you must upload the file to Learn before you create the new assignment. ","version":null,"tagName":"h3"},{"title":"Create an Assignment​","type":1,"pageTitle":"Use APIs to Work with Ultra Assignments","url":"/docs/blackboard/rest-apis/advanced/ultra-assignments#create-an-assignment","content":"Before you create an assignment, remember that you must first upload any files that you intend to use to create the object. If you have not already uploaded any files that you need to use to create the assignment, use the steps in the following section to do so.Make a POST request to /learn/api/public/v1/courses/{courseId}/contents/createAssignment. See the reference below for more information about using the endpoint. Note that the response body of the request does not return the full assignment object. It returns an object of IDs, one for each of the various resources created by Learn.Use the response body to further manage the assignment. Use these objects to further manage the assignment that you created. ","version":null,"tagName":"h3"},{"title":"Upload a File to Learn​","type":1,"pageTitle":"Use APIs to Work with Ultra Assignments","url":"/docs/blackboard/rest-apis/advanced/ultra-assignments#upload-a-file-to-learn","content":"Before you can use a file with a REST API call, you must use an API upload it to Learn. Make a POST request to /learn/api/public/v1/uploads.Use the ID number in the response to further access the uploaded file. ","version":null,"tagName":"h3"},{"title":"Add Content to an Existing Assignment​","type":1,"pageTitle":"Use APIs to Work with Ultra Assignments","url":"/docs/blackboard/rest-apis/advanced/ultra-assignments#add-content-to-an-existing-assignment","content":"As of 3300.9.0 you can add only presentation-type &quot;questions&quot; to assignments using the public REST API. Make a POST request to /learn/api/public/v1/courses/{courseId}/assessments/{assessmentId}/questions/{questionId} You can validate the response body against your original response body. ","version":null,"tagName":"h3"},{"title":"Assignment-related Query Parameters​","type":1,"pageTitle":"Use APIs to Work with Ultra Assignments","url":"/docs/blackboard/rest-apis/advanced/ultra-assignments#assignment-related-query-parameters","content":"All endpoints accept a query parameter fields that specifies the fields to be included in the response object, if any. The fields to be included are given as a comma-separated list. Specified fields are ignored if absent from the response. If no fields are specified, all fields are returned in the response. For example: POST to /learn/api/public/v1/courses/{courseId}/assessments/{assessmentId}/que stions/{questionId}?fields=id,title,status,message returns the ID and title of questions if the request succeeds because only those fields are included in the success response object. The method returns status and message if the request fails because only those fields are included in the error response object. Contributors on this article: Ryan Haber Sr. Content DesignerContent Team - Blackboard Learn ","version":null,"tagName":"h3"},{"title":"Demo using Golang","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/demo-code/golang-demo","content":"Demo using Golang Published: Not Available Last Update: Not Available In August 2016, our friends at AllTheDucks presented on their work integrating with the Learn REST APIs using Golang. Following DevCon ANZ, the Ducks were kind enough to open source their project and write a blog to help developers learn the Golang REST Application they wrote. The blog can be found here. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards","keywords":"","version":null},{"title":"Using cURL to access content attachments","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/demo-code/curl-attach-demo","content":"","keywords":"","version":null},{"title":"STEP ONE: Generate an Access Token​","type":1,"pageTitle":"Using cURL to access content attachments","url":"/docs/blackboard/rest-apis/demo-code/curl-attach-demo#step-one-generate-an-access-token","content":"Request: $ curl -k --user &lt;appkey&gt;:&lt;appsecret&gt; --data &quot;grant_type=client_credentials&quot; https://ultra-integ.int.bbpd.io/learn/api/public/v1/oauth2/token  Result: {“access_token”:&quot;QvWicpu3kMA9coWMv7TKLPzYnq4nUnfr&quot;,&quot;token_type&quot;:&quot;bearer&quot;,&quot;expires_in&quot;:3599}  ","version":null,"tagName":"h3"},{"title":"STEP TWO: GET a list of top level content​","type":1,"pageTitle":"Using cURL to access content attachments","url":"/docs/blackboard/rest-apis/demo-code/curl-attach-demo#step-two-get-a-list-of-top-level-content","content":"Note this step is the same for both Ultra and Original courses Ultra: Request: $ curl -k -X GET -H &quot;Authorization: Bearer QvWicpu3kMA9coWMv7TKLPzYnq4nUnfr&quot; https://ultra-integ.int.bbpd.io/learn/api/public/v1/courses/_36662_1/contents  Results: { &quot;results&quot;: [ { &quot;parentId&quot;: &quot;_216719_1&quot;, &quot;position&quot;: 0, &quot;availability&quot;: { &quot;allowGuests&quot;: true, &quot;available&quot;: &quot;No&quot;, &quot;adaptiveRelease&quot;: {} }, &quot;id&quot;: &quot;_596394_1&quot;, &quot;title&quot;: &quot;SOAP Deprecation Announcement.pdf&quot;, &quot;created&quot;: &quot;2018-11-28T18:38:50.621Z&quot;, &quot;contentHandler&quot;: { &quot;id&quot;: &quot;resource/x-bb-file&quot;, &quot;file&quot;: { &quot;fileName&quot;: &quot;SOAP-Deprecation-20Announcement.pdf&quot; } } }, { &quot;parentId&quot;: &quot;_216719_1&quot;, &quot;position&quot;: 1, &quot;availability&quot;: { &quot;allowGuests&quot;: true, &quot;available&quot;: &quot;Yes&quot;, &quot;adaptiveRelease&quot;: {} }, &quot;id&quot;: &quot;_435736_1&quot;, &quot;title&quot;: &quot;Download PDF&quot;, &quot;hasChildren&quot;: true, &quot;created&quot;: &quot;2017-08-23T19:16:34.781Z&quot;, &quot;contentHandler&quot;: { &quot;id&quot;: &quot;resource/x-bb-folder&quot;, &quot;isBbPage&quot;: true } } ] }  Original: Request: $ curl -k -X GET -H &quot;Authorization: Bearer QvWicpu3kMA9coWMv7TKLPzYnq4nUnfr&quot; https://ultra-integ.int.bbpd.io/learn/api/public/v1/courses/_60054_1/contents  Results: { &quot;results&quot;: [ { &quot;position&quot;: 1, &quot;availability&quot;: { &quot;allowGuests&quot;: true, &quot;available&quot;: &quot;Yes&quot;, &quot;adaptiveRelease&quot;: {} }, &quot;id&quot;: &quot;_382277_1&quot;, &quot;title&quot;: &quot;Information&quot;, &quot;hasChildren&quot;: true, &quot;created&quot;: &quot;2017-06-09T12:41:07.019Z&quot;, &quot;contentHandler&quot;: { &quot;id&quot;: &quot;resource/x-bb-folder&quot; } }, { &quot;position&quot;: 2, &quot;availability&quot;: { &quot;allowGuests&quot;: true, &quot;available&quot;: &quot;Yes&quot;, &quot;adaptiveRelease&quot;: {} }, &quot;id&quot;: &quot;_382278_1&quot;, &quot;title&quot;: &quot;Content&quot;, &quot;hasChildren&quot;: true, &quot;created&quot;: &quot;2017-06-09T12:41:07.021Z&quot;, &quot;contentHandler&quot;: { &quot;id&quot;: &quot;resource/x-bb-folder&quot; } } ] }  ","version":null,"tagName":"h3"},{"title":"STEP THREE: Discover Downloadable Content​","type":1,"pageTitle":"Using cURL to access content attachments","url":"/docs/blackboard/rest-apis/demo-code/curl-attach-demo#step-three-discover-downloadable-content","content":"Here you will iterate over the result set and based on a set of criteria identify downloadable content. The criteria is whether a content item has an id of resource/x-bb-folder or resource/x-bb-document, has child items, and whether an item has an id of resource/x-bb-file. So in the above examples the Ultra course, _36662_1, has one top level downloadable and a folder with child content, and the Original course has two folders. In each case we would iterate over the result set and take the appropriate action based on the content item id and whether the item, if a type of folder or document, has children. Get children If folder Get children If document and Ultra Course parse BBML for attachment URL else if not Ultra Course get attachments get attachment Id get attachment download  In this example both the Ultra and the Original course have folders, with children so we need to determine whether any of the children in either are downloadable content: Ultra: Request: $ curl -i -k -X GET -H &quot;Authorization: Bearer QvWicpu3kMA9coWMv7TKLPzYnq4nUnfr&quot; https://ultra-integ.int.bbpd.io/learn/api/public/v1/courses/_36662_1/contents/_435736_1/children  Response: { &quot;results&quot; : [ { &quot;parentId&quot; : &quot;_435736_1&quot;, &quot;position&quot; : 0, &quot;availability&quot; : { &quot;allowGuests&quot; : true, &quot;available&quot; : &quot;Yes&quot;, &quot;adaptiveRelease&quot; : { } }, &quot;id&quot; : &quot;_435737_1&quot;, &quot;title&quot; : &quot;ultraDocumentBody&quot;, &quot;created&quot; : &quot;2017-08-23T19:16:38.848Z&quot;, &quot;body&quot; : &quot;&lt;!-- {\\&quot;bbMLEditorVersion\\&quot;:1} --&gt;&lt;a href=\\&quot;https:\\/\\/ultra-integ.int.bbpd.io\\/bbcswebdav\\/ pid-435737-dt-content-rid-21916118_1\\/xid-21916118_1?VxJw3wfC56=1543432981&amp;Kq3cZcYS15=a253d31a6d36425 c81aaa457ee9e2f04&amp;3cCnGYSz89=f5CtU2s5tQcNJpZFO8tjCoIPZ9z6ZpOhzQpZ23SXyFk%3D\\&quot;data-bbfile=\\&quot;{&amp;quot; render&amp;quot;:&amp;quot;attachment&amp;quot;,&amp;quot;alternativeText&amp;quot;:&amp;quot;SOAP Deprecation Announcement.pdf&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;SOAP Deprecation Announcement.pdf&amp;quot;,&amp;quot; mimeType&amp;quot;:&amp;quot;application\\/pdf&amp;quot;}\\&quot;data-bbid=\\&quot;bbml-editor-id_e18bbfe0-876c-448e-b178- 0d8371738b86\\&quot;&gt;SOAP Deprecation Announcement.pdf&lt;\\/a&gt;&quot;, &quot;contentHandler&quot; : { &quot;id&quot; : &quot;resource\\/x-bb-document&quot; } }] }  Original: Request: $ curl -k -X GET -H &quot;Authorization: Bearer QvWicpu3kMA9coWMv7TKLPzYnq4nUnfr&quot; https://ultra-integ.int.bbpd.io/learn/api/public/v1/courses/_60054_1/contents/_382278_1/children  Response: { “results”:[{ “id”:”_382277_1”, “title&quot;:&quot;Information&quot;, “created&quot;:&quot;2017-06-09T12:41:07.019Z&quot;, “position&quot;:1, “hasChildren&quot;:true, “availability”:{ &quot;available&quot;:&quot;Yes&quot;, “allowGuests&quot;:true, “adaptiveRelease”:{} }, “contentHandler&quot;:{ “id&quot;:&quot;resource/x-bb-folder&quot; } }, { “id&quot;:&quot;_382278_1&quot;, “title”:&quot;Content&quot;, “created&quot;:&quot;2017-06-09T12:41:07.021Z&quot;, “position&quot;:2, “hasChildren&quot;:true, “availability”:{ &quot;available&quot;:&quot;Yes&quot;, “allowGuests&quot;:true, &quot;adaptiveRelease&quot;:{} }, “contentHandler&quot;:{ “id&quot;:&quot;resource/x-bb-folder&quot; } }] }  Here we have a document and a folder - we can access the found document and then continue iterating on requests until we had no folders and have walked the folder tree. ","version":null,"tagName":"h3"},{"title":"STEP FOUR: Accessing found documents​","type":1,"pageTitle":"Using cURL to access content attachments","url":"/docs/blackboard/rest-apis/demo-code/curl-attach-demo#step-four-accessing-found-documents","content":"Here is where Ultra is handled differently than Original. In Ultra the URL for the attachment is embedded in the BBML for the content Item as shown in this snippet from the above example: &quot;body&quot; : &quot;&lt;!-- {\\&quot;bbMLEditorVersion\\&quot;:1} --&gt;&lt;a href=\\&quot;**https:\\/\\/ultra-integ.int.bbpd.io\\/bbcswebdav\\/ pid-435737-dt-content-rid-21916118_1\\/_xid-21916118_1_?VxJw3wfC56=1543432981&amp;Kq3cZcYS15=a253d31a6d36425 c81aaa457ee9e2f04&amp;3cCnGYSz89=f5CtU2s5tQcNJpZFO8tjCoIPZ9z6ZpOhzQpZ23SXyFk%3D**\\&quot; data-bbfile=\\&quot;{&amp;quot; render&amp;quot;:&amp;quot;attachment&amp;quot;,&amp;quot;alternativeText&amp;quot;:&amp;quot;SOAP Deprecation Announcement. pdf&amp;quot;,&amp;quot;linkName&amp;quot;:&amp;quot;SOAP Deprecation Announcement.pdf&amp;quot;,&amp;quot;mimeType&amp;quot;: &amp;quot;application\\/pdf&amp;quot;}\\&quot; data-bbid=\\&quot;bbml-editor-id_e18bbfe0-876c-448e-b178-0d8371738b86\\&quot;&gt; SOAP Deprecation Announcement.pdf&lt;\\/a&gt;&quot;  To access the document URL for downloading you must search the bbml and extract any href string that contains a content item xid: https:\\/\\/ultra-integ.int.bbpd.io\\/bbcswebdav\\/pid-435737-dt-content-rid-21916118_1\\/_xid-21916118_1_ ?VxJw3wfC56=1543432981&amp;Kq3cZcYS15=a253d31a6d36425c81aaa457ee9e2f04&amp;3cCnGYSz89=f5CtU2s5tQcNJpZFO8tj CoIPZ9z6ZpOhzQpZ23SXyFk%3D  These URL strings represent content item attachments in Ultra. Original: In the case of an Original course once you have identified a content item as an attachment via the &quot;id&quot; : &quot;resource\\/x-bb-document tag you then may get the attachment id. Thus you must iterate through the content Ids to discover content which has the x-bb-document identifier : Request: $ curl -i -k -X GET -H &quot;Authorization: Bearer QvWicpu3kMA9coWMv7TKLPzYnq4nUnfr&quot; https://ultra-integ.int.bbpd.io/learn/api/public/v1/courses/_60054_1/contents/_382278_1  Result: { “id”:&quot;_382278_1&quot;,** “title&quot;:&quot;Information&quot;, “created&quot;:&quot;2017-06-09T12 : 41 : 07.019Z”, “position&quot;:1,&quot;hasChildren&quot;:true, “availability&quot;:{ “available&quot;:&quot;Yes&quot;, “allowGuests&quot;:true, &quot;adaptiveRelease&quot;:{} }, “contentHandler&quot;:{ “id&quot;:&quot;resource/x-bb-folder&quot; } }  We have a folder so get it’s children… Request: $ curl -i -k -X GET -H &quot;Authorization: Bearer QvWicpu3kMA9coWMv7TKLPzYnq4nUnfr&quot; https://ultra-integ.int.bbpd.io/learn/api/public/v1/courses/_60054_1/contents/_382278_1/children  Response: { “results”:[{ “id&quot;:&quot;_596395_1&quot;, “parentId&quot;:&quot;_382278_1&quot;, &quot;title&quot;:&quot;FOLDER OF PDFs”, &quot;body&quot;:&quot;&lt;p&gt;Folder containing downloadable content&lt;/p&gt;”, “created&quot;:&quot;2018-11-28T20:01:00.691Z&quot;, “position&quot;:0, “hasChildren&quot;:true, “availability&quot;:{ “available&quot;:&quot;Yes&quot;, “allowGuests&quot;:true, “adaptiveRelease”:{} }, “contentHandler&quot;:{ “id&quot;:&quot;resource/x-bb-folder&quot; } }] }  Request: $ curl -i -k -X GET -H &quot;Authorization: Bearer QvWicpu3kMA9coWMv7TKLPzYnq4nUnfr&quot; https://ultra-integ.int.bbpd.io/learn/api/public/v1/courses/_60054_1/contents/_596395_1  Response: { “id&quot;:&quot;_596395_1&quot;, “parentId&quot;:&quot;_382278_1&quot;, &quot;title&quot;:&quot;FOLDER OF PDFs”, &quot;body&quot;:&quot;&lt;p&gt;Folder containing downloadable content&lt;/p&gt;”, “created&quot;:&quot;2018-11-28T20:01:00.691Z&quot;, “position&quot;:0, “hasChildren&quot;:true, “availability&quot;:{ “available&quot;:&quot;Yes&quot;, “allowGuests&quot;:true, “adaptiveRelease”:{} }, “contentHandler&quot;:{ “id&quot;:&quot;resource/x-bb-folder&quot; } }  Request: $ curl -i -k -X GET -H &quot;Authorization: Bearer QvWicpu3kMA9coWMv7TKLPzYnq4nUnfr&quot; https://ultra-integ.int.bbpd.io/learn/api/public/v1/courses/_60054_1/contents/_596395_1/children  Response: { “results&quot;:[{ “id&quot;:&quot;_596397_1&quot;, “parentId&quot;:&quot;_596395_1&quot;, &quot;title&quot;:&quot;SOAP Deprecation PDF”, ”created”:&quot;2018-11-28T20:02:13.612Z&quot;, “position&quot;:0, “availability&quot;:{ “available&quot;:&quot;Yes&quot;, “allowGuests&quot;:true, “adaptiveRelease&quot;:{} }, “contentHandler&quot;:{ “id&quot;:&quot;resource/x-bb-document&quot; } }] }  Now we have a document - check to see if there are any attachments… Note that there may be multiple file attachments - in this case there is only one. Request: $ curl -i -k -X GET -H &quot;Authorization: Bearer QvWicpu3kMA9coWMv7TKLPzYnq4nUnfr&quot; https://ultra-integ.int.bbpd.io/learn/api/public/v1/cotsses/_60054_1/contents/_596397_1/attachments  Response: { &quot;id&quot;:&quot;_42588_1&quot;, &quot;fileName&quot;:&quot;SOAP Deprecation Announcement.pdf”,”mimeType&quot;:&quot;application/pdf&quot; }  Request: $ curl -k -X GET -H &quot;Authorization: Bearer 8vHQpudSKbIx68jC6M5rykN66R2p048Z&quot; https://ultra-integ.int.bbpd.io/learn/api/public/v1/courses/_60054_1/contents/_596397_1/attachments/_42588_1  Response: { &quot;id&quot;:&quot;_42588_1&quot;, &quot;fileName&quot;:&quot;SOAP Deprecation Announcement.pdf”,&quot;mimeType&quot;:&quot;application/pdf&quot; }  Once you have the Attachment Id you may request the download URL: Note that the download URL is contained in the response header’s Location element so you have to add the -i|—include flag to the curl command to display the response headers: Request: $ curl -i -k -X GET -H &quot;Authorization: Bearer QvWicpu3kMA9coWMv7TKLPzYnq4nUnfr&quot; https://ultra-integ.int.bbpd.io/learn/api/public/v1/courses/_60054_1/contents/_596397_1/attachments/_42588_1/download  Response: HTTP/1.1 302 Cache-Control: private Cache-Control: max-age=0 Cache-Control: no-store Cache-Control: must-revalidate Content-Security-Policy: frame-ancestors 'self' Content-Type: application/octet-stream Date: Wed, 28 Nov 2018 23:40:32 GMT Expires: Tue, 28 Nov 2017 23:40:32 GMT Last-Modified: Sat, 28 Nov 1998 23:40:32 GMT Location: https://ultra-integ.int.bbpd.io/bbcswebdav/xid-21916142_1?VxJw3wfC56=1543449332&amp;Kq3cZcYS15= a253d31a6d36425c81aaa457ee9e2f04&amp;3cCnGYSz89=A9bgt2bWD7NXyIzsI5kHPQQKBCpZ/qnQZ6XM2cqmZPI%3D P3P: CP=&quot;CAO PSA OUR&quot; Pragma: private Server: openresty/1.9.3.1 Set-Cookie: JSESSIONID=96003AD1BF73967D9CE359D5037BDECE; Path=/learn/api; Secure X-Blackboard-appserver: ip-10-145-23-249.ec2.internal X-Blackboard-product: Learn &amp;#8482; 3500.7.0-ci.4055+6a82373 X-Frame-Options: SAMEORIGIN Content-Length: 0 Connection: keep-alive  ","version":null,"tagName":"h3"},{"title":"STEP FIVE:​","type":1,"pageTitle":"Using cURL to access content attachments","url":"/docs/blackboard/rest-apis/demo-code/curl-attach-demo#step-five","content":"Rinse-repeat for additional folder or document content items. ","version":null,"tagName":"h3"},{"title":"Uploading files to content​","type":1,"pageTitle":"Using cURL to access content attachments","url":"/docs/blackboard/rest-apis/demo-code/curl-attach-demo#uploading-files-to-content","content":"You can do so by following this guide: https://docs.anthology.com/docs/rest-apis/learn/advanced/rest_apis-learn-advanced-bbml#uploaded-files  Contributors on this article: Mark O'Neil Former DirectorPlatform and APIs ","version":null,"tagName":"h2"},{"title":"Demo using Java","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/demo-code/java-demo","content":"","keywords":"","version":null},{"title":"Prerequisites​","type":1,"pageTitle":"Demo using Java","url":"/docs/blackboard/rest-apis/demo-code/java-demo#prerequisites","content":"You must [register a developer account and application](/rest-apis/learn/Getting Started/registry) in the Developer PortalYou must[register your application](/rest-apis/learn/Getting Started/registry) in LearnYou must also configure the script as outlined in the README for the project This webapp allows you to: AuthenticateCreate, Read, and Update a Data SourceCreate, Read, and Update a TermCreate, Read, and Update a CourseCreate, Read, and Update a UserCreate, Read, and Update a MembershipDelete created objects in reverse order of create - membership, user, course, term, datasource. All generated output is sent to the browser. This is not meant to be a Java tutorial. It will not teach you to write code in Java. It will, however, give a Developer familiar with Java the knowledge necessary to build a Web Services integration. ","version":null,"tagName":"h3"},{"title":"Assumptions​","type":1,"pageTitle":"Demo using Java","url":"/docs/blackboard/rest-apis/demo-code/java-demo#assumptions","content":"This help topic assumes the Developer: is familiar with Javahas Tomcat running somewhere the webapp can be installedhas obtained a copy of the source code and built and deployed it to Tomcat in conjunction with the project README.md file.has a REST-enabled Learn instance. ","version":null,"tagName":"h3"},{"title":"Code Walkthrough​","type":1,"pageTitle":"Demo using Java","url":"/docs/blackboard/rest-apis/demo-code/java-demo#code-walkthrough","content":"To build an integration with the Learn REST Web Services, regardless of the programming language of choice, can really be summed up in two steps: Use the Application Key and Secret to obtain an OAuth 2.0 access token, as described in the [Basic Authentication](/rest-apis/learn/Getting Started/basic-authentication) document.Call the appropriate REST endpoint with the appropriate data to perform the appropriate action. ","version":null,"tagName":"h3"},{"title":"Authorization and Authentication​","type":1,"pageTitle":"Demo using Java","url":"/docs/blackboard/rest-apis/demo-code/java-demo#authorization-and-authentication","content":"The REST Services rely on OAuth 2.0 Bearer Tokens for authentication. A request is made to the token endpoint with a Basic Authorization header containing the base64-encoded key:secret string as its key. The token service returns a JSON object containing the Access Token, the Token Type, and the number of seconds until the token expires. The token is set to expire after one hour, and subsequent calls to retrieve the token will return the same token with an updated expiry time until such time that the token has expired. There is no refresh token and currently no revoke token method. The java code handles this in bbdn.rest.Authorizer:  HttpHeaders headers = new HttpHeaders(); headers.add(&quot;Authorization&quot;, &quot;Basic &quot; + getHash()); headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED); HttpEntity&lt;String&gt; request = new HttpEntity&lt;String&gt;(&quot;grant_type=client_credentials&quot;,headers); ResponseEntity&lt;Token&gt; response = restTemplate.exchange(uri, HttpMethod.POST, request, Token.class); Token token = response.getBody();  The JSON response is serialized into the Token object, and you may then retrieve those values from that object. ","version":null,"tagName":"h3"},{"title":"Calling Services​","type":1,"pageTitle":"Demo using Java","url":"/docs/blackboard/rest-apis/demo-code/java-demo#calling-services","content":"The individual service calls are handled by Java Classes in service specific packages, that all implement the bbdn.rest.RestHandler interface. The interface is used to normalize each service handler to make additional service implementation standardized as new endpoints are added. RestHandler dictates that four methods must be implemented: String createObject(String access_token);String readObject(String access_token);String updateObject(String access_token);String deleteObject(String access_token); Each of these methods creates the JSON body when appropriate and then callsbbdn.rest.RestRequest to generate the appropriate HTTP Request, ship it to Learn, and return the JSON response as a String to be displayed in the browser window. This all happens with the following code:  public static String sendRequest(String sUri, HttpMethod method, String access_token, String body) { try { RestTemplate restTemplate = new RestTemplate(); // Workaround for allowing unsuccessful HTTP Errors to still print to the screen restTemplate.setErrorHandler(new DefaultResponseErrorHandler(){ protected boolean hasError(HttpStatus statusCode) { return false; }}); // Workaround to allow for PATCH requests HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(); restTemplate.setRequestFactory(requestFactory); URI uri = null; try { uri = new URI(RestConstants.HOSTNAME + sUri); } catch (URISyntaxException e) { e.printStackTrace(); } HttpHeaders headers = new HttpHeaders(); headers.add(&quot;Authorization&quot;, &quot;Bearer &quot; + access_token); headers.setContentType(MediaType.APPLICATION_JSON); HttpEntity&lt;String&gt; request = new HttpEntity&lt;String&gt;(body, headers); ResponseEntity&lt;String&gt; response = restTemplate.exchange(uri, method, request, String.class); return (response.toString()); } catch (Exception e) { return(e.getMessage()); } }  End points are generally defined as /learn/api/public/v1/&lt;object type&gt;/&lt;objectId&gt;. Object ID can be either the pk1, like _1_1, or as the batchuid. This value should be prepended by externalId:, likeexternalId:test101. For example, to retrieve a course by the pk1 _1_1, you would call GET /learn/api/public/v1/courses/_1_1. To retrieve by the batchuid test101, you would call GET /learn/api/public/v1/courses/externalId:test101. Create is sent to Learn as a HTTP POST message with a JSON body that defines the object. The endpoint should omit the objectId, as this will be generated on creation. Read is sent to Learn as a HTTP GET message with an empty body. The endpoint should include the objectId being retrieved. Update is sent to Learn as a HTTP PATCH message with a JSON body that defines the object. The endpoint should include the objectId being updated. Delete is sent to Learn as a HTTP DELETE message with empty body. The endpoint should include the objectId being deleted. ","version":null,"tagName":"h3"},{"title":"Datasources​","type":1,"pageTitle":"Demo using Java","url":"/docs/blackboard/rest-apis/demo-code/java-demo#datasources","content":"Datasources are handled in bbdn.rest.datasources.DatasourceHandler. As illustrated above, this Class implements the RestHandler interface and exposes four methods. It also includes a private method to create the JSON payload. Create  @Override public String createObject(String access_token) { return(RestRequest.sendRequest(RestConstants.DATASOURCE_PATH, HttpMethod.POST, access_token, getBody())); }  Read  @Override public String readObject(String access_token) { return(RestRequest.sendRequest(RestConstants.DATASOURCE_PATH + &quot;/externalId:&quot; + RestConstants.DATASOURCE_ID, HttpMethod.GET, access_token, &quot;&quot;)); }  Update  @Override public String updateObject(String access_token) { return(RestRequest.sendRequest(RestConstants.DATASOURCE_PATH + &quot;/externalId:&quot; + RestConstants.DATASOURCE_ID, HttpMethod.PATCH, access_token, getBody())); }  Delete  @Override public String deleteObject(String access_token) { return(RestRequest.sendRequest(RestConstants.DATASOURCE_PATH + &quot;/externalId:&quot; + RestConstants.DATASOURCE_ID, HttpMethod.DELETE, access_token, &quot;&quot;)); }  Create Body  private String getBody() { ObjectMapper objMapper = new ObjectMapper(); JsonNode datasource = objMapper.createObjectNode(); ((ObjectNode) datasource).put(&quot;externalId&quot;, RestConstants.DATASOURCE_ID); ((ObjectNode) datasource).put(&quot;description&quot;, RestConstants.DATASOURCE_DESCRIPTION); String body = &quot;&quot;; try { body = objMapper.writeValueAsString(datasource); } catch (JsonProcessingException e) { e.printStackTrace(); } return(body); }  ","version":null,"tagName":"h3"},{"title":"Terms​","type":1,"pageTitle":"Demo using Java","url":"/docs/blackboard/rest-apis/demo-code/java-demo#terms","content":"Terms are handled in bbdn.rest.terms.TermHandler. As illustrated above, this Class implements the RestHandler interface and exposes four methods. It also includes a private method to create the JSON payload. In this initial release, we are omitting the datasource. This is because the externalId version of the datasource is not accepted in JSON payloads at this time. We could create a CONSTANT and set it to what we think it will be, but the ID isn't set until the Datasource is created, so we don't know for sure what it will be. Create  @Override public String createObject(String access_token) { return(RestRequest.sendRequest(RestConstants.TERM_PATH, HttpMethod.POST, access_token, getBody())); }  Read  @Override public String readObject(String access_token) { return(RestRequest.sendRequest(RestConstants.TERM_PATH + &quot;/externalId:&quot; + RestConstants.TERM_ID, HttpMethod.GET, access_token, &quot;&quot;)); }  Update  @Override public String updateObject(String access_token) { return(RestRequest.sendRequest(RestConstants.TERM_PATH + &quot;/externalId:&quot; + RestConstants.TERM_ID, HttpMethod.PATCH, access_token, getBody())); }  Delete  @Override public String deleteObject(String access_token) { return(RestRequest.sendRequest(RestConstants.TERM_PATH + &quot;/externalId:&quot; + RestConstants.TERM_ID, HttpMethod.DELETE, access_token, &quot;&quot;)); }  Create Body  private String getBody() { ObjectMapper objMapper = new ObjectMapper(); ObjectNode term = objMapper.createObjectNode(); term.put(&quot;externalId&quot;, RestConstants.TERM_ID); //term.put(&quot;dataSourceId&quot;, RestConstants.DATASOURCE_ID); term.put(&quot;name&quot;, RestConstants.TERM_NAME); term.put(&quot;description&quot;, RestConstants.TERM_DISPLAY); ObjectNode availability = term.putObject(&quot;availability&quot;); availability.put(&quot;available&quot;, &quot;Yes&quot;); ObjectNode duration = availability.putObject(&quot;duration&quot;); duration.put(&quot;type&quot;, &quot;Continuous&quot;); String body = &quot;&quot;; try { body = objMapper.writeValueAsString(term); } catch (JsonProcessingException e) { e.printStackTrace(); } return(body); }  ","version":null,"tagName":"h3"},{"title":"Courses​","type":1,"pageTitle":"Demo using Java","url":"/docs/blackboard/rest-apis/demo-code/java-demo#courses","content":"Course are handled in bbdn.rest.course.CourseHandler. As illustrated above, this Class implements the RestHandler interface and exposes four methods. It also includes a private method to create the JSON payload. In this initial release, we are omitting the datasource. This is because the externalId version of the datasource is not accepted in JSON payloads at this time. We could create a CONSTANT and set it to what we think it will be, but the ID isn't set until the Datasource is created, so we don't know for sure what it will be. Create  @Override public String createObject(String access_token) { return(RestRequest.sendRequest(RestConstants.COURSE_PATH, HttpMethod.POST, access_token, getBody())); }  Read  @Override public String readObject(String access_token) { return(RestRequest.sendRequest(RestConstants.COURSE_PATH + &quot;/externalId:&quot; + RestConstants.COURSE_ID, HttpMethod.GET, access_token, &quot;&quot;)); }  Update  @Override public String updateObject(String access_token) { return(RestRequest.sendRequest(RestConstants.COURSE_PATH + &quot;/externalId:&quot; + RestConstants.COURSE_ID, HttpMethod.PATCH, access_token, getBody())); }  Delete  @Override public String deleteObject(String access_token) { return(RestRequest.sendRequest(RestConstants.COURSE_PATH + &quot;/externalId:&quot; + RestConstants.COURSE_ID, HttpMethod.DELETE, access_token, &quot;&quot;)); }  Create Body  private String getBody() { ObjectMapper objMapper = new ObjectMapper(); ObjectNode course = objMapper.createObjectNode(); course.put(&quot;externalId&quot;, RestConstants.COURSE_ID); //course.put(&quot;dataSourceId&quot;, RestConstants.DATASOURCE_ID); course.put(&quot;courseId&quot;, RestConstants.COURSE_ID); course.put(&quot;name&quot;, RestConstants.COURSE_NAME); course.put(&quot;description&quot;, RestConstants.COURSE_DESCRIPTION); course.put(&quot;allowGuests&quot;, &quot;true&quot;); course.put(&quot;readOnly&quot;, &quot;false&quot;); course.put(&quot;termId&quot;, RestConstants.TERM_ID); ObjectNode availability = course.putObject(&quot;availability&quot;); availability.put(&quot;duration&quot;, &quot;continuous&quot;); String body = &quot;&quot;; try { body = objMapper.writeValueAsString(course); } catch (JsonProcessingException e) { e.printStackTrace(); } return(body); }  ","version":null,"tagName":"h3"},{"title":"Users​","type":1,"pageTitle":"Demo using Java","url":"/docs/blackboard/rest-apis/demo-code/java-demo#users","content":"Users are handled in bbdn.rest.users.UserHandler. As illustrated above, this Class implements the RestHandler interface and exposes four methods. It also includes a private method to create the JSON payload. In this initial release, we are omitting the datasource. This is because the externalId version of the datasource is not accepted in JSON payloads at this time. We could create a CONSTANT and set it to what we think it will be, but the ID isn't set until the Datasource is created, so we don't know for sure what it will be. Create  @Override public String createObject(String access_token) { return(RestRequest.sendRequest(RestConstants.USER_PATH, HttpMethod.POST, access_token, getBody())); }  Read  @Override public String readObject(String access_token) { return(RestRequest.sendRequest(RestConstants.USER_PATH + &quot;/externalId:&quot; + RestConstants.USER_ID, HttpMethod.GET, access_token, &quot;&quot;)); }  Update  @Override public String updateObject(String access_token) { return(RestRequest.sendRequest(RestConstants.USER_PATH + &quot;/externalId:&quot; + RestConstants.USER_ID, HttpMethod.PATCH, access_token, getBody())); }  Delete  @Override public String deleteObject(String access_token) { return(RestRequest.sendRequest(RestConstants.USER_PATH + &quot;/externalId:&quot; + RestConstants.USER_ID, HttpMethod.DELETE, access_token, &quot;&quot;)); }  Create Body  private String getBody() { ObjectMapper objMapper = new ObjectMapper(); ObjectNode user = objMapper.createObjectNode(); user.put(&quot;externalId&quot;, RestConstants.USER_ID); //user.put(&quot;dataSourceId&quot;, RestConstants.DATASOURCE_ID); user.put(&quot;userName&quot;, RestConstants.USER_NAME); user.put(&quot;password&quot;, RestConstants.USER_PASS); ObjectNode availability = user.putObject(&quot;availability&quot;); availability.put(&quot;available&quot;, &quot;Yes&quot;); ObjectNode name = user.putObject(&quot;name&quot;); name.put(&quot;given&quot;, RestConstants.USER_FIRST); name.put(&quot;family&quot;, RestConstants.USER_LAST); ObjectNode contact = user.putObject(&quot;contact&quot;); contact.put(&quot;email&quot;, RestConstants.USER_EMAIL); String body = &quot;&quot;; try { body = objMapper.writeValueAsString(user); } catch (JsonProcessingException e) { e.printStackTrace(); } return(body); }  ","version":null,"tagName":"h3"},{"title":"Memberships​","type":1,"pageTitle":"Demo using Java","url":"/docs/blackboard/rest-apis/demo-code/java-demo#memberships","content":"Memberships are handled in bbdn.rest.memberships.MemberHandler. As illustrated above, this Class implements the RestHandler interface and exposes four methods. It also includes a private method to create the JSON payload. In this initial release, we are omitting the datasource. This is because the externalId version of the datasource is not accepted in JSON payloads at this time. We could create a CONSTANT and set it to what we think it will be, but the ID isn't set until the Datasource is created, so we don't know for sure what it will be. In addition, the endpoint for memberships is a bit different, in that it is a sub-call to courses, so the endpoint would look like/learn/api/public/v1/courses/&lt;courseId&gt;/users/&lt;userId&gt;. Create  @Override public String createObject(String access_token) { return(RestRequest.sendRequest(RestConstants.COURSE_PATH + &quot;/externalId:&quot; + RestConstants.COURSE_ID + &quot;/users/externalId:&quot;+ RestConstants.USER_ID, HttpMethod.PUT, access_token, getBody())); }  Read  @Override public String readObject(String access_token) { return(RestRequest.sendRequest(RestConstants.COURSE_PATH + &quot;/externalId:&quot; + RestConstants.COURSE_ID + &quot;/users/externalId:&quot;+ RestConstants.USER_ID, HttpMethod.GET, access_token, &quot;&quot;)); }  Update  @Override public String updateObject(String access_token) { return(RestRequest.sendRequest(RestConstants.COURSE_PATH + &quot;/externalId:&quot; + RestConstants.COURSE_ID + &quot;/users/externalId:&quot;+ RestConstants.USER_ID, HttpMethod.PATCH, access_token, getBody())); }  Delete  @Override public String deleteObject(String access_token) { return(RestRequest.sendRequest(RestConstants.COURSE_PATH + &quot;/externalId:&quot; + RestConstants.COURSE_ID + &quot;/users/externalId:&quot;+ RestConstants.USER_ID, HttpMethod.DELETE, access_token, &quot;&quot;)); }  Create Body  private String getBody() { ObjectMapper objMapper = new ObjectMapper(); ObjectNode membership = objMapper.createObjectNode(); //membership.put(&quot;dataSourceId&quot;, RestConstants.DATASOURCE_ID); ObjectNode availability = membership.putObject(&quot;availability&quot;); availability.put(&quot;available&quot;, &quot;Yes&quot;); membership.put(&quot;courseRoleId&quot;, &quot;Instructor&quot;); String body = &quot;&quot;; try { body = objMapper.writeValueAsString(membership); } catch (JsonProcessingException e) { e.printStackTrace(); } return(body); }  ","version":null,"tagName":"h3"},{"title":"Conclusion​","type":1,"pageTitle":"Demo using Java","url":"/docs/blackboard/rest-apis/demo-code/java-demo#conclusion","content":"All of the code snippets included in this document at included in a sample REST Demo Java Webapp application available onGitHub. There is a README.html included that talks more specifically about building and running the code. Feel free to review the code and run it against a test or development Learn instance to see how it works. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"C# Demo","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/demo-code/c-sharp-demo","content":"","keywords":"","version":null},{"title":"Prerequisites​","type":1,"pageTitle":"C# Demo","url":"/docs/blackboard/rest-apis/demo-code/c-sharp-demo#prerequisites","content":"You must [register a developer account and application](/rest-apis/learn/Getting Started/registry) in the Developer PortalYou mustregister your application in LearnYou must also configure the script as outlined in the README for the project ","version":null,"tagName":"h3"},{"title":"Overview​","type":1,"pageTitle":"C# Demo","url":"/docs/blackboard/rest-apis/demo-code/c-sharp-demo#overview","content":"This C# Console Application allows you to: AuthenticateCreate, Read, and Update a Data SourceCreate, Read, and Update a TermCreate, Read, and Update a CourseCreate, Read, and Update a UserCreate, Read, and Update a MembershipDelete created objects in reverse order of create - membership, user, course, term, datasource. All generated output is sent to the console. This is not meant to be a C# tutorial. It will not teach you to write code in C#. It will, however, give a Developer familiar with C# the knowledge necessary to build a Web Services integration. ","version":null,"tagName":"h3"},{"title":"Assumptions​","type":1,"pageTitle":"C# Demo","url":"/docs/blackboard/rest-apis/demo-code/c-sharp-demo#assumptions","content":"This help topic assumes the Developer: is familiar with C#has installed Microsoft Visual Studiohas obtained a copy of the source code and built it in conjunction with the project README.md file.has a REST-enabled Learn instance, like the Developer AMI. ","version":null,"tagName":"h3"},{"title":"Code Walkthrough​","type":1,"pageTitle":"C# Demo","url":"/docs/blackboard/rest-apis/demo-code/c-sharp-demo#code-walkthrough","content":"To build an integration with the Learn REST Web Services, regardless of the programming language of choice, can really be summed up in two steps: Use the Application Key and Secret to obtain an OAuth 2.0 access token, as described in the Basic Authentication document.Call the appropriate REST endpoint with the appropriate data to perform the appropriate action. Authorization and Authentication​ The REST Services rely on OAuth 2.0 Bearer Tokens for authentication. A request is made to the token endpoint with a Basic Authorization header containing the base64-encoded key:secret string as its key. The token service returns a JSON object containing the Access Token, the Token Type, and the number of seconds until the token expires. The token is set to expire after one hour, and subsequent calls to retrieve the token will return the same token with an updated expiry time until such time that the token has expired. There is no refresh token and currently no revoke token method. The C# code handles this in bbdn.rest.Authorizer:  var authData = string.Format (&quot;{0}:{1}&quot;, Constants.KEY, Constants.SECRET); var authHeaderValue = Convert.ToBase64String (Encoding.UTF8.GetBytes (authData)); client = new HttpClient (); var endpoint = new Uri(Constants.HOSTNAME + Constants.AUTH_PATH); client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue (&quot;Basic&quot;, authHeaderValue); var postData = new List&lt;KeyValuePair&lt;string, string&gt;&gt;(); postData.Add(new KeyValuePair&lt;string, string&gt;(&quot;grant_type&quot;, &quot;client_credentials&quot;)); HttpContent body = new FormUrlEncodedContent(postData); HttpResponseMessage response; try { response = await client.PostAsync(endpoint, body) if (response.IsSuccessStatusCode) { var content = await response.Content.ReadAsStringAsync(); token = JsonConvert.DeserializeObject&lt;Token&gt;(content);  The JSON response is serialized into the Token object, and you may then retrieve those values from that object. Calling Services​ The individual service calls are handled by C# Classes in thebbdn.rest.services package, and each individual service class implements thebbdn.rest.services.IRestService interface. The interface is used to normalize each service handler to make additional service implementation standardized as new endpoints are added. IRestService dictates that four methods must be implemented: Task&lt;TRestModel&gt; CreateObject (TRestModel T);Task&lt;TRestModel&gt; ReadObject ();Task&lt;TRestModel&gt; UpdateObject (TRestModel T);Task&lt;TRestModel&gt; DeleteObject (); The Task&amp;lt;TRestModel&amp;gt; allows the code to run asynchronously, but specify when an operation should be handled synchronously before proceeding with the remaining code. TRestModel is a generic class place holder that allows the code to implement the Interface, but pass it an Object type when it is instantiated in order to take and return an individual service model dependent upon the Rest endpoint being implemented. The individual service class must be defined in the following way, to ensure the Interface is using the appropriate class type for TRestModel:  public class DatasourceService : IRestService&lt;Datasource&gt;, IDisposable  Each of these methods creates the JSON body by instantiating the appropriate model from the bbdn.rest.models package when necessary, and then generates the appropriate HTTP Request, ships it to Learn, and serializes the JSON response back into the appropriate model. End points are generally defined as /learn/api/public/v1/&lt;object type&gt;/&lt;objectId&gt;. Object ID can be either the pk1, like _1_1, or as the batchuid. This value should be prepended by externalId:, likeexternalId:test101. For example, to retrieve a course by the pk1 _1_1, you would call GET /learn/api/public/v1/courses/_1_1. To retrieve by the batchuid test101, you would call GET /learn/api/public/v1/courses/externalId:test101. Create is sent to Learn as a HTTP POST message with a JSON body that defines the object. The endpoint should omit the objectId, as this will be generated on creation. Read is sent to Learn as a HTTP GET message with an empty body. The endpoint should include the objectId being retrieved. Update is sent to Learn as a HTTP PATCH message with a JSON body that defines the object. The endpoint should include the objectId being updated. Delete is sent to Learn as a HTTP DELETE message with empty body. The endpoint should include the objectId being deleted. ","version":null,"tagName":"h3"},{"title":"Datasources​","type":1,"pageTitle":"C# Demo","url":"/docs/blackboard/rest-apis/demo-code/c-sharp-demo#datasources","content":"Datasources are handled in bbdn.rest.services.DatasourceService. As illustrated above, this Class implements the IRestService interface and exposes four methods. It also includes methods required to implement the IDisposible interface which is required to use the async/await functionality.. Create  public async Task&lt;Datasource&gt; CreateObject (Datasource dataSource) { Datasource datasource = new Datasource(); var uri = new Uri( Constants.HOSTNAME + Constants.DATASOURCE_PATH); try { var json = JsonConvert.SerializeObject (dataSource); var body = new StringContent (json, Encoding.UTF8, &quot;application/json&quot;); HttpResponseMessage response = await client.PostAsync (uri, body); if (response.IsSuccessStatusCode) { var content = await response.Content.ReadAsStringAsync (); datasource = JsonConvert.DeserializeObject &lt;Datasource&gt; (content); Debug.WriteLine (@&quot; Datasource successfully created.&quot;); } } catch (Exception ex) { Debug.WriteLine (@&quot; ERROR {0}&quot;, ex.Message); } return datasource; }  Read  public async Task&lt;Datasource&gt; ReadObject () { Datasource datasource = new Datasource(); var uri = new Uri(Constants.HOSTNAME + Constants.DATASOURCE_PATH + &quot;/externalId:&quot; + Constants.DATASOURCE_ID); try { var response = await client.GetAsync (uri); if (response.IsSuccessStatusCode) { var content = await response.Content.ReadAsStringAsync (); datasource = JsonConvert.DeserializeObject&lt;Datasource&gt;(content); } } catch (Exception ex) { Debug.WriteLine (@&quot; ERROR {0}&quot;, ex.Message); } return datasource; }  Update  public async Task&lt;Datasource&gt; UpdateObject (Datasource updateDataSource) { Datasource datasource = new Datasource(); try { var json = JsonConvert.SerializeObject (updateDataSource); var body = new StringContent (json, Encoding.UTF8, &quot;application/json&quot;); HttpResponseMessage response = await HttpClientExtensions.PatchAsync (client, Constants.HOSTNAME + Constants.DATASOURCE_PATH + &quot;/externalId:&quot; + Constants.DATASOURCE_ID, body); if (response.IsSuccessStatusCode) { Debug.WriteLine (@&quot; Datasource successfully updated.&quot;); var content = await response.Content.ReadAsStringAsync(); datasource = JsonConvert.DeserializeObject&lt;Datasource&gt;(content); } } catch (Exception ex) { Debug.WriteLine (@&quot; ERROR {0}&quot;, ex.Message); } return (datasource); }  Delete  public async Task&lt;Datasource&gt; DeleteObject () { Datasource datasource = new Datasource(); var uri = new Uri(Constants.HOSTNAME + Constants.DATASOURCE_PATH + &quot;/externalId:&quot; + Constants.DATASOURCE_ID); try { var response = await client.DeleteAsync (uri); if (response.IsSuccessStatusCode) { Debug.WriteLine (@&quot; Datasource successfully deleted.&quot;); var content = await response.Content.ReadAsStringAsync(); datasource = JsonConvert.DeserializeObject&lt;Datasource&gt;(content); } } catch (Exception ex) { Debug.WriteLine (@&quot; ERROR {0}&quot;, ex.Message); } return (datasource); }  ","version":null,"tagName":"h3"},{"title":"Terms​","type":1,"pageTitle":"C# Demo","url":"/docs/blackboard/rest-apis/demo-code/c-sharp-demo#terms","content":"Terms are handled in bbdn.rest.services.TermService. As illustrated above, this Class implements the IRestService interface and exposes four methods. It also includes methods required to implement the IDisposible interface which is required to use the async/await functionality.. Create  public async Task&lt;Term&gt; CreateObject(Term newTerm) { Term term = new Term(); var uri = new Uri(Constants.HOSTNAME + Constants.TERM_PATH); try { var json = JsonConvert.SerializeObject(newTerm); var body = new StringContent(json, Encoding.UTF8, &quot;application/json&quot;); HttpResponseMessage response = await client.PostAsync(uri, body); if (response.IsSuccessStatusCode) { var content = await response.Content.ReadAsStringAsync(); term = JsonConvert.DeserializeObject&lt;Term&gt;(content); Debug.WriteLine(@&quot; Term successfully created.&quot;); } } catch (Exception ex) { Debug.WriteLine(@&quot; ERROR {0}&quot;, ex.Message); } return term; }  Read  public async Task&lt;Term&gt; ReadObject() { Term term = new Term(); var uri = new Uri(Constants.HOSTNAME + Constants.TERM_PATH + &quot;externalId:&quot; + Constants.TERM_ID); try { var response = await client.GetAsync(uri); if (response.IsSuccessStatusCode) { var content = await response.Content.ReadAsStringAsync(); term = JsonConvert.DeserializeObject&lt;Term&gt;(content); } } catch (Exception ex) { Debug.WriteLine(@&quot; ERROR {0}&quot;, ex.Message); } return term; }  Update  public async Task&lt;Term&gt; UpdateObject(Term updateTerm) { Term term = new Term(); try { var json = JsonConvert.SerializeObject(updateTerm); var body = new StringContent(json, Encoding.UTF8, &quot;application/json&quot;); HttpResponseMessage response = await HttpClientExtensions.PatchAsync(client, Constants.HOSTNAME + Constants.TERM_PATH + &quot;externalId:&quot; + Constants.TERM_ID, body); if (response.IsSuccessStatusCode) { Debug.WriteLine(@&quot; Term successfully updated.&quot;); var content = await response.Content.ReadAsStringAsync(); term = JsonConvert.DeserializeObject&lt;Term&gt;(content); } } catch (Exception ex) { Debug.WriteLine(@&quot; ERROR {0}&quot;, ex.Message); } return (term); }  Delete  public async Task&lt;Term&gt; DeleteObject() { Term term = new Term(); var uri = new Uri(Constants.HOSTNAME + Constants.TERM_PATH + &quot;externalId:&quot; + Constants.TERM_ID); try { var response = await client.DeleteAsync(uri); if (response.IsSuccessStatusCode) { Debug.WriteLine(@&quot; Term successfully deleted.&quot;); var content = await response.Content.ReadAsStringAsync(); term = JsonConvert.DeserializeObject&lt;Term&gt;(content); } } catch (Exception ex) { Debug.WriteLine(@&quot; ERROR {0}&quot;, ex.Message); } return (term); }  ","version":null,"tagName":"h3"},{"title":"Courses​","type":1,"pageTitle":"C# Demo","url":"/docs/blackboard/rest-apis/demo-code/c-sharp-demo#courses","content":"Course are handled in bbdn.rest.services.CourseService. As illustrated above, this Class implements the IRestService interface and exposes four methods. It also includes methods required to implement the IDisposible interface which is required to use the async/await functionality.. Create  public async Task&lt;Course&gt; CreateObject(Course newCourse) { Course course = new Course(); var uri = new Uri(Constants.HOSTNAME + Constants.COURSE_PATH); try { var json = JsonConvert.SerializeObject(newCourse); var body = new StringContent(json, Encoding.UTF8, &quot;application/json&quot;); HttpResponseMessage response = await client.PostAsync(uri, body); if (response.IsSuccessStatusCode) { var content = await response.Content.ReadAsStringAsync(); course = JsonConvert.DeserializeObject&lt;Course&gt;(content); Debug.WriteLine(@&quot; Course successfully created.&quot;); } } catch (Exception ex) { Debug.WriteLine(@&quot; ERROR {0}&quot;, ex.Message); } return course; }  Read  public async Task&lt;Course&gt; ReadObject() { Course course = new Course(); var uri = new Uri(Constants.HOSTNAME + Constants.COURSE_PATH + &quot;/externalId:&quot; + Constants.COURSE_ID); try { var response = await client.GetAsync(uri); if (response.IsSuccessStatusCode) { var content = await response.Content.ReadAsStringAsync(); course = JsonConvert.DeserializeObject&lt;Course&gt;(content); } } catch (Exception ex) { Debug.WriteLine(@&quot; ERROR {0}&quot;, ex.Message); } return course; }  Update  public async Task&lt;Course&gt; UpdateObject(Course updateCourse) { Course course = new Course(); try { var json = JsonConvert.SerializeObject(updateCourse); var body = new StringContent(json, Encoding.UTF8, &quot;application/json&quot;); HttpResponseMessage response = await HttpClientExtensions.PatchAsync(client, Constants.HOSTNAME + Constants.COURSE_PATH + &quot;/externalId:&quot; + Constants.COURSE_ID, body); if (response.IsSuccessStatusCode) { Debug.WriteLine(@&quot; Course successfully updated.&quot;); var content = await response.Content.ReadAsStringAsync(); course = JsonConvert.DeserializeObject&lt;Course&gt;(content); } } catch (Exception ex) { Debug.WriteLine(@&quot; ERROR {0}&quot;, ex.Message); } return (course); }  Delete  public async Task&lt;Course&gt; DeleteObject() { Course course = new Course(); var uri = new Uri(Constants.HOSTNAME + Constants.COURSE_PATH + &quot;/externalId:&quot; + Constants.COURSE_ID); try { var response = await client.DeleteAsync(uri); if (response.IsSuccessStatusCode) { Debug.WriteLine(@&quot; Course successfully deleted.&quot;); var content = await response.Content.ReadAsStringAsync(); course = JsonConvert.DeserializeObject&lt;Course&gt;(content); } } catch (Exception ex) { Debug.WriteLine(@&quot; ERROR {0}&quot;, ex.Message); } return (course); }  ","version":null,"tagName":"h3"},{"title":"Users​","type":1,"pageTitle":"C# Demo","url":"/docs/blackboard/rest-apis/demo-code/c-sharp-demo#users","content":"Users are handled in bbdn.rest.services.UserService. As illustrated above, this Class implements the IRestService interface and exposes four methods. It also includes methods required to implement the IDisposible interface which is required to use the async/await functionality.. Create  public async Task&lt;User&gt; CreateObject(User newUser) { User user = new User(); var uri = new Uri(Constants.HOSTNAME + Constants.USER_PATH); try { var json = JsonConvert.SerializeObject(newUser); var body = new StringContent(json, Encoding.UTF8, &quot;application/json&quot;); HttpResponseMessage response = await client.PostAsync(uri, body); if (response.IsSuccessStatusCode) { var content = await response.Content.ReadAsStringAsync(); user = JsonConvert.DeserializeObject&lt;User&gt;(content); Debug.WriteLine(@&quot; User successfully created.&quot;); } } catch (Exception ex) { Debug.WriteLine(@&quot; ERROR {0}&quot;, ex.Message); } return user; }  Read  public async Task&lt;User&gt; ReadObject() { User user = new User(); var uri = new Uri(Constants.HOSTNAME + Constants.USER_PATH + &quot;externalId:&quot; + Constants.USER_ID); try { var response = await client.GetAsync(uri); if (response.IsSuccessStatusCode) { var content = await response.Content.ReadAsStringAsync(); user = JsonConvert.DeserializeObject&lt;User&gt;(content); } } catch (Exception ex) { Debug.WriteLine(@&quot; ERROR {0}&quot;, ex.Message); } return user; }  Update  public async Task&lt;User&gt; UpdateObject(User updateUser) { User user = new User(); try { var json = JsonConvert.SerializeObject(updateUser); var body = new StringContent(json, Encoding.UTF8, &quot;application/json&quot;); HttpResponseMessage response = await HttpClientExtensions.PatchAsync(client, Constants.HOSTNAME + Constants.USER_PATH + &quot;externalId:&quot; + Constants.USER_ID, body); if (response.IsSuccessStatusCode) { Debug.WriteLine(@&quot; User successfully updated.&quot;); if (response.IsSuccessStatusCode) { var content = await response.Content.ReadAsStringAsync(); user = JsonConvert.DeserializeObject&lt;User&gt;(content); } } } catch (Exception ex) { Debug.WriteLine(@&quot; ERROR {0}&quot;, ex.Message); } return user; }  Delete  public async Task&lt;User&gt; DeleteObject() { User user = new User(); var uri = new Uri(Constants.HOSTNAME + Constants.USER_PATH + &quot;externalId:&quot; + Constants.USER_ID); try { var response = await client.DeleteAsync(uri); if (response.IsSuccessStatusCode) { Debug.WriteLine(@&quot; User successfully deleted.&quot;); var content = await response.Content.ReadAsStringAsync(); user = JsonConvert.DeserializeObject&lt;User&gt;(content); } } catch (Exception ex) { Debug.WriteLine(@&quot; ERROR {0}&quot;, ex.Message); } return (user); }  ","version":null,"tagName":"h3"},{"title":"Memberships​","type":1,"pageTitle":"C# Demo","url":"/docs/blackboard/rest-apis/demo-code/c-sharp-demo#memberships","content":"Memberships are handled in bbdn.rest.services.MemberService. As illustrated above, this Class implements the IRestService interface and exposes four methods. It also includes methods required to implement the IDisposible interface which is required to use the async/await functionality.. In addition, the endpoint for memberships is a bit different, in that it is a sub-call to courses, so the endpoint would look like/learn/api/public/v1/courses/&lt;courseId&gt;/users/&lt;userId&gt;. Create  public async Task&lt;Membership&gt; CreateObject(Membership newMembership) { Membership membership = new Membership(); var uri = new Uri(Constants.HOSTNAME + Constants.COURSE_PATH + &quot;/externalId:&quot; + Constants.COURSE_ID + &quot;users/externalId:&quot; + Constants.USER_ID); try { var json = JsonConvert.SerializeObject(membership); var body = new StringContent(json, Encoding.UTF8, &quot;application/json&quot;); HttpResponseMessage response = await client.PostAsync(uri, body); if (response.IsSuccessStatusCode) { var content = await response.Content.ReadAsStringAsync(); membership = JsonConvert.DeserializeObject&lt;Membership&gt;(content); Debug.WriteLine(@&quot; Membership successfully created.&quot;); } } catch (Exception ex) { Debug.WriteLine(@&quot; ERROR {0}&quot;, ex.Message); } return membership; }  Read  public async Task&lt;Membership&gt; ReadObject() { Membership membership = new Membership(); var uri = new Uri(Constants.HOSTNAME + Constants.COURSE_PATH + &quot;/externalId:&quot; + Constants.COURSE_ID + &quot;users/externalId:&quot; + Constants.USER_ID); try { var response = await client.GetAsync(uri); if (response.IsSuccessStatusCode) { var content = await response.Content.ReadAsStringAsync(); membership = JsonConvert.DeserializeObject&lt;Membership&gt;(content); } } catch (Exception ex) { Debug.WriteLine(@&quot; ERROR {0}&quot;, ex.Message); } return membership; }  Update  public async Task&lt;Membership&gt; UpdateObject(Membership updateMembership) { Membership membership = new Membership(); try { var json = JsonConvert.SerializeObject(updateMembership); var body = new StringContent(json, Encoding.UTF8, &quot;application/json&quot;); HttpResponseMessage response = await HttpClientExtensions.PatchAsync (client, Constants.HOSTNAME + Constants.COURSE_PATH + &quot;/externalId:&quot; + Constants.COURSE_ID + &quot;users/externalId:&quot; + Constants.USER_ID, body); if (response.IsSuccessStatusCode) { Debug.WriteLine(@&quot; Membership successfully updated.&quot;); var content = await response.Content.ReadAsStringAsync(); membership = JsonConvert.DeserializeObject&lt;Membership&gt;(content); } } catch (Exception ex) { Debug.WriteLine(@&quot; ERROR {0}&quot;, ex.Message); } return (membership); }  Delete  public async Task&lt;Membership&gt; DeleteObject() { Membership membership = new Membership(); var uri = new Uri(Constants.HOSTNAME + Constants.COURSE_PATH + &quot;/externalId:&quot; + Constants.COURSE_ID + &quot;users/externalId:&quot; + Constants.USER_ID); try { var response = await client.DeleteAsync(uri); if (response.IsSuccessStatusCode) { Debug.WriteLine(@&quot; Membership successfully deleted.&quot;); var content = await response.Content.ReadAsStringAsync(); membership = JsonConvert.DeserializeObject&lt;Membership&gt;(content); } } catch (Exception ex) { Debug.WriteLine(@&quot; ERROR {0}&quot;, ex.Message); } return (membership); }  ","version":null,"tagName":"h3"},{"title":"Conclusion​","type":1,"pageTitle":"C# Demo","url":"/docs/blackboard/rest-apis/demo-code/c-sharp-demo#conclusion","content":"All of the code snippets included in this document at included in a sample REST Demo C# application available onGitHub. There is a README.html included that talks more specifically about building and running the code. Feel free to review the code and run it against a test or development Learn instance to see how it works. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"cURL Demo","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/demo-code/curl-demo","content":"","keywords":"","version":null},{"title":"Introduction​","type":1,"pageTitle":"cURL Demo","url":"/docs/blackboard/rest-apis/demo-code/curl-demo#introduction","content":"The rest demo script demonstrates authenticating a REST application, management and use of the authorization token, and creating, updating, discovering, and deleting the Data Source and User Learn objects. A video presentation using this material plus an explanation of how to register your REST application on the Developer Portal, and how to configure your application's REST integration on your Learn development system, is availablehere. Here is the slide deck ","version":null,"tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"cURL Demo","url":"/docs/blackboard/rest-apis/demo-code/curl-demo#prerequisites","content":"You must register a developer account and application in the Developer PortalYou mustregister your application in LearnYou must also configure the script as outlined in the README for the project This cURL command-line demonstration shows you how to: AuthenticateCreate a Data SourceCreate, Read, and Update a UserDelete created objects in reverse order of create - user, datasource.Create a grade column and add a grade.Upload a file to a content area. All generated output is sent to the terminal. This is not meant to be a cURL tutorial. It will not teach you to use cURL. It will, however, give a Developer familiar with cURL the knowledge necessary to make a complete set of CRUD operations to the Learn REST endpoints. ","version":null,"tagName":"h3"},{"title":"Assumptions​","type":1,"pageTitle":"cURL Demo","url":"/docs/blackboard/rest-apis/demo-code/curl-demo#assumptions","content":"This help topic assumes the Developer: is familiar with cURL.has a REST-enabled Learn instance. ","version":null,"tagName":"h3"},{"title":"Walkthrough​","type":1,"pageTitle":"cURL Demo","url":"/docs/blackboard/rest-apis/demo-code/curl-demo#walkthrough","content":"To build an integration with the Learn REST Web Services, regardless of the programming language of choice, can really be summed up in two steps: Use the Application Key and Secret to obtain an OAuth 2.0 access token, as described in the Basic Authentication document. OR Use the authorizationcode endpoint to log into Learn with a given user's credentials, then obtain an OAuth 2.0 access token, using the application key/secret, that only allows access to the system based on that particular user's entitlements as described in the Three-Legged OAuth document.Call the appropriate REST endpoint with the OAuth 2.0 access token and necessary data to perform a given action. Every example is shown in bold face, the JSON result is shown in italics. ","version":null,"tagName":"h3"},{"title":"Authorization and Authentication​","type":1,"pageTitle":"cURL Demo","url":"/docs/blackboard/rest-apis/demo-code/curl-demo#authorization-and-authentication","content":"","version":null,"tagName":"h2"},{"title":"OAuth2 Basic (Two Legged)​","type":1,"pageTitle":"cURL Demo","url":"/docs/blackboard/rest-apis/demo-code/curl-demo#oauth2-basic-two-legged","content":"The REST Services rely on OAuth 2.0 Bearer Tokens for authentication. A request is made to the token endpoint with a Basic Authorization header containing the base64-encoded key:secret string as its key. The token service returns a JSON object containing the Access Token, the Token Type, and the number of seconds until the token expires. The token is set to expire after one hour, and subsequent calls to retrieve the token will return the same token with an updated expiry time until such time that the token has expired. There is no refresh token and currently no revoke token method. You can do this with cURL with the following command line. We use the -k parameter to ignore issues caused by the self-signed certificate. curl -k --user &lt;key&gt;:&lt;secret&gt; --data &quot;grant_type=client_credentials&quot; https://&lt;LearnHost&gt;/learn/api/public/v1/oauth2/token  Example: curl -k --user d128e50d-c91e-47d3-a97e-9d0c8a87fb5d:kLpiuq34320jqreaiJIRoareASELERREv56 --data &quot;grant_type=client_credentials&quot; https://localhost%3A9877/learn/api/public/v1/oauth2/token  { &quot;access_token&quot;: &quot;ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz&quot;, &quot;token_type&quot;: &quot;bearer&quot;, &quot;expires_in&quot;: 3444 }  The JSON response is serialized into the Token object as shown above, and you may then retrieve those values from that object by using copy and paste. You will use the value given for the access_token when calling the services as shown in the Calling Services section. ","version":null,"tagName":"h3"},{"title":"OAuth2 (Three Legged) - 3LO​","type":1,"pageTitle":"cURL Demo","url":"/docs/blackboard/rest-apis/demo-code/curl-demo#oauth2-three-legged---3lo","content":"To work with 3LO you will need both a browser, to log into Learn and retrieve a code, and a terminal window for your cURL commands. Note: In step 1 the client_id is NOT the Application ID. It IS the Application Key. Step 1. GET a code using your browser - CAUTION: You MUST set the scope parameter. Put the GET request in your browser's address field. Craft a URL in the following format: https://&lt;LearnHost &gt;//learn/api/public/v1/oauth2/authorizationcode?redirect_uri=&lt;REST APP URI&gt; &amp; response_type=code &amp; client_id=&lt;your **app key**&gt; &amp; scope=read&lt;/your &gt;&lt;/REST &gt;&lt;/LearnHost &gt;  Example: Place the URI below in your browser address field: https://bd-partner-a-original.blackboard.com/learn/api/public/v1/oauth2/authorizationcode? redirect_uri=https://localhost &amp; response_type=code &amp; client_id=d128e50d-c91e-47d3-a97e-9d0c8a77fb5d &amp; scope=read  At this point you are requested to log in. As of 2018.04.19 there is a bug with the cookie-acceptance pop up that will require you to accept the pop-up and do the above a second time. Once your browser has the cookie-acceptance cookie set for a given Learn system the work flow will carry on as follows. For this example, after you log in your browser will be directed to: https://localhost/?code=XYTdmQcSGrggzujJm2Ccf8C7dKyqKc7Q (The code will be different every time.) If you provided some other host name in the redirect_uri, then that host name would be shown instead of localhost. Now you have the code that you will use to retrieve the access token for all additional REST calls. NOTE regarding scope: The developer portal shows an example scope parameter as &quot;read write offline&quot;. Using curl this would be &amp; scope=read_write-offline We have to URL encode the space character. Step 2. POST to get the OAuth2 Access Token You will use your application's key and secret, and the access code from step Notice that the grant_type is authorization_code in this case. Also note that the redirect_uri value MUST match the value provided in Step 1. For our Example we will use https://localhost. curl -k --user &lt;key&gt;:&lt;secret&gt; --data &quot;grant_type=authorization_code&quot; https://&lt;LearnHost&gt;/learn/api/public/v1/oauth2/token  Example: curl -k --user d128e50d-c91e-47d3-a97e-9d0c8a77fb5d:kLpiuq34320jqreaiJIRoareASELERREv56 --data &quot;grant_type=authorization_code&quot; https://bd-partner-a-original-new.blackboard.com/learn/api/public/v1/oauth2/token? code=ItmqfxQiA9dzIDNwNoNYseM5GNRHHlfa &amp; redirect_uri=https://localhost  { &quot;access_token&quot;: &quot;Cdf83I0dwRoweXuY1dZDbbW0f0WmDmuF&quot;, &quot;token_type&quot;: &quot;bearer&quot;, &quot;expires_in&quot;: 3599, &quot;scope&quot;: &quot;read&quot;, &quot;user_id&quot;: &quot;7ac650e5bd0d467882943ed06fbfe72c&quot; }  The JSON response is serialized into the Token object as shown above, and you may then retrieve those values from that object by using copy and paste. You will use the value given for the access_token when calling the services as shown in the Calling Services section. ","version":null,"tagName":"h3"},{"title":"Calling Services​","type":1,"pageTitle":"cURL Demo","url":"/docs/blackboard/rest-apis/demo-code/curl-demo#calling-services","content":"The individual service calls are handled in succession here. We'll use copy and paste to create the JSON object in the form of a string, use cURL for generating the appropriate HTTP Request, and shipping it to Learn. We'll see the JSON response come back to stdout on the console. End points are generally defined as /learn/api/public/v1/&lt;object type&gt;/&lt;objectId&gt;. Object ID can be either the pk1, like _1_1, or as the batchuid. This value should be prepended by externalId:, likeexternalId:test101. For example, to retrieve a course by the pk1 _1_1, you would call GET /learn/api/public/v1/courses/_1_1. To retrieve by the batchuid test101, you would call GET /learn/api/public/v1/courses/externalId:test101. Create is sent to Learn as a HTTP POST message with a JSON body that defines the object. The endpoint should omit the objectId, as this will be generated on creation. Read is sent to Learn as a HTTP GET message with an empty body. The endpoint should include the objectId being retrieved. Update is sent to Learn as a HTTP PATCH message with a JSON body that defines the object. The endpoint should include the objectId being updated. Delete is sent to Learn as a HTTP DELETE message with empty body. The endpoint should include the objectId being deleted. Every example is shown in bold face, the JSON result is shown in italics. ","version":null,"tagName":"h3"},{"title":"DATASOURCES​","type":1,"pageTitle":"cURL Demo","url":"/docs/blackboard/rest-apis/demo-code/curl-demo#datasources","content":"Create curl -k -X POST -H &quot;Authorization: Bearer &lt;Access Token&gt;&quot; -H &quot;Content-Type: application/json&quot; --data '{&quot;externalId&quot;:&quot;&lt;String&gt;&quot;, &quot;description&quot;:&quot;&lt;String&gt;&quot;}' https://&lt;LearnHost&gt;/learn/api/public/v1/dataSources  Bearer will be the access_token value we got from the oauth2/token call above. Example: curl -k -X POST -H &quot;Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz&quot; -H &quot;Content-Type: application/json&quot; --data '{&quot;externalId&quot;:&quot;CURLDSK&quot;, &quot;description&quot;:&quot;cURL Demo DSK&quot;}' https://localhost:9877/learn/api/public/v1/dataSources  { &quot;id&quot;: &quot;_5_1&quot;, &quot;externalId&quot;: &quot;CURLDSK&quot;, &quot;description&quot;: &quot;cURL Demo DSK&quot; }  Read curl -k -X GET -H &quot;Authorization: Bearer &lt;Access Token&gt;&quot; https://&lt;LearnHost&gt;/learn/api/public/v1/dataSources/externalId:&lt;externalId from create&gt;  Example: curl -k -X GET -H &quot;Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz&quot; https://localhost:9877/learn/api/public/v1/dataSources/externalId:CURLDSK  { &quot;id&quot;: &quot;_7_1&quot;, &quot;externalId&quot;: &quot;CURLDSK&quot;, &quot;description&quot;: &quot;cURL Demo DSK&quot; }  Update curl -k --request PATCH -H &quot;Authorization: Bearer &lt;Access Token&gt;&quot; -H &quot;Content-Type: application/json&quot; --data '{&quot;externalId&quot;:&quot;&lt;String&gt;&quot;, &quot;description&quot;:&quot;&lt;String&gt;&quot;}' https://&lt;LearnHost&gt;/learn/api/public/v1/dataSources/[&lt;primary id&gt;|externalId:&lt;String&gt;]  Examples: curl -k --request PATCH -H &quot;Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz&quot; -H &quot;Content-Type: application/json&quot; --data '{&quot;externalId&quot;:&quot;CURLDSK&quot;, &quot;description&quot;:&quot;cURL DEMONSTRATION DSK&quot;}' https://localhost:9877/learn/api/public/v1/dataSources/_7_1  { &quot;id&quot;: &quot;_7_1&quot;, &quot;externalId&quot;: &quot;CURLDSK&quot;, &quot;description&quot;: &quot;cURL DEMONSTRATION DSK&quot; }  curl -k --request PATCH -H &quot;Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz&quot; -H &quot;Content-Type: application/json&quot; --data '{&quot;externalId&quot;:&quot;CURLDSK&quot;, &quot;description&quot;:&quot;cURL REST DEMO DSK&quot;}' https://localhost:9877/learn/api/public/v1/dataSources/externalId:CURLDSK  { &quot;id&quot;: &quot;_7_1&quot;, &quot;externalId&quot;: &quot;CURLDSK&quot;, &quot;description&quot;: &quot;cURL REST DEMO DSK&quot; }  Delete (If you are going to run the following examples, do so now before deleting your demo DSK.) curl -k -X DELETE -H &quot;Authorization: Bearer &lt;Access Token&gt;&quot; https://&lt;LearnHost&gt;/learn/api/public/v1/dataSources/[&lt;primary id&gt;|externalId:&lt;String&gt;]  Examples: curl -k -X DELETE -H &quot;Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz&quot; https://localhost:9877/learn/api/public/v1/dataSources/externalId:CURLDSK  With delete, you don't see anything back on the command line to indicate your delete was successful. You can run it again and you'll see that the DSK is truly gone. curl -k -X DELETE -H &quot;Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz&quot; https://localhost:9877/learn/api/public/v1/dataSources/externalId:CURLDSK  {&quot;status&quot;:404, &quot;message&quot;:&quot;Could not find object with ID: externalId:CURLDSK&quot;, &quot;extraInfo&quot;:&quot;416d7b944a58482aaed2df50f301861b&quot;}  ","version":null,"tagName":"h3"},{"title":"USERS​","type":1,"pageTitle":"cURL Demo","url":"/docs/blackboard/rest-apis/demo-code/curl-demo#users","content":"Create curl -k -X POST -H &quot;Authorization: Bearer &lt;Authorization Token&gt;&quot; -H &quot;Content-Type: application/json&quot; --data '&lt;JSON to create a User&gt;' https://localhost:9877/learn/api/public/v1/users  Remember, you can always find the JSON specification for these calls atExplore APIs Example: curl -k -X POST -H &quot;Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz&quot; -H &quot;Content-Type: application/json&quot; --data '{&quot;externalId&quot;:&quot;restdemouser&quot;, &quot;dataSourceId&quot;:&quot;_7_1&quot; , &quot;userName&quot;:&quot;restdemouser&quot;, &quot;password&quot;:&quot;xyzzy&quot;, &quot;availability&quot;:{&quot;available&quot;:&quot;Yes&quot;}, &quot;name&quot;:{&quot;given&quot;:&quot;demo&quot;, &quot;family&quot;:&quot;user&quot;, &quot;title&quot;:&quot;Mr&quot;}, &quot;contact&quot;: {&quot;email&quot;:&quot;no.one@ereh.won&quot;}}' https://localhost:9877/learn/api/public/v1/users  { &quot;id&quot;: &quot;_7_1&quot;, &quot;uuid&quot;: &quot;de2198a86c6645cbafaab13e79529e05&quot;, &quot;externalId&quot;: &quot;restdemouser&quot;, &quot;dataSourceId&quot;: &quot;_7_1&quot;, &quot;userName&quot;: &quot;restdemouser&quot;, &quot;educationLevel&quot;: &quot;Unknown&quot;, &quot;gender&quot;: &quot;Unknown&quot;, &quot;created&quot;: &quot;2016-05-11T21:39:11.518Z&quot;, &quot;systemRoleIds&quot;: [&quot;User&quot;], &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot; }, &quot;name&quot;: { &quot;given&quot;: &quot;demo&quot;, &quot;family&quot;: &quot;user&quot;, &quot;title&quot;: &quot;Mr&quot; }, &quot;job&quot;: {}, &quot;contact&quot;: { &quot;email&quot;: &quot;no.one@ereh.won&quot; }, &quot;address&quot;: {}, &quot;locale&quot;: {} }  By sheer coincidence this user's ID, '_7_1', came out to be the same as the DSK ID, '_7_1'. Note the availability of query parameters in the REST Documentation Examples: curl -k -X GET -H &quot;Authorization: Bearer bsdcojzT9i4qTaNE0T8ugEBcXE2U8jtu&quot; https://bd-partner-a-ultra.blackboard.com/learn/api/public/v1/users?dataSourceId=_2_1 &amp; fields=externalId,userName,studentId  {&quot;results&quot;:[{&quot;externalId&quot;:&quot;[abcd001@examity.com](mailto:abcd001@examity.com)&quot;, &quot;userName&quot;:&quot;[abcd001@examity.com](mailto:abcd001@examity.com)&quot;, &quot;studentId&quot;:&quot;ABCD001&quot;}, {&quot;externalId&quot;:&quot;[abcd002@examity.com](mailto:abcd002@examity.com)&quot;, &quot;userName&quot;:&quot;[abcd002@examity.com] (mailto:abcd002@examity.com)&quot;, &quot;studentId&quot;:&quot;[ABCD002@examity.com](mailto:ABCD002@examity.com)&quot;},...  On a Windows system, use ^ to escape the &amp; . curl -k -X GET -H &quot;Authorization: Bearer bsdcojzT9i4qTaNE0T8ugEBcXE2U8jtu&quot; https://bd-partner-a-ultra.blackboard.com/learn/api/public/v1/users? dataSourceId=_220_1^ &amp; fields=externalId,userName,studentId  Read curl -k -X GET -H &quot;Authorization: Bearer &lt;Authorization Token&gt;&quot; https://localhost:9877/learn/api/public/v1/users/[&lt;primary id&gt;|externalId:&lt;String&gt;]  Examples: curl -k -X GET -H &quot;Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz&quot; https://localhost:9877/learn/api/public/v1/users/externalId:restdemouser  { &quot;id&quot;: &quot;_7_1&quot;, &quot;uuid&quot;: &quot;de2198a86c6645cbafaab13e79529e05&quot;, &quot;externalId&quot;: &quot;restdemouser&quot;, &quot;dataSourceId&quot;: &quot;_7_1&quot;, &quot;userName&quot;: &quot;restdemouser&quot;, &quot;educationLevel&quot;: &quot;Unknown&quot;, &quot;gender&quot;: &quot;Unknown&quot;, &quot;created&quot;: &quot;2016-05-11T21:39:11.518Z&quot;, &quot;systemRoleIds&quot;: [&quot;User&quot;], &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot; }, &quot;name&quot;: { &quot;given&quot;: &quot;demo&quot;, &quot;family&quot;: &quot;user&quot;, &quot;title&quot;: &quot;Mr&quot; }, &quot;job&quot;: {}, &quot;contact&quot;: { &quot;email&quot;: &quot;no.one@ereh.won&quot; }, &quot;address&quot;: {}, &quot;locale&quot;: {} }  curl -k -X GET -H &quot;Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz&quot; https://localhost:9877/learn/api/public/v1/users/_7_1  { &quot;id&quot;: &quot;_7_1&quot;, &quot;uuid&quot;: &quot;de2198a86c6645cbafaab13e79529e05&quot;, &quot;externalId&quot;: &quot;restdemouser&quot;, &quot;dataSourceId&quot;: &quot;_7_1&quot;, &quot;userName&quot;: &quot;restdemouser&quot;, &quot;educationLevel&quot;: &quot;Unknown&quot;, &quot;gender&quot;: &quot;Unknown&quot;, &quot;created&quot;: &quot;2016-05-11T21:39:11.518Z&quot;, &quot;systemRoleIds&quot;: [&quot;User&quot;], &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot; }, &quot;name&quot;: { &quot;given&quot;: &quot;demo&quot;, &quot;family&quot;: &quot;user&quot;, &quot;title&quot;: &quot;Mr&quot; }, &quot;job&quot;: {}, &quot;contact&quot;: { &quot;email&quot;: &quot;no.one@ereh.won&quot; }, &quot;address&quot;: {}, &quot;locale&quot;: {} }  Update curl -k --request PATCH -H &quot;Authorization: Bearer &lt;Access Token&gt;&quot; -H &quot;Content-Type: application/json&quot; --data '&lt;JSON Data for a User&gt;' https://&lt;LearnHost&gt;/learn/api/public/v1/users/ [&lt;primary id&gt;|externalId:&lt;String&gt;]  Example: curl -k --request PATCH -H &quot;Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz&quot; -H &quot;Content-Type: application/json&quot; --data '{&quot;externalId&quot;:&quot;restdemouser&quot;, &quot;dataSourceId&quot;:&quot;_7_1&quot;, &quot;userName&quot;:&quot;restdemouser&quot;, &quot;availability&quot;:{&quot;available&quot;:&quot;Yes&quot;}, &quot;name&quot;:{&quot;given&quot;:&quot;Jane&quot;, &quot;family&quot;:&quot;Demo&quot;, &quot;title&quot;:&quot;Ms&quot;}, &quot;contact&quot;:{&quot;email&quot;:&quot;no.one@ereh.won&quot;}}' https://localhost:9877/learn/api/public/v1/users/_7_1  { &quot;id&quot;: &quot;_7_1&quot;, &quot;uuid&quot;: &quot;de2198a86c6645cbafaab13e79529e05&quot;, &quot;externalId&quot;: &quot;restdemouser&quot;, &quot;dataSourceId&quot;: &quot;_7_1&quot;, &quot;userName&quot;: &quot;restdemouser&quot;, &quot;educationLevel&quot;: &quot;Unknown&quot;, &quot;gender&quot;: &quot;Unknown&quot;, &quot;created&quot;: &quot;2016-05-11T21:39:11.518Z&quot;, &quot;systemRoleIds&quot;: [&quot;User&quot;], &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot; }, &quot;name&quot;: { &quot;given&quot;: &quot;Jane&quot;, &quot;family&quot;: &quot;Demo&quot;, &quot;title&quot;: &quot;Ms&quot; }, &quot;job&quot;: {}, &quot;contact&quot;: { &quot;email&quot;: &quot;no.one@ereh.won&quot; }, &quot;address&quot;: {}, &quot;locale&quot;: {} }  Delete curl -k -X DELETE -H &quot;Authorization: Bearer &lt;Access Token&gt;&quot; https://&lt;LearnHost&gt;/learn/api/public/v1/users/[&lt;primary id&gt;|externalId:&lt;String&gt;]  Example: curl -k -X DELETE -H &quot;Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz&quot; https://localhost:9877/learn/api/public/v1/users/externalId:restdemouser  As with the DSK delete there is no output to the console when the delete is successful. But, you can see that the user is gone by running the delete again: curl -k -X DELETE -H &quot;Authorization: Bearer ti3EVMVQO4RqdAgcpmODZdvjvHuuBHDz&quot; https://localhost:9877/learn/api/public/v1/users/externalId:restdemouser  _{&quot;status&quot;:404, &quot;message&quot;:&quot;Could not find object with ID: externalId:restdemouser&quot;, &quot;extraInfo&quot;:&quot;e709f6982af744dfae18d42f68e73fb1&quot;}_  ","version":null,"tagName":"h3"},{"title":"COURSE GRADES​","type":1,"pageTitle":"cURL Demo","url":"/docs/blackboard/rest-apis/demo-code/curl-demo#course-grades","content":"(Only in SaaS) Create Grade Column curl -k -X POST -H &quot;Authorization: Bearer &lt;Authorization Token&gt;&quot; -H &quot;Content-Type: application/json&quot; --data '&lt;JSON to create a Grade Column&gt;' [https://saashost.blackboard.com/learn/api/public/v1/courses/{courseId}/gradebook/columns  Example: curl -k -X POST -H &quot;Authorization: Bearer uFMWyuwgItXL0UzMo6AHG0zOhm0yvfys&quot; -H &quot;Content-Type: application/json&quot; --data '{&quot;id&quot;: &quot;7&quot;, &quot;externalId&quot;: &quot;co7extId&quot;, &quot;name&quot;: &quot;co7name&quot;, &quot;description&quot;: &quot;co7desc&quot;, &quot;externalGrade&quot;: true, &quot;created&quot;:&quot;2016-06-30T05:34:56.497Z&quot;, &quot;score&quot;: {&quot;possible&quot;: 77, &quot;decimalPlaces&quot;:0}, &quot;availability&quot;: {&quot;available&quot;: &quot;Yes&quot;}, &quot;grading&quot;: {&quot;type&quot;:&quot;Manual&quot;, &quot;due&quot;: &quot;2016-07-01T05:34:56.498Z&quot;, &quot;attemptsAllowed&quot;:0, &quot;scoringModel&quot;: &quot;Last&quot;, &quot;anonymousGrading&quot;: { &quot;type&quot;: &quot;None&quot;, &quot;releaseAfter&quot;:&quot;2016-07-11T05:34:56.498Z&quot;}}}' https://partner-smoke-test-a.blackboard.com/learn/api/public/v1/courses/_50_1/gradebook/columns  {&quot;id&quot;:&quot;**_129_1**&quot;, &quot;externalId&quot;:&quot;co7extId&quot;, &quot;name&quot;:&quot;co7name&quot;, &quot;description&quot;:&quot;co7 desc&quot;, &quot;externalGrade&quot;:true, &quot;created&quot;:&quot;2016-07-01T05:45:37.730Z&quot;, &quot;score&quot;:{&quot;poss ible&quot;:77.0, &quot;decimalPlaces&quot;:0}, &quot;availability&quot;:{&quot;available&quot;:&quot;Yes&quot;}, &quot;grading&quot;:{&quot;t ype&quot;:&quot;Manual&quot;, &quot;due&quot;:&quot;2016-07-01T05:34:56.498Z&quot;}}  Add/Update Column Grade (PATCH will create a grade where there isn't one.) curl -k --request PATCH -H &quot;Authorization: Bearer &lt;Access Token&gt;&quot; -H &quot;Content-Type: application/json&quot; --data '&lt;JSON Data for a Column Grade&gt;' https://&lt;Learn Host&gt;/learn/api/public/v1/courses/{courseId}/gradebook/columns/{columnId}/users/{userId}  Example: curl -k --request PATCH -H &quot;Authorization: Bearer uFMWyuwgItXL0UzMo6AHG0zOhm0yvfys&quot; -H &quot;Content-Type: application/json&quot; --data '{&quot;text&quot;: &quot;A&quot;, &quot;score&quot;: 77, &quot;notes&quot;: &quot;Great&quot;, &quot;feedback&quot;: &quot;GoodWork!&quot;, &quot;exempt&quot;:true}' https://partner-smoke-test-a.blackboard.com/learn/api/public/v1/courses/_50_1/gradebook/ columns/_129_1/users/_66_1  { &quot;userId&quot;: &quot;_66_1&quot;, &quot;columnId&quot;: &quot;_129_1&quot;, &quot;status&quot;: &quot;Graded&quot;, &quot;score&quot;: 77.0, &quot;notes&quot;: &quot;Great&quot;, &quot;feedback&quot;: &quot;GoodWork!&quot;, &quot;exempt&quot;: true }  ","version":null,"tagName":"h3"},{"title":"ACCESS CONTENT​","type":1,"pageTitle":"cURL Demo","url":"/docs/blackboard/rest-apis/demo-code/curl-demo#access-content","content":"See Access Content Attachments ","version":null,"tagName":"h3"},{"title":"COURSE COPY​","type":1,"pageTitle":"cURL Demo","url":"/docs/blackboard/rest-apis/demo-code/curl-demo#course-copy","content":"curl -k -X POST -H &quot;Authorization: Bearer &lt;Authorization Token&gt;&quot; -H &quot;Content-Type: application/json&quot; --data '&lt;JSON for the course to copy into&gt;' https://saashost.blackboard.com/learn/api/public/v1/courses/{courseId}/copy  Example: curl -k -X POST -H &quot;Authorization: Bearer RcHoSkh8EH9UKo6iCHWXDpCKrmCyOIwr&quot; -H &quot;Content-Type: application/json&quot; --data '{&quot;courseId&quot;:&quot;mbk-test-copied201910111502&quot;}' https://partner-smoke-test-a.blackboard.com/learn/api/public/v1/courses/courseId:mbk-test/copy  A new course with courseId: mbk-test-copied201910111502 is created. The contents of mbk-test are copied into it. NOTE: You can NOT copy contents into an already existing course. For example we used the GUI to create a course with a courseId: mbk-test- copied201910111508. Then we attempted to run the following: curl -k -X POST -H &quot;Authorization: Bearer RcHoSkh8EH9UKo6iCHWXDpCKrmCyOIwr&quot; -H &quot;Content-Type: application/json&quot; --data '{&quot;courseId&quot;:&quot;mbk-test-copied201910111508&quot;}' https://partner-smoke-test-a.blackboard.com/learn/api/public/ v1/courses/_863_1/copy  { &quot;status&quot;: 409, &quot;message&quot;: &quot;A course with the provided courseId already exists&quot; }  You can only use the copy endpoint to take an existing course and create and copy into a new, never before created, course. ","version":null,"tagName":"h3"},{"title":"ADD CONTENT​","type":1,"pageTitle":"cURL Demo","url":"/docs/blackboard/rest-apis/demo-code/curl-demo#add-content","content":"(Remember to Check Availability of the APIs in the Learn Version) Preconditions - You know the courseId, you've gotten an access token, and you have a local file to upload. Get a course's contents. curl -k -X GET -H &quot;Authorization: Bearer TwniVbrjLoQnNVWexAGBgQEyMaw7GT0P&quot; https://bd-partner-a-original.blackboard.com/learn/api/public/v1/courses/ courseId:mbk-rest-contents/contents  { &quot;results&quot;: [ { &quot;id&quot;: &quot;_12906_1&quot;, &quot;title&quot;: &quot;Information&quot;, &quot;created&quot;: &quot;2017-12-06T18:50:24.625Z&quot;, &quot;position&quot;: 1, &quot;hasChildren&quot;: true, &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot;, &quot;allowGuests&quot;: true, &quot;adaptiveRelease&quot;: {} }, &quot;contentHandler&quot;: { &quot;id&quot;: &quot;resource/x-bb-folder&quot; } }, { &quot;id&quot;: &quot;**_12907_1**&quot;, &quot;title&quot;: &quot;Content&quot;, &quot;created&quot;: &quot;2017-12-06T18:50:24.628Z&quot;, &quot;position&quot;: 2, &quot;hasChildren&quot;: true, &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot;, &quot;allowGuests&quot;: true, &quot;adaptiveRelease&quot;: {} }, &quot;contentHandler&quot;: { &quot;id&quot;: &quot;resource/x-bb-folder&quot; } } ] }  In the THIRD step we’ll place our file in the Content folder we see in the above response. Every new Learn Original course has a Content folder by default. Upload a file. curl -X POST -H &quot;Authorization: Bearer TwniVbrjLoQnNVWexAGBgQEyMaw7GT0P&quot; https://bd-partner-a-original.blackboard.com/learn/api/public/v1/uploads -F &quot;file=@/Users/mbk/Documents/2016.09.BlackboardPartnerUpdate.pdf&quot;  { &quot;id&quot;: &quot;4B6281344DFDD9B1F36A5719BDB10708-38295ef0c6a74954a1055e1045bcfeeb&quot; }  Create the content item using bbXML and the id from the prior step. { &quot;title&quot;: &quot;Sept 2016 Partner Update&quot;, &quot;contentHandler&quot;: { &quot;id&quot;: “resource/x-bb-file&quot;, &quot;file&quot;: { &quot;uploadId&quot;:&quot;4B6281344DFDD9B1F36A5719BDB10708-38295ef0c6a74954a1055e1045bcfeeb&quot;, &quot;fileName&quot;: &quot;2016.09.BlackboardPartnerUpdate.pdf&quot;, &quot;duplicateFileHandling&quot;: &quot;Rename&quot; } } }  Then call the appropriate endpoint: curl -k -X POST -H &quot;Authorization: Bearer TwniVbrjLoQnNVWexAGBgQEyMaw7GT0P&quot; -H &quot;Content-Type: application/json&quot; --data '{&quot;title&quot;: &quot;Sept 2016 Partner Update&quot;, &quot;contentHandler&quot;: {&quot;id&quot;: &quot;resource/x-bb-file&quot;, &quot;file&quot;: {&quot;uploadId&quot;: &quot;4B6281344DFDD9B1F36A5719BDB10708-38295ef0c6a74954a1055e1045bcfeeb&quot;, &quot;fileName&quot;:&quot;2016.09.BlackboardPartnerUpdate.pdf&quot;, &quot;duplicateFileHandling&quot;: &quot;Rename&quot;}}}' https://bd-partner-a-original.blackboard.com/learn/api/public/v1/courses/ courseId:mbk-rest-contents/contents/_12907_1/children  { &quot;id&quot;: &quot;_12908_1&quot;, &quot;parentId&quot;: &quot;_12907_1&quot;, &quot;title&quot;: &quot;Sept 2016 Partner Update&quot;, &quot;created&quot;: &quot;2017-12-06T19:22:59.536Z&quot;, &quot;position&quot;: 0, &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot;, &quot;allowGuests&quot;: true, &quot;adaptiveRelease&quot;: {} }, &quot;contentHandler&quot;: { &quot;id&quot;: &quot;resource/x-bb-file&quot;, &quot;file&quot;: { &quot;fileName&quot;: &quot;2016.09.BlackboardPartnerUpdate.pdf&quot; } } }  You can, of course, use the id returned in the above to fetch the content item using the appropriate GET. Read the documentation at developer.anthology.com. ","version":null,"tagName":"h3"},{"title":"CREATE ASSIGNMENT WITH ATTACHMENT​","type":1,"pageTitle":"cURL Demo","url":"/docs/blackboard/rest-apis/demo-code/curl-demo#create-assignment-with-attachment","content":"Currently Only Available For Ultra Courses (Remember to check the Learn version for availably of the APIs @ https://developer.anthology.com) Get a course's content root. root will only work with the _abc_xyz ID format. It will not work for courseId:&lt;course_id&gt; format. curl -k -X GET -H &quot;Authorization: Bearer &lt;Access Token&gt; &quot; https://&lt;LearnHost&gt;/learn/api/public/v1/courses/&lt;ID&gt;/contents/root  Example: curl -k -X GET -H &quot;Authorization: Bearer N75W0ceKowxtlMUZtuIqwwvPQtxvx3L5&quot; https://bd-partner-a-ultra.blackboard.com/learn/api/public/v1/courses/_691_1/contents/root  { &quot;id&quot;: &quot;_5108_1&quot;, &quot;title&quot;: &quot;ROOT&quot;, &quot;created&quot;: &quot;2018-04-08T15:57:34.188Z&quot;, &quot;position&quot;: 0, &quot;hasChildren&quot;: true, &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot;, &quot;allowGuests&quot;: false, &quot;adaptiveRelease&quot;: {} }, &quot;contentHandler&quot;: { &quot;id&quot;: &quot;resource/x-bb-folder&quot; } }  Upload the file to be attached to the assignment. Note: The file is uploaded to temporary storage so we must attach it to an assignment shortly after the upload curl -X POST -H &quot;Authorization: Bearer N75W0ceKowxtlMUZtuIqwwvPQtxvx3L5&quot; https://bd-partner-a-ultra.blackboard.com/learn/api/public/v1/uploads -F &quot;file=@/Users/mbk/Documents/2016.06.BlackboardPartnerUpdate.pdf&quot;  { &quot;id&quot;: &quot;D1-D1165F42C7E11286BDAFDCCD2E2BE935-56c7b14aa4cb499b9a9a2a8cc3156290&quot; }  We use this id to indicate the file that is to be attached to the assignment. Create the assignment with the file attached: (The file must be attached soon after being uploaded as it is uploaded to a temporary location and goes away sometime after being uploaded. Also, there is a bug in the following where if attempts allowed is too large it will fail. I've not experimented to find the limit.) Reference: POST /learn/api/public/v1/courses/{courseId}/contents/createAssignment Example: curl -k -X POST -H &quot;Authorization: Bearer N75W0ceKowxtlMUZtuIqwwvPQtxvx3L5&quot; -H &quot;Content-Type: application/json&quot; --data '{&quot;parentId&quot;: &quot;_5108_1&quot;, &quot;title&quot;:&quot;Assignment Created by REST createAssignment&quot;, &quot;instructions&quot;: &quot;Simple Instructions&quot;, &quot;description&quot;: &quot;Assignment with Attachment&quot;, &quot;position&quot;: 0, &quot;fileUploadIds&quot;:[&quot;D1-D1165F42C7E11286BDAFDCCD2E2BE935-56c7b14aa4cb499b9a9a2a8cc3156290&quot;], &quot;availability&quot;: {&quot;available&quot;: &quot;Yes&quot;, &quot;allowGuests&quot;: true, &quot;adaptiveRelease&quot;: { &quot;start&quot;: &quot;2018-04-05T18:35:20.050Z&quot;, &quot;end&quot;: &quot;2018-09-02T18:35:20.050Z&quot; } }, &quot;grading&quot;: { &quot;due&quot;: &quot;2018-09-02T18:35:20.050Z&quot;, &quot;attemptsAllowed&quot;: 10 }, &quot;score&quot;: { &quot;possible&quot;: 100 } }' https://bd-partner-a-ultra.blackboard.com/learn/api/public/v1/courses/ courseId:mbk-ultra-course/contents/createAssignment  { &quot;contentId&quot;: &quot;_6282_1&quot;, &quot;gradeColumnId&quot;: &quot;_3297_1&quot;, &quot;assessmentId&quot;: &quot;_11701_1&quot;, &quot;questionIds&quot;: [&quot;_11703_1&quot;, &quot;_11704_1&quot;] }  We will use the gradeColumnId when submitting a student attempt to the assignment. ","version":null,"tagName":"h3"},{"title":"SUBMIT ASSIGNMENT ATTEMPT WITH ATTACHMENT​","type":1,"pageTitle":"cURL Demo","url":"/docs/blackboard/rest-apis/demo-code/curl-demo#submit-assignment-attempt-with-attachment","content":"Currently Only Available For Presentation-Only Assignments (Reference for all APIs used and the Learn version they are available in is @ https://developer.anthology.com) Use 3LO to get an access code for the student account that will submit the attempt to the assignment. 3LO MUST be used for this process. NOTES: Use Status read write, write is required to POST the assignment. LOG OUT of any browser session with the Learn system you've been working with before doing the next step where you will log in with the student account. a. Put the following URL in a browser's address field. Use the FQDN of the Learn system you are working with. The client_id is the REST Application Key. (Not the ID.) https://bd-partner-a-ultra.blackboard.com/learn/api/public/v1/oauth2/authorizationcode? redirect_uri=https://localhost &amp; response_type=code &amp; client_id=d128e50d-c91e-47d3-a97e-9d0c8a77fb5d &amp; scope=read write &amp; state=xyzzy  Your browser should take you to the Learn login page. If you see the dialog to accept cookies, accept the dialog. Then repeat a. There is a bug that won't take you past b. if you've not previously accepted the cookie disclosure dialog. b. Log in with the student account that will be submitting the assignment attempt. Accept any dialog that pops up. Your browser's address field will be redirected to a URL like the following. You SHOULD see something about being unreachable in the browser. That's OK. https://localhost/?code=g84Xx0YaEz1iqS6HFRq0X9MdRTnQ48FT &amp; state=xyzzy  Our code is: g84Xx0YaEz1iqS6HFRq0X9MdRTnQ48FT This is the code we use in the next step to get an access token. Use the 2nd-leg of 3LO to get an access token - POST using the code, our application key, and secret to the oauth2/token endpoint. Note: the redirect_uri must match the redirect_uri we used when we got the code. curl -k --user d128e50d-c91e-47d3-a97e-9d0c8a77fb5d:sorryyoucanthavemysecret --data &quot;grant_type=authorization_code&quot; https://bd-partner-a-ultra.blackboard.com/learn/api/public/v1/oauth2/token? code=g84Xx0YaEz1iqS6HFRq0X9MdRTnQ48FT &amp; redirect_uri=https://localhost  We get an access token back to use for submitting the students assignment attempt. { &quot;access_token&quot;: &quot;4mgoFlQoi4Jq4biKpU4R264wugsKF9R1&quot;, &quot;token_type&quot;: &quot;bearer&quot;, &quot;expires_in&quot;: 3599, &quot;scope&quot;: &quot;read write&quot;, &quot;user_id&quot;: &quot;507ba08376e1498cba8c6cd35b003aa2&quot; }  Upload the file to be attached to the attempt into temporary storage. It's temporary and needs to be used quickly curl -X POST -H &quot;Authorization: Bearer 4mgoFlQoi4Jq4biKpU4R264wugsKF9R1&quot; https://bd-partner-a-ultra.blackboard.com/learn/api/public/v1/uploads -F &quot;[file=@/Users/mbk/Documents/2016.03.BlackboardPartnerUpdate.pdf]&quot;  We get back an ID that we use to attach the file to the attempt. { &quot;id&quot;: &quot;BD-BD9C08679892561211D99DB4C817FE68-67545ce854b54d3fb062e38aefeee47c&quot; }  Submit the attempt. We're using the gradeColumnId&quot;:&quot;_3297_1&quot; that we got when we created the assignment. The &quot;studentSubmision&quot; is in bbML format. Reference: Blackboard Markup Language - BbML curl -k -X POST -H &quot;Authorization: Bearer 4mgoFlQoi4Jq4biKpU4R264wugsKF9R1&quot; -H &quot;Content-Type: application/json&quot; --data '{&quot;studentComments&quot;:&quot;this is the student commment&quot;, &quot;studentSubmission&quot;: &quot;&lt;!-- {\\&quot;bbMLEditorVersion\\&quot;:1} --&gt; &lt;a href=\\&quot;bbupload://BD-BD9C08679892561211D99DB4C817FE68-67545ce854b54d3fb062e38aefeee47c\\&quot; data-bbfile=\\&quot;{ &amp; quot;render &amp; quot;: &amp; quot;inline &amp; quot;, &amp; quot;linkName &amp; quot;: &amp; quot;2016.03.BlackboardPartnerUpdate.pdf &amp; quot;, &amp; quot;mimeType &amp; quot;: &amp; quot;application/pdf &amp; quot;}\\&quot;&gt;2016.03.BlackboardPartnerUpdate.pdf&lt;_/a&gt;&quot;}:_' https://bd-partner-a-ultra.blackboard.com/learn/api/public/v2/courses/courseId:mbk-ultra- course/gradebook/columns/_3297_1/attempts  We get back an attempt ID for an InProgress student submission. We use the attempt ID in the next step to set the attempt to needs grading so that the instructor sees the attempt. Attempts that are InProgress are not available to the instructor in the GUI. { &quot;id&quot;: &quot;_528_1&quot;, &quot;userId&quot;: &quot;_649_1&quot;, &quot;status&quot;: &quot;InProgress&quot;, &quot;studentSubmission&quot;: &quot;&lt;!-- {\\&quot;bbMLEditorVersion\\&quot;:1} --&gt;\\n&lt;a href=\\&quot;https://bd-partner-a-ultra.blackboard.com/bbcswebdav/xid-23611_1\\&quot; data-bbfile=\\&quot;{ &amp; quot;render &amp; quot;: &amp; quot;inline &amp; quot;, &amp; quot;linkName &amp; quot;: &amp; quot;2016.03.BlackboardPartnerUpdate.pdf &amp; quot;, &amp; quot;mimeType &amp; quot;: &amp; quot;application/pdf &amp; quot;}\\&quot;&gt;2016.03.BlackboardPartnerUpdate.pdf&lt;/a&gt;&quot;, &quot;exempt&quot;: false, &quot;created&quot;: &quot;2018-05-18T02:48:18.329Z&quot; }  Set the attempt to &quot;NeedsGrading&quot; curl -k -X PATCH -H &quot;Authorization: Bearer 4mgoFlQoi4Jq4biKpU4R264wugsKF9R1&quot; -H &quot;Content-Type: application/json&quot; --data '{&quot;status&quot;:&quot;NeedsGrading&quot;}:' https://bd-partner-a-ultra.blackboard.com/learn/api/public/v2/courses/courseId:mbk-ultra- course/gradebook/columns/_3297_1/attempts_528_1  {&quot;id&quot;:&quot;528_1&quot;, &quot;userId&quot;:&quot;_649_1&quot;, &quot;status&quot;:&quot;NeedsGrading&quot;, &quot;studentSubmission&quot;:&quot;&lt;!-- {\\&quot;bbMLEditorVersion\\&quot;:1} --&gt;\\n&lt;a href=\\&quot;[https://bd-partner-a-ultra.blackboard.com/bbcswebdav/xid-23611_1&quot; data-bbfile=\\&quot;{ &amp; quot;render &amp; quot;: &amp; quot;inline &amp; quot;, &amp; quot;linkName &amp; quot;: &amp; quot;2016.03.BlackboardPartnerUpdate.pdf &amp; quot;, &amp; quot;mimeType &amp; quot;: &amp; quot;application/pdf &amp; quot;}\\&quot;&gt;2016.03.BlackboardPartnerUpdate.pdf&lt;/a&gt;&quot;, &quot;exempt&quot;:false, &quot;created&quot;:&quot;2018-05-18T02:48:18.329Z&quot;}  {: .code-text-to-normal} Now, logged in as the instructor, we can see that there has been 1 submission. And we see the student's submission with the attachment. ","version":null,"tagName":"h3"},{"title":"Common Errors​","type":1,"pageTitle":"cURL Demo","url":"/docs/blackboard/rest-apis/demo-code/curl-demo#common-errors","content":"COMMON ERROR: You used 3LO to get an Access Token. You forgot to set the scope correctly and are getting permission denied errors. 404 etc.SOLUTION: Go back through the 3LO process and specify the scope necessary to make your REST calls. ","version":null,"tagName":"h3"},{"title":"Conclusion​","type":1,"pageTitle":"cURL Demo","url":"/docs/blackboard/rest-apis/demo-code/curl-demo#conclusion","content":"We hope that the above demonstration gives you a helpful peek under the hood as to what is going on when you make REST calls to a Learn system. You can take these cURL commands and use them to make all of the REST calls documented here: Explore APIs. You must register a developer account and application in the Developer Portal Contributors on this article: Mark Kauffman Sr. Software EngineerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Demo using PHP","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/demo-code/php-demo","content":"","keywords":"","version":null},{"title":"Prerequisites​","type":1,"pageTitle":"Demo using PHP","url":"/docs/blackboard/rest-apis/demo-code/php-demo#prerequisites","content":"You must [register a developer account and application](/rest-apis/learn/Getting Started/registry) in the Developer PortalYou must[register your application](/rest-apis/learn/Getting Started/registry) in LearnYou must also configure the script as outlined in the README for the project This PHP command line Application allows you to: AuthenticateCreate, Read, and Update a Data SourceCreate, Read, and Update a TermCreate, Read, and Update a CourseCreate, Read, and Update a UserCreate, Read, and Update a MembershipDelete created objects in reverse order of create - membership, user, course, term, datasource. All generated output is sent to the terminal. This is not meant to be a PHP tutorial. It will not teach you to write code in PHP. It will, however, give a Developer familiar with PHP the knowledge necessary to build a Web Services integration. ","version":null,"tagName":"h3"},{"title":"Assumptions​","type":1,"pageTitle":"Demo using PHP","url":"/docs/blackboard/rest-apis/demo-code/php-demo#assumptions","content":"This help topic assumes the Developer: is familiar with PHPhas installed PHP and the HTTP_Request2 PHP Libraryhas obtained a copy of the source code and built it in conjunction with the project README.md file.has a REST-enabled Learn instance. ","version":null,"tagName":"h3"},{"title":"Code Walkthrough​","type":1,"pageTitle":"Demo using PHP","url":"/docs/blackboard/rest-apis/demo-code/php-demo#code-walkthrough","content":"To build an integration with the Learn REST Web Services, regardless of the programming language of choice, can really be summed up in two steps: Use the Application Key and Secret to obtain an OAuth 2.0 access token, as described in the [Basic Authentication](/rest-apis/learn/Getting Started/basic-authentication) document.Call the appropriate REST endpoint with the appropriate data to perform the appropriate action. ","version":null,"tagName":"h3"},{"title":"Authorization and Authentication​","type":1,"pageTitle":"Demo using PHP","url":"/docs/blackboard/rest-apis/demo-code/php-demo#authorization-and-authentication","content":"The REST Services rely on OAuth 2.0 Bearer Tokens for authentication. A request is made to the token endpoint with a Basic Authorization header containing the base64-encoded key:secret string as its key. The token service returns a JSON object containing the Access Token, the Token Type, and the number of seconds until the token expires. The token is set to expire after one hour, and subsequent calls to retrieve the token will return the same token with an updated expiry time until such time that the token has expired. There is no refresh token and currently no revoke token method. The PHP code handles this in classes/Rest.class.php:  public function authorize() { $constants = new Constants(); $token = new Token(); $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;AUTH_PATH, HTTP_Request2::METHOD_POST); $request-&gt;setAuth($constants-&gt;KEY, $constants-&gt;SECRET, HTTP_Request2::AUTH_BASIC); $request-&gt;setBody('grant_type=client_credentials'); $request-&gt;setHeader('Content-Type', 'application/x-www-form-urlencoded'); try { $response = $request-&gt;send(); if (200 == $response-&gt;getStatus()) { print &quot; Authorize Application...\\n&quot;; $token = json_decode($response-&gt;getBody()); } else { print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase(); $BbRestException = json_decode($response-&gt;getBody()); var_dump($BbRestException); } } catch (HTTP_Request2_Exception $e) { print 'Error: ' . $e-&gt;getMessage(); } return $token; }  The JSON response is serialized into the Token object, and you may then retrieve those values from that object. ","version":null,"tagName":"h3"},{"title":"Calling Services​","type":1,"pageTitle":"Demo using PHP","url":"/docs/blackboard/rest-apis/demo-code/php-demo#calling-services","content":"The individual service calls are handled by the classes/Rest.class.php file. Each operation and object combination has its own method. Each of these methods creates the JSON body by instantiating the appropriate model from the classes directory when necessary, and then generates the appropriate HTTP Request, ships it to Learn, and serializes the JSON response back into the appropriate model. End points are generally defined as /learn/api/public/v1/&lt;objecttype&gt;/&lt;objectId&gt;. Object ID can be either the pk1, like _1_1, or as the batchuid. This value should be prepended by externalId:, like externalId:test101. For example, to retrieve a course by the pk1 _1_1, you would call GET /learn/api/public/v1/courses/_1_1. To retrieve by the batchuid test101, you would call GET /learn/api/public/v1/courses/externalId:test101. Create is sent to Learn as a HTTP POST message with a JSON body that defines the object. The endpoint should omit the objectId, as this will be generated on creation. Read is sent to Learn as a HTTP GET message with an empty body. The endpoint should include the objectId being retrieved. Update is sent to Learn as a HTTP PATCH message with a JSON body that defines the object. The endpoint should include the objectId being updated. Delete is sent to Learn as a HTTP DELETE message with empty body. The endpoint should include the objectId being deleted. ","version":null,"tagName":"h3"},{"title":"Datasources​","type":1,"pageTitle":"Demo using PHP","url":"/docs/blackboard/rest-apis/demo-code/php-demo#datasources","content":"Datasources are handled in classes/Rest.class.php. Create  public function createDatasource($access_token) { $constants = new Constants(); $datasource = new Datasource(); $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;DSK_PATH, HTTP_Request2::METHOD_POST); $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token); $request-&gt;setHeader('Content-Type', 'application/json'); $request-&gt;setBody(json_encode($datasource)); try { $response = $request-&gt;send(); if (201 == $response-&gt;getStatus()) { print &quot;\\n Create Datasource...\\n&quot;; $datasource = json_decode($response-&gt;getBody()); } else { print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase(); $BbRestException = json_decode($response-&gt;getBody()); var_dump($BbRestException); } } catch (HTTP_Request2_Exception $e) { print 'Error: ' . $e-&gt;getMessage(); } return $datasource; }  Read  public function readDatasource($access_token, $dsk_id) { $constants = new Constants(); $datasource = new Datasource(); $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;DSK_PATH . '/' . $dsk_id, HTTP_Request2::METHOD_GET); $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token); try { $response = $request-&gt;send(); if (200 == $response-&gt;getStatus()) { print &quot;\\n Read Datasource...\\n&quot;; $datasource = json_decode($response-&gt;getBody()); } else { print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase(); $BbRestException = json_decode($response-&gt;getBody()); var_dump($BbRestException) } } catch (HTTP_Request2_Exception $e) { print 'Error: ' . $e-&gt;getMessage(); } return $datasource; }  Update  public function updateDatasource($access_token, $dsk_id) { $constants = new Constants(); $datasource = new Datasource(); $datasource-&gt;id = $dsk_id; $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;DSK_PATH . '/' . $dsk_id, 'PATCH'); $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token); $request-&gt;setHeader('Content-Type', 'application/json'); $request-&gt;setBody(json_encode($datasource)); try { $response = $request-&gt;send(); if (200 == $response-&gt;getStatus()) { print &quot;\\n Update Datasource...\\n&quot;; $datasource = json_decode($response-&gt;getBody()); } else { print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase(); $BbRestException = json_decode($response-&gt;getBody()); var_dump($BbRestException); } } catch (HTTP_Request2_Exception $e) { print 'Error: ' . $e-&gt;getMessage(); } return $datasource; }  Delete  public function deleteDatasource($access_token, $dsk_id) { $constants = new Constants(); $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;DSK_PATH . '/' . $dsk_id, HTTP_Request2::METHOD_DELETE); $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token); $request-&gt;setHeader('Content-Type', 'application/json'); try { $response = $request-&gt;send(); if (204 == $response-&gt;getStatus()) { print &quot;Datasource Deleted&quot;; } else { print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase(); $BbRestException = json_decode($response-&gt;getBody()); var_dump($BbRestException); return FALSE; } } catch (HTTP_Request2_Exception $e) { print 'Error: ' . $e-&gt;getMessage(); return FALSE; } return TRUE; }  ","version":null,"tagName":"h3"},{"title":"Terms​","type":1,"pageTitle":"Demo using PHP","url":"/docs/blackboard/rest-apis/demo-code/php-demo#terms","content":"Terms are handled in classes/Rest.class.php. Create  public function createTerm($access_token, $dsk_id) { $constants = new Constants(); $term = new Term(); $term-&gt;dataSourceId = $dsk_id; $term-&gt;availability = new Availability(); $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;TERM_PATH, HTTP_Request2::METHOD_POST); $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token); $request-&gt;setHeader('Content-Type', 'application/json'); $request-&gt;setBody(json_encode($term)); try { $response = $request-&gt;send(); if (201 == $response-&gt;getStatus()) { print &quot;\\n Create Term...\\n&quot;; $term = json_decode($response-&gt;getBody()); } else { print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase(); $BbRestException = json_decode($response-&gt;getBody()); var_dump($BbRestException); } } catch (HTTP_Request2_Exception $e) { print 'Error: ' . $e-&gt;getMessage(); } return $term; }  Read  public function readTerm($access_token, $term_id) { $constants = new Constants(); $term = new Term(); $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;TERM_PATH . '/' . $term_id, HTTP_Request2::METHOD_GET); $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token); try { $response = $request-&gt;send(); if (200 == $response-&gt;getStatus()) { print &quot;\\n Read Term...\\n&quot;; $datasource = json_decode($response-&gt;getBody()); } else { print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase(); $BbRestException = json_decode($response-&gt;getBody()); var_dump($BbRestException); } } catch (HTTP_Request2_Exception $e) { print 'Error: ' . $e-&gt;getMessage(); } return $term; }  Update  public function updateTerm($access_token, $dsk_id, $term_id) { $constants = new Constants(); $term = new Term(); $term-&gt;id = $term_id; $term-&gt;dataSourceId = $dsk_id; $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;TERM_PATH . '/' . $term_id, 'PATCH'); $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token); $request-&gt;setHeader('Content-Type', 'application/json'); $request-&gt;setBody(json_encode($term)); try { $response = $request-&gt;send(); if (200 == $response-&gt;getStatus()) { print &quot;\\n Update Term...\\n&quot;; $datasource = json_decode($response-&gt;getBody()); } else { print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase(); $BbRestException = json_decode($response-&gt;getBody()); var_dump($BbRestException); } } catch (HTTP_Request2_Exception $e) { print 'Error: ' . $e-&gt;getMessage(); } return $term; }  Delete  public function deleteTerm($access_token, $term_id) { $constants = new Constants(); $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;TERM_PATH . '/' . $term_id, HTTP_Request2::METHOD_DELETE); $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token); $request-&gt;setHeader('Content-Type', 'application/json'); try { $response = $request-&gt;send(); if (204 == $response-&gt;getStatus()) { print &quot;Term Deleted&quot;; } else { print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase(); $BbRestException = json_decode($response-&gt;getBody()); var_dump($BbRestException); return FALSE; } } catch (HTTP_Request2_Exception $e) { print 'Error: ' . $e-&gt;getMessage(); return FALSE; } return TRUE; }  ","version":null,"tagName":"h3"},{"title":"Course​","type":1,"pageTitle":"Demo using PHP","url":"/docs/blackboard/rest-apis/demo-code/php-demo#course","content":"Courses are handled in classes/Rest.class.php. Create  public function createCourse($access_token, $dsk_id, $term_id) { $constants = new Constants(); $course = new Course(); $course-&gt;dataSourceId = $dsk_id; $course-&gt;termId = $term_id; $course-&gt;availability = new Availability(); $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;COURSE_PATH, HTTP_Request2::METHOD_POST); $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token); $request-&gt;setHeader('Content-Type', 'application/json'); $request-&gt;setBody(json_encode($course)); try { $response = $request-&gt;send(); if (201 == $response-&gt;getStatus()) { print &quot;\\n Create Course...\\n&quot;; $course = json_decode($response-&gt;getBody()); } else { print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase(); $BbRestException = json_decode($response-&gt;getBody()); var_dump($BbRestException); } } catch (HTTP_Request2_Exception $e) { print 'Error: ' . $e-&gt;getMessage(); } return $course; }  Read  public function readCourse($access_token, $course_id) { $constants = new Constants(); $course = new Course(); $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;COURSE_PATH . '/' . $course_id, HTTP_Request2::METHOD_GET); $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token); try { $response = $request-&gt;send(); if (200 == $response-&gt;getStatus()) { print &quot;\\n Read Course...\\n&quot;; $course = json_decode($response-&gt;getBody()); } else { print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase(); $BbRestException = json_decode($response-&gt;getBody()); var_dump($BbRestException); } } catch (HTTP_Request2_Exception $e) { print 'Error: ' . $e-&gt;getMessage(); } return $course; }  Update  public function updateCourse($access_token, $dsk_id, $course_id, $course_uuid, $course_created) { $constants = new Constants(); $course = new Course(); $course-&gt;id = $course_id; $course-&gt;uuid = $course_uuid; $course-&gt;created = $course_created; $course-&gt;dataSourceId = $dsk_id; $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;COURSE_PATH . '/' . $course_id, 'PATCH'); $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token); $request-&gt;setHeader('Content-Type', 'application/json'); $request-&gt;setBody(json_encode($course)); try { $response = $request-&gt;send(); if (200 == $response-&gt;getStatus()) { print &quot;\\n Update Course...\\n&quot;; $course = json_decode($response-&gt;getBody()); } else { print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase(); $BbRestException = json_decode($response-&gt;getBody()); var_dump($BbRestException); } } catch (HTTP_Request2_Exception $e) { print 'Error: ' . $e-&gt;getMessage(); } return $course; }  Delete  public function deleteCourse($access_token, $course_id) { $constants = new Constants(); $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;COURSE_PATH . '/' . $course_id, HTTP_Request2::METHOD_DELETE); $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token); $request-&gt;setHeader('Content-Type', 'application/json'); try { $response = $request-&gt;send(); if (204 == $response-&gt;getStatus()) { print &quot;Course Deleted&quot;; } else { print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase(); $BbRestException = json_decode($response-&gt;getBody()); var_dump($BbRestException); return FALSE; } } catch (HTTP_Request2_Exception $e) { print 'Error: ' . $e-&gt;getMessage(); return FALSE; } return TRUE; }  ","version":null,"tagName":"h3"},{"title":"Users​","type":1,"pageTitle":"Demo using PHP","url":"/docs/blackboard/rest-apis/demo-code/php-demo#users","content":"Users are handled in classes/Rest.class.php. Create  public function createUser($access_token, $dsk_id) { $constants = new Constants(); $user = new User(); $user-&gt;dataSourceId = $dsk_id; $user-&gt;availability = new Availability(); $user-&gt;name = new Name(); $user-&gt;contact = new Contact(); $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;USER_PATH, HTTP_Request2::METHOD_POST); $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token); $request-&gt;setHeader('Content-Type', 'application/json'); $request-&gt;setBody(json_encode($user)); try { $response = $request-&gt;send(); if (201 == $response-&gt;getStatus()) { print &quot;\\n Create User...\\n&quot;; $user = json_decode($response-&gt;getBody()); } else { print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase(); $BbRestException = json_decode($response-&gt;getBody()); var_dump($BbRestException); } } catch (HTTP_Request2_Exception $e) { print 'Error: ' . $e-&gt;getMessage(); } return $user; }  Read  public function readUser($access_token, $user_id) { $constants = new Constants(); $user = new User(); $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;USER_PATH . '/' . $user_id, HTTP_Request2::METHOD_GET); $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token); try { $response = $request-&gt;send(); if (200 == $response-&gt;getStatus()) { print &quot;\\n Read User...\\n&quot;; $user = json_decode($response-&gt;getBody()); } else { print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase(); $BbRestException = json_decode($response-&gt;getBody()); var_dump($BbRestException); } } catch (HTTP_Request2_Exception $e) { print 'Error: ' . $e-&gt;getMessage(); } return $user; }  Update  public function updateUser($access_token, $dsk_id, $user_id, $user_uuid, $user_created) { $constants = new Constants(); $user = new User(); $user-&gt;id = $user_id; $user-&gt;uuid = $user_uuid; $user-&gt;created = $user_created; $user-&gt;dataSourceId = $dsk_id; $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;USER_PATH . '/' . $user_id, 'PATCH'); $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token); $request-&gt;setHeader('Content-Type', 'application/json'); $request-&gt;setBody(json_encode($user)); try { $response = $request-&gt;send(); if (200 == $response-&gt;getStatus()) { print &quot;\\n Update User...\\n&quot;; $user = json_decode($response-&gt;getBody()); } else { print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase(); $BbRestException = json_decode($response-&gt;getBody()); var_dump($BbRestException); } } catch (HTTP_Request2_Exception $e) { print 'Error: ' . $e-&gt;getMessage(); } return $user; }  Delete  public function deleteUser($access_token, $user_id) { $constants = new Constants(); $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;USER_PATH . '/' . $user_id, HTTP_Request2::METHOD_DELETE); $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token); $request-&gt;setHeader('Content-Type', 'application/json'); try { $response = $request-&gt;send(); if (204 == $response-&gt;getStatus()) { print &quot;User Deleted&quot;; } else { print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase(); $BbRestException = json_decode($response-&gt;getBody()); var_dump($BbRestException); return FALSE; } } catch (HTTP_Request2_Exception $e) { print 'Error: ' . $e-&gt;getMessage(); return FALSE; } return TRUE; }  ","version":null,"tagName":"h3"},{"title":"Memberships​","type":1,"pageTitle":"Demo using PHP","url":"/docs/blackboard/rest-apis/demo-code/php-demo#memberships","content":"Memberships are handled in classes/Rest.class.php. Create  public function createMembership($access_token, $dsk_id, $course_id, $user_id) { $constants = new Constants(); $membership = new Membership(); $membership-&gt;dataSourceId = $dsk_id; $membership-&gt;availability = new Availability(); $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;COURSE_PATH . '/' . $course_id . '/users/' . $user_id, HTTP_Request2::METHOD_PUT); $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token); $request-&gt;setHeader('Content-Type', 'application/json'); $request-&gt;setBody(json_encode($membership)); try { $response = $request-&gt;send(); if (201 == $response-&gt;getStatus()) { print &quot;\\n Create Membership...\\n&quot;; $membership = json_decode($response-&gt;getBody()); } else { print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase(); $BbRestException = json_decode($response-&gt;getBody()); var_dump($BbRestException); } } catch (HTTP_Request2_Exception $e) { print 'Error: ' . $e-&gt;getMessage(); } return $membership; }  Read  public function readMembership($access_token, $course_id, $user_id) { $constants = new Constants(); $membership = new Membership(); $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;COURSE_PATH . '/' . $course_id . '/users/' . $user_id, HTTP_Request2::METHOD_GET); $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token); try { $response = $request-&gt;send(); if (200 == $response-&gt;getStatus()) { print &quot;\\n Read Membership...\\n&quot;; $membership = json_decode($response-&gt;getBody()); } else { print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase(); $BbRestException = json_decode($response-&gt;getBody()); var_dump($BbRestException); } } catch (HTTP_Request2_Exception $e) { print 'Error: ' . $e-&gt;getMessage(); } return $membership; }  Update  public function updateMembership($access_token, $dsk_id, $course_id, $user_id, $membership_created) { $constants = new Constants(); $membership = new Membership(); $membership-&gt;dataSourceId = $dsk_id; $membership-&gt;userId = $user_id; $membership-&gt;courseId = $course_id; $membership-&gt;created = $membership_created; $membership-&gt;availability = new Availability(); $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;COURSE_PATH . '/' . $course_id . '/users/' . $user_id, 'PATCH'); $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token); $request-&gt;setHeader('Content-Type', 'application/json'); $request-&gt;setBody(json_encode($membership)); try { $response = $request-&gt;send(); if (200 == $response-&gt;getStatus()) { print &quot;\\n Update Membership...\\n&quot;; $membership = json_decode($response-&gt;getBody()); } else { print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase(); $BbRestException = json_decode($response-&gt;getBody()); var_dump($BbRestException); } } catch (HTTP_Request2_Exception $e) { print 'Error: ' . $e-&gt;getMessage(); } return $membership; }  Delete  public function deleteMembership($access_token, $course_id, $user_id) { $constants = new Constants(); $request = new HTTP_Request2($constants-&gt;HOSTNAME . $constants-&gt;COURSE_PATH . '/' . $course_id . '/users/' . $user_id, HTTP_Request2::METHOD_DELETE); $request-&gt;setHeader('Authorization', 'Bearer ' . $access_token); $request-&gt;setHeader('Content-Type', 'application/json'); try { $response = $request-&gt;send(); if (204 == $response-&gt;getStatus()) { print &quot;Membership Deleted&quot;; } else { print 'Unexpected HTTP status: ' . $response-&gt;getStatus() . ' ' . $response-&gt;getReasonPhrase(); $BbRestException = json_decode($response-&gt;getBody()); var_dump($BbRestException); return FALSE; } } catch (HTTP_Request2_Exception $e) { print 'Error: ' . $e-&gt;getMessage(); return FALSE; } return TRUE; }  ","version":null,"tagName":"h3"},{"title":"Conclusion​","type":1,"pageTitle":"Demo using PHP","url":"/docs/blackboard/rest-apis/demo-code/php-demo#conclusion","content":"All of the code snippets included in this document at included in a sample REST Demo PHP application available onGitHub. There is a README.html included that talks more specifically about building and running the code. Feel free to review the code and run it against a test or development Learn instance to see how it works. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Three-Legged OAuth","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/getting-started/3lo","content":"","keywords":"","version":null},{"title":"Refresh Tokens​","type":1,"pageTitle":"Three-Legged OAuth","url":"/docs/blackboard/rest-apis/getting-started/3lo#refresh-tokens","content":"As mentioned above, one of the available scopes that an application can request is offline. Essentially, the offline scope allows an application to access Learn as a user without requiring the user to login each time. This might be especially useful in a mobile application to prevent the unnecessary redirects each time an application is loaded. The way this works is through the use of refresh tokens. The first time a user accesses the application and the normal 3LO process takes place. The user is redirected to Learn, they login and authorize, and then the application is off an running. The difference is that a refresh token is returned in addition to the Bearer token. From this point forward, the third party application can automatically request a new bearer token by sending the request with the refresh token without involving the user at all. The HTTP message might look like this: POST /learn/api/public/v1/oauth2/token?refresh_token=8DBBA050-B830-414F-B7F1-0B448A6320C9&amp;redirect_uri=https://my.edu/app  From this point forward, the access_token is used just as it is when using Basic Authentication, but instead of acting as the system user, it is acting as Marlee. ","version":null,"tagName":"h3"},{"title":"Use Proof Key for Code Exchange (PKCE) with 3-Legged OAuth 2.0​","type":1,"pageTitle":"Three-Legged OAuth","url":"/docs/blackboard/rest-apis/getting-started/3lo#use-proof-key-for-code-exchange-pkce-with-3-legged-oauth-20","content":"Starting in version 3700.4, Learn's 3-Legged OAuth 2.0 implementation supports the Proof Key for Code Exchange (PKCE) extension. For more information about PKCE, see OAuth 2.0's RFC 7636: Proof Key for Code Exchange. To implement the PKCE extension: Create a random string 43-128 characters long, containing only the characters A-Z, a-z, 0-9, or the following - . _ ~ (hyphen, period, underscore, and tilde). This sting will later be used as your code_verifier. Use the S256 hashing method to create a hash of your random string. This hash is your code_challenge. The formula for an S256 hash is based on the SHA-256, but is not exactly the same. code_challenge = BASE64URL_ENCODE( SHA256( ASCII( code_verifier ))) For more information about the S256 hashing algorithm, see RFC 7636 - Proof Key for Code Exchange by OAuth Public Clients. Make a request to /learn/api/public/v1/oauth2/authorizationcode, and provide a code_challenge and code_challenge_method in the query parameters. For code_challenge_method, the endpoint accepts only S256. Your request will look something like: POST learn/api/public/v1/oauth2/authorizationcode?client_id=YOUR_CLIENT_ID&amp;response_type=code&amp;redirect_url=YOUR_URL&amp;code_challenge=YOUR_CODE_CHALLENGE&amp;code_challenge_method=S256  Make a request for an access token, as normal. When you do, include your code_verifier as a query parameter. Your request will look like: POST learn/api/public/v1/oauth2/token?grant_type=authorization_code&amp;code=CODE_FROM_AUTH_CALL&amp;code_verifier=YOUR_CODE_VERIFIER  The Learn server will verify that the code_challenge and code_challenge_method sent in the first request form a valid hash of code_verifier. This allows to the server to verify that the client asking for the access token is the same client that sent the authorization code request. When you receive an access token, you can use it as you normally would to make API calls. ","version":null,"tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Three-Legged OAuth","url":"/docs/blackboard/rest-apis/getting-started/3lo#examples","content":"Three-legged OAuth in CurlBBDN-3LO-REST-Swift Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Tutorial - Build a Java Command Line REST Application","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/demo-code/java-command-line","content":"","keywords":"","version":null},{"title":"About the Project​","type":1,"pageTitle":"Tutorial - Build a Java Command Line REST Application","url":"/docs/blackboard/rest-apis/demo-code/java-command-line#about-the-project","content":"This project is built on Java 11, in Spring Tool Suite (an Eclipse derivative), and uses Gradle and Maven to build and install dependencies. In addition, Gradle is using the 'Application' plugin, which allows us to build and run the command line java application with one simple Gradle command -- gradle run. Architecturally, this sample relies on the RestTemplate object offered by the Spring Framework for all REST communication. The method or library you choose for your application is very much a personal preference. Internally at Anthology, this is the preferred method, and therefore, the method chosen for this workshop. The project contains a base 'Hello Developers' application that contains all of the supporting code to get started. The code can all be found in the src/main/java directory in two base packages, bbdn.unsecurity and bbdn.rest. There are also four top-level folders containing the code we will need to implement each step of the tutorial. Let's break down the base files: File\tPackage\tDescriptionRestConstants.java\tbbdn.rest\tThis class contains Constant values for running the code. RestDemo.java\tbbdn.rest\tThis class is the main class for the project. We will discuss other classes as we move them into place, but this is the only file we will modify. UnSecurityUtil.java\tbbdn.unsecurity\tThis class allows us to create a RestTemplate object based on whether we are testing on the DVM or in an environment with a valid SSL certificate.  ","version":null,"tagName":"h2"},{"title":"RestConstants​","type":1,"pageTitle":"Tutorial - Build a Java Command Line REST Application","url":"/docs/blackboard/rest-apis/demo-code/java-command-line#restconstants","content":"The RestConstants.java file takes the Data I/O requirements out of the sample code, allowing the code to focus on the REST API interactions. In a real-world application, this data would be taken from configuration files or tables and UI forms and user input.  package bbdn.rest; public abstract class RestConstants { public final static String HOSTNAME = &quot;http://localhost:9876&quot;; public final static String KEY = &quot;&quot;; public final static String SECRET = &quot;&quot;; public final static String AUTH_PATH = &quot;/learn/api/public/v1/oauth2/token&quot;; public final static String DATASOURCE_PATH = &quot;/learn/api/public/v1/dataSources&quot;; public final static String DATASOURCE_ID = &quot;BBDN-DSK-JAVA&quot;; public final static String DATASOURCE_DESCRIPTION = &quot;Demo Data Source used for REST Java Demo&quot;; public final static String TERM_PATH = &quot;/learn/api/public/v1/terms&quot;; public final static String TERM_ID = &quot;BBDN-TERM-JAVA&quot;; public final static String TERM_NAME = &quot;REST Demo Term - Java&quot;; public final static String TERM_RAW = &quot;Term Used For REST Demo - Java&quot;; public final static String TERM_DISPLAY = &quot;Term Used For REST Demo - Java&quot;; public final static String COURSE_PATH = &quot;/learn/api/public/v1/courses&quot;; public final static String COURSE_ID = &quot;BBDN-Java-REST-Demo&quot;; public final static String COURSE_NAME = &quot;Course Used For REST Demo - Java&quot;; public final static String COURSE_DESCRIPTION = &quot;Course Used For REST Demo - Java&quot;; public final static String USER_PATH = &quot;/learn/api/public/v1/users&quot;; public final static String USER_ID = &quot;bbdnrestdemojavauser&quot;; public final static String USER_NAME = &quot;restjavauser&quot;; public final static String USER_PASS = &quot;Bl@ckb0ard!&quot;; public final static String USER_FIRST = &quot;Java&quot;; public final static String USER_LAST = &quot;Restdemo&quot;; public final static String USER_EMAIL = &quot;developers@anthology.com&quot;; }  ","version":null,"tagName":"h3"},{"title":"RestDemo​","type":1,"pageTitle":"Tutorial - Build a Java Command Line REST Application","url":"/docs/blackboard/rest-apis/demo-code/java-command-line#restdemo","content":"This is the heart of the application. This contains the main processing loop that performs all of the functions that we want to perform. We will review the other classes as we progress through the tutorial, but the code we will write lives in this file.  package bbdn.rest; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class RestDemo { private static final Logger log = LoggerFactory.getLogger(RestDemo.class); public static boolean DEVMODE = false; public static void main(String[] args) { boolean OPER_ALL = false; boolean OPER_DATASOURCE = false; boolean OPER_TERM = false; boolean OPER_COURSE = false; boolean OPER_USER = false; boolean OPER_MEMBERSHIP = false; boolean OPER_CONTENT = false; boolean OPER_GRADES = false; String _hostname = RestConstants.HOSTNAME; int operCount = 0; boolean nextCommand = false; int uriCount = 0; boolean nextUri = false; if(args.length &gt; 0) { for(int i = 0; i &lt; args.length; i++ ) { log.info(&quot;args[&quot; + i + &quot;]: &quot; + args[i]); if (nextCommand) { switch(args[i]) { case &quot;datasource&quot;: OPER_DATASOURCE = true; break; case &quot;term&quot;: OPER_TERM = true; break; case &quot;course&quot;: OPER_COURSE = true; break; case &quot;user&quot;: OPER_USER = true; break; case &quot;membership&quot;: OPER_MEMBERSHIP = true; break; case &quot;content&quot;: OPER_CONTENT = true; break; case &quot;grades&quot;: OPER_GRADES = true; break; case &quot;all&quot;: default: OPER_ALL = true; } nextCommand = false; } if(nextUri) { _hostname = args[i]; nextUri = false; } if (args[i].equalsIgnoreCase(&quot;-c&quot;)) { nextCommand = true; operCount += 1; } else if (args[i].equalsIgnoreCase(&quot;-t&quot;)) { nextUri = true; uriCount += 1; } else if (args[i].equalsIgnoreCase(&quot;-d&quot;)) { DEVMODE = true; } } if(operCount == 0) { OPER_ALL = true; } log.info(&quot; OPER_ALL: &quot; + OPER_ALL + &quot; OPER_DATASOURCE: &quot; + OPER_DATASOURCE + &quot; OPER_TERM: &quot; + OPER_TERM + &quot; OPER_COURSE: &quot; + OPER_COURSE + &quot; OPER_USER: &quot; + OPER_USER + &quot; OPER_MEMBERSHIP: &quot; + OPER_MEMBERSHIP + &quot; OPER_CONTENT: &quot; + OPER_CONTENT + &quot; OPER_GRADES: &quot; + OPER_GRADES + &quot; HOSTNAME: &quot; + _hostname + &quot; operCount: &quot; + operCount + &quot;uriCount: &quot; + uriCount); } else { OPER_ALL = true; } log.info(&quot;Hello REST Workshop Participant!!!&quot;); } }  ","version":null,"tagName":"h3"},{"title":"UnSecurityUtil​","type":1,"pageTitle":"Tutorial - Build a Java Command Line REST Application","url":"/docs/blackboard/rest-apis/demo-code/java-command-line#unsecurityutil","content":"The unSecurityUtil class allows us to bypass SSL Certificate checking when the -d flag is passed at the command line. This is useful in test environments and specifically on the Developer Virtual Machine where the SSL certificate is self-signed and therefore untrusted by Java. package bbdn.unsecurity; import java.security.KeyManagementException; import java.security.KeyStoreException; import java.security.NoSuchAlgorithmException; import java.security.cert.X509Certificate; import javax.net.ssl.SSLContext; import org.apache.http.conn.ssl.SSLConnectionSocketFactory; import org.apache.http.conn.ssl.TrustStrategy; import org.apache.http.impl.client.CloseableHttpClient; import org.apache.http.impl.client.HttpClients; import org.springframework.http.HttpStatus; import org.springframework.http.client.HttpComponentsClientHttpRequestFactory; import org.springframework.web.client.DefaultResponseErrorHandler; import org.springframework.web.client.RestTemplate; import bbdn.rest.RestDemo; public abstract class UnSecurityUtil { public static RestTemplate getRestTemplate() throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException { // Workaround to allow for PATCH requests HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(); if(RestDemo.DEVMODE) { TrustStrategy acceptingTrustStrategy = (X509Certificate[] chain, String authType) -&gt; true; SSLContext sslContext = org.apache.http.ssl.SSLContexts.custom() .loadTrustMaterial(null, acceptingTrustStrategy) .build(); SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext); CloseableHttpClient httpClient = HttpClients.custom() .setSSLSocketFactory(csf) .build(); requestFactory.setHttpClient(httpClient); } RestTemplate restTemplate = new RestTemplate(requestFactory); // Workaround for allowing unsuccessful HTTP Errors to still print to the screen restTemplate.setErrorHandler(new DefaultResponseErrorHandler(){ protected boolean hasError(HttpStatus statusCode) { return false; }}); return(restTemplate); } }  ","version":null,"tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Tutorial - Build a Java Command Line REST Application","url":"/docs/blackboard/rest-apis/demo-code/java-command-line#usage","content":"The first step is to modify the RestConstants.java file to include your shared key and secret, and, if not using the Developer Virtual Machine, modify hostname to your primary test environment. Then simply open the command line, navigate to the directory containing the project, and type gradle run. If you do not have Gradle installed, you can use ./gradlew run instead. This will install gradle in your project directory. In addition, the experience can by customized at the command line by specifying command line arguments to be passed to the java application. The syntax for this is gradle run -Dexec.args=&quot;&quot;. The arguments would appear just as they would if typing them directly to the java executable, space- delimited. For example, to run in Devmode, you would type gradle run -Dexec.args=&quot;-d&quot;. The following table lists the available command line arguments. They can be combined. Arg\tDescription\tExample-t\tSpecify the target URL. This will override the HOSTNAME constant specified in RestConstants.\tgradle run -Dexec.args=&quot;-t https://localhost:9877 -d\tTurn on DevMode. DevMode tells the sample application to ignore certificate errors. Useful when testing on the DVM or against a test/dev server with a self-signed certificate.\tgradle run -Dexec.args=&quot;-d&quot; -c\tDenote a specific object to exercise. Added for example, but not well implemented as each object relies on the previous object to be created and available.\tgradle run -Dexec.args=&quot;-c datasource&quot; Available commands are: datasourcetermcourseusermembershipcontent *Not Yet Implementedgrades *Not Yet Implementedall ","version":null,"tagName":"h2"},{"title":"Step 0: Run Hello Developer​","type":1,"pageTitle":"Tutorial - Build a Java Command Line REST Application","url":"/docs/blackboard/rest-apis/demo-code/java-command-line#step-0-run-hello-developer","content":"The first step is to simply run the application. You should have already cloned the project to a local directory. Simply open a command line window, navigate to the directory you cloned to and type gradle run. What You Should See​ Command line:  What We Did​ In this step, we simply ran the application to ensure that we had all of our libraries set, that our code ran properly, and that we have gradle installed for our project. ","version":null,"tagName":"h3"},{"title":"Step 1: Authorization​","type":1,"pageTitle":"Tutorial - Build a Java Command Line REST Application","url":"/docs/blackboard/rest-apis/demo-code/java-command-line#step-1-authorization","content":"The key to any REST client application, and generally the biggest hurdle to adoption, is Authorization. There are a number of flavors out there, and the implementation chosen is often both a personal choice by the developer that built the REST API and also a function of the specific requirements and infrastructure around it. For more information regarding Learn's implementation of OAuth2, read the [Basic Authentication](/rest-apis/learn/Getting Started/basic-authentication) in this section. In the &quot;1-Implement-OAuth&quot; folder, you will find three files: Authorizer.java Authorizer is the service handler class. This does the actual work of requesting the token and retrieving the results. Token.java Token is a JSON Model class. This is what we will use to interact with the token we receive from Learn. Authorizer will request the token, and on receipt, will automatically serialize the JSON response into the Token object, allowing the application to simply interact with it as a normal Java object. RestDemo.java The RestDemo class is what our bbdn.rest.RestDemo class will look like when we complete this step in the tutorial. Let's get started: Move /1-Implement-OAuth/Authorizer.java to the bbdn.rest package.Create a new package called bbdn.rest.objects.Move /1-Implement-OAuth/Token.java to the bbdn.rest.objects package.If you want a shortcut, you can copy the /1-Implement-OAuth/RestDemo.java file to the bbdn.rest package, otherwise open bbdn.rest.RestDemo.java and make the following edits: Add an import to the top of your RestDemo to include bbdn.rest.objects space:  import bbdn.rest.objects.*;  Now highlight the log statement that prints our hello developer message and replace it with:  // Obtain Bearer Token Authorizer auth = new Authorizer(); // Instantiate Authorizer class Token token = auth.authorize(); // Authorize application and grab the Token object. log.debug(&quot;token: &quot; + token.toString());  Save the file.At the command line in the project directory, type gradle run and watch as the token is printed to the screen. Review the RestDemo.java in the 1-Implement-OAuth folder to compare to your RestDemo.java if you have issues. What You Should See​ command line:  What We Did​ So in this step of the tutorial, we took our basic &quot;Hello Developer&quot; application and built out the authorization service and object we need for the rest of our application to work properly. We first put our REST Authorization service in place. So with Basic Authentication and OAuth, there is really a few specific things that we need to do. First, we must hash our key and secret into a base64-encoded string. Once we have the utility in place to generate that hash, the first thing to do is build the header. In this application, we are using HttpHeaders. We add the Authorization Header first, in the form of Authorization: Basic &lt;hash&gt;. We then set the content type to form-urlencoded using the HttpHeaders method setContentType. The last thing we need to do is define the applications scope in the form of grant_type. In Learn's case, we only accept client_credentials, so this part is easy. Simply add grant_type=client_credentials in the body of our POST message and POST it to the oauth/token endpoint. The next step was to put ourToken object in place. This object is configured to allow the Jackson library to automatically serialize and deserialize our JSON payloads. It provides three basic properties that correspond directly to the JSON payload we expect to receive from Learn when we request a token: access_token, token_type, and expires_in. Once we have created and populated this object, we can then access this data whenever we need to. Lastly, we updated our main class in order to call the authorize method and retrieve the token. ","version":null,"tagName":"h3"},{"title":"Step 2: Datasources​","type":1,"pageTitle":"Tutorial - Build a Java Command Line REST Application","url":"/docs/blackboard/rest-apis/demo-code/java-command-line#step-2-datasources","content":"The first -- and easiest -- object to interact with is the Datasource object. It is a rudimentary object with only a few properties that need to be manipulated. It is also a very important object, as most other objects allow you to specify a datasource, which allows you to associate all of the data you create together and to your application. In the &quot;2-Implement-Datasource&quot; folder, you will find three files: [DatasourceHandler.java](https://github.com/blackboard/BBDN-DevCon-REST-Workshop/blob/master/2-Implement-Datasource/DatasourceHandler.java) DatasourceHandler is the service handler class. This does the actual work of building and processing HTTP requests and handling the incoming responses. [Datasource.java](https://github.com/blackboard/BBDN-DevCon-REST-Workshop/blob/master/2-Implement-Datasource/Datasource.java) Datasource is a JSON Model class. This is what we will use to create datasources and to retrieve datasources from the REST responses we receive from Learn. DatasourceHandler will automatically handle the serialization and deserialization of the datasource object, allowing the application to simply interact with it as a normal Java object. [RestDemo.java](https://github.com/blackboard/BBDN-DevCon-REST-Workshop/blob/master/2-Implement-Datasource/RestDemo.java). The RestDemo class is what our bbdn.rest.RestDemo class will look like when we complete this step in the tutorial. Let's get started: Move /2-Implement-Datasource/Datasource.java to the bbdn.rest.objects package.Create a new package called bbdn.rest.services.Move /2-Implement-Datasource/DatasourceHandler.java to the bbdn.rest.services package.If you want a shortcut, you can copy the /2-Implement-Datasource/RestDemo.java file to the bbdn.rest package, otherwise open bbdn.rest.RestDemo.java and make the following edits: Add an import to the top of your RestDemo to include the bbdn.rest.services space:  import bbdn.rest.services.*;  Directly above the Authorizer instantiation, add the following code:  // Declare Datasource Datasource ds = null; // Declare Result to receive Delete response boolean result = false; // Initialize Handlers DatasourceHandler datasourceHandler = new DatasourceHandler(_hostname);  Directly below the log statement that writes the token information to the screen, add the following code:  // Datasource object if( OPER_ALL || OPER_DATASOURCE) { ds = datasourceHandler.createObject(token.getToken()); log.debug(&quot;Create DS: &quot; + ds.toString()); ds = datasourceHandler.readObject(token.getToken()); log.debug(&quot;Read DS: &quot; + ds.toString()); ds = datasourceHandler.updateObject(token.getToken()); log.debug(&quot;Update DS: &quot; + ds.toString()); } if( OPER_ALL || OPER_DATASOURCE) { result = datasourceHandler.deleteObject(token.getToken()); log.debug(&quot;Delete DS: &quot; + result); }  Save the file.At the command line in the project directory, type gradle run (or ./gradlew run) and watch as the token is printed to the screen. Review the [RestDemo.java](https://github.com/blackboard/BBDN-DevCon-REST-Workshop/blob/master/2-Implement-Datasource/RestDemo.java) in the 2-Implement-Datasource folder to compare to your RestDemo.java if you have issues. What You Should See​ For Read:  For Update:  For Delete:  What We Did​ So in this step of the tutorial, we added the code necessary to create, read, update, and delete a datasource. The first step was to put our Datasource object in place. This object is configured to allow the Jackson library to automatically serialize and deserialize our JSON payloads. It provides three basic properties that correspond directly to the JSON payload we expect to receive from Learn when we manipulate a datasource: id, name, and description. Once we have created and populated this object, we can then access this data whenever we need to. Next we implemented our DatasourceHandler service class. This class handles the REST calls, all object generation and retrieval, and passing information back to our main class. When the class is initialized, we set up logging and make sure the handler has the correct hostname. Each operation has its own method that generates the appropriate body if necessary, then passes the necessary data to the sendRequest method to send the appropriate message and retrieve the appropriate response. Lastly, we updated our [main class](https://github.com/blackboard/BBDN-DevCon-REST-Workshop/blob/master/1-Implement-OAuth/RestDemo.java) in order to call the appropriate methods to interact with the Datasource Service class. ","version":null,"tagName":"h3"},{"title":"Step 3: Terms​","type":1,"pageTitle":"Tutorial - Build a Java Command Line REST Application","url":"/docs/blackboard/rest-apis/demo-code/java-command-line#step-3-terms","content":"For the third step in our tutorial we will implement the Term object. As with Datasources, Terms are also complimentary objects to other operations. At the conclusion on this tutorial, we will be setting this Term when we implement both courses and memberships. It is also the first in a more complex set of Model objects in that the base Term object requires a secondary Availability object to properly create and manipulate a Term. In the &quot;3-Implement-Term&quot; folder, you will find four files: TermHandler.java TermHandler is the service handler class. This does the actual work of building and processing HTTP requests and handling the incoming responses. Term.java Term is a JSON Model class. This is what we will use to create terms and to retrieve terms from the REST responses we receive from Learn. TermHandler will automatically handle the serialization and deserialization of the term object, allowing the application to simply interact with it as a normal Java object. Availability.java Availability is also a model class. This class contains one field, &quot;available,&quot; which will be set to yes or now. This class is only called from within the Term class, and this is what allows Jackson to handle the serialization and deserialization of complex nested objects. RestDemo.java The RestDemo class is what our bbdn.rest.RestDemo class will look like when we complete this step in the tutorial. Let's get started: Move /3-Implement-Term/TermHandler.java to the bbdn.rest.services package.Move /3-Implement-Term/Term.java to the bbdn.rest.objects package.Move /3-Implement-Term/Availability.java to the bbdn.rest.objects package.If you want a shortcut, you can copy the /3-Implement-Term/RestDemo.java file to the bbdn.rest package, otherwise open bbdn.rest.RestDemo.java and make the following edits: Directly below Datasource ds = null;, add:  Term tm = null;  Directly below DatasourceHandler datasourceHandler = new DatasourceHandler(_hostname);, add:  TermHandler termHandler = new TermHandler(_hostname);  Between the closing curly bracket for the first if( OPER_ALL || OPER_DATASOURCE) { and the start of the second, add:  // Term object if( OPER_ALL || OPER_TERM) { tm = termHandler.createObject(token.getToken(), ds.getId()); log.debug(&quot;Create TM: &quot; + tm.toString()); tm = termHandler.readObject(token.getToken()); log.debug(&quot;Read TM: &quot; + tm.toString()); tm = termHandler.updateObject(token.getToken(), ds.getId()); log.debug(&quot;Update TM: &quot; + tm.toString()); } // Delete objects if( OPER_ALL || OPER_TERM) { result = termHandler.deleteObject(token.getToken()); log.debug(&quot;Delete TM: &quot; + result); }  Save the file.At the command line in the project directory, type gradle run (or ./gradlew run) and watch as the token is printed to the screen. Review the RestDemo.java in the 3-Implementing-Term folder to compare to your RestDemo.java if you have issues. What You Should See​ For Create:  For Read:  For Update:  For Delete:  What We Did​ So in this step of the tutorial, we added the code necessary to create, read, update, and delete a term. The first step was to put our Term object in place, along with its companion Availability object. This object is actually re-used by other classes we will implement in the final step. These objects are configured to allow the Jackson library to automatically serialize and deserialize our JSON payloads. It provides the basic properties that correspond directly to the JSON payload we expect to receive from Learn when we manipulate a term. Once we have created and populated this object, we can then access this data whenever we need to. Next we implemented our TermHandler service class. This class handles the REST calls, all object generation and retrieval, and passing information back to our main class. When the class is initialized, we set up logging and make sure the handler has the correct hostname. Each operation has its own method that generates the appropriate body if necessary, then passes the necessary data to the sendRequest method to send the appropriate message and retrieve the appropriate response. Lastly, we updated our main class in order to call the appropriate methods to interact with the Term Service class. ","version":null,"tagName":"h3"},{"title":"Step 4: Remaining Objects​","type":1,"pageTitle":"Tutorial - Build a Java Command Line REST Application","url":"/docs/blackboard/rest-apis/demo-code/java-command-line#step-4-remaining-objects","content":"The remainder of the tutorial is really just about moving the remaining objects and handlers in place and repeating the previously established pattern in the RestDemo class. In the &quot;4-Implement-Remaining-Objects&quot; folder, you will find a plethora of files. You will also notice a familiar pattern: &lt;Object&gt;Handler classes are the service handler classes for their respective objects. As before, these do the actual work of manipulating objects and retrieving the results.Classes named after objects are JSON Model classes. These are what we will use to interact with the JSON we receive from Learn. The handler classes will handle the REST API interaction, and automatically serialize and deserialize the JSON payloads into the corresponding object, allowing the application to simply interact with it as a normal Java object.Several of these model classes are nested objects for other base classes.The RestDemo class is what our bbdn.rest.RestDemo class will look like when we complete this step in the tutorial. Let's get started: Move /4-Implement-Remaining-Objects/CourseHandler.java to the bbdn.rest.services package.Move /4-Implement-Remaining-Objects/UserHandler.java to the bbdn.rest.services package.Move /4-Implement-Remaining-Objects/MembershipHandler.java to the bbdn.rest.services package.Move /4-Implement-Remaining-Objects/Course.java to the bbdn.rest.objects package.Move /4-Implement-Remaining-Objects/User.java to the bbdn.rest.objects package.Move /4-Implement-Remaining-Objects/Membership.java to the bbdn.rest.objects package.Move /4-Implement-Remaining-Objects/Contact.java to the bbdn.rest.objects package.Move /4-Implement-Remaining-Objects/Name.java to the bbdn.rest.objects package.Move /4-Implement-Remaining-Objects/RestDemo.java to the bbdn.rest package.At the command line in the project directory, type gradle run (or ./gradlew run) and watch as the token is printed to the screen. Review the RestDemo.java in the 4-Implement-Remaining-Objects folder to compare to your RestDemo.java if you have issues. What You Should See​ Command line: shurreymbp:BBDN-DevCon-REST-Workshop shurrey$ cp 4-Implement-Remaining-Objects/RestDemo.java src/main/java/bbdn/rest/ shurreymbp:BBDN-DevCon-REST-Workshop shurrey$ gradle run :compileJava :processResources UP-TO-DATE :classes :run [main] INFO bbdn.rest.Authorizer - Value to hash: d03caa33-1095-47b9-bc67-f5cd634430b1:QSFClAMu5KmoG8yFbHTi7pjhsseJl4uz [main] INFO bbdn.rest.Authorizer - Hashed Value: ZDAzY2FhMzMtMTA5NS00N2I5LWJjNjctZjVjZDYzNDQzMGIxOlFTRkNsQU11NUttb0c4eUZiSFRpN3BqaHNzZUpsNHV6 [main] INFO bbdn.rest.Authorizer - Request Headers: {Authorization=[Basic ZDAzY2FhMzMtMTA5NS00N2I5LWJjNjctZjVjZDYzNDQzMGIxOlFTRkNsQU11NUttb0c4eUZiSFRpN3BqaHNzZUpsNHV6], Content-Type=[application/x-www-form-urlencoded]} [main] INFO bbdn.rest.Authorizer - Request Body:grant_type=client_credentials [main] INFO bbdn.rest.Authorizer - Response: &lt;200 OK,Token{access_token=uC5G2HvEsI1DWP24xD2lnaG35EQsenZs', token_type=bearer', expires_in=1639},{Server=[Apache-Coyote/1.1], P3P=[CP=&quot;CAO PSA OUR&quot;], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:05 GMT], Expires=[Mon, 27 Jul 2015 19:50:05 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=5457EE8C14E1C940EE662CE047A3DF31; Path=/learn/api],X-Blackboard-Context-Version=[3000.1.1-rel.5+7a1d308], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed,27 Jul 2016 19:50:06 GMT]}&gt; [main] INFO bbdn.rest.Authorizer - Access Token: Token{access_token=uC5G2HvEsI1DWP24xD2lnaG35EQsenZs', token_type=bearer', expires_in=1639} [main] INFO bbdn.rest.services.DatasourceHandler - CREATE [main] INFO bbdn.rest.services.DatasourceHandler - URI is http://localhost:9876/learn/api/public/v1/dataSources [main] INFO bbdn.rest.services.DatasourceHandler - Request Headers:{Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.DatasourceHandler - Request Body: Datasource [id=null, externalId=BBDN-DSK-JAVA, description=Demo Data Source used for REST Java Demo, status=null, code=null, message=null, developerMessage=null,extrainfo=null] [main] INFO bbdn.rest.services.DatasourceHandler - Response: &lt;201 Created,Datasource [id=_13_1, externalId=BBDN-DSK-JAVA, description=Demo Data Source used for REST Java Demo, status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=&quot;CAO PSA OUR&quot;], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:06 GMT], Expires=[Mon, 27 Jul 2015 19:50:06 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=0BEAD73C4DFFC8C01B037883D467B533; Path=/learn/api], Location=[/learn/api/public/v1/dataSources/_13_1],X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed,27 Jul 2016 19:50:06 GMT]}&gt; [main] INFO bbdn.rest.services.DatasourceHandler - Datasource: Datasource [id=_13_1, externalId=BBDN-DSK-JAVA, description=Demo Data Source used for REST Java Demo, status=null, code=null, message=null, developerMessage=null,extrainfo=null] [main] INFO bbdn.rest.services.DatasourceHandler - READ [main] INFO bbdn.rest.services.DatasourceHandler - URI is http://localhost:9876/learn/api/public/v1/dataSources/externalId:BBDN-DSK-JAVA [main] INFO bbdn.rest.services.DatasourceHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.DatasourceHandler - Request Body: Datasource [id=null, externalId=null, description=null, status=null, code=null,message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.DatasourceHandler - Response: &lt;200 OK,Datasource [id=_13_1, externalId=BBDN-DSK-JAVA, description=Demo Data Source used for REST Java Demo, status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1],P3P=[CP=&quot;CAO PSA OUR&quot;], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache],Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:06 GMT], Expires=[Mon, 27 Jul 2015 19:50:06 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=5DDDADB64296A3E350B157B6D44B7B7F;Path=/learn/api], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab],Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked],Date=[Wed, 27 Jul 2016 19:50:06 GMT]}&gt; [main] INFO bbdn.rest.services.DatasourceHandler - Datasource: Datasource [id=_13_1, externalId=BBDN-DSK-JAVA, description=Demo Data Source used for REST Java Demo, status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.DatasourceHandler - UPDATE [main] INFO bbdn.rest.services.DatasourceHandler - URI is http://localhost:9876/learn/api/public/v1/dataSources/externalId:BBDN-DSK-JAVA [main] INFO bbdn.rest.services.DatasourceHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.DatasourceHandler - Request Body: Datasource [id=null, externalId=BBDN-DSK-JAVA, description=Demo Data Source used for REST Java Demo, status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.DatasourceHandler - Response: &lt;200 OK,Datasource [id=_13_1, externalId=BBDN-DSK-JAVA, description=Demo Data Source used for REST Java Demo, status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=&quot;CAO PSA OUR&quot;], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:06 GMT], Expires=[Mon, 27 Jul 2015 19:50:06 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=F8464644EAA806822A7121A3AAEE0531;Path=/learn/api], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab],Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked],Date=[Wed, 27 Jul 2016 19:50:06 GMT]}&gt; [main] INFO bbdn.rest.services.DatasourceHandler - Datasource: Datasource [id=_13_1, externalId=BBDN-DSK-JAVA, description=Demo Data Source used for REST Java Demo, status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.TermHandler - CREATE [main] INFO bbdn.rest.services.TermHandler - URI is http://localhost:9876/learn/api/public/v1/terms [main] INFO bbdn.rest.services.TermHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.TermHandler - Request Body: Term [id=null, externalId=BBDN-TERM-JAVA, dataSourceId=_13_1, name=REST Demo Term - Java, description=Term Used For REST Demo - Java, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.TermHandler - Response: &lt;201 Created,Term [id=_7_1, externalId=BBDN-TERM-JAVA, dataSourceId=_13_1, name=REST Demo Term - Java, description=Term Used For REST Demo - Java, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=&quot;CAO PSA OUR&quot;], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:07 GMT], Expires=[Mon, 27 Jul 2015 19:50:07 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=2498E5AC7B7F40B9B4A53BFCC3762029; Path=/learn/api], Location=[/learn/api/public/v1/terms/_7_1], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed,27 Jul 2016 19:50:06 GMT]}&gt; [main] INFO bbdn.rest.services.TermHandler - Term: Term [id=_7_1,externalId=BBDN-TERM-JAVA, dataSourceId=_13_1, name=REST Demo Term - Java, description=Term Used For REST Demo - Java, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.TermHandler - READ [main] INFO bbdn.rest.services.TermHandler - URI is [http://localhost:9876/learn/api/public/v1/terms/externalId:BBDN-TERM-JAVA [main] INFO bbdn.rest.services.TermHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.TermHandler - Request Body: Term [id=null, externalId=null, dataSourceId=null, name=null, description=null, availability=null, status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.TermHandler - Response: &lt;200 OK,Term [id=_7_1, externalId=BBDN-TERM-JAVA, dataSourceId=_13_1, name=REST Demo Term - Java, description=Term Used For REST Demo - Java, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=&quot;CAO PSA OUR&quot;], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:07 GMT], Expires=[Mon, 27 Jul 2015 19:50:07 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=4341909E1D54C7A129E5883CE21E82E0; Path=/learn/api], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed, 27 Jul 2016 19:50:06 GMT]}&gt; [main] INFO bbdn.rest.services.TermHandler - Term: Term [id=_7_1, externalId=BBDN-TERM-JAVA, dataSourceId=_13_1, name=REST Demo Term - Java, description=Term Used For REST Demo - Java, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.TermHandler - UPDATE [main] INFO bbdn.rest.services.TermHandler - URI is http://localhost:9876/learn/api/public/v1/terms/externalId:BBDN-TERM-JAVA [main] INFO bbdn.rest.services.TermHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.TermHandler - Request Body: Term [id=null, externalId=BBDN-TERM-JAVA, dataSourceId=_13_1, name=REST Demo Term - Java, description=Term Used For REST Demo - Java, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.TermHandler - Response: &lt;200 OK,Term [id=_7_1, externalId=BBDN-TERM-JAVA, dataSourceId=_13_1, name=REST Demo Term - Java, description=Term Used For REST Demo - Java, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=&quot;CAO PSA OUR&quot;], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:07 GMT], Expires=[Mon, 27 Jul 2015 19:50:07 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=097D9AF4FF4AAE88C29BD42C9AA0526B; Path=/learn/api], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed, 27 Jul 2016 19:50:07 GMT]}&gt; [main] INFO bbdn.rest.services.TermHandler - Term: Term [id=_7_1, externalId=BBDN-TERM-JAVA, dataSourceId=_13_1, name=REST Demo Term - Java, description=Term Used For REST Demo - Java, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.CourseHandler - CREATE [main] INFO bbdn.rest.services.CourseHandler - Course [id=null, uuid=null, externalId=BBDN-Java-REST-Demo, dataSourceId=_13_1, courseId=BBDN-Java-REST-Demo, name=Course Used For REST Demo - Java, description=Course Used For REST Demo - Java, created=null, organization=false, ultraStatus=null, allowGuests=true, readOnly=false, termId=_7_1, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.CourseHandler - URI is http://localhost:9876/learn/api/public/v1/courses [main] INFO bbdn.rest.services.CourseHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.CourseHandler - Request Body: Course [id=null, uuid=null, externalId=BBDN-Java-REST-Demo, dataSourceId=_13_1, courseId=BBDN-Java-REST-Demo, name=Course Used For REST Demo - Java, description=Course Used For REST Demo - Java, created=null, organization=false, ultraStatus=null, allowGuests=true, readOnly=false, termId=_7_1, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.CourseHandler - Response: &lt;201 Created,Course [id=_7_1, uuid=9ec59f4d3e094cd5b2025858a28a3b39, externalId=BBDN-Java-REST-Demo, dataSourceId=_13_1, courseId=BBDN-Java-REST-Demo, name=Course Used For REST Demo - Java, description=Course Used For REST Demo - Java, created=2016-07-27T19:50:07.376Z, organization=false, ultraStatus=Classic, allowGuests=true, readOnly=false, termId=_7_1, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=&quot;CAO PSA OUR&quot;], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:07 GMT], Expires=[Mon, 27 Jul 2015 19:50:07 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=54A6544B4CDB9B039EFA56487A85035B; Path=/learn/api], Location=[/learn/api/public/v1/courses/_7_1], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed, 27 Jul 2016 19:50:07 GMT]}&gt; [main] INFO bbdn.rest.services.CourseHandler - Course: Course [id=_7_1, uuid=9ec59f4d3e094cd5b2025858a28a3b39, externalId=BBDN-Java-REST-Demo, dataSourceId=_13_1, courseId=BBDN-Java-REST-Demo, name=Course Used For REST Demo - Java, description=Course Used For REST Demo - Java, created=2016-07-27T19:50:07.376Z, organization=false, ultraStatus=Classic, allowGuests=true, readOnly=false, termId=_7_1, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.CourseHandler - READ [main] INFO bbdn.rest.services.CourseHandler - URI is http://localhost:9876/learn/api/public/v1/courses/externalId:BBDN-Java-REST-Demo [main] INFO bbdn.rest.services.CourseHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.CourseHandler - Request Body: Course [id=null, uuid=null, externalId=null, dataSourceId=null, courseId=null, name=null, description=null, created=null, organization=false, ultraStatus=null, allowGuests=false, readOnly=false, termId=null, availability=null, status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.CourseHandler - Response: &lt;200 OK,Course [id=_7_1, uuid=9ec59f4d3e094cd5b2025858a28a3b39, externalId=BBDN-Java-REST-Demo, dataSourceId=_13_1, courseId=BBDN-Java-REST-Demo, name=Course Used For REST Demo - Java, description=Course Used For REST Demo - Java, created=2016-07-27T19:50:07.376Z, organization=false, ultraStatus=Classic, allowGuests=true, readOnly=false, termId=_7_1, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=&quot;CAO PSA OUR&quot;], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:07 GMT], Expires=[Mon, 27 Jul 2015 19:50:07 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=DF5C615760A8438DFF112613D84926EF; Path=/learn/api], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed, 27 Jul 2016 19:50:07 GMT]}&gt; [main] INFO bbdn.rest.services.CourseHandler - Course: Course [id=_7_1, uuid=9ec59f4d3e094cd5b2025858a28a3b39, externalId=BBDN-Java-REST-Demo, dataSourceId=_13_1, courseId=BBDN-Java-REST-Demo, name=Course Used For REST Demo - Java, description=Course Used For REST Demo - Java, created=2016-07-27T19:50:07.376Z, organization=false, ultraStatus=Classic, allowGuests=true, readOnly=false, termId=_7_1, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.CourseHandler - UPDATE [main] INFO bbdn.rest.services.CourseHandler - Course [id=null, uuid=null, externalId=BBDN-Java-REST-Demo, dataSourceId=_13_1, courseId=BBDN-Java-REST-Demo, name=Course Used For REST Demo - Java, description=Course Used For REST Demo - Java, created=null, organization=false, ultraStatus=null, allowGuests=true, readOnly=false, termId=_7_1, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.CourseHandler - URI is http://localhost:9876/learn/api/public/v1/courses/externalId:BBDN-Java-REST-Demo [main] INFO bbdn.rest.services.CourseHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.CourseHandler - Request Body: Course [id=null, uuid=null, externalId=BBDN-Java-REST-Demo, dataSourceId=_13_1, courseId=BBDN-Java-REST-Demo, name=Course Used For REST Demo - Java, description=Course Used For REST Demo - Java, created=null, organization=false, ultraStatus=null, allowGuests=true, readOnly=false, termId=_7_1, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.CourseHandler - Response: &lt;200 OK,Course [id=_7_1, uuid=9ec59f4d3e094cd5b2025858a28a3b39, externalId=BBDN-Java-REST-Demo, dataSourceId=_13_1, courseId=BBDN-Java-REST-Demo, name=Course Used For REST Demo - Java, description=Course Used For REST Demo - Java, created=2016-07-27T19:50:07.376Z, organization=false, ultraStatus=Classic, allowGuests=true, readOnly=false, termId=_7_1, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=&quot;CAO PSA OUR&quot;], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:07 GMT], Expires=[Mon, 27 Jul 2015 19:50:07 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=64C50ECFDE762D6C97C5409AB26DF00B; Path=/learn/api], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed, 27 Jul 2016 19:50:07 GMT]}&gt; [main] INFO bbdn.rest.services.CourseHandler - Course: Course [id=_7_1, uuid=9ec59f4d3e094cd5b2025858a28a3b39, externalId=BBDN-Java-REST-Demo, dataSourceId=_13_1, courseId=BBDN-Java-REST-Demo, name=Course Used For REST Demo - Java, description=Course Used For REST Demo - Java, created=2016-07-27T19:50:07.376Z, organization=false, ultraStatus=Classic, allowGuests=true, readOnly=false, termId=_7_1, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.UserHandler - CREATE [main] INFO bbdn.rest.services.UserHandler - User [id=null, uuid=null, externalId=bbdnrestdemojavauser, dataSourceId=_13_1, userName=restjavauser, password=Bl@ckb0ard!, studentId=null, educationLevel=null, gender=null, birthDate=null, created=null, lastLogin=null, availability=Availability [available=Yes], name=Name [given=Java, family=Restdemo], contact=Contact [email=developers@anthology.com], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.UserHandler - URI is http://localhost:9876/learn/api/public/v1/users [main] INFO bbdn.rest.services.UserHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.UserHandler - Request Body: User [id=null, uuid=null, externalId=bbdnrestdemojavauser, dataSourceId=_13_1, userName=restjavauser, password=Bl@ckb0ard!, studentId=null, educationLevel=null, gender=null, birthDate=null, created=null, lastLogin=null, availability=Availability [available=Yes], name=Name [given=Java, family=Restdemo], contact=Contact [[email=developers@anthology.com](mailto:email=developers@anthology.com)], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.UserHandler - Response: &lt;201 Created,User [id=_9_1, uuid=c55303eaa7d541aab75ebd218d1a6e20, externalId=bbdnrestdemojavauser, dataSourceId=_13_1, userName=restjavauser, password=null, studentId=null, educationLevel=Unknown, gender=Unknown, birthDate=null, created=2016-07-27T19:50:07.970Z, lastLogin=null, availability=Availability [available=Yes], name=Name [given=Java, family=Restdemo], contact=Contact [email=developers@anthology.com], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=&quot;CAO PSA OUR&quot;], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:07 GMT], Expires=[Mon, 27 Jul 2015 19:50:07 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=679348D067502E72AD1ECAD13B33322E; Path=/learn/api], Location=[/learn/api/public/v1/users/_9_1], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed, 27 Jul 2016 19:50:07 GMT]}&gt; [main] INFO bbdn.rest.services.UserHandler - User: User [id=_9_1, uuid=c55303eaa7d541aab75ebd218d1a6e20, externalId=bbdnrestdemojavauser, dataSourceId=_13_1, userName=restjavauser, password=null, studentId=null, educationLevel=Unknown, gender=Unknown, birthDate=null, created=2016-07-27T19:50:07.970Z, lastLogin=null, availability=Availability [available=Yes], name=Name [given=Java, family=Restdemo], contact=Contact [email=developers@anthology.com], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.UserHandler - READ [main] INFO bbdn.rest.services.UserHandler - URI is http://localhost:9876/learn/api/public/v1/users/externalId:bbdnrestdemojavauser [main] INFO bbdn.rest.services.UserHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.UserHandler - Request Body: User [id=null, uuid=null, externalId=null, dataSourceId=null, userName=null, password=null, studentId=null, educationLevel=null, gender=null, birthDate=null, created=null, lastLogin=null, availability=null, name=null, contact=null, status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.UserHandler - Response: &lt;200 OK,User [id=_9_1, uuid=c55303eaa7d541aab75ebd218d1a6e20, externalId=bbdnrestdemojavauser, dataSourceId=_13_1, userName=restjavauser, password=null, studentId=null, educationLevel=Unknown, gender=Unknown, birthDate=null, created=2016-07-27T19:50:07.970Z, lastLogin=null, availability=Availability [available=Yes], name=Name [given=Java, family=Restdemo], contact=Contact [email=developers@anthology.com], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=&quot;CAO PSA OUR&quot;], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:08 GMT], Expires=[Mon, 27 Jul 2015 19:50:08 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=6754BF5FA616BB198CC2118EC1E3F5CB; Path=/learn/api], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed,27 Jul 2016 19:50:07 GMT]}&gt; [main] INFO bbdn.rest.services.UserHandler - User: User [id=_9_1, uuid=c55303eaa7d541aab75ebd218d1a6e20, externalId=bbdnrestdemojavauser, dataSourceId=_13_1, userName=restjavauser, password=null, studentId=null, educationLevel=Unknown, gender=Unknown, birthDate=null, created=2016-07-27T19:50:07.970Z, lastLogin=null, availability=Availability [available=Yes], name=Name [given=Java, family=Restdemo], contact=Contact [email=developers@anthology.com], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.UserHandler - UPDATE [main] INFO bbdn.rest.services.UserHandler - User [id=null, uuid=null, externalId=bbdnrestdemojavauser, dataSourceId=_13_1, userName=restjavauser, password=Bl@ckb0ard!, studentId=null, educationLevel=null, gender=null, birthDate=null, created=null, lastLogin=null, availability=Availability [available=Yes], name=Name [given=Java, family=Restdemo], contact=Contact [email=developers@anthology.com], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.UserHandler - URI is http://localhost:9876/learn/api/public/v1/users/externalId:bbdnrestdemojavauser [main] INFO bbdn.rest.services.UserHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.UserHandler - Request Body: User [id=null, uuid=null, externalId=bbdnrestdemojavauser, dataSourceId=_13_1, userName=restjavauser, password=Bl@ckb0ard!, studentId=null, educationLevel=null, gender=null, birthDate=null, created=null, lastLogin=null, availability=Availability [available=Yes], name=Name [given=Java, family=Restdemo], contact=Contact [email=developers@anthology.com], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.UserHandler - Response: &lt;200 OK,User [id=_9_1, uuid=c55303eaa7d541aab75ebd218d1a6e20, externalId=bbdnrestdemojavauser, dataSourceId=_13_1, userName=restjavauser, password=null, studentId=null, educationLevel=Unknown, gender=Unknown, birthDate=null, created=2016-07-27T19:50:07.970Z, lastLogin=null, availability=Availability [available=Yes], name=Name [given=Java, family=Restdemo], contact=Contact [email=developers@anthology.com], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=&quot;CAO PSA OUR&quot;], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:08 GMT], Expires=[Mon, 27 Jul 2015 19:50:08 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=D8AC51CE6341F1C29832F9B9764C1A74; Path=/learn/api], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed, 27 Jul 2016 19:50:08 GMT]}&gt; [main] INFO bbdn.rest.services.UserHandler - User: User [id=_9_1, uuid=c55303eaa7d541aab75ebd218d1a6e20, externalId=bbdnrestdemojavauser, dataSourceId=_13_1, userName=restjavauser, password=null, studentId=null, educationLevel=Unknown, gender=Unknown, birthDate=null, created=2016-07-27T19:50:07.970Z, lastLogin=null, availability=Availability [available=Yes], name=Name [given=Java, family=Restdemo], contact=Contact [email=developers@anthology.com], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.MembershipHandler - CREATE [main] INFO bbdn.rest.services.MembershipHandler - Membership [userId=_9_1, courseId=_7_1, dataSourceId=_13_1, created=null, courseRoleId=Instructor, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.MembershipHandler - URI is [http://localhost:9876/learn/api/public/v1/courses/externalId:BBDN-Java-REST-Demo/users/externalId:bbdnrestdemojavauser [main] INFO bbdn.rest.services.MembershipHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.MembershipHandler - Request Body: Membership [userId=_9_1, courseId=_7_1, dataSourceId=_13_1, created=null, courseRoleId=Instructor, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.MembershipHandler - Response: &lt;201 Created,Membership [userId=_9_1, courseId=_7_1, dataSourceId=_13_1, created=2016-07-27T19:50:08.539Z, courseRoleId=Instructor, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=&quot;CAO PSA OUR&quot;], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:08 GMT], Expires=[Mon, 27 Jul 2015 19:50:08 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=6BCBBFC919575F4FA108817EF78FFC73; Path=/learn/api], Location=[/learn/api/public/v1/courses/_7_1/users/_9_1], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed, 27 Jul 2016 19:50:08 GMT]}&gt; [main] INFO bbdn.rest.services.MembershipHandler - Membership: Membership [userId=_9_1, courseId=_7_1, dataSourceId=_13_1, created=2016-07-27T19:50:08.539Z, courseRoleId=Instructor, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.MembershipHandler - READ [main] INFO bbdn.rest.services.MembershipHandler - URI is http://localhost:9876/learn/api/public/v1/courses/externalId:BBDN-Java-REST-Demo/users/externalId:bbdnrestdemojavauser [main] INFO bbdn.rest.services.MembershipHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.MembershipHandler - Request Body: Membership [userId=null, courseId=null, dataSourceId=null, created=null, courseRoleId=null, availability=null, status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.MembershipHandler - Response: &lt;200 OK,Membership [userId=_9_1, courseId=_7_1, dataSourceId=_13_1, created=2016-07-27T19:50:08.539Z, courseRoleId=Instructor, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=&quot;CAO PSA OUR&quot;], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9],Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:08 GMT], Expires=[Mon, 27 Jul 2015 19:50:08 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=64E622F16D37FF787E3319321D9B3740; Path=/learn/api], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed, 27 Jul 2016 19:50:08 GMT]}&gt; [main] INFO bbdn.rest.services.MembershipHandler - Membership: Membership [userId=_9_1, courseId=_7_1, dataSourceId=_13_1, created=2016-07-27T19:50:08.539Z, courseRoleId=Instructor, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.MembershipHandler - UPDATE [main] INFO bbdn.rest.services.MembershipHandler - Membership [userId=_9_1, courseId=_7_1, dataSourceId=_13_1, created=null, courseRoleId=Instructor, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.MembershipHandler - URI is http://localhost:9876/learn/api/public/v1/courses/externalId:BBDN-Java-REST-Demo/users/externalId:bbdnrestdemojavauser [main] INFO bbdn.rest.services.MembershipHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.MembershipHandler - Request Body: Membership [userId=_9_1, courseId=_7_1, dataSourceId=_13_1, created=null,courseRoleId=Instructor, availability=Availability [available=Yes],status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.MembershipHandler - Response: &lt;200 OK,Membership [userId=_9_1, courseId=_7_1, dataSourceId=_13_1, created=2016-07-27T19:50:08.539Z, courseRoleId=Instructor, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null],{Server=[Apache-Coyote/1.1], P3P=[CP=&quot;CAO PSA OUR&quot;], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:08 GMT], Expires=[Mon, 27 Jul 2015 19:50:08 GMT], X-Frame-Options=[SAMEORIGIN], Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=C26CD9BF1C6D987BEF83B8BFB2508692; Path=/learn/api], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Transfer-Encoding=[chunked], Date=[Wed, 27 Jul 2016 19:50:08 GMT]}&gt; [main] INFO bbdn.rest.services.MembershipHandler - Membership: Membership [userId=_9_1, courseId=_7_1, dataSourceId=_13_1, created=2016-07-27T19:50:08.539Z, courseRoleId=Instructor, availability=Availability [available=Yes], status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.MembershipHandler - DELETE [main] INFO bbdn.rest.services.MembershipHandler - URI is http://localhost:9876/learn/api/public/v1/courses/externalId:BBDN-Java-REST-Demo/users/externalId:bbdnrestdemojavauser [main] INFO bbdn.rest.services.MembershipHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.MembershipHandler - Request Body: Membership [userId=null, courseId=null, dataSourceId=null, created=null, courseRoleId=null, availability=null, status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.MembershipHandler - Response: &lt;204 No Content,{Server=[Apache-Coyote/1.1], P3P=[CP=&quot;CAO PSA OUR&quot;], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Learn &amp;#8482; 3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:08 GMT], Expires=[Mon, 27 Jul 2015 19:50:08 GMT], X-Frame-Options=[SAMEORIGIN],Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=614DC8400A97E7A1EE8A5D84FB5C91F9; Path=/learn/api],X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Date=[Wed, 27 Jul 2016 19:50:08 GMT]}&gt; [main] INFO bbdn.rest.services.UserHandler - DELETE [main] INFO bbdn.rest.services.UserHandler - URI is http://localhost:9876/learn/api/public/v1/users/externalId:bbdnrestdemojavauser [main] INFO bbdn.rest.services.UserHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.UserHandler - Request Body: User [id=null, uuid=null, externalId=null, dataSourceId=null, userName=null, password=null, studentId=null, educationLevel=null, gender=null, birthDate=null, created=null, lastLogin=null, availability=null, name=null, contact=null, status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.UserHandler - Response: &lt;204 No Content,{Server=[Apache-Coyote/1.1], P3P=[CP=&quot;CAO PSA OUR&quot;], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Learn &amp;#8482;3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:09 GMT], Expires=[Mon, 27 Jul 2015 19:50:09 GMT], X-Frame-Options=[SAMEORIGIN],Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=7962DE99F72343771643822431BB5EA3; Path=/learn/api], X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Date=[Wed, 27 Jul 2016 19:50:09 GMT]}&gt; [main] INFO bbdn.rest.services.CourseHandler - DELETE [main] INFO bbdn.rest.services.CourseHandler - URI is http://localhost:9876/learn/api/public/v1/courses/externalId:BBDN-Java-REST-Demo [main] INFO bbdn.rest.services.CourseHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.CourseHandler - Request Body: Course [id=null, uuid=null, externalId=null, dataSourceId=null, courseId=null, name=null, description=null, created=null, organization=false, ultraStatus=null, allowGuests=false, readOnly=false, termId=null, availability=null, status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.CourseHandler - Response: &lt;204 No Content,{Server=[Apache-Coyote/1.1], P3P=[CP=&quot;CAO PSA OUR&quot;], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Learn &amp;#8482;3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:09 GMT], Expires=[Mon, 27 Jul 2015 19:50:09 GMT], X-Frame-Options=[SAMEORIGIN],Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=D1F4182A949F2FE8FA7CA98C0BF59CB7; Path=/learn/api],X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Date=[Wed, 27 Jul 2016 19:50:09 GMT]}&gt; [main] INFO bbdn.rest.services.TermHandler - DELETE [main] INFO bbdn.rest.services.TermHandler - URI is http://localhost:9876/learn/api/public/v1/terms/externalId:BBDN-TERM-JAVA [main] INFO bbdn.rest.services.TermHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.TermHandler - Request Body: Term [id=null,externalId=null, dataSourceId=null, name=null, description=null,availability=null, status=null, code=null, message=null,developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.TermHandler - Response: &lt;204 No Content,{Server=[Apache-Coyote/1.1], P3P=[CP=&quot;CAO PSA OUR&quot;], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Learn &amp;#8482;3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:10 GMT], Expires=[Mon, 27 Jul 2015 19:50:10 GMT], X-Frame-Options=[SAMEORIGIN],Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=FF3871AC05EB0F3B28018DAFA0D7AB1D; Path=/learn/api],X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Date=[Wed, 27 Jul 2016 19:50:09 GMT]}&gt; [main] INFO bbdn.rest.services.DatasourceHandler - DELETE [main] INFO bbdn.rest.services.DatasourceHandler - URI is http://localhost:9876/learn/api/public/v1/dataSources/externalId:BBDN-DSK-JAVA [main] INFO bbdn.rest.services.DatasourceHandler - Request Headers: {Authorization=[Bearer uC5G2HvEsI1DWP24xD2lnaG35EQsenZs], Content-Type=[application/json]} [main] INFO bbdn.rest.services.DatasourceHandler - Request Body: Datasource [id=null, externalId=null, description=null, status=null, code=null, message=null, developerMessage=null, extrainfo=null] [main] INFO bbdn.rest.services.DatasourceHandler - Response: &lt;204 No Content,{Server=[Apache-Coyote/1.1], P3P=[CP=&quot;CAO PSA OUR&quot;], X-Blackboard-appserver=[dev.bbdn.local], X-Blackboard-product=[Learn &amp;#8482;3000.1.1-rel.7+a3f61d9], Pragma=[no-cache], Cache-Control=[no-cache, max-age=0, no-store, must-revalidate], Last-Modified=[Sat, 27 Jul 1996 19:50:10 GMT], Expires=[Mon, 27 Jul 2015 19:50:10 GMT], X-Frame-Options=[SAMEORIGIN],Content-Security-Policy=[frame-ancestors 'self'], Set-Cookie=[JSESSIONID=E7B5A007C1E329DFF0F8F477E580A4CB; Path=/learn/api],X-Blackboard-Context-Version=[3000.1.1-rel.5+0bc08ab], Content-Type=[application/json;charset=UTF-8], Date=[Wed, 27 Jul 2016 19:50:09 GMT]}&gt; BUILD SUCCESSFUL Total time: 7.356 secs  What We Did​ In this tutorial we built a Java command line application that creates, reads, updates, and deletes the five core REST objects: datasources, terms, courses, users, and memberships. Along the way, we learned how to institute OAuth, create HTTP messages and interact with the Learn REST APIs, how to use Jackson to serialize and deserialize objects, and how to use Gradle to build and run command line Java applications. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Demo using Python","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/demo-code/python-demo","content":"","keywords":"","version":null},{"title":"Prerequisites​","type":1,"pageTitle":"Demo using Python","url":"/docs/blackboard/rest-apis/demo-code/python-demo#prerequisites","content":"You must [register a developer account and application](/rest-apis/learn/Getting Started/registry) in the Developer PortalYou must[register your application](/rest-apis/learn/Getting Started/registry) in LearnYou must also configure the script as outlined in the README for the project This webapp allows you to: AuthenticateCreate, Read, and Update a Data SourceCreate, Read, and Update a TermCreate, Read, and Update a CourseCreate, Read, and Update a UserCreate, Read, and Update a MembershipDelete created objects in reverse order of create - membership, user, course, term, datasource. All generated output is sent to the terminal console. This is not meant to be a Python tutorial. It will not teach you to write code in Python. It will, however, give a Developer familiar with Python the knowledge necessary to build a REST-based Web Services integration. ","version":null,"tagName":"h3"},{"title":"Assumptions​","type":1,"pageTitle":"Demo using Python","url":"/docs/blackboard/rest-apis/demo-code/python-demo#assumptions","content":"This help topic assumes the Developer: Is familiar with PythonHas obtained a copy of the source code and run as noted in the project README.md file.Has a REST-enabled Learn instance. ","version":null,"tagName":"h3"},{"title":"Code Walkthrough​","type":1,"pageTitle":"Demo using Python","url":"/docs/blackboard/rest-apis/demo-code/python-demo#code-walkthrough","content":"To build an integration with the Learn REST Web Services, regardless of the programming language of choice, can really be summed up in two steps: Use the Application Key and Secret to obtain an OAuth 2.0 access token, as described in the [Basic Authentication](/rest-apis/learn/Getting Started/basic-authentication) document.Call the appropriate REST endpoint with the appropriate data to perform the appropriate action. ","version":null,"tagName":"h3"},{"title":"Authorization and Authentication​","type":1,"pageTitle":"Demo using Python","url":"/docs/blackboard/rest-apis/demo-code/python-demo#authorization-and-authentication","content":"The REST Services rely on OAuth 2.0 Bearer Tokens for authentication. A request is made to the token endpoint with a Basic Authorization header containing the base64-encoded key:secret string as its key. The token service returns a JSON object containing the Access Token, the Token Type, and the number of seconds until the token expires. The token is set to expire after one hour, and subsequent calls to retrieve the token will return the same token with an updated expiry time until such time that the token has expired. There is no refresh token and currently no revoke token method. The Python code handles authentication and token management in the auth class in auth.py:  def __init__(self, URL): self.SECRET = &quot;insert_your_application_key_here&quot; self.KEY = &quot;insert_your_application_secret_here&quot; self.CREDENTIALS = 'client_credentials' self.PAYLOAD = { 'grant_type':'client_credentials' } self.TOKEN = None self.target_url = URL ... def setToken(self): oauth_path = '/learn/api/public/v1/oauth2/token' OAUTH_URL = 'https://' + self.target_url + oauth_path if self.TOKEN is None: session = requests.session() session.mount('https://', Tls1Adapter()) # remove for production # Authenticate r = session.post(OAUTH_URL, data=self.PAYLOAD, auth=(self.KEY, self.SECRET), verify=False) print(&quot;[auth:setToken()] STATUS CODE: &quot; + str(r.status_code) ) print(&quot;[auth:setToken()] RESPONSE: &quot; + r.text) if r.status_code == 200: parsed_json = json.loads(r.text) self.TOKEN = parsed_json['access_token'] ...  The JSON response is parsed to retrieve the Token which is stored and retrieved for subsequent calls by calling auth.getToken(). Note that the retrieving the stored token invokes a sanity check on token expiration, requesting a fresh token if nearly expired - see auth.getToken() andauth.isExpired(). ","version":null,"tagName":"h3"},{"title":"Calling Services​","type":1,"pageTitle":"Demo using Python","url":"/docs/blackboard/rest-apis/demo-code/python-demo#calling-services","content":"The individual service calls are handled by Python in service specific class files: datasource.pyterm.pycourse.pyuser.pymembership.py A sixth file constants.py contains a set of constants used by the application. Each of these classes creates the JSON body when appropriate and then calls the appropriate HTTP Request, and return the JSON response as a String to be displayed in the terminal console window. In the demo restdemo.py, each of the above objects are called using POST to create, PATCH to update, GET to read, and DELETE to delete the target object. Note that memberships use PUT to create a membership. End points are generally defined as /learn/api/public/v1/&lt;objecttype&gt;/&lt;objectId&gt;. Object ID can be either the pk1, like _1_1, or as the batch_uid. This value should be prepended by externalId:, like externalId:test101. For example, to retrieve a course by the pk1 _1_1, you would call GET /learn/api/public/v1/courses/_1_1. To retrieve by the batch_uid test101, you would call GET /learn/api/public/v1/courses/externalId:test101. Create is sent to Learn as a HTTP POST message with a JSON body that defines the object. The endpoint should omit the objectId, as this will be generated on creation. Read is sent to Learn as a HTTP GET message with an empty body. The endpoint should include the objectId being retrieved. Update is sent to Learn as a HTTP PATCH message with a JSON body that defines the object. The endpoint should include the objectId being updated. Delete is sent to Learn as a HTTP DELETE message with empty body. The endpoint should include the objectId being deleted. The following shows the key components of the Python code for making REST requests against each of the supported objects. In each case detailed messages are printed to the terminal screen for you to follow the process. ","version":null,"tagName":"h3"},{"title":"Datasources​","type":1,"pageTitle":"Demo using Python","url":"/docs/blackboard/rest-apis/demo-code/python-demo#datasources","content":"Datasources are handled in datasource.py. Variables and Create Payload  self.DATASOURCES_PATH = '/learn/api/public/v1/dataSources' #create(POST)/get(GET) self.DATASOURCE_PATH = '/learn/api/public/v1/dataSources/externalId:' authStr = 'Bearer ' + token ... self.PAYLOAD = { &quot;externalId&quot;:DSKEXTERNALID, &quot;description&quot;:&quot;Data Source used for REST demo&quot; }  Create  r = session.post(&quot;https://&quot; + self.target_url + self.DATASOURCES_PATH, data=json.dumps(self.PAYLOAD), headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False)  Read  r = session.get(&quot;https://&quot; + self.target_url + self.DATASOURCE_PATH+DSKEXTERNALID, headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False) ... print(&quot;[DataSource:getDataSource()] RESPONSE: &quot; + r.text)  Update  r = session.patch(&quot;https://&quot; + self.target_url + self.DATASOURCE_PATH+DSKEXTERNALID, data=json.dumps(self.PAYLOAD), headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False) ... print(&quot;[DataSource:updateDataSource()] RESPONSE: &quot; + r.text)  Delete  r = session.delete(&quot;https://&quot; + self.target_url + self.DATASOURCE_PATH+DSKEXTERNALID, headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False)  ","version":null,"tagName":"h3"},{"title":"Terms​","type":1,"pageTitle":"Demo using Python","url":"/docs/blackboard/rest-apis/demo-code/python-demo#terms","content":"Terms are handled in term.py. This Class contains the methods for creating, reading, updating and deleting Term objects. Variables and Create Payload  self.terms_Path = '/learn/api/public/v1/terms' #create(POST)/get(GET) self.term_Path = '/learn/api/public/v1/terms/externalId:' self.termExternalId = TERMEXTERNALID #'BBDN-PYTHON-REST-DEMO-TERM' authStr = 'Bearer ' + token self.PAYLOAD = { &quot;externalId&quot;:self.termExternalId, &quot;dataSourceId&quot;: dsk, #self.dskExternalId, Supported soon. &quot;name&quot;:&quot;REST Demo Term&quot;, &quot;description&quot;: &quot;Term used for REST demo&quot;, &quot;availability&quot;: { &quot;duration&quot;:&quot;Continuous&quot; } }  Create  r = session.post(&quot;https://&quot; + self.target_url + self.terms_Path, data=json.dumps(self.PAYLOAD), headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False)  Read  r = session.get(&quot;https://&quot; + self.target_url + self.term_Path+self.termExternalId, headers={'Authorization':authStr}, verify=False) ... print(&quot;[Term:updateTerm()] RESPONSE: &quot; + r.text) Update self.PAYLOAD = { &quot;externalId&quot;:self.termExternalId, # Python Demo &quot;description&quot;: &quot;Term used for REST Python demo&quot;, &quot;availability&quot;: { &quot;duration&quot;:&quot;continuous&quot; } } ... r = session.patch(&quot;https://&quot; + self.target_url + self.term_Path+self.termExternalId, data=json.dumps(self.PAYLOAD), headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False)  Delete  r = session.delete(&quot;https://&quot; + self.target_url + self.term_Path+self.termExternalId, headers={'Authorization':authStr}, verify=False)  ","version":null,"tagName":"h3"},{"title":"Courses​","type":1,"pageTitle":"Demo using Python","url":"/docs/blackboard/rest-apis/demo-code/python-demo#courses","content":"Courses are handled in course.py. This class contains the methods for creating, reading, updating and deleting course objects . Variables and Create Payload  self.courses_Path = '/learn/api/public/v1/courses' #create(POST)/get(GET) self.course_Path = '/learn/api/public/v1/courses/externalId:' self.termId = None self.PAYLOAD = { &quot;externalId&quot;:constants.COURSEEXTERNALID, &quot;dataSourceId&quot;: dsk, #self.dskExternalId, Supported soon. &quot;courseId&quot;:constants.COURSEEXTERNALID, &quot;name&quot;:&quot;Course used for REST demo&quot;, &quot;description&quot;:&quot;Course used for REST demo&quot;, &quot;allowGuests&quot;:&quot;true&quot;, &quot;readOnly&quot;: &quot;false&quot;, &quot;availability&quot;: { &quot;duration&quot;:&quot;continuous&quot; } }  Create  r = session.post(&quot;https://&quot; + self.target_url + self.courses_Path, data=json.dumps(self.PAYLOAD), headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False)  Read  r = session.get(&quot;https://&quot; + self.target_url + self.course_Path+constants.COURSEEXTERNALID, headers={'Authorization':authStr}, verify=False) ... print(&quot;[Course:getCourse()] RESPONSE: &quot; + r.text)  Update  self.PAYLOAD = { &quot;externalId&quot;:constants.COURSEEXTERNALID, &quot;dataSourceId&quot;: dsk, #self.dskExternalId, Supported soon. &quot;courseId&quot;:constants.COURSEEXTERNALID, &quot;name&quot;:&quot;Course used for REST Python demo&quot;, &quot;description&quot;:&quot;Course used for REST Python demo&quot;, &quot;allowGuests&quot;:&quot;true&quot;, &quot;readOnly&quot;: &quot;false&quot;, &quot;availability&quot;: { &quot;available&quot;:&quot;Yes&quot;, &quot;duration&quot;:&quot;continuous&quot; } } r = session.patch(&quot;https://&quot; + self.target_url + self.course_Path+constants.COURSEEXTERNALID, data=json.dumps(self.PAYLOAD), headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False)  Delete  r = session.delete(&quot;https://&quot; + self.target_url + self.course_Path+constants.COURSEEXTERNALID, headers={'Authorization':authStr}, verify=False)  ","version":null,"tagName":"h3"},{"title":"Users​","type":1,"pageTitle":"Demo using Python","url":"/docs/blackboard/rest-apis/demo-code/python-demo#users","content":"Users are handled in user.py. This class contains the methods for creating, reading, updating and deleting user objects . Variables and Create Payload  self.users_Path = '/learn/api/public/v1/users' #create(POST)/get(GET) self.user_Path = '/learn/api/public/v1/users/externalId:' self.PAYLOAD = { &quot;externalId&quot;:USEREXTERNALID, &quot;dataSourceId&quot;: dsk, #self.dskExternalId, Supported soon. &quot;userName&quot;:&quot;python_demo&quot;, &quot;password&quot;:&quot;python61&quot;, &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot; }, &quot;name&quot;: { &quot;given&quot;: &quot;Python&quot;, &quot;family&quot;: &quot;Demo&quot;, }, &quot;contact&quot;: { &quot;email&quot;: &quot;no.one@ereh.won&quot;, } }  Create  r = session.post(&quot;https://&quot; + self.target_url + self.users_Path, data=json.dumps(self.PAYLOAD), headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False)  Read  r = session.get(&quot;https://&quot; + self.target_url + self.user_Path+USEREXTERNALID, headers={'Authorization':authStr}, verify=False) ... print(&quot;[User:getUser()] RESPONSE: &quot; + r.text)  Update  self.PAYLOAD = { &quot;externalId&quot;: USEREXTERNALID, &quot;dataSourceId&quot;: dsk, #self.dskExternalId, Supported soon. &quot;userName&quot;:&quot;python_demo&quot;, &quot;password&quot;: &quot;python16&quot;, &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot; }, &quot;name&quot;: { &quot;given&quot;: &quot;Python&quot;, &quot;family&quot;: &quot;BbDN&quot;, &quot;middle&quot;: &quot;Demo&quot;, }, &quot;contact&quot;: { &quot;email&quot;: &quot;no.one@ereh.won&quot;, } } ... r = session.patch(&quot;https://&quot; + self.target_url + self.user_Path+USEREXTERNALID, data=json.dumps(self.PAYLOAD), headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False)  Delete  r = session.delete(&quot;https://&quot; + self.target_url + self.user_Path+USEREXTERNALID, headers={'Authorization':authStr}, verify=False)  ","version":null,"tagName":"h3"},{"title":"Memberships​","type":1,"pageTitle":"Demo using Python","url":"/docs/blackboard/rest-apis/demo-code/python-demo#memberships","content":"Memberships (enrollment/staff) are handled in membership.py. This class contains the methods for creating, reading, updating and deleting membership objects . Variables and Create Payload  self.PAYLOAD = { &quot;dataSourceId&quot;:dsk, #self.dskExternalId, supported soon. &quot;availability&quot;: { &quot;available&quot;:&quot;Yes&quot; }, &quot;courseRoleId&quot;:&quot;Instructor&quot; }  Create  r = session.put(&quot;https://&quot; + self.target_url + membership_Path, data=json.dumps(self.PAYLOAD), headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False)  Read  r = session.get(&quot;https://&quot; + self.target_url + memberships_Path, headers={'Authorization':authStr}, verify=False) ... print(&quot;[Membership:getMemberships()] RESPONSE: &quot; + r.text)  Update  self.PAYLOAD = { &quot;dataSourceId&quot;:dsk, &quot;availability&quot;: { &quot;available&quot;:&quot;No&quot; }, &quot;courseRoleId&quot;:&quot;Student&quot; } ... r = session.patch(&quot;https://&quot; + self.target_url + membership_Path, data=json.dumps(self.PAYLOAD), headers={'Authorization':authStr, 'Content-Type':'application/json'}, verify=False)  Delete  r = session.delete(&quot;https://&quot; + self.target_url + membership_Path, headers={'Authorization':authStr}, verify=False)  ","version":null,"tagName":"h3"},{"title":"Conclusion​","type":1,"pageTitle":"Demo using Python","url":"/docs/blackboard/rest-apis/demo-code/python-demo#conclusion","content":"All of the code snippets included in this document are included in a sample REST Demo Python command line application available onGitHub. There is a README.html included that talks more specifically running the code. Feel free to review the code and run it against a test or development Learn instance to see how it works. Contributors on this article: Mark O'Neil Former DirectorPlatform and APIs ","version":null,"tagName":"h3"},{"title":"Basic Authentication with REST","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/getting-started/basic-authentication","content":"","keywords":"","version":null},{"title":"Overview​","type":1,"pageTitle":"Basic Authentication with REST","url":"/docs/blackboard/rest-apis/getting-started/basic-authentication#overview","content":"Authentication for REST Integrations follows the OAuth 2.0 RFC Standard. Each developer has a unique key and secret associated with each application they create. The developer makes an HTTP Post directly to the REST-enabled Learn server requesting an OAuth access token. The Learn instance forwards the request to Anthology's Developer Portal, adding its own siteId to the request so that the portal can determine whether the application is registered with the server. The Portal returns an authorization token that grants the application access to the Learn REST API for one hour. The developer uses this token in subsequent REST calls until the token expires. This workflow is illustrated in the following diagram:  WARNING: Never share or expose an application's key/secret pair. These are used for requesting OAuth tokens, which enable the holder to issue REST requests. Exposing an application key/secret pair or token is a serious security risk. If you think you have exposed a key/secret pair you may request a new pair for the application using the Developer Portal My Applications management page. REST calls are subject to quotas and limits. For more information, seeDeveloper Groups, Site Quotas, and Rate Limit. ","version":null,"tagName":"h3"},{"title":"Before You Start​","type":1,"pageTitle":"Basic Authentication with REST","url":"/docs/blackboard/rest-apis/getting-started/basic-authentication#before-you-start","content":"You must have a developer account at developer.anthology.com.Your application must be registered at developer.anthology.com.The application ID you receive when registering at developer.anthology.com must then be used to install your integgration on your Learn instance. Installing your application on a Learn instance provides the application key:secret pair access to the Learn instance. ","version":null,"tagName":"h3"},{"title":"To Get a Token Using Basic OAuth 2.0​","type":1,"pageTitle":"Basic Authentication with REST","url":"/docs/blackboard/rest-apis/getting-started/basic-authentication#to-get-a-token-using-basic-oauth-20","content":"Use the following high-level steps to fetch a token from your Learn instance. Remember that your Learn instance must be registered at developer.anthology.com and that your application must be registered on your Learn instance. Registering your application with your Learn instance provides you with an application key and secret. Use cURL or an appropriate HTTP library to make a POST REST call to the/learn/api/public/v1/oauth2/token endpoint. Headers must include: Content-Type set to application/x-www-form-urlencodedAuthorization set to Basic followed by a space and with your base64-encoded credentials appended. Credentials must be formatted as application-key:secret before encoding. For example, if your application key were: `12345678-1234-5678-1234-1234567890ab and your secret were abcdefghijklmnopqrstuvwxyzabcdef you would encode the string: 12345678-1234-5678-1234-1234567890ab:abcdefghijklmnopqrstuvwxyzabcdef yielding the encoded value MTIzNDU2NzgtMTIzNC01Njc4LTEyMzQtMTIzNDU2Nzg5MGFiOmFiY2Rl.htmloaWprbG1ub3BxcnN0dXZ3eHl6YWJjZGVm Prepending Basic to that value gives Basic MTIzNDU2NzgtMTIzNC01Njc4LTEyMzQtMTIzNDU2Nzg5MGFiOmFiY2Rl.htmloaWprbG1ub3Bx cnN0dXZ3eHl6YWJjZGVm which would be your Authorization header value. Some REST libraries and clients like cURL handle this encoding for you. The body must include: grant_type=client_credentials. If everything is working correctly, the server will return an HTTP 200 response and a data body. The data body includes a field access_token. Your access token for further REST calls is the value of this field. ","version":null,"tagName":"h3"},{"title":"To Make a REST Call with the Basic OAuth 2.0 Token​","type":1,"pageTitle":"Basic Authentication with REST","url":"/docs/blackboard/rest-apis/getting-started/basic-authentication#to-make-a-rest-call-with-the-basic-oauth-20-token","content":"Use the following high-level steps to use a Learn REST API token to authorize other REST calls. Use cURL or an appropriate HTTP library to make a REST call to the appropriate endpoint. For a list of endpoints and the methods supported for each, see the Learn REST reference docs at https://developer.anthology.com/portal/displayApi/Learn. Headers must include: Content-Type and Accept should be set as specified by the reference docs for the call you want.Authorization set to Bearer followed by a space and your access token. For example, Bearer abcdefghijklmnopqrstuvwxyzabcdefThe body and URL parameters must be set as specified by the reference docs for the call you want. If everything is working correctly, the server will return an HTTP 200 response and a response body as specified by the reference docs for the call you made. ","version":null,"tagName":"h3"},{"title":"Example: Using cURL to Get a Token and Make a REST Call​","type":1,"pageTitle":"Basic Authentication with REST","url":"/docs/blackboard/rest-apis/getting-started/basic-authentication#example-using-curl-to-get-a-token-and-make-a-rest-call","content":"The easist way to test is using cURL. We will assume you have already registered through the [Developer Portal](/rest-apis/learn/Getting Started/registry) and retrieved your application ID, key, and secret, as well as [added your application ID](/rest-apis/learn/Getting Started/registry) to the Learn server you wish to integrate with: From the command line, use cURL to send a token request to Learn, signed with their application key and secret:  key=&lt;your key&gt; secret=&lt;your secret&gt; curl -i -X POST -u &quot;$key:$secret&quot; https://&lt;your server&gt;/learn/api/public/v1/oauth2/token -d &quot;grant_type=client_credentials&quot;  The cURL statement calls and HTTP POST request. This POST request contains an Authorization header that states this is Basic authentication. The cURL command uses the -u switch to create and send a Base64-encoded version of key:secret. cURL sets content-type to application/x-www-form-urlencoded for you. The developer portal returns a standard OAuth 2.0 response, which is passed back to the developer. For example:  HTTP/1.1 200 OK Content-Type: application/json;charset=UTF-8 Cache-Control: no-store Pragma: no-cache { &quot;access_token&quot;: &quot;abcdefghijklmnopqrstuvwxyzabcdef&quot;, &quot;token_type&quot;: &quot;bearer&quot;, &quot;expires_in&quot;: 3600 }  Use the returned access token to make further REST calls. For example:  curl -X GET -H &quot;authorization: Bearer abcdefghijklmnopqrstuvwxyz&quot; https://yourserver/learn/api/public/v1/users?query=userName  ","version":null,"tagName":"h3"},{"title":"Implementation notes:​","type":1,"pageTitle":"Basic Authentication with REST","url":"/docs/blackboard/rest-apis/getting-started/basic-authentication#implementation-notes","content":"Tokens expire after 1 hour, as per the OAuth RFC examples.Tokens are associated with a specific Learn site.Any application may have only one token per Learn site. Asking for a token returns the existing one with an updated expiry time if it has not expired yet.Check the Learn REST API Documentation for error codes. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Demo using Ruby","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/demo-code/ruby-demo","content":"","keywords":"","version":null},{"title":"Prerequisites​","type":1,"pageTitle":"Demo using Ruby","url":"/docs/blackboard/rest-apis/demo-code/ruby-demo#prerequisites","content":"You must [register a developer account and application](/rest-apis/learn/Getting Started/registry) in the Developer PortalYou must[register your application](/rest-apis/learn/Getting Started/registry) in LearnYou must also configure the script as outlined in the README for the project This Ruby command line Application allows you to: AuthenticateCreate, Read, and Update a Data SourceCreate, Read, and Update a TermCreate, Read, and Update a CourseCreate, Read, and Update a UserCreate, Read, and Update a MembershipDelete created objects in reverse order of create - membership, user, course, term, datasource. All generated output is sent to the terminal. This is not meant to be a Ruby tutorial. It will not teach you to write code in Ruby. It will, however, give a Developer familiar with Ruby the knowledge necessary to build a Web Services integration. ","version":null,"tagName":"h3"},{"title":"Assumptions​","type":1,"pageTitle":"Demo using Ruby","url":"/docs/blackboard/rest-apis/demo-code/ruby-demo#assumptions","content":"This help topic assumes the Developer: is familiar with Rubyhas installed Ruby and the Ruby rest-client gem.has obtained a copy of the source code and built it in conjunction with the project README.md file.has a REST-enabled Learn instance. ","version":null,"tagName":"h3"},{"title":"Code Walkthrough​","type":1,"pageTitle":"Demo using Ruby","url":"/docs/blackboard/rest-apis/demo-code/ruby-demo#code-walkthrough","content":"To build an integration with the Learn REST Web Services, regardless of the programming language of choice, can really be summed up in two steps: Use the Application Key and Secret to obtain an OAuth 2.0 access token, as described in the [Basic Authentication](/rest-apis/learn/Getting Started/basic-authentication) document.Call the appropriate REST endpoint with the appropriate data to perform the appropriate action. ","version":null,"tagName":"h3"},{"title":"Authorization and Authentication​","type":1,"pageTitle":"Demo using Ruby","url":"/docs/blackboard/rest-apis/demo-code/ruby-demo#authorization-and-authentication","content":"The REST Services rely on OAuth 2.0 Bearer Tokens for authentication. A request is made to the token endpoint with a Basic Authorization header containing the base64-encoded key:secret string as its key. The token service returns a JSON object containing the Access Token, the Token Type, and the number of seconds until the token expires. The token is set to expire after one hour, and subsequent calls to retrieve the token will return the same token with an updated expiry time until such time that the token has expired. There is no refresh token and currently no revoke token method. The Ruby code handles this with the following code:  bb_rest = RestClient::Resource.new $AUTH_PATH, $KEY, $SECRET bb_rest.post('grant_type=client_credentials', :accept =&gt; :json){ |response, request, result, &amp;block| case response.code when 200 p &quot;It worked !&quot; token = JSON.parse(response) $access_token = token['access_token'] $auth = &quot;Bearer &quot; + $access_token p 'Access_Token: ' + $access_token else p response.to_s response.return!(request, result, &amp;block) end }  The JSON response is serialized into the Token object, and you may then retrieve those values from that object. ","version":null,"tagName":"h3"},{"title":"Calling Services​","type":1,"pageTitle":"Demo using Ruby","url":"/docs/blackboard/rest-apis/demo-code/ruby-demo#calling-services","content":"The individual service calls are handled in succession in the restdemo.rb file. Each operation and object combination creates the JSON body by instantiating the appropriate JSON object in the form of a String (required if you need to control the content-type, which you do) when necessary, and then generating the appropriate HTTP Request, shipping it to Learn, and serializing the JSON response back into the appropriate object. End points are generally defined as /learn/api/public/v1/&lt;objecttype&gt;/&lt;objectId&gt;. Object ID can be either the pk1, like _1_1, or as thebatchuid. This value should be prepended by externalId:, like externalId:test101. For example, to retrieve a course by the pk1 _1_1, you would call GET /learn/api/public/v1/courses/\\_1_1. To retrieve by the batchuid test101, you would call GET /learn/api/public/v1/courses/externalId:test101. Create is sent to Learn as a HTTP POST message with a JSON body that defines the object. The endpoint should omit the objectId, as this will be generated on creation. Read is sent to Learn as a HTTP GET message with an empty body. The endpoint should include the objectId being retrieved. Update is sent to Learn as a HTTP PATCH message with a JSON body that defines the object. The endpoint should include the objectId being updated. Delete is sent to Learn as a HTTP DELETE message with empty body. The endpoint should include the objectId being deleted. ","version":null,"tagName":"h3"},{"title":"Datasources​","type":1,"pageTitle":"Demo using Ruby","url":"/docs/blackboard/rest-apis/demo-code/ruby-demo#datasources","content":"Create Ruby Demo RestClient.post($DSK_PATH, payload, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block| case response.code when 201 p &quot;It worked !&quot; datasource = JSON.parse(response) $dsk_id = datasource['id'] p 'Create Datasource: dsk_id=' + $dsk_id else p response.to_s response.return!(request, result, &amp;block) end }   **Read** ```ruby RestClient.get($DSK_PATH + $dsk_id, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block| case response.code when 200 p &quot;Got Datasource !&quot; + response.to_s else p response.to_s response.return!(request, result, &amp;block) end }  Update  payload = &quot;{ \\\\&quot;externalId\\\\&quot;:\\\\&quot;BBDN-DSK-RUBY\\\\&quot;, \\\\&quot;description\\\\&quot;: \\\\&quot;Demo Data Source used for REST Ruby Demo - Updated\\\\&quot; }&quot; RestClient.patch($DSK_PATH + $dsk_id, payload, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block| case response.code when 200 p 'Updated Datasource: ' + response.to_s else p response.to_s response.return!(request, result, &amp;block) end }  Delete  RestClient.delete($DSK_PATH + $dsk_id, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block| case response.code when 204 p &quot;Datasource Deleted !&quot; else p response.to_s response.return!(request, result, &amp;block) end }  ","version":null,"tagName":"h3"},{"title":"Terms​","type":1,"pageTitle":"Demo using Ruby","url":"/docs/blackboard/rest-apis/demo-code/ruby-demo#terms","content":"Create  payload = &quot;{ \\\\&quot;externalId\\\\&quot;:\\\\&quot;BBDN-TERM-RUBY\\\\&quot;, \\\\&quot;dataSourceId\\\\&quot;:\\\\&quot;&quot; + $dsk_id + &quot;\\\\&quot;, \\\\&quot;name\\\\&quot; : \\\\&quot;REST Demo Term - Ruby\\\\&quot;, \\\\&quot;description\\\\&quot;: \\\\&quot;Term Used For REST Demo - Ruby\\\\&quot;, \\\\&quot;availability\\\\&quot; : { \\\\&quot;available\\\\&quot; : \\\\&quot;Yes\\\\&quot; } }&quot; RestClient.post($TERM_PATH, payload, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block| case response.code when 201 p &quot;It worked !&quot; term = JSON.parse(response) $term_id = term['id'] p 'Create Term: term_id=' + $term_id else p response.to_s response.return!(request, result, &amp;block) end }  Read  RestClient.get($TERM_PATH + $term_id, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block| case response.code when 200 p &quot;Got Term !&quot; + response.to_s else p response.to_s response.return!(request, result, &amp;block) end }  Update  payload = &quot;{ \\\\&quot;externalId\\\\&quot;:\\\\&quot;BBDN-TERM-RUBY\\\\&quot;, \\\\&quot;dataSourceId\\\\&quot;:\\\\&quot;&quot; + $dsk_id + &quot;\\\\&quot;, \\\\&quot;name\\\\&quot; : \\\\&quot;REST Demo Term - Ruby\\\\&quot;, \\\\&quot;description\\\\&quot;: \\\\&quot;Updated Term Used For REST Demo - Ruby\\\\&quot;, \\\\&quot;availability\\\\&quot; : { \\\\&quot;available\\\\&quot; : \\\\&quot;Yes\\\\&quot; } }&quot; RestClient.patch($TERM_PATH + $term_id, payload, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block| case response.code when 200 p 'Updated Term: ' + response.to_s else p response.to_s response.return!(request, result, &amp;block) end }  Delete  RestClient.delete($TERM_PATH + $term_id, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block| case response.code when 204 p &quot;Term Deleted !&quot; else p response.to_s response.return!(request, result, &amp;block) end }  ","version":null,"tagName":"h3"},{"title":"Course​","type":1,"pageTitle":"Demo using Ruby","url":"/docs/blackboard/rest-apis/demo-code/ruby-demo#course","content":"Create  payload = &quot;{ \\\\&quot;externalId\\\\&quot; : \\\\&quot;BBDN-Java-Ruby-Demo\\\\&quot;, \\\\&quot;courseId\\\\&quot; : \\\\&quot;BBDN-Java-Ruby-Demo\\\\&quot;, \\\\&quot;name\\\\&quot; : \\\\&quot;Course Used For REST Demo - Ruby\\\\&quot;, \\\\&quot;description\\\\&quot; : \\\\&quot;Course Used For REST Demo - Ruby\\\\&quot;, \\\\&quot;allowGuests\\\\&quot; : \\\\&quot;false\\\\&quot;, \\\\&quot;readOnly\\\\&quot; : \\\\&quot;false\\\\&quot;, \\\\&quot;termId\\\\&quot; : \\\\&quot;&quot; + $term_id + &quot;\\\\&quot;, \\\\&quot;dataSourceId\\\\&quot; : \\\\&quot;&quot; + $dsk_id + &quot;\\\\&quot;, \\\\&quot;availability\\\\&quot; : { \\\\&quot;available\\\\&quot; : \\\\&quot;Yes\\\\&quot; } }&quot; RestClient.post($COURSE_PATH, payload, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block| case response.code when 201 p &quot;It worked !&quot; course = JSON.parse(response) $course_id = course['id'] p 'Create Course: course_id=' + $course_id else p response.to_s response.return!(request, result, &amp;block) end }  Read  RestClient.get($COURSE_PATH + $course_id, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block| case response.code when 200 p &quot;Got Course !&quot; + response.to_s else p response.to_s response.return!(request, result, &amp;block) end }  Update  payload = &quot;{ \\\\&quot;externalId\\\\&quot; : \\\\&quot;BBDN-Java-Ruby-Demo\\\\&quot;, \\\\&quot;courseId\\\\&quot; : \\\\&quot;BBDN-Java-Ruby-Demo\\\\&quot;, \\\\&quot;name\\\\&quot; : \\\\&quot;Course Used For REST Demo - Ruby\\\\&quot;, \\\\&quot;description\\\\&quot; : \\\\&quot;Updated Course Used For REST Demo - Ruby\\\\&quot;, \\\\&quot;allowGuests\\\\&quot; : \\\\&quot;false\\\\&quot;, \\\\&quot;readOnly\\\\&quot; : \\\\&quot;false\\\\&quot;, \\\\&quot;termId\\\\&quot; : \\\\&quot;&quot; + $term_id + &quot;\\\\&quot;, \\\\&quot;dataSourceId\\\\&quot; : \\\\&quot;&quot; + $dsk_id + &quot;\\\\&quot;, \\\\&quot;availability\\\\&quot; : { \\\\&quot;available\\\\&quot; : \\\\&quot;Yes\\\\&quot; } }&quot; RestClient.patch($COURSE_PATH + $course_id, payload, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block| case response.code when 200 p 'Updated Course: ' + response.to_s else p response.to_s response.return!(request, result, &amp;block) end }  Delete  RestClient.delete($COURSE_PATH + $course_id, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block| case response.code when 204 p &quot;Course Deleted !&quot; else p response.to_s response.return!(request, result, &amp;block) end }  ","version":null,"tagName":"h3"},{"title":"Users​","type":1,"pageTitle":"Demo using Ruby","url":"/docs/blackboard/rest-apis/demo-code/ruby-demo#users","content":"Create  payload = &quot;{ \\\\&quot;externalId\\\\&quot; : \\\\&quot;bbdnrestdemorubyuser\\\\&quot;, \\\\&quot;userName\\\\&quot; : \\\\&quot;restrubyuser\\\\&quot;, \\\\&quot;password\\\\&quot; : \\\\&quot;Bl@ckb0ard!\\\\&quot;, \\\\&quot;studentId\\\\&quot; : \\\\&quot;restrubyuser\\\\&quot;, \\\\&quot;dataSourceId\\\\&quot; : \\\\&quot;&quot; + $dsk_id + &quot;\\\\&quot;, \\\\&quot;name\\\\&quot; : { \\\\&quot;given\\\\&quot; : \\\\&quot;Ruby\\\\&quot;, \\\\&quot;family\\\\&quot; : \\\\&quot;Rest Demo\\\\&quot; }, \\\\&quot;contact\\\\&quot; : { \\\\&quot;email\\\\&quot; : \\\\&quot;developers@anthology.com\\\\&quot; }, \\\\&quot;availability\\\\&quot; : { \\\\&quot;available\\\\&quot; : \\\\&quot;Yes\\\\&quot; } }&quot; RestClient.post($USER_PATH, payload, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block| case response.code when 201 p &quot;It worked !&quot; user = JSON.parse(response) $user_id = user['id'] p 'Create User: user_id=' + $user_id else p response.to_s response.return!(request, result, &amp;block) end }  Read  RestClient.get($USER_PATH + $user_id, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block| case response.code when 200 p &quot;Got User !&quot; + response.to_s else p response.to_s response.return!(request, result, &amp;block) end }  Update  payload = &quot;{ \\\\&quot;externalId\\\\&quot; : \\\\&quot;bbdnrestdemorubyuser\\\\&quot;, \\\\&quot;userName\\\\&quot; : \\\\&quot;restrubyuser\\\\&quot;, \\\\&quot;password\\\\&quot; : \\\\&quot;Bl@ckb0ard!\\\\&quot;, \\\\&quot;studentId\\\\&quot; : \\\\&quot;restrubyuser\\\\&quot;, \\\\&quot;dataSourceId\\\\&quot; : \\\\&quot;&quot; + $dsk_id + &quot;\\\\&quot;, \\\\&quot;name\\\\&quot; : { \\\\&quot;given\\\\&quot; : \\\\&quot;Ruby\\\\&quot;, \\\\&quot;family\\\\&quot; : \\\\&quot;Rest Demo\\\\&quot;, \\\\&quot;middle\\\\&quot; : \\\\&quot;updated\\\\&quot; }, \\\\&quot;contact\\\\&quot; : { \\\\&quot;email\\\\&quot; : \\\\&quot;developers@anthology.com\\\\&quot; }, \\\\&quot;availability\\\\&quot; : { \\\\&quot;available\\\\&quot; : \\\\&quot;Yes\\\\&quot; } }&quot; RestClient.patch($USER_PATH + $user_id, payload, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block| case response.code when 200 p 'Updated User: ' + response.to_s else p response.to_s response.return!(request, result, &amp;block) end }  Delete  RestClient.delete($USER_PATH + $user_id, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block| case response.code when 204 p &quot;User Deleted !&quot; else p response.to_s response.return!(request, result, &amp;block) end }  ","version":null,"tagName":"h3"},{"title":"Memberships​","type":1,"pageTitle":"Demo using Ruby","url":"/docs/blackboard/rest-apis/demo-code/ruby-demo#memberships","content":"Create  payload = &quot;{ \\\\&quot;courseRoleId\\\\&quot; : \\\\&quot;Student\\\\&quot;, \\\\&quot;dataSourceId\\\\&quot; : \\\\&quot;&quot; + $dsk_id + &quot;\\\\&quot;, \\\\&quot;availability\\\\&quot; : { \\\\&quot;available\\\\&quot; : \\\\&quot;Yes\\\\&quot; } }&quot; RestClient.put($COURSE_PATH + $course_id + '/users/' + $user_id, payload, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block| case response.code when 201 p &quot;It worked !&quot; membership = JSON.parse(response) $created = membership['created'] p 'Create Membership: ' + $created else p response.to_s response.return!(request, result, &amp;block) end }  Read  RestClient.get($COURSE_PATH + $course_id + '/users/' + $user_id, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block| case response.code when 200 p &quot;Got Membership !&quot; + response.to_s else p response.to_s response.return!(request, result, &amp;block) end }  Update  payload = &quot;{ \\\\&quot;userId\\\\&quot; : \\\\&quot;&quot; + $user_id + &quot;\\\\&quot;, \\\\&quot;courseId\\\\&quot; : \\\\&quot;&quot; + $course_id + &quot;\\\\&quot;, \\\\&quot;courseRoleId\\\\&quot; : \\\\&quot;Instructor\\\\&quot;, \\\\&quot;dataSourceId\\\\&quot; : \\\\&quot;&quot; + $dsk_id + &quot;\\\\&quot;, \\\\&quot;availability\\\\&quot; : { \\\\&quot;available\\\\&quot; : \\\\&quot;Yes\\\\&quot; } }&quot; RestClient.patch($COURSE_PATH + $course_id + '/users/' + $user_id, payload, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block| case response.code when 200 p 'Updated Membership: ' + response.to_s else p response.to_s response.return!(request, result, &amp;block) end }  Delete  RestClient.delete($COURSE_PATH + $course_id + '/users/' + $user_id, :content_type =&gt; :json, :accept =&gt; :json, :Authorization =&gt; $auth){ |response, request, result, &amp;block| case response.code when 204 p &quot;Membership Deleted !&quot; else p response.to_s response.return!(request, result, &amp;block) end }  ","version":null,"tagName":"h3"},{"title":"Conclusion​","type":1,"pageTitle":"Demo using Ruby","url":"/docs/blackboard/rest-apis/demo-code/ruby-demo#conclusion","content":"All of the code snippets included in this document at included in a sample REST Demo Ruby application available onGitHub. There is a README.html included that talks more specifically about building and running the code. Feel free to review the code and run it against a test or development Learn instance to see how it works. Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"First Steps with Learn REST API","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/getting-started/first-steps","content":"","keywords":"","version":null},{"title":"Before You Get Started​","type":1,"pageTitle":"First Steps with Learn REST API","url":"/docs/blackboard/rest-apis/getting-started/first-steps#before-you-get-started","content":"Anthology offers lots of tools to help you develop an application, plugin, or other integration for use with Anthology products like Learn and Student. The most important ones are your accounts with these sites: Anthology Developer Portal is where you register applications so they can work with Anthology products. It's also where you get your own key and secret that you need to authenticate your application with Anthology products.Anthology Developer Community is where you learn to develop with Anthology products, get the latest news, and discuss with other Anthology integrators. Note that the Developer Portal and Developer Community require separate accounts. ","version":null,"tagName":"h2"},{"title":"Register as a Anthology Developer​","type":1,"pageTitle":"First Steps with Learn REST API","url":"/docs/blackboard/rest-apis/getting-started/first-steps#register-as-a-anthology-developer","content":"LTI and REST integrations begin at the Developer Portal. This is where you register LTI and REST Applications and get the ID, key, and secrets for client deployment. In the portal, you can see which client systems are using the integrations. Signing up is free, and you can develop your integration at no cost. There may be cost involved in deploying your integration, but before that happens, you'll have to speak with us. To discuss deploying your application, please contact us atdevelopers@anthology.com. Before you can authenticate your project with Anthology applications, you need to be a registered Anthology developer. To register as a Anthology developer: Go to https://developer.anthology.com/ and select Sign Up. Read and agree to the terms and conditions.Provide your email address, a password, your first name and last, and select the checkbox to prove you are human.Select Create Account and you're on your way. For more information about the Developer Portal please see this document Note: If you are an Anthology client, an Anthology Partner / Vendor / Developer of a REST Application should NEVER tell you to go to the developer portal and create an App ID with the associated key/secret to install their application. They should never tell you to apply for a Rate/Site increase for their application. Anthology DOES NOT support that model. Every REST Application developer should give you an App ID to install their REST App and tell you how to configure a system role for its use. Period. The REST Application developer needs to request the increases they need to run their application themselves. If they ask you to go to developer.anthology.com and get an App ID/Key/Secret, please tell them that is wrong. They should have exactly one App ID for their production REST application that they are asking you to install. Contractors are an exception to this policy as they are producing an integration on your, the Anthology client, behalf. Questions regarding the policy and whether you are impacted may be asked here, or posted todevelopers@anthology.com ","version":null,"tagName":"h3"},{"title":"Join the Community​","type":1,"pageTitle":"First Steps with Learn REST API","url":"/docs/blackboard/rest-apis/getting-started/first-steps#join-the-community","content":"The Anthology developer community is the best place to find more information about integrating your project with Anthology products. You will benefit from the community most by joining in.To register in the Anthology developer community: Go to Anthology Developer Community and select Register.If your organization is a Blackboard client or partner organization and you have a Behind the Blackboard login, select Behind the Blackboard Login. Otherwise, select Community Site Login.Enter your email address to receive a link via email.In your email's inbox, find the email sent by Blackboard. You might have to check your spam or junk folder. The email's subject is something like Blackboard Community: Email Validation. Select the link in your email. You will be taken to a registration page.In the registration page, complete all the required fields and select Create Account. What Blackboard Application Do I Need?​ Your Anthology-compatible application can work with one or more of Anthology's tools. How you build an integration with Anthology software and hardware depends on which tools you want to integrate with. The tools you'll want to use depend on what you want to do. I want to programmatically... You'll need to... Add files, text, and the like to Learn Authenticate with Learn via REST APICheck out our Learn REST API reference Get Development Instances of Anthology Applications​ Anthology makes available instances of Anthology applications that you can use to build projects that integrate with Anthology applications. Among others, we offer these popular developer instances. AWS instance of Learn While Blackboard does not charge for entry-level use, AWS may charge various fees for their services. ","version":null,"tagName":"h3"},{"title":"Developing with Learn​","type":1,"pageTitle":"First Steps with Learn REST API","url":"/docs/blackboard/rest-apis/getting-started/first-steps#developing-with-learn","content":"Go to the developer portal and [register as a Developer](/rest-apis/learn/Getting Started/registry) if you haven't already, and then register your application to get a key and secret. Use your key and secret to authenticate with Learn.  ","version":null,"tagName":"h3"},{"title":"Look at the Learn REST Reference​","type":1,"pageTitle":"First Steps with Learn REST API","url":"/docs/blackboard/rest-apis/getting-started/first-steps#look-at-the-learn-rest-reference","content":"Check out the Learn REST API Reference. In particular,look at the range of endpoints available. Check the Since version for endpoint that interest you. This version number indicates the version since which the endpoint has been available. This way, you can make sure that your Learn server is is able to use it. ","version":null,"tagName":"h3"},{"title":"Authentication/Authorization​","type":1,"pageTitle":"First Steps with Learn REST API","url":"/docs/blackboard/rest-apis/getting-started/first-steps#authenticationauthorization","content":"Authentication for REST Integrations follows the OAuth 2.0 RFC Standard. Essentially, every developer has a unique key and secret associated with each application they create. They make an HTTP Post to the API requesting client_credentials, which returns an authorization token that grants the application access to the Learn REST API for one hour. This token is then passed in subsequent REST calls until such time that the token expires. This can be done either with Basic Authentication or, as of Learn 3200.7 in SaaS or Q4 2017 for self- and managed-hosted clients, using Three-Legged OAuth. ","version":null,"tagName":"h3"},{"title":"Calling Services​","type":1,"pageTitle":"First Steps with Learn REST API","url":"/docs/blackboard/rest-apis/getting-started/first-steps#calling-services","content":"Once your application acquires an access token, it only needs to pass that token as a Bearer token in the Authorization header of your API calls. Review the authentication documentation in the above section for an overview, or find more specific details on the available API endpoints and APIs on the Developer Portal's Swagger API document.In its current implementation, Learn REST APIs does not support Cross-Origin Resource Sharing (CORS). To learn about this and see an example to workaround this with Angular2, see the blog entitled Cross-Origin Resource Sharing; or Why I Can't Use AJAX with Learn APIs. ","version":null,"tagName":"h3"},{"title":"Configure an Instance of Learn to Work with Your Application​","type":1,"pageTitle":"First Steps with Learn REST API","url":"/docs/blackboard/rest-apis/getting-started/first-steps#configure-an-instance-of-learn-to-work-with-your-application","content":"Once you have registered with the developer portal and built an integration, deploying to a Learn SaaS instance is a simple step. The Learn administrator that wants to use your integration needs the Application ID you got from the developer portal. The administrator will also need to create a Learn user account with sufficient entitlements to associate with your integration. This gives the administrator full control over the entitlements used by your application. For more information on how to configure Learn, please see Managing REST Integrations in Learn: The REST Integrations Tool for System Administrators. ","version":null,"tagName":"h3"},{"title":"Glossary​","type":1,"pageTitle":"First Steps with Learn REST API","url":"/docs/blackboard/rest-apis/getting-started/first-steps#glossary","content":"Term\tDefinitionApplication ID\tUnique identifier for the application used to integrate with the Learn REST Services. Each unique integration should have its own Application. Application Key\tEach application is assigned a unique key. This is used to authorize REST API calls against Learn. Application Secret\tEach application is assigned a unique secret. This is used to authorize REST API calls against Learn. Access Token\tA token is a unique string representing an implicit authorization granted by an OAuth 2.0 Service Provider. CRUD\tCreate, Read, Update, Delete {: .striped} More Information​ We will continue to add new examples, tutorials, and code samples, so make sure to check these links regularly. Developer PortalREST Documentation Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Anthology's REST API Framework","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/getting-started/framework","content":"","keywords":"","version":null},{"title":"The Actors in REST API Use Cases​","type":1,"pageTitle":"Anthology's REST API Framework","url":"/docs/blackboard/rest-apis/getting-started/framework#the-actors-in-rest-api-use-cases","content":"There are three actors in the REST API use case: Developer:: This is the person who writes an application that uses the new REST APIs. Through the application the developer manages authorization using the registered application’s OAuth Key and Secret, any data sent to or received from Learn, and tracks application entitlements required for operation. Developers are limited to non-production testing pursuant to the applicable REST Developer Agreements. Learn Administrator: By default, no Applications can access the REST APIs. A Learn Administrator must enable each app from the Learn Admin Panel before access is granted. This is done by creating an integration using the Learn Admin REST API Integrations tool using the developer provided application Id* and a User with the required entitlements as specified by the developer. Important Note: By default NO integrations are enabled and the Learn server will not allow integrations without a Learn Administrator taking action. Learn Administrator: The Developer Portal: This is a new website (https://developer.anthology.com) where a developer can browse the REST API documentation, register as a REST Developer, and register application references for integrating with Learn. The REST API Framework Actors, interactions, and data paths NOTE: We do NOT support a model where the developer of the REST Application requires the Learn Administrator to get the Application ID, key, and secret for installing the developer’s application on the Learn system. The developer will get one APP ID, key and secret for the one application. The developer is responsible for configuring the key and secret on their server. For security reasons, the key and secret should never be shared with the client or any other another party. The REST Application can determine which institution requests are coming from by examining the FQDN in the requests. There is no need for installing a separate Application ID for a given vendors application on each Learn instance. How These Three Actors Work Together to Enable Learn REST Integrations​ A developer (A) - or organization - decides that they want to create a new application which uses the Learn REST APIs. She reviews the documentation and signs up inside the developer portal (C). Once she registers, she may create one to many applications. Creating an application provides an OAuth Key and Secret which is used to authorize Learn REST API access and an Application ID that is used to approve Learn instances. The developer uses the Learn Admin REST API Integrations tool on a Developer Virtual Machine (B) or their Test instance of Learn (B) to enable access within Learn by providing the application ID for the particular application in development. Once the Application has been enabled, the developer may now issue REST requests against the specific Learn server. These HTTPS requests are issued directly against the Learn instance and are secured by OAuth 2.0. Once the application development and testing is completed, the developer shares the application Id and the required entitlements with the Blackboard Learn admin to enable access within Learn for the particular application. The admin inputs the application Id provided by the developer and assigns a Learn User that the integration will run as. The role for this user must have the entitlements as requested by the developer. This user can be an existing user or a newly created user specific to the application. The application will run as this user in Learn and will thus have all the rights that the user has in the system. If the admin wants to allow the application only READ access, this can be done with the security system already available in Learn by assigning the user role READ only entitlements. Data Exchange between the Actors​ The request BODY or response is never sent to the developer portal. Personal data is exchanged between the application and Learn system only - no personally identifiable data is shared with the portal. Therefore, all data may remain within the Learn server and REST application regions. Primary key identifiers (e.g. Learn PK1 for User or Course) are shared with the portal for purposes of request logging and error messages. Note that in an upcoming release of Learn these PK1s will also be anonymized so no PII information is ever communicated outside the bounds of Learn-to-application exchanges. ","version":null,"tagName":"h3"},{"title":"Data Flow​","type":1,"pageTitle":"Anthology's REST API Framework","url":"/docs/blackboard/rest-apis/getting-started/framework#data-flow","content":"","version":null,"tagName":"h2"},{"title":"Pre-authorization​","type":1,"pageTitle":"Anthology's REST API Framework","url":"/docs/blackboard/rest-apis/getting-started/framework#pre-authorization","content":"The developed application first makes an authorization request to their Learn server. This request contains the OAuth Key and Secret provisioned on application creation in the developer portal. Learn receives the request and asks the Developer Portal for a TOKEN if the KEY/SECRET are correct and valid for that Learn instance. The Developer Portal returns a response to Learn containing a TOKEN if validation was successful. If validation is successful Learn caches and returns the TOKEN in the response to the application or returns a 401 Invalid client credentials. Note: Tokens have a lifecycle of one hour and currently are not revocable. ","version":null,"tagName":"h3"},{"title":"Post-authorization​","type":1,"pageTitle":"Anthology's REST API Framework","url":"/docs/blackboard/rest-apis/getting-started/framework#post-authorization","content":"Once authorized, the application may then make data oriented requests to Learn by including the issued Token. Developer data oriented requests are processed by Learn which returns response data to the requesting application. a. Learn checks the local cache to validate the TOKEN – if valid it runs and returns the request response. b. In a background thread Learn contacts the developer portal indicating a specified request was used by a TOKEN on a Learn server. c. The developer portal responds to Learn to indicate if the TOKEN is still valid (not revoked) and is still running under the rate limits. If the TOKEN has been revoked or rate limits have been reached, all future requests for that token will fail. Note: Learn sends REST transaction and error log messages to the portal for purposes of API management and usage. The data sent to the portal includes the Learn Instance ID, Developer Application ID, and the REST API used (GET /users/ for instance). ","version":null,"tagName":"h3"},{"title":"Rate Limiting​","type":1,"pageTitle":"Anthology's REST API Framework","url":"/docs/blackboard/rest-apis/getting-started/framework#rate-limiting","content":"In the background, the Learn instance securely communicates with the Developer Portal to enable rate limiting on the Developer Application. This is done by telling the Portal how many and which type of REST calls are being issued to Learn. For the duration of the technical preview we have set the rate limit on a developers suite of applications to individual institution integrations at 10,000 requests per 24 hour period. As the Technical Preview progresses we will be collecting data on usage which will be analyzed to determine Customer and third party developer production grade rate limits when the Technical Preview is lifted. Contributors on this article: Mark O'Neil Former DirectorPlatform and APIs ","version":null,"tagName":"h3"},{"title":"Mapping Entitlements to Privileges","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/getting-started/getting-started-with-entitlements","content":"","keywords":"","version":null},{"title":"A few definitions first​","type":1,"pageTitle":"Mapping Entitlements to Privileges","url":"/docs/blackboard/rest-apis/getting-started/getting-started-with-entitlements#a-few-definitions-first","content":"We talk about entitlements when we talk about actions an application can perform An entitlement looks like this: course.attendance.VIEWYou can find them in https://developer.anthology.com/portal/displayApiThey are usually displayed when you expand an endpoint, the first thing is mentioned. We talk about privileges when we talk about actions an user can perform Privileges look like this: Administrator Panel (Communities) &gt; Institutional HierarchyYou can find them when setting up a new system role and assigning privileges We talk about endpoints when we talk about an url path that will return information. If you need to know por about this, please review our presentations about REST API for begginers. ","version":null,"tagName":"h3"},{"title":"What do you need?​","type":1,"pageTitle":"Mapping Entitlements to Privileges","url":"/docs/blackboard/rest-apis/getting-started/getting-started-with-entitlements#what-do-you-need","content":"You need to know how to create a custom System Role: How to create a System roleYou need to know which api endpoints you will be using: Learn API endpointsYou need to review, based on the endpoints you will be using, the entilements that you need. Remember that each entitlement is described when opening an endpoint at the beggining. ","version":null,"tagName":"h2"},{"title":"Context​","type":1,"pageTitle":"Mapping Entitlements to Privileges","url":"/docs/blackboard/rest-apis/getting-started/getting-started-with-entitlements#context","content":"When you want to develop an application, you will need to enable permissions for it. Doing so within learn can be challening because we talk in different terms when creating system roles and assigning privileges, we explain about them up in this page, make sure to read that first. Given that you already have the things that you need [Custom system role, the endpoints and entitlements] When you where creating the system role, you may or may not have noticed that as I mentioned before, the Privileges look nothing like the entitlements, so, which privileges do I pick? ","version":null,"tagName":"h2"},{"title":"Mapping Entitlements with Privileges​","type":1,"pageTitle":"Mapping Entitlements to Privileges","url":"/docs/blackboard/rest-apis/getting-started/getting-started-with-entitlements#mapping-entitlements-with-privileges","content":"We have a way for you to know which privilege pick: First, you need to know how to create a bookmark: ","version":null,"tagName":"h2"},{"title":"In Google Chrome (Version 116.0.5845.110):​","type":1,"pageTitle":"Mapping Entitlements to Privileges","url":"/docs/blackboard/rest-apis/getting-started/getting-started-with-entitlements#in-google-chrome-version-11605845110","content":"Paste this in your url bar: chrome://bookmarks/ (This will take you to your bookmark manager)Click on the three vertical dots on the top right of that web page &gt; Add new bookmarkProvide a nameUnder url paste ONLY this code (This a really long ONE line make sure you copy all the code until you see empty () ): javascript:(function()%7Bif('jQuery'%20in%20window)%7Blet%20showUids%3D(jq)%3D%3E%7Bjq('tbody%23listContainer_databody%20%3E%20tr').each((i%2Ctr)%3D%3E%7B%20var%20val%20%3D%20jq('input%5Btype%3Dcheckbox%5D'%2C%20tr).prop('value')%3B%20jq('th'%2C%20tr).append('%3Cdiv%3E%3Ci%3E'%2Bval%2B'%3C%2Fi%3E%3C%2Fdiv%3E')%3B%20%7D)%7D%3Blet%20ws%3D%5B%5D%3Bws.push(window)%3Blet%20ifr%3DjQuery('iframe').prop('contentWindow')%3Bif(ifr)%7Bws.push(ifr)%3B%7Dws.forEach((w)%3D%3E%7BshowUids(w.jQuery)%3B%7D)%3B%7D%7D)()  It should look something like this:  ","version":null,"tagName":"h3"},{"title":"What happens now?​","type":1,"pageTitle":"Mapping Entitlements to Privileges","url":"/docs/blackboard/rest-apis/getting-started/getting-started-with-entitlements#what-happens-now","content":"After you have done everything properly, you can go to the privileges of your custom system role and you will see this:  And if you click your bookmark while still on the privileges page you should see this:  Make sure that the Show all privileges button was clicked first Contributors on this article: Davey Herrera Software EngineerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h2"},{"title":"LTI or REST?","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/getting-started/lti-or-rest","content":"","keywords":"","version":null},{"title":"LTI​","type":1,"pageTitle":"LTI or REST?","url":"/docs/blackboard/rest-apis/getting-started/lti-or-rest#lti","content":"LTI stands for Learning Tools Interoperability®. It is a standard developed and published by the IMS Global® Learning Consortium. You build your integration following theLTI and LTI Advantage standards. In LTI-speak, your integration is a &quot;Tool&quot; that integrates with a platform (LMS) like Learn. Learn has been certified to meet the LTI standards. If your Tool also follows the standards, you can ensure this by getting certified, then your Tool will work with Learn, and any platform that has been certified. This is a big differentiator between LTI and REST. A certified LTI Tool will work on multiple LMS Platforms. A platform's REST APIs are always specific to the platform. But, at the end of the day LTI is a web-application, as is a REST API application. Your Tool, a web-application following the LTI standard, gets HTTPS requests from and makes HTTPS requests to the LMS. ","version":null,"tagName":"h2"},{"title":"REST​","type":1,"pageTitle":"LTI or REST?","url":"/docs/blackboard/rest-apis/getting-started/lti-or-rest#rest","content":"REST stands for Representational State Transfer. It is a lightweight, flexible web service architecture that allows HTTP commands to be sent to Web Applications without unnecessary overhead. (REST documentation references HTTP, but to be secure everything with Learn is done over HTTPS.) Anthology has developed and publishedREST APIs for Learn. ","version":null,"tagName":"h2"},{"title":"LTI DISCUSSION​","type":1,"pageTitle":"LTI or REST?","url":"/docs/blackboard/rest-apis/getting-started/lti-or-rest#lti-discussion","content":"When talking about LTI, we use terms like launch, platform, and tool. A Learn administrator can set up your tool in Learn, following documentation that you provide. Anthology provides documentation applicable to any LTI tool on help.blackboard.com. Rather than reference a link that may change your best bet for finding such documentation is to use your favorite internet search engine and look for &quot;Learn LTI documentation.&quot; I just did and the help page for our LTI documentation for admins was the top result! Once your LTI tool has been configured on a Learn system by the admin for that system, course instructors can then place links to your Tool in their courses. Search this site for LTI and you will find demonstrations and tutorials on LTI in Learn. The most common, and likley the best, way for and instructor to place content from your tool in their course is to use Deep-Linking 2.0. The point of this discussion is that once configured by the administrator, use of your tool and the content it provides looks like it is a part of Learn, including when the instructor is selecting content to be 'placed' in the course, and then when the student views and uses that content. And, using the LTI Advantage Names and Roles Provisioning Service (NPRS) and the Assignment and Grades Service (AGS), your tool can integrate closely with the course roster and the gradebook for the course. In summary, you can do a lot with LTI 1.3 &amp; LTI Advantage, where the users of the LMS can use your web-application seamlessly from within the LMS and then with the aforementioned services even manipulate the course roster and gradebook. Get started with this documentation. ","version":null,"tagName":"h2"},{"title":"REST DISCUSSION​","type":1,"pageTitle":"LTI or REST?","url":"/docs/blackboard/rest-apis/getting-started/lti-or-rest#rest-discussion","content":"Given how much you can do with LTI, why REST APIs? Well, the LMS is also a web application and it can be represented by many different types of 'objects'. Users, courses, enrollments, calendars, announcements, content items, assignments, quizes, etc. If you want a complete view of the representation of a user or course member in Learn, you need to use our REST APIs because LTI is written to apply to all platforms, while each platform has it's own nuanced way of representing the different 'objects' in the system. For example a User in Learn has a uuuid identifier, an external ID, a datasource ID, a set of system role IDs, a URL for an avatar, etc. Some other LMS may or may not have these. LTI won't give you everything about a User object in Learn, REST APIs will. LTI may give you a subset. Another thing is that LTI doesn't cover things like creating a document in Learn, or pulling a list of all of the different types of content in a course, or creating, reading and deleting announcements. Here's a short-list of 'objects' you can read and manipulate in Learn with our REST APIs: Announcements, Attendance/meetings, Calendar, content (in the LMS) &amp; attached files, Assessments, Course Categories, Course Groups, Course Memberships (LTI does have Names &amp; Roles, REST give more information about the membership object), Course Messages, Courses, Data Sources, Institutional Hierarchy Nodes, LTI Placements, Course Roles, Institution Roles, System Roles, User Sessions, Terms, Users. You can get started building your REST Application with this documentation. ","version":null,"tagName":"h2"},{"title":"REST AND LTI​","type":1,"pageTitle":"LTI or REST?","url":"/docs/blackboard/rest-apis/getting-started/lti-or-rest#rest-and-lti","content":"Now things can get interesting. You might build a pure REST Application, but often the easiest way into your application is an LTI Launch from a course or system page on a Learn system. With the LTI launch, you get all of the information about the user and the context from where they came from in the Learn system. This is quite convenient for your user as they have a smooth path to using your application (Tool) from Learn. Next, as the user is already logged into Learn, you can behind-the-scenes get an authorization token for making REST API calls back to their Learn system, without having them log in again. (A REST application that doesn't use an LTI launch from Learn will need to ask the user to log into the Learn system they are working with.) Now your LTI Tool/Appication has all of the LTI 1.3 functionality without having to make a bunch of REST API calls for that, and can also make REST API calls for any functionality not available via LTI. ","version":null,"tagName":"h2"},{"title":"HAPPY CODING!!​","type":1,"pageTitle":"LTI or REST?","url":"/docs/blackboard/rest-apis/getting-started/lti-or-rest#happy-coding","content":"","version":null,"tagName":"h2"},{"title":"Glossary​","type":1,"pageTitle":"LTI or REST?","url":"/docs/blackboard/rest-apis/getting-started/lti-or-rest#glossary","content":"Term\tDefinitionLTI\tLearning Tools Interoperability®, a standard developed and published by the IMS Global® Learning Consortium. REST\tRepresentational State Transfer. A lightwweight, flexible web service architecture. (Vs older tech like SOAP,etc.) {: .striped} More Information​ We will continue to add new examples, tutorials, and code samples, so make sure to check these links regularly. Developer PortalREST DocumentationLTI DocumentationLearn &amp; LTI Documentation Contributors on this article: Mark Kauffman Sr. Software EngineerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Releasing your Integration","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/getting-started/releasing-your-integration","content":"","keywords":"","version":null},{"title":"Developer Portal Settings​","type":1,"pageTitle":"Releasing your Integration","url":"/docs/blackboard/rest-apis/getting-started/releasing-your-integration#developer-portal-settings","content":"Before releasing your integration, please make sure there are sufficient site and rate limits for a smooth operation, you can review our information on Groups, Quotas, and Rates to learn more. The first steps are: Create a group named after the Company or the institution, keep in mind this group will receive production level settings, also, please make sure to follow our naming convention.File a Support ticket requestion production settings on your group. (for BbDN-level and above partners and any Bb Client, please file a support ticket to request production settings on your group. If you are a community-level partner, please send us an email to developers@anthology.com)We will proceed and update a group to a production groupNow you can associate your application with your production group. Now your application is using production setting, next step is making your application available to your clients ","version":null,"tagName":"h2"},{"title":"Delivering your REST integration​","type":1,"pageTitle":"Releasing your Integration","url":"/docs/blackboard/rest-apis/getting-started/releasing-your-integration#delivering-your-rest-integration","content":"Here are Three steps in releasing your integration: Provide your client with your integration's Application ID: E.G: 39CCFC5A-FC03-4854-A3D4-809663F2D237 Provide an integration preferred username and role name: E.G: UserName: SuperSoftware Sudoku User Role Name: SuperSoftware Sudoku Role In YOUR documentation, you should provide a list of required privileges or entitlements for the integration User role. E.G: You needed to find the entitlements (from the API documentation) and the Privileges (from Learn) in order to develop and test your application with a non-system admin user. It is good practice to share those privileges with your client. Note that if your application is utilizing Three Legged OAuth - which uses the logged in user’s privileges - this step is not required. It is strongly recommended that you include the above information in your client facing documentation. ","version":null,"tagName":"h2"},{"title":"Some DON’Ts​","type":1,"pageTitle":"Releasing your Integration","url":"/docs/blackboard/rest-apis/getting-started/releasing-your-integration#some-donts","content":"1: NEVER USE OR REQUIRE SYSTEM ADMINISTRATOR as your REST integration user This places your client at risk.A discerning administrator will not install an integration requiring a Role of System Administrator. 2: NEVER ASK YOUR CLIENT TO INSTALL USING THEIR DEVELOPER PORTAL KEY:SECRET Keys and Secrets should never be shared.Keys and Secrets should never stored in remote systems. FWIW: the Developer Portal does not store them either.Production group settings are global to specific to integrations. ","version":null,"tagName":"h3"},{"title":"Key Takeaways​","type":1,"pageTitle":"Releasing your Integration","url":"/docs/blackboard/rest-apis/getting-started/releasing-your-integration#key-takeaways","content":"Providing the required Privileges to Learn Admins reduces the risk of a failure in integration installation and operation. Anthology nor you should want to burden clients with figuring out from the API Docs which Entitlements are needed and look up these Privileges on their own so that your application works as expected.Following secure practices around key:secret management create a safer more secure www. Contributors on this article: Mark O'Neil Former DirectorPlatform and APIs ","version":null,"tagName":"h3"},{"title":"REST Integrations 3-Legged OAuth and Learn Custom Login Pages For System Administrators","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/getting-started/rest-3lo-and-learn-sso","content":"","keywords":"","version":null},{"title":"Your Custom Login Page and REST 3-Legged OAuth​","type":1,"pageTitle":"REST Integrations 3-Legged OAuth and Learn Custom Login Pages For System Administrators","url":"/docs/blackboard/rest-apis/getting-started/rest-3lo-and-learn-sso#your-custom-login-page-and-rest-3-legged-oauth","content":"This article is to help Learn administrators ensure that a custom SSO login page works with REST 3LO applications. Several clients have reported that when trying to complete the following workflow with a 3rd-party REST Application their users get stuck on the Learn landing page. Expected 3-legged authentication workflow: Access a 3rd-party application that has a REST integration with a Learn system (App).Use functionality on the App that requires a login to Learn. (Performs an /authorizationcode REST Request)Login to Learn via a custom login .jsp page.Get redirected to back the App. The App can now make REST requests to the Learn system. When the custom login .jsp page is not built to take the 3LO process into account, the user logs into Learn and 'sticks' on their Learn landing page. They are never redirected back to the App. What Went Wrong​ The problem is caused by the login link or button that the user clicks on in the third step above. We've always found that link to have been hard-coded, usually to use the SSO integration for the Learn system. The hard-coded link does not contain the necessary parameters that are sent to the Learn system with the /authorizationcode request. The link can not be hard-coded. It must be dynamic, as shown in this video. How to Fix​ As mentioned in the video, when the custom login .jsp uses the \\&lt;loginUI:loginForm/&gt; tag to create the link/button that the user clicks on to login to the system, that link will be dynamically generated and preserve all of the information that was sent to the Learn system with the /authorizationcode request from the 3rd-party App. You cannot merely have the tag on the page. You must use the &lt;loginUI:loginForm&gt; tag to create the link because that tag uses the necessary Learn internal Java code to correctly build the sign-in link. Here is a download of a sample custom login page that works for 3LO and SSO*. You can study how the CSS modifies the content shown by the \\&lt;loginUI:loginForm/&gt; tag so that it shows up as a &quot;button&quot; with a link that is dynamically generated and maintains the 3LO /authorizationcode request parameters. Note that you may also need to study how your SSO system needs to be configured to pass through parameters. Such is out of the scope of this document - which is only meant to describe the requirements for your custom login page. Key takeaway: A custom login page can work with REST API integrations only if the Learn-provided &lt;loginUI:loginForm/&gt; tag is used to generate the link a user access to sign in. You may customize how that looks with some CSS, but you can never use other HTML to provide the user a login link. *Credits to Chris Bray from the University of Arkansas for the UARKexampleCustomLogin.jsp example and Dan Gioia of St. Louis Community College for much of the CSS Chris used in the .jsp. Thank you both! Contributors on this article: Mark Kauffman Sr. Software EngineerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h2"},{"title":"Managing REST Integrations in Learn: The REST Integrations Tool for System Administrators","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/getting-started/rest-and-learn","content":"","keywords":"","version":null},{"title":"Overview of the REST API Integrations Tool​","type":1,"pageTitle":"Managing REST Integrations in Learn: The REST Integrations Tool for System Administrators","url":"/docs/blackboard/rest-apis/getting-started/rest-and-learn#overview-of-the-rest-api-integrations-tool","content":"For the other tasks related in this document, use the REST API Integrations. To navigate to the REST API Integrations tool: Select System Admin in the main screen of Learn.Select the REST API Integrations link is in the Building Blocks section:  The main page for the REST API Integrations tool: Lists existing integrationsAllows you to manage existing integrationsAllows you to create new integrations This list will be empty if you have not created any integrations.  ","version":null,"tagName":"h3"},{"title":"Create an Integration​","type":1,"pageTitle":"Managing REST Integrations in Learn: The REST Integrations Tool for System Administrators","url":"/docs/blackboard/rest-apis/getting-started/rest-and-learn#create-an-integration","content":"An integration, here, refers to an external REST application being registered to work in conjunction with Learn. Before you create an integration, the best practice is to create a Learn user with entitlements that match those required by the REST application. To create an integration and thereby allow an application to work with your instance of Learn: On the REST API Integrations page, select Create Integration. In the Application ID space, enter the application ID proved by the integration's developers. Select Browse next to Learn User. Search through the list of Learn users to find the user that the integration should act as. Select a user that you specially create for the application and that has only the permissions that the integration needs to function properly. For third-party integration, set End User Access to Yes. End users will sign in with their own Learn ID to use the integration. Each user's access is then limited to his or her own permissions. If you set End User Access to No, the integration always has access as if it were the Learn user indicated on the form. Submit to save your settings for the integration. Select the Learn user in whose name the application acts. This user must have the entitlements required by the REST Application. For more information about identifying required entitlements, see Converting Documented Entitlements to GUI Privileges, below. Note that the Institution role of this user has no impact on the entitlements, only the privileges on the user's System role. Learn user entitlements are allow a REST application to act in your Learn environment. The best practice is to restrict these except as necessary to allow the REST Application to function. The vendor or developer of the REST application should provide a list of required entitlements. NEVER configure a REST application to act as a System Admin user. Doing so gives the REST application full access to all data and operations of your Learn environment possibly resulting in IRREPARABLE harm. If a vendor requests a System Admin user for their application, do not allow it. In such a case, please provide the vendor's contact and application information to developers@anthology.com so that we can help the vendor correct the situation.  Note: If you are an Anthology client, an Anthology Partner / Vendor / Developer of an LTI or REST Application should NEVER tell you to go to the developer portal and create an App ID with the associated key/secret to install their application. They should never tell you to apply for a Rate/Site increase for their application. Anthology DOES NOT support that model. Every REST Application developer should give you an App ID to install their REST App and tell you how to configure a system role for its use. Period. The REST Application developer needs to request the increases they need to run their application themselves. If they ask you to go to developer.anthology.com and get an App ID/Key/Secret, please tell them that is wrong. They should have exactly one App ID for their production REST application that they are asking you to install. Contractors are an exception to this policy as they are producing an integration on your, the Anthology client, behalf. Questions regarding the policy and whether you are impacted may be asked here, or posted todevelopers@anthology.com. ","version":null,"tagName":"h3"},{"title":"Managing your REST Integration​","type":1,"pageTitle":"Managing REST Integrations in Learn: The REST Integrations Tool for System Administrators","url":"/docs/blackboard/rest-apis/getting-started/rest-and-learn#managing-your-rest-integration","content":"Once you have created a REST integration, you can manage it: Edit the integration settingsSet the integration availabilityDelete the integration  ","version":null,"tagName":"h3"},{"title":"Edit a REST Integration​","type":1,"pageTitle":"Managing REST Integrations in Learn: The REST Integrations Tool for System Administrators","url":"/docs/blackboard/rest-apis/getting-started/rest-and-learn#edit-a-rest-integration","content":"The editor displays information about the integration and allows you to change the Learn user that the integration runs as. This allows you to manage the permissions on the integration. To edit an application's settings, navigate to the REST API Integrations tool. Select Edit from the context menu of the integration that you want to edit. A screen opens like one below.  You may use the standard Learn user and role tools to create an integration- specific user. ","version":null,"tagName":"h3"},{"title":"Running an Integration​","type":1,"pageTitle":"Managing REST Integrations in Learn: The REST Integrations Tool for System Administrators","url":"/docs/blackboard/rest-apis/getting-started/rest-and-learn#running-an-integration","content":"An REST integration can be run in two ways. In both cases, the application is actually remote to the Learn environment. A user selects a link within Learn which calls the remote applicationA remote system call from the REST application ","version":null,"tagName":"h3"},{"title":"Converting Entitlements to GUI Privileges​","type":1,"pageTitle":"Managing REST Integrations in Learn: The REST Integrations Tool for System Administrators","url":"/docs/blackboard/rest-apis/getting-started/rest-and-learn#converting-entitlements-to-gui-privileges","content":"There are a number of ways to accomplish this. Check out this blog, Bookmarklet To Help Map Entitlements to PermissionsCheck out this JSHack contributed by Matthew Deeprose.The EntitlementsToAdminGUI worksheet (updated 08/10/2019 9:57 AM) helps identify the entitlements to a string which may be searched on in the role privilege selection page when creating the role for your REST Application user. Paste the documented entitlement from the REST API documentation to column A and the privilege will appear in column B. Here's a video demonstration. Should the spreadsheet not have what you're looking for, here's the way to find these manually: Dropbox - 2018-10-30_13-39-25.FindingPrivilegeForGivenEntitlement.mp4 ","version":null,"tagName":"h3"},{"title":"Delivering your REST Integration​","type":1,"pageTitle":"Managing REST Integrations in Learn: The REST Integrations Tool for System Administrators","url":"/docs/blackboard/rest-apis/getting-started/rest-and-learn#delivering-your-rest-integration","content":"For a more detailed process please see Releasing your REST Integration Step 1: NEVER USE OR REQUIRE SYSTEM ADMINISTRATOR as your REST application user. Step 2: You determine from the API Docs which Entitlements are required for the integration. Step 3: You set up a non-System Administrator User associated with the your REST API integration on your test system. Step 4: You utilize your test system and the API Docs to identify the list of Learn Privileges required for the integration. Step 5: You configure your test system integration user appropriately and validate successful integration operation using your identified Learn Privileges Step 6: You provide the client the REST Application Id, a preferred/suggested user and role name (E.G.: &lt;application name&gt; Integration User, &lt;application name&gt; Integration Role), and a list of required Privileges for the Integration User Role. Step 7: Include information from Step 6 in your client facing documentation. Key takeaway: Providing the required Privileges to Learn Admins reduces the risk of a failure in integration installation and operation. Anthology nor you should want to burden clients with figuring out from the API Docs which Entitlements are needed and look up these Privileges on their own so that your application works as expected. Contributors on this article: Mark O'Neil Former DirectorPlatform and APIs ","version":null,"tagName":"h3"},{"title":"REST Integrations and Other Integrations","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/getting-started/rest-integrations-and-other-integrations","content":"","keywords":"","version":null},{"title":"Introduction​","type":1,"pageTitle":"REST Integrations and Other Integrations","url":"/docs/blackboard/rest-apis/getting-started/rest-integrations-and-other-integrations#introduction","content":"Let's say you have developed a RESTful API integration with Blackboard Learn. Now you have clients asking about the relationship between your REST Application and the several other mechanisms of integration with Blackboard Learn. This document provides the details. ","version":null,"tagName":"h2"},{"title":"What is the relationship between my RESTFul Application and other integration mechanisms?​","type":1,"pageTitle":"REST Integrations and Other Integrations","url":"/docs/blackboard/rest-apis/getting-started/rest-integrations-and-other-integrations#what-is-the-relationship-between-my-restful-application-and-other-integration-mechanisms","content":"Blackboard Learn provides several mechanisms for integration with it to 3rd-party developers. Examples include the Learn implementation of the LTI 1.3 standard, the Learn implementation of the LIS 2.0 Data Integration standard, and the Learn REST APIs. None of these integration types will know anything about the configuration settings of a different integration type, ever. What is the impact of this in a real-world scenario? One example is that, built into Learn’s implementation of the LIS 2.0 Data Integration Standard is the ability for the Learn administrator to configure a special script, to create a new course from a template, that runs when an external vendor feeds in data for course creation. Ex: Admin&gt;Data Integration&gt;Student Information System Integrations&gt;’LIS20 Integration’&gt;Advanced Configuration&gt;Courses&gt;Field Mapping&gt; Source Course Copy Key. Learn only runs this script for LIS 2.0 data feeds. The REST API implementation in Learn doesn’t know about this script that was set for the LIS 2.0 integration. The REST API course creation won’t cause the script to execute. This is how Learn works, and there’s nothing the 3rd-party integrator can do to make the integration systems built into Learn behave differently. This means then that if I, as a 3rd-party developer, have been using LIS 2.0 to create courses and relying on the Learn admin to set up a script in Learn’s LIS 2.0 Data Integration, and I want to switch to the REST API mechanism to create courses I cannot expect Learn’s LIS 2.0 script to run for the REST API create course, because Learn doesn’t do that. Instead, I will need to add code to my new RESTful application code that uses Learn’s REST integration mechanism, where the Learn admin can configure the template Source Course on my application server to replace what the Learn admin had been configuring in Blackboard Learn or find some other means of achieving the same. ","version":null,"tagName":"h3"},{"title":"Summary​","type":1,"pageTitle":"REST Integrations and Other Integrations","url":"/docs/blackboard/rest-apis/getting-started/rest-integrations-and-other-integrations#summary","content":"Any given integration type in Learn will never automatically know anything about the configuration settings of a different integration type, ever. Contributors on this article: Mark Kauffman Sr. Software EngineerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"REST Tutorials","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/getting-started/tutorials","content":"","keywords":"","version":null},{"title":"The Python and the Postman - DevCon 2020​","type":1,"pageTitle":"REST Tutorials","url":"/docs/blackboard/rest-apis/getting-started/tutorials#the-python-and-the-postman---devcon-2020","content":" Download the slides​ ","version":null,"tagName":"h3"},{"title":"Building a Very Simple REST API Web Application from Scratch​","type":1,"pageTitle":"REST Tutorials","url":"/docs/blackboard/rest-apis/getting-started/tutorials#building-a-very-simple-rest-api-web-application-from-scratch","content":" Download the slides​ Contributors on this article: Anthology Inc Integrations, Developer Relations and Standards TeamAnthology Inc ","version":null,"tagName":"h3"},{"title":"Using Learn Public REST APIs to Copy Courses","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/hands-on/copying-courses","content":"","keywords":"","version":null},{"title":"Topic​","type":1,"pageTitle":"Using Learn Public REST APIs to Copy Courses","url":"/docs/blackboard/rest-apis/hands-on/copying-courses#topic","content":"This document covers General API Use and Best Practices to meet use cases for using the Learn REST APIs to copy courses. We strongly recommended you follow the Best Practices outlined below. General API Use Details follow below but in general, the workflow for copying a course consists of: POST to the course copy endpoint.Poll via GET to the Location task endpiont that was returned in the header of the course copy response. Wait for a response other than 200. This is so that when you attempt to update the copied course with step #3 that the copy has completed.PATCH to update the copied course's externaId, name, description, dates, and any other values that are to be different for the copied course. Any of these values are optional to update, but the copied course won't look any different to the instructor as the copied course is an EXACT copy of the source course except for the courseId. DO NOT POST to UPDATE THE COPIED COURSE UNTIL CERTAIN THE COPY IS COMPLETE VIA STEP #2 ABOVE. The below sections further elaborate on each of the above steps. ","version":null,"tagName":"h2"},{"title":"1. POST to the course copy endpoint.​","type":1,"pageTitle":"Using Learn Public REST APIs to Copy Courses","url":"/docs/blackboard/rest-apis/hands-on/copying-courses#1-post-to-the-course-copy-endpoint","content":"POST /learn/api/public/v2/courses/:courseId/copy ","version":null,"tagName":"h2"},{"title":"Best Practices​","type":1,"pageTitle":"Using Learn Public REST APIs to Copy Courses","url":"/docs/blackboard/rest-apis/hands-on/copying-courses#best-practices","content":"Keep track of your copy requests and the Location header in the response from each. You will need the Location to monitor the status of the copy as the course copy will take time. It is not immediate. ","version":null,"tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"Using Learn Public REST APIs to Copy Courses","url":"/docs/blackboard/rest-apis/hands-on/copying-courses#example","content":"POST /learn/api/public/v2/courses/courseId:mbk-original-template/copyBody: { &quot;targetCourse&quot;: { &quot;courseId&quot;: &quot;mbk-original-target2&quot; }, &quot;copy&quot;: { &quot;adaptiveReleaseRules&quot;: &quot;true&quot;, &quot;announcements&quot;: &quot;true&quot;, &quot;assessments&quot;: &quot;true&quot;, &quot;blogs&quot;: &quot;true&quot;, &quot;calendar&quot;: &quot;true&quot;, &quot;contacts&quot;: &quot;true&quot;, &quot;contentAlignments&quot;: &quot;true&quot;, &quot;contentAreas&quot;: &quot;true&quot;, &quot;discussions&quot;: &quot;ForumsAndStarterPosts&quot;, &quot;glossary&quot;: &quot;true&quot;, &quot;gradebook&quot;: &quot;true&quot;, &quot;groupSettings&quot;: &quot;true&quot;, &quot;journals&quot;: &quot;true&quot;, &quot;retentionRules&quot;: &quot;true&quot;, &quot;rubrics&quot;: &quot;true&quot;, &quot;settings&quot;: { &quot;availability&quot;: &quot;true&quot;, &quot;bannerImage&quot;: &quot;true&quot;, &quot;duration&quot;: &quot;true&quot;, &quot;enrollmentOptions&quot;: &quot;true&quot;, &quot;guestAccess&quot;: &quot;true&quot;, &quot;languagePack&quot;: &quot;true&quot;, &quot;navigationSettings&quot;: &quot;true&quot;, &quot;observerAccess&quot;: &quot;true&quot; }, &quot;tasks&quot;: &quot;true&quot;, &quot;wikis&quot;: &quot;true&quot; } }  will return all ‘{}’ and the response Location header might look like /learn/api/public/v1/courses/_12_1/tasks/_127_1. You may now proceed to step 2 and query the given tasks endpoint. ","version":null,"tagName":"h3"},{"title":"2. Poll the Location tasks endpoint.​","type":1,"pageTitle":"Using Learn Public REST APIs to Copy Courses","url":"/docs/blackboard/rest-apis/hands-on/copying-courses#2-poll-the-location-tasks-endpoint","content":"GET /learn/api/public/v1/courses/{courseId}/tasks/{taskId} ","version":null,"tagName":"h2"},{"title":"Best Practices​","type":1,"pageTitle":"Using Learn Public REST APIs to Copy Courses","url":"/docs/blackboard/rest-apis/hands-on/copying-courses#best-practices-1","content":"If task is complete this endpoint will return a 303 SEE OTHER with a Location header providing a URI to the GET Course endpoint. Statistical data shows that the average copy task duration is under a second. However, very large courses can take several minutes. Also important to note is that these background tasks can potentially be queued behind other system tasks therefore prolonging the time a task stays in the Queued status. We recommend that this endpoint be polled every 60 seconds while waiting for a Course copy to complete. Experience is that some operations - such as managing memberships - may be handled before full copy completion… which can dramatically improve integration performance. Typically you can start to work with the copied course around 15% completion… the remaining 85% is around copying content, discussions and so on. ","version":null,"tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"Using Learn Public REST APIs to Copy Courses","url":"/docs/blackboard/rest-apis/hands-on/copying-courses#example-1","content":"GET /learn/api/public/v1/courses/_12_1/tasks/_127_1 ","version":null,"tagName":"h3"},{"title":"3. (Optional) PATCH to update the copied course​","type":1,"pageTitle":"Using Learn Public REST APIs to Copy Courses","url":"/docs/blackboard/rest-apis/hands-on/copying-courses#3-optional-patch-to-update-the-copied-course","content":"PATCH /learn/api/public/v3/courses/{courseId} ","version":null,"tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Using Learn Public REST APIs to Copy Courses","url":"/docs/blackboard/rest-apis/hands-on/copying-courses#example-2","content":"PATCH https://kauffman390071b2.ddns.net/learn/api/public/v2/courses/_12_1Body: { &quot;externalId&quot;: &quot;mbk-original-target2&quot;, &quot;name&quot;: &quot;mbk-original-target2&quot;, &quot;description&quot;: &quot;my copied course&quot; }  Best Practices ","version":null,"tagName":"h3"},{"title":"General Best Practices​","type":1,"pageTitle":"Using Learn Public REST APIs to Copy Courses","url":"/docs/blackboard/rest-apis/hands-on/copying-courses#general-best-practices","content":"Learn System Administrators should be enrolled in courses only using a non-Admin enabled user. System Administrator information is generally only available to 3LO Administrator requests. Always monitor your API usage using the x-header information returned on non-oauth requests Details on rate_limits and x-headers are available here. Not all data operations are best done JIT. Some operations, such as backfilling data warehouses or refreshing caches are best done during off-peak Learn hours. JIT calling or repeatedly calling for the same &quot;static&quot; data is inefficient.Checking whether a student is still in a course or getting their course grades are reasonable JIT activities as that is data that may change between now and their last access. Cache infrequently changed or “static” data and refresh periodically. This reduces repetitive calls.This reduces integration performance impact.Don’t JIT retrieve ALL Courses for example as that data changes infrequently. Instead do this once and then periodically retrieve course data created or modified since you last request. Always &quot;optimize&quot; your requests. reduce your “search” criteria to as small a set of data as possible. This limits the number of pages of returned data set.E.g. use ?dataSourceId= to reduce your search to objects created using a specific DSK and follow caching practices. Use the fields parameter to reduce the returned data set to only data points you require. This limits the data transmitted and system load Always try to logically bound your requests or before acting on request results Check if dates are within boundsCheck if attempts exist of if items are gradedCheck availability Contributors on this article: Mark Kauffman Sr. Software EngineerIntegrations, Developer Relations and Standards Mark O'Neil Former DirectorPlatform and APIs ","version":null,"tagName":"h2"},{"title":"Using Attendance APIs","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/hands-on/attendance","content":"","keywords":"","version":null},{"title":"Introduction​","type":1,"pageTitle":"Using Attendance APIs","url":"/docs/blackboard/rest-apis/hands-on/attendance#introduction","content":"Let's say you have several classes that require you to know if a student arrived at all to a class, was late, completely Absent and later student is excused because something happened. Well, this API will allow you to do so or to integrate it with your attendance system and add a grade to the mix in the grade center. Many instructors use attendance data as part of their students' overall grades. Also, some institutions and programs have attendance policies that require instructors to track the number of class meetings students have missed. Attendance data is also used in these ways: International students who must maintain visas may need to meet attendance requirements.Institutions may need to prove “seat time” for federal funding or accreditation.Many institutions and instructors use attendance as they focus on student retention. Jumping ahead a bit, Attendance can be found within Ultra course view and Original course view, in different places, so here is a look on where to find them on each course view  Alright, that is how you find attendance but what about its components? Let´s review them: User/AttendeesMeeting / MeetingsAttendance recordsAttendance ReportReport CSVThe meeting itself Other parts such grading or overall score, Average attendance score and other evaluation criteria are part of Attendance but we will not go deep since those are calculated based on the Configuration you have on your scores. Please review https://help.blackboard.com/Learn/Administrator/SaaS/Tools_Management/Attendance for more information on that. Let's see those parts in the GUI:  And compare it with a Original Course view:  Did you spot the differences within Ultra Course View (UCV) and Original Course View (OCV)? Neither did I! Since Attendance uses a Building block the functionality and look &amp; feel is the same for both UCV and OCV. So I will continue my examples using ONLY Ultra course view, BUT before I talk about the endpoints itself, let's give them a bit of structure since there are 18 of them and things might get a bit confusing. ","version":null,"tagName":"h2"},{"title":"Endpoints Structure​","type":1,"pageTitle":"Using Attendance APIs","url":"/docs/blackboard/rest-apis/hands-on/attendance#endpoints-structure","content":"As I mentioned, there are 17 endpoints that compose this API, and reading them at first is kind of confusing, so I decided to break them down in 3 parts: MeetingUserReport (The report is part of it but is not a part itself, but I figure maybe to let it be) Every part (Meeting and user) can be considered as an object, and each object has methods that can be grouped the records it affects/returns: OneBatch / Many  Given this idea of objects and groups I have broken down the endpoints to make them easy to follow up in this nice image:  Hopefully this last image is helpful, if you have any questions, please contact us at developers@anthology.com A very important note to keep in mind: As of the date of creation of this document, If you create an attendance meeting using the REST API, the attendance status CANNOT be modified using the GUI, it can ONLY be modified using REST API. This does not apply to meetings created in the GUI, you can modify those using either the GUI or the REST API. ","version":null,"tagName":"h2"},{"title":"Meeting related endpoints​","type":1,"pageTitle":"Using Attendance APIs","url":"/docs/blackboard/rest-apis/hands-on/attendance#meeting-related-endpoints","content":"One by one operations with meetings​ Creating a meeting​ When you use the GUI, you can click on the &quot;Overall&quot; button and click then on the &quot;Plus (+) button next to the current meeting (or overall score).  When you create a new column, it automatically takes in today's date as the column name. Then you will be able to mark the student's attendance status: [&quot;Present&quot;, &quot;Absent&quot;, &quot;Late&quot;, &quot;Excused&quot;]  you can learn even more about attendance here: https://help.blackboard.com/Learn/Administrator/SaaS/Tools_Management/Attendance Now, when creating one using REST API is quite simple use: POST /learn/api/public/v1/courses/{courseId}/meetings And in the body: { &quot;courseId&quot;: &quot;_912_1&quot;, &quot;title&quot;: &quot;Meeting title&quot;, &quot;description&quot;: &quot;Meeting Description&quot;, &quot;start&quot;: &quot;2022-10-18T16:25:47.416Z&quot;, &quot;end&quot;: &quot;2022-10-18T18:25:47.416Z&quot;, &quot;externalLink&quot;: &quot;This optional field can be an url&quot; }  When the api is successful, it returns 200: { &quot;id&quot;: 465, &quot;courseId&quot;: &quot;_912_1&quot;, &quot;title&quot;: &quot;Meeting title&quot;, &quot;description&quot;: &quot;Meeting Description&quot;, &quot;start&quot;: &quot;2022-10-18T16:25:47.416Z&quot;, &quot;end&quot;: &quot;2022-10-18T18:25:47.416Z&quot;, &quot;externalLink&quot;: &quot;https//google.com&quot; }  And this is how a meeting created using our API looks like and its parts:  Returning a meeting​ We already know how to create a meeting, and in the same process we are seeing all the meetings, it is possible to get the same data on the api using GET /learn/api/public/v1/courses/:courseId/meetings/:meetingId When 200: { &quot;id&quot;: 465, &quot;courseId&quot;: &quot;_912_1&quot;, &quot;title&quot;: &quot;Meeting title&quot;, &quot;description&quot;: &quot;Meeting Description&quot;, &quot;start&quot;: &quot;2022-10-18T16:25:47.416Z&quot;, &quot;end&quot;: &quot;2022-10-18T18:25:47.416Z&quot;, &quot;externalLink&quot;: &quot;https//google.com&quot; }  Mapping the results​ Here is a mapping of the results returned by the API and what we have in the GUI.  Updating a meeting​ PATCH /learn/api/public/v1/courses/:courseId/meetings/:meetingId Using the same body as POST { &quot;courseId&quot;: &quot;_912_1&quot;, &quot;title&quot;: &quot;Meeting title&quot;, &quot;description&quot;: &quot;Meeting Description&quot;, &quot;start&quot;: &quot;2022-10-18T16:25:47.416Z&quot;, &quot;end&quot;: &quot;2022-10-18T18:25:47.416Z&quot;, &quot;externalLink&quot;: &quot;This optional field can be an url&quot; }  Deleting a meeting​ This endpoint deletes a meeting DELETE /learn/api/public/v1/courses/:courseId/meetings/:meetingId Batch operations with Meetings​ You can perform batch operations with meetings as well, however those are limited to Read and delete, meaning you can either read ALL the meetings in a course or you can remove ALL the meetings in a course. The delete all meetings in a course is a VERY powerful endpoint, use it carefully! Return all meetings in a course​ GET /learn/api/public/v1/courses/{courseId}/meetings Returns 200 { &quot;results&quot;: [ { &quot;id&quot;: 435, &quot;courseId&quot;: &quot;_912_1&quot;, &quot;start&quot;: &quot;2022-10-12T20:49:55.885Z&quot;, &quot;end&quot;: null }, { &quot;id&quot;: 436, &quot;courseId&quot;: &quot;_912_1&quot;, &quot;start&quot;: &quot;2022-10-12T20:50:40.449Z&quot;, &quot;end&quot;: null }, { &quot;id&quot;: 437, &quot;courseId&quot;: &quot;_912_1&quot;, &quot;start&quot;: &quot;2022-10-12T20:50:44.846Z&quot;, &quot;end&quot;: null }, { &quot;id&quot;: 438, &quot;courseId&quot;: &quot;_912_1&quot;, &quot;start&quot;: &quot;2022-10-12T20:50:56.525Z&quot;, &quot;end&quot;: null }, { &quot;id&quot;: 439, &quot;courseId&quot;: &quot;_912_1&quot;, &quot;start&quot;: &quot;2022-10-13T17:25:14.750Z&quot;, &quot;end&quot;: null }, { &quot;id&quot;: 440, &quot;courseId&quot;: &quot;_912_1&quot;, &quot;start&quot;: &quot;2022-10-14T19:28:17.614Z&quot;, &quot;end&quot;: null }, { &quot;id&quot;: 463, &quot;courseId&quot;: &quot;_912_1&quot;, &quot;start&quot;: &quot;2022-10-18T14:58:05.821Z&quot;, &quot;end&quot;: null }, { &quot;id&quot;: 465, &quot;courseId&quot;: &quot;_912_1&quot;, &quot;title&quot;: &quot;Meeting title&quot;, &quot;description&quot;: &quot;Meeting Description&quot;, &quot;start&quot;: &quot;2022-10-18T16:25:47.416Z&quot;, &quot;end&quot;: &quot;2022-10-18T18:25:47.416Z&quot;, &quot;externalLink&quot;: &quot;https//google.com&quot; } ] }  Remove all meetings from the course​ DELETE /learn/api/public/v1/courses/{courseId}/meetings When it is successful returns 204 ","version":null,"tagName":"h3"},{"title":"User related endpoints​","type":1,"pageTitle":"Using Attendance APIs","url":"/docs/blackboard/rest-apis/hands-on/attendance#user-related-endpoints","content":"one by one operations​ Creating an attendance record for one user in one meeting​ We have this meeting that we need to add attendance records to:  POST {{baseUrl}}/learn/api/public/v1/courses/:courseId/meetings/:meetingId/users Body { &quot;meetingId&quot;: 465, &quot;status&quot;: &quot;Present&quot;, &quot;userId&quot;: &quot;_15104_1&quot; }  when it is successful, it returns 201, it looks like this in the GUI:  Returning an Attendance record for one user in one meeting​ GET /learn/api/public/v1/courses/:courseId/meetings/:meetingId/users/:userId { &quot;id&quot;: 760, &quot;meetingId&quot;: &quot;465&quot;, &quot;userId&quot;: &quot;_15104_1&quot;, &quot;status&quot;: &quot;Present&quot; }  This basically returns the same information found in the previous image. Updating an attendance record for one user in one meeting​ PATCH /learn/api/public/v1/courses/:courseId/meetings/:meetingId/users/:userId Body { &quot;meetingId&quot;: 465, &quot;userId&quot;: &quot;_15104_1&quot;, &quot;status&quot;: &quot;Excused&quot; }  Returns when 200: { &quot;id&quot;: 760, &quot;meetingId&quot;: &quot;465&quot;, &quot;userId&quot;: &quot;_15104_1&quot;, &quot;status&quot;: &quot;Excused&quot; }   Deleting an attendance record for one user in one meeting​ DELETE /learn/api/public/v1/courses/:courseId/meetings/:meetingId/users/:userId When successful, returns 204 NO CONTENT  Batch operations​ Creating attendance status for all users in one meeting​ Even though the endpoint documentation marks user_id and meeting_id as mandatory fields (in the body), you only need to send in the body the status like this: { &quot;status&quot;: &quot;Excused&quot; }  This basically updates all students' attendance status to the same for ALL OF THEM. Return ALL users and their attendance status to one meeting​  GET /learn/api/public/v1/courses/:courseId/meetings/:meetingId/users When 200 returns: { &quot;results&quot;: [ { &quot;id&quot;: 761, &quot;meetingId&quot;: &quot;465&quot;, &quot;userId&quot;: &quot;_15104_1&quot;, &quot;status&quot;: &quot;Present&quot; }, { &quot;id&quot;: 762, &quot;meetingId&quot;: &quot;465&quot;, &quot;userId&quot;: &quot;_15913_1&quot;, &quot;status&quot;: &quot;Late&quot; } ] }  Return ALL attendance status of one user to all meetings in one course​ Now, let's say you want to have all the attendance records of one user, with this endpoint, you will get all the attendance status if all the available meetings for one specific user GET /learn/api/public/v1/courses/:courseId/meetings/users/:userId  When 200, returns: { &quot;results&quot;: [ { &quot;id&quot;: 714, &quot;meetingId&quot;: &quot;435&quot;, &quot;userId&quot;: &quot;_15104_1&quot;, &quot;status&quot;: &quot;Present&quot; }, { &quot;id&quot;: 716, &quot;meetingId&quot;: &quot;436&quot;, &quot;userId&quot;: &quot;_15104_1&quot;, &quot;status&quot;: &quot;Late&quot; }, { &quot;id&quot;: 718, &quot;meetingId&quot;: &quot;437&quot;, &quot;userId&quot;: &quot;_15104_1&quot;, &quot;status&quot;: &quot;Absent&quot; }, { &quot;id&quot;: 731, &quot;meetingId&quot;: &quot;438&quot;, &quot;userId&quot;: &quot;_15104_1&quot;, &quot;status&quot;: &quot;Late&quot; }, { &quot;id&quot;: 737, &quot;meetingId&quot;: &quot;439&quot;, &quot;userId&quot;: &quot;_15104_1&quot;, &quot;status&quot;: &quot;Present&quot; }, { &quot;id&quot;: 761, &quot;meetingId&quot;: &quot;465&quot;, &quot;userId&quot;: &quot;_15104_1&quot;, &quot;status&quot;: &quot;Present&quot; }, { &quot;id&quot;: 763, &quot;meetingId&quot;: &quot;440&quot;, &quot;userId&quot;: &quot;_15104_1&quot;, &quot;status&quot;: &quot;Present&quot; }, { &quot;id&quot;: 764, &quot;meetingId&quot;: &quot;463&quot;, &quot;userId&quot;: &quot;_15104_1&quot;, &quot;status&quot;: &quot;Late&quot; }, { &quot;id&quot;: 765, &quot;meetingId&quot;: &quot;466&quot;, &quot;userId&quot;: &quot;_15104_1&quot;, &quot;status&quot;: &quot;Present&quot; } ] }  Removing all attendance records in a meeting​ DELETE /learn/api/public/v1/courses/:courseId/meetings/:meetingId/users  When completed, returns 204 NO CONTENT:  Removing all attendance records in one course for one user​ This endpoint is very powerful, be careful when using it since it will remove ALL attendance records of a specific user in a course. DELETE / learn/api/public/v1/courses/{courseId}/meetings/users/{userId} When successful, returns 204 NO CONTENT. Remove all attendance records in ALL COURSES for one user​ This endpoint is very powerful, be careful when using it since it will remove ALL attendance records of a specific user in ALL courses DELETE / learn/api/public/v1/courses/{courseId}/meetings/users/{userId} CSV Export endpoint​ Unfortunately at the moment of writing, this endpoint is not working properly so, I am unable to tell you how it works, however, once this is fixed I will update this, for now, the GUI is the best place to get the information. Contributors on this article: Davey Herrera Software EngineerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Working with Adaptive Release","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release","content":"","keywords":"","version":null},{"title":"Ultra courses​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#ultra-courses","content":"First we need to see how this is displayed in the GUI, the release criteria or Release conditions is set when clicking under the button that usually says &quot;Visible to students&quot;  When clicked, this displays several conditions:  For all members, you can use additional conditions such as Date/Time and Performance, this also allows you to pick when will the content appear:  It is also possible to release the content to specific members of the course or groups. Note: We are aware that there is a known issue where, if you just enrolled a user (and haven't reloaded the page) the roster is not updated on adaptive release -&gt; Specific memebers or groups -&gt; Individual members and search for the user that has just been enrolled, the user does not show up, groups are correctly updated. To solve this, you can just reload the page and roster will be updated. Now let's move on to the REST API part ","version":null,"tagName":"h2"},{"title":"Rules (C.R.U.D)​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#rules-crud","content":"First thing is first! A rule must be born. Yes, we need to create a rule that will contain our criteria (We assume the course and content has already been created), all rules depend on content, you need to create first content, then the rule, then criteria(optional) and define who will receive these rules. For specific messages that may be returned by the api, please review: https://developer.anthology.com/portal/displayApi Also, please make sure to always review the entitlements required for each endpoint, you can check this document How to map entitlements with privileges to get more information about entitlements. For the rules you need course_id and Content_id  You can create 1 rule per content_id! ","version":null,"tagName":"h2"},{"title":"Creating a Rule​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#creating-a-rule","content":"To create a rule on a specific content id: GET {{baseUrl}}/learn/api/public/v1/courses/:courseId/contents/:contentId/adaptiveRelease/rules And in the body: { &quot;title&quot;: &quot;New rules&quot; }  ","version":null,"tagName":"h3"},{"title":"Returning a Rule​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#returning-a-rule","content":"To obtain the rule that exist on a specific content id: GET {{baseUrl}}/learn/api/public/v1/courses/:courseId/contents/:contentId/adaptiveRelease/rules ","version":null,"tagName":"h3"},{"title":"Updating a Rule​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#updating-a-rule","content":"To update a rule you can use (you need to know the rule id first): PATCH {{baseUrl}}/learn/api/public/v1/courses/:courseId/contents/:contentId/adaptiveRelease/rules/:ruleId and in the body: { &quot;title&quot;: &quot;New rules&quot; }  If everything goes well, you should see a 201: { &quot;id&quot;: &quot;_349_1&quot;, &quot;title&quot;: &quot;New rules&quot; }  if you see a 409 conflict: { &quot;status&quot;: 409, &quot;message&quot;: &quot;A rule already exists for content [_121047_1]&quot; }  Means the rule already exists, as I mentioned, one contentID can only have one rule. ","version":null,"tagName":"h3"},{"title":"Deleting a rule​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#deleting-a-rule","content":"You can also delete a rule easlily: DELETE /learn/api/public/v1/courses/{courseId}/contents/{contentId}/adaptiveRelease/rules/{ruleId} ","version":null,"tagName":"h3"},{"title":"Criteria (C.R.U.D)​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#criteria-crud","content":"You can get all the criteria associated to a content_id using: ","version":null,"tagName":"h2"},{"title":"Returning criteria​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#returning-criteria","content":"GET {{baseUrl}}/learn/api/public/v1/courses/:courseId/contents/:contentId/adaptiveRelease/rules/:ruleId/criteria You should get a result like this (may vary depending on the criteria that has already been setup): { &quot;results&quot;: [ { &quot;type&quot;: &quot;GradeRange&quot;, &quot;id&quot;: &quot;_386_1&quot;, &quot;gradeColumnId&quot;: &quot;_89584_1&quot;, &quot;maxScore&quot;: 10.0, &quot;minScore&quot;: 10.0 }, { &quot;type&quot;: &quot;DateRange&quot;, &quot;id&quot;: &quot;_387_1&quot;, &quot;endDate&quot;: &quot;2021-03-12T22:00:00.000Z&quot; } ] }  ","version":null,"tagName":"h3"},{"title":"Using GradeRange​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#using-graderange","content":"This criteria specifies a gradable item, a maximun and a minimum score. When the item has been graded and the score is within the range, the content becomes available. A GradeRange criterion can be converted to a GradePercentage criterion by setting the Type to GradePercentage and You can get the gradeColumn id using (you need the course_id): GET {{baseUrl}}/learn/api/public/v2/courses/:courseId/gradebook/columns It returns the following when 200: { &quot;results&quot;: [ { &quot;id&quot;: &quot;_89584_1&quot;, &quot;name&quot;: &quot;Test for adaptive release - GradeRange&quot;, &quot;created&quot;: &quot;2022-01-19T20:22:03.728Z&quot;, &quot;contentId&quot;: &quot;_120905_1&quot;, &quot;score&quot;: { &quot;possible&quot;: 10.0 }, &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot; }, &quot;grading&quot;: { &quot;type&quot;: &quot;Attempts&quot;, &quot;due&quot;: &quot;2022-01-20T05:00:00.000Z&quot;, &quot;attemptsAllowed&quot;: 1, &quot;scoringModel&quot;: &quot;Last&quot;, &quot;schemaId&quot;: &quot;_78778_1&quot;, &quot;anonymousGrading&quot;: { &quot;type&quot;: &quot;None&quot; } }, &quot;gradebookCategoryId&quot;: &quot;_149469_1&quot;, &quot;includeInCalculations&quot;: true, &quot;showStatisticsToStudents&quot;: false, &quot;scoreProviderHandle&quot;: &quot;resource/x-bb-assessment&quot; } ] }  This endpoint needs the following data: Type -&gt; [&quot;GradeRange&quot;, &quot;GradePercentage&quot;], mandatory to pick oneGradeColumnId -&gt; (string id from a specific grade column), mandatorymaxScore -&gt; (float, nullable)minScore -&gt; (float, nullable) Explaining the parameters a little bit further: GradeColumnId: Mandatory. Id referencing the gradebook column of another gradable content. The content cannot be the one in which the criteria has been created. The referenced content must belong to the same course. maxScore: Can be null. Should respect the grade scale chosen by the referenced gradebook column. Less than or equal to the max score set in the grade item. minScore: Can be null. Only one of the scores can be set to null in a particular request. Cannot be negative. Now, lets create the criteria: ","version":null,"tagName":"h3"},{"title":"Creating new criteria​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#creating-new-criteria","content":"You can create it using (You need course_id, contentId and ruleId): POST {{baseUrl}}/learn/api/public/v1/courses/:courseId/contents/:contentId/adaptiveRelease/rules/:ruleId/criteria And on the body: { &quot;type&quot;: &quot;GradeRange&quot;, &quot;gradeColumnId&quot;: &quot;_89584_1&quot;, &quot;maxScore&quot;: 10.0, &quot;minScore&quot;: 10.0 }  If everything goes well, you should see a 201 with an id: { &quot;type&quot;: &quot;GradeRange&quot;, &quot;id&quot;: &quot;_386_1&quot;, &quot;gradeColumnId&quot;: &quot;_89584_1&quot;, &quot;maxScore&quot;: 10.0, &quot;minScore&quot;: 10.0 }  Please be aware that maxScore and minScore can be set to null, for both POST and PATCH requests. This will be understood as &quot;minScore or Higher&quot; without setting a maximum score directly: { &quot;type&quot;: &quot;GradeRange&quot;, &quot;id&quot;: &quot;_11_1&quot;, &quot;gradeColumnId&quot;: &quot;_22_1&quot;, &quot;maxScore&quot;: null, &quot;minScore&quot;: 70.0 }  If we do not declare the maxScore in the request while using POST, it will have a value assigned during the request corresponding to the maximum score possible by the gradable item, in this example, &quot;maxScore&quot; would be set to 100. For the PATCH, because it handles partial updates, if the field is omitted then the previous value will not change, being either null or 100. This behaviour also applies to GradePercentage criteria { &quot;type&quot;: &quot;GradeRange&quot;, &quot;id&quot;: &quot;_11_1&quot;, &quot;gradeColumnId&quot;: &quot;_22_1&quot;, &quot;minScore&quot;: 70.0 }  ","version":null,"tagName":"h3"},{"title":"Using GradePercentage​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#using-gradepercentage","content":"Specifies a gradable item, a maximum and a minimum percentage value from the maximum score possible. When the item has been graded and the score is within the range, the content becomes available. A GradePercentage criterion can be converted to a GradeRange criterion by setting the Type to GradeRange and other fields to acceptable values for GradeRange criteria. So, this is basically the same as GradeRange, except that maxScore and minScore expect a number between 0 and 100 (Float). { &quot;type&quot;: &quot;GradeRange&quot;, &quot;gradeColumnId&quot;: &quot;_89584_1&quot;, &quot;maxScore&quot;: 100.0, &quot;minScore&quot;: 70.0 }  ","version":null,"tagName":"h3"},{"title":"Using DateRange​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#using-daterange","content":"Specifies a start and end dates. The content becomes available during the given date range. This endpoint needs the following data: Type -&gt; [&quot;DateRange&quot;], inmutablestartDate -&gt; ISODate, NullableendDate -&gt; ISODate, Nullable &amp; endDate &gt; startDate Explaining the parameters a little bit further: startDate: ISODate. Can be null. Can be a past date. Must be prior to due date. endDate: ISODate. Can be null. Must be after startDate, and prior to due date. Only one of the dates can be set to null in a particular request. You can create this using: POST {{baseUrl}}/learn/api/public/v1/courses/:courseId/contents/:contentId/adaptiveRelease/rules/:ruleId/criteria And the body looks like this: { &quot;type&quot;: &quot;DateRange&quot;, &quot;startDate&quot;: null, &quot;endDate&quot;: &quot;2021-03-12T22:00:00Z&quot; }  Similar to Grade criteria, any date can be explicitly set to null in the request body for both POST and PATCH requests. If “startDate” is set to null, it will be understood as “before endDate”. Similarly, if “endDate” is set to null that means “after startDate” with no particular limit. This comes useful particularly for PATCH requests, as one of the dates can be changed to null without recreating the object. If the value is omitted during creation, it will be set to null instead of having a default value. If you send a request as in the example, the API returns 201 and: { &quot;type&quot;: &quot;DateRange&quot;, &quot;id&quot;: &quot;_387_1&quot;, &quot;endDate&quot;: &quot;2021-03-12T22:00:00.000Z&quot; }  To make the text a little bit more simple: This basically means that the content will be hidden after that specific end date, but has always been visible prior that date:  If we send this body: { &quot;type&quot;: &quot;DateRange&quot;, &quot;startDate&quot;: &quot;2021-03-12T22:00:00.000Z&quot;, &quot;endDate&quot;: &quot;null&quot; }  This means that content will be shown starting that date with no end date.  ","version":null,"tagName":"h3"},{"title":"Memberships​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#memberships","content":"","version":null,"tagName":"h2"},{"title":"About memberships​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#about-memberships","content":"By default, all members are selected to be affected by the criteria, however, it is possible to select specific Members or groups of the course to apply these rules on, Before we start talking about the membership criteria, if you've already applied membership criteria to the content and you call: GET {{baseUrl}}/learn/api/public/v1/courses/:courseId/contents/:contentId/adaptiveRelease/rules/:ruleId/criteria Returns: { &quot;results&quot;: [ { &quot;type&quot;: &quot;GradeRange&quot;, &quot;id&quot;: &quot;_386_1&quot;, &quot;gradeColumnId&quot;: &quot;_89584_1&quot;, &quot;maxScore&quot;: 10.0, &quot;minScore&quot;: 10.0 }, { &quot;type&quot;: &quot;DateRange&quot;, &quot;id&quot;: &quot;_387_1&quot;, &quot;endDate&quot;: &quot;2021-03-12T22:00:00.000Z&quot; }, { &quot;type&quot;: &quot;Memberships&quot;, &quot;id&quot;: &quot;_389_1&quot; } ] }  The &quot;Memberships&quot; part of the returned values from this endpoint, indicates that the content has specific membership criteria and has the id of the membership criteria that describes the members, this id is a way of grouping the &quot;memberships&quot; without describing them, if we want to know who are the members… We can query the membership id only if required using: GET {{baseUrl}}/learn/api/public/v1/courses/:courseId/contents/:contentId/adaptiveRelease/rules/:ruleId/criteria/:criterionId Returns: { &quot;type&quot;: &quot;Memberships&quot;, &quot;id&quot;: &quot;_389_1&quot; }  ","version":null,"tagName":"h3"},{"title":"Users​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#users","content":"","version":null,"tagName":"h2"},{"title":"Getting the adaptive release users​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#getting-the-adaptive-release-users","content":"To get the users you need to now: Course_idContent_idRule_idCriterion_id (Membership) You can query using: GET {{baseUrl}}/learn/api/public/v1/courses/:courseId/contents/:contentId/adaptiveRelease/rules/:ruleId/criteria/:criterionId/users Returns: { &quot;results&quot;: [ { &quot;id&quot;: &quot;_230_1&quot;, &quot;criterionId&quot;: &quot;_389_1&quot;, &quot;userId&quot;: &quot;_13584_1&quot; }, { &quot;id&quot;: &quot;_229_1&quot;, &quot;criterionId&quot;: &quot;_389_1&quot;, &quot;userId&quot;: &quot;_13613_1&quot; } ] }  ","version":null,"tagName":"h3"},{"title":"Posting adaptive release users​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#posting-adaptive-release-users","content":"To POST a list of users, you need to know the user_id which can be retrieved using: Please keep in mind the user needs to be enrolled first in the course in order for all of this to work! GET {{baseUrl}}/learn/api/public/v1/users Returns: { &quot;results&quot;: [ { &quot;id&quot;: &quot;_47939_1&quot;, &quot;uuid&quot;: &quot;3bdfc74364d643a29c5baa8c79608c6c&quot;, &quot;externalId&quot;: &quot;636012&quot;, &quot;dataSourceId&quot;: &quot;_127_1&quot;, &quot;userName&quot;: &quot;tirum&quot;, &quot;educationLevel&quot;: &quot;Unknown&quot;, &quot;gender&quot;: &quot;Unknown&quot;, &quot;created&quot;: &quot;2021-11-11T04:45:14.562Z&quot;, &quot;modified&quot;: &quot;2022-02-18T17:08:02.940Z&quot;, &quot;institutionRoleIds&quot;: [&quot;STUDENT&quot;], &quot;systemRoleIds&quot;: [&quot;User&quot;], &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot; }, &quot;locale&quot;: { &quot;id&quot;: &quot;en-US&quot; }, &quot;avatar&quot;: { &quot;viewUrl&quot;: &quot;https://a-testing-url.com/withsomeIDinfo&quot;, &quot;source&quot;: &quot;Default&quot; } } ] }  The ID that you might need to grab is &quot;id&quot;: &quot;_47939_1&quot; Now to post it, we use PUT. You need to pass the same information: PUT {{baseUrl}}/learn/api/public/v1/courses/:courseId/contents/:contentId/adaptiveRelease/rules/:ruleId/criteria/:criterionId/groups Course_idContent_idRule_idCriterion_id (Membership) Now, you need to use the following body format: [ { &quot;userId&quot;: &quot;anim labore in nulla est&quot; }, { &quot;userId&quot;: &quot;sunt labore ve&quot; } ]  Using our previous example: [ { &quot;userId&quot;: &quot;_47939_1&quot; } ]  If the user is NOT enrolled in the course the API returns 400: Returns: { &quot;status&quot;: 400, &quot;message&quot;: &quot;User _47939_1 is not enrolled in the course _13969_1 &quot;, &quot;extraInfo&quot;: &quot;1f34fc3eba27478abdea01ed7134c2e4&quot; }  If the user IS enrolled in the course: Returns: { &quot;results&quot;: [ { &quot;id&quot;: &quot;_231_1&quot;, &quot;criterionId&quot;: &quot;_389_1&quot;, &quot;userId&quot;: &quot;_47939_1&quot; } ] }  ","version":null,"tagName":"h3"},{"title":"Groups​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#groups","content":"Since this guide has become a little bit longer than desired, you can check our approach on groups here. Basically, you can create groups and associate them to adaptive release content, please keep in mind you cannot reference a group set, but groups within the set: ","version":null,"tagName":"h2"},{"title":"Put Groups as criteria:​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#put-groups-as-criteria","content":"PUT {{baseUrl}}/learn/api/public/v1/courses/:courseId/contents/:contentId/adaptiveRelease/rules/:ruleId/criteria/:criterionId/groups And the body: [ { &quot;groupId&quot;: &quot;_873_1&quot; } ]  This returns: { &quot;results&quot;: [ { &quot;id&quot;: &quot;_206_1&quot;, &quot;criterionId&quot;: &quot;_389_1&quot;, &quot;groupId&quot;: &quot;_873_1&quot; } ] }  Please keep in mind that this will update and replace any current groups that are part of the criterion, you need to pass as many child groups as needed to avoid issues: Like this: [ { &quot;groupId&quot;: &quot;_867_1&quot; }, { &quot;groupId&quot;: &quot;_873_1&quot; }, { &quot;groupId&quot;: &quot;_872_1&quot; }, { &quot;groupId&quot;: &quot;_871_1&quot; } ]  This returns: { &quot;results&quot;: [ { &quot;id&quot;: &quot;_208_1&quot;, &quot;criterionId&quot;: &quot;_389_1&quot;, &quot;groupId&quot;: &quot;_867_1&quot; }, { &quot;id&quot;: &quot;_209_1&quot;, &quot;criterionId&quot;: &quot;_389_1&quot;, &quot;groupId&quot;: &quot;_871_1&quot; }, { &quot;id&quot;: &quot;_207_1&quot;, &quot;criterionId&quot;: &quot;_389_1&quot;, &quot;groupId&quot;: &quot;_872_1&quot; }, { &quot;id&quot;: &quot;_210_1&quot;, &quot;criterionId&quot;: &quot;_389_1&quot;, &quot;groupId&quot;: &quot;_873_1&quot; } ] }  Notice that we are using the same criterionId, here is why: When you retrieve all the criterion related to a rule, you get the following: { &quot;results&quot;: [ { &quot;type&quot;: &quot;GradeRange&quot;, &quot;id&quot;: &quot;_386_1&quot;, &quot;gradeColumnId&quot;: &quot;_89584_1&quot;, &quot;maxScore&quot;: 10.0, &quot;minScore&quot;: 10.0 }, { &quot;type&quot;: &quot;DateRange&quot;, &quot;id&quot;: &quot;_387_1&quot;, &quot;endDate&quot;: &quot;2021-03-12T22:00:00.000Z&quot; }, { &quot;type&quot;: &quot;Memberships&quot;, &quot;id&quot;: &quot;_389_1&quot; } ] }  As you can see, the membership criteria has id _389_1, meaning that there is where all the membership criteria will be stored. ","version":null,"tagName":"h3"},{"title":"Read Only Messages you might see​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#read-only-messages-you-might-see","content":"","version":null,"tagName":"h2"},{"title":"ContentComplete (Ultra Only)​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#contentcomplete-ultra-only","content":"This is a Special type of criteria only assigned to the child contents of a learning module, where the “Sequence” release condition can be activated. Each type of content has its own definition of what “complete” means. This behavior is not supported via public API. { &quot;type&quot;: &quot;ContentComplete&quot;, &quot;id&quot;: &quot;_11_1&quot;, &quot;contentId&quot;: &quot;_22_1&quot; }  ","version":null,"tagName":"h3"},{"title":"GradeCompleted (Original Only)​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#gradecompleted-original-only","content":"Specifies a gradable item associated to a different content in the same course. Regardless of scores, if the grade item is deemed as completed, the content will become available. { &quot;type&quot;: &quot;GradeCompleted&quot;, &quot;id&quot;: &quot;_11_1&quot;, &quot;gradeColumnId&quot;: &quot;_10_1&quot; }  ","version":null,"tagName":"h3"},{"title":"ContentReviewed (Original Only)​","type":1,"pageTitle":"Working with Adaptive Release","url":"/docs/blackboard/rest-apis/hands-on/adaptive-release#contentreviewed-original-only","content":"Specifies a content of the same course. The referenced content must be set to a “reviewed” status from entitled users for the content to become available. { &quot;type&quot;: &quot;ContentReviewed&quot;, &quot;id&quot;: &quot;_2_2&quot;, &quot;reviewedContentId&quot;: &quot;_2_1&quot; }  Contributors on this article: Davey Herrera Software EngineerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Using Table of Contents in Original course view","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/hands-on/course-toc","content":"","keywords":"","version":null},{"title":"What is TOC?​","type":1,"pageTitle":"Using Table of Contents in Original course view","url":"/docs/blackboard/rest-apis/hands-on/course-toc#what-is-toc","content":"TOC or Table of contents is the menu that everyone sees on the top left of the page, like this:  Now if you do the same call, you will receive this: GET {{baseUrl}}/learn/api/public/v1/courses/:courseId/tocItems { &quot;results&quot;: [ { &quot;id&quot;: &quot;_10223_1&quot;, &quot;courseId&quot;: &quot;_907_1&quot;, &quot;contentId&quot;: null, &quot;label&quot;: &quot;Home Page&quot;, &quot;targetType&quot;: &quot;Module&quot;, &quot;position&quot;: 0, &quot;launchInNewWindow&quot;: false, &quot;isEnabled&quot;: true, &quot;isEntryPoint&quot;: true, &quot;allowGuests&quot;: true, &quot;allowObservers&quot;: true }, { &quot;id&quot;: &quot;_10222_1&quot;, &quot;courseId&quot;: &quot;_907_1&quot;, &quot;contentId&quot;: &quot;_6674_1&quot;, &quot;label&quot;: &quot;Information&quot;, &quot;targetType&quot;: &quot;Content&quot;, &quot;position&quot;: 1, &quot;launchInNewWindow&quot;: false, &quot;isEnabled&quot;: true, &quot;isEntryPoint&quot;: false, &quot;internalHandle&quot;: &quot;content&quot;, &quot;allowGuests&quot;: true, &quot;allowObservers&quot;: true }, { &quot;id&quot;: &quot;_10221_1&quot;, &quot;courseId&quot;: &quot;_907_1&quot;, &quot;contentId&quot;: &quot;_6673_1&quot;, &quot;label&quot;: &quot;Content&quot;, &quot;targetType&quot;: &quot;Content&quot;, &quot;position&quot;: 2, &quot;launchInNewWindow&quot;: false, &quot;isEnabled&quot;: true, &quot;isEntryPoint&quot;: false, &quot;internalHandle&quot;: &quot;content&quot;, &quot;allowGuests&quot;: true, &quot;allowObservers&quot;: true }, { &quot;id&quot;: &quot;_10220_1&quot;, &quot;courseId&quot;: &quot;_907_1&quot;, &quot;contentId&quot;: null, &quot;label&quot;: &quot;Discussions&quot;, &quot;targetType&quot;: &quot;Application&quot;, &quot;position&quot;: 3, &quot;launchInNewWindow&quot;: false, &quot;isEnabled&quot;: true, &quot;isEntryPoint&quot;: false, &quot;internalHandle&quot;: &quot;discussion_board_entry&quot;, &quot;allowGuests&quot;: false, &quot;allowObservers&quot;: false }, { &quot;id&quot;: &quot;_10219_1&quot;, &quot;courseId&quot;: &quot;_907_1&quot;, &quot;contentId&quot;: null, &quot;label&quot;: &quot;Groups&quot;, &quot;targetType&quot;: &quot;Application&quot;, &quot;position&quot;: 4, &quot;launchInNewWindow&quot;: false, &quot;isEnabled&quot;: true, &quot;isEntryPoint&quot;: false, &quot;internalHandle&quot;: &quot;groups&quot;, &quot;allowGuests&quot;: false, &quot;allowObservers&quot;: false }, { &quot;id&quot;: &quot;_10218_1&quot;, &quot;courseId&quot;: &quot;_907_1&quot;, &quot;contentId&quot;: null, &quot;label&quot;: &quot;Tools&quot;, &quot;targetType&quot;: &quot;Application&quot;, &quot;position&quot;: 5, &quot;launchInNewWindow&quot;: false, &quot;isEnabled&quot;: true, &quot;isEntryPoint&quot;: false, &quot;internalHandle&quot;: &quot;course_tools_area&quot;, &quot;allowGuests&quot;: false, &quot;allowObservers&quot;: false }, { &quot;id&quot;: &quot;_10217_1&quot;, &quot;courseId&quot;: &quot;_907_1&quot;, &quot;contentId&quot;: null, &quot;label&quot;: &quot;Help&quot;, &quot;targetType&quot;: &quot;Application&quot;, &quot;position&quot;: 6, &quot;launchInNewWindow&quot;: false, &quot;isEnabled&quot;: true, &quot;isEntryPoint&quot;: false, &quot;internalHandle&quot;: &quot;student_manual&quot;, &quot;allowGuests&quot;: false, &quot;allowObservers&quot;: false } ] }  Basically, when using this endpoint it &quot;Returns a list of Course TOC entries associated to a course.&quot;. ","version":null,"tagName":"h2"},{"title":"Required entitlements​","type":1,"pageTitle":"Using Table of Contents in Original course view","url":"/docs/blackboard/rest-apis/hands-on/course-toc#required-entitlements","content":"In order to use: GET /learn/api/public/v1/courses/:courseId/tocItemsPATCH /learn/api/public/v1/courses/{courseId}/tocItems/{tocId} You will need: course.configure-areas.EXECUTE -&gt; Entitlement ","version":null,"tagName":"h3"},{"title":"Mapping the returned values with the GUI​","type":1,"pageTitle":"Using Table of Contents in Original course view","url":"/docs/blackboard/rest-apis/hands-on/course-toc#mapping-the-returned-values-with-the-gui","content":" Please remember you can always check in our documentation the model to understand the meaning of each attribute in the payload in our Developer Portal  ","version":null,"tagName":"h3"},{"title":"Using PATCH Course TOC​","type":1,"pageTitle":"Using Table of Contents in Original course view","url":"/docs/blackboard/rest-apis/hands-on/course-toc#using-patch-course-toc","content":"It is very important to remember that this patch method can only update two attributes: allowGuests -&gt; Defines whether or not Guests can view this TOCallowObservers -&gt; Defines whether or not observers can view this TOC The payload looks like this: } &quot;allowGuests&quot;: true, &quot;allowObservers&quot;: true }  Also, please keep in mind the following guideline: &quot;Updates a specific TOC entry. Only allowGuests and allowObservers flags are modifiable, the remaining fields are read-only. User should keep in mind that in order to modify such TOC fields, Course's allowGuest and allowObservers configuration must be enabled. Also, if user wants to update a TOC register's allowGuest flag and TOC is associated to a CONTENT or APPLICATION target type, Course Tool Settings must have allowGuests flag enabled. If user wants to update a TOC register's allowObserver flag and TOC is associated to an APPLICATION target type, Course Tool Settings must have allowObservers flag enabled.&quot; Contributors on this article: Anthology Inc Integrations, Developer Relations and Standards TeamAnthology Inc ","version":null,"tagName":"h3"},{"title":"Working with Calendar APIs","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/hands-on/calendar-apis","content":"","keywords":"","version":null},{"title":"Topic​","type":1,"pageTitle":"Working with Calendar APIs","url":"/docs/blackboard/rest-apis/hands-on/calendar-apis#topic","content":"Learn provides an internal calendar system for Institutional, Course, and Personal calendar items. Learn Public REST APIs for this calendar system allow external integrations to manage Institutional and Course Calendars. For Personal calendars use of three-legged-oauth (3LO) is required. Notes: All Learn Calendar APIs work the same for either Original or Ultra course experiences. Learn Public REST APIs are documented at https://developer.anthology.com/portal/displayAPI/Learn All Calendar APIs are accessible based on the integration Privileges whether using 3LO or basic OAuth 2.0. This document covers General API Use and Best Practices to meet use cases for using the Learn REST APIs for the Learn Calendar. It is strongly recommended to follow the Best Practices outlined below. General API Use Details follow below but in general, the workflow for accessing and processing calendar items is best broken down by calendar type and desired action – Create, Read, Update, or Delete calendarItems. Mapping a calendar Item to the API payload This is an example of how a Course schedule item looks like in the GUI and in the payload when calling it using: GET /learn/api/public/v1/calendars/items?courseId=_905_1 ","version":null,"tagName":"h2"},{"title":"General Usage Notes for all endpoints​","type":1,"pageTitle":"Working with Calendar APIs","url":"/docs/blackboard/rest-apis/hands-on/calendar-apis#general-usage-notes-for-all-endpoints","content":"We are not able to create, update or delete Calendars BUT We can create new calendarItems on those calendars. Please keep in mind that: All 3LO users can view their own institutional items in calendar.All 3LO users can view their own personal items in calendar.Non-3LO applications can view all calendarTypes and calendarItems except for the Personal Calendar.If SINCE and UNTIL are not provided, the endpoint will default to the upcoming two weeks timeframe from NOW.If only SINCE is provided, this endpoint will default the UNTIL parameter two weeks after SINCE.If only UNTIL is provided the endpoint will default the SINCE parameter two weeks prior to UNTIL.Maximum timespan between SINCE and UNTIL is 16 weeks.The course calendar must be enabled for the course GradebookColumn associate with OfficeHours.If OfficeHours are created for a course calendar (calendarId == a course_id).The course calendar must be enabled for course calendar items associated with GradebookColumn.CalendarItems of type GradebookColumn are a representation of a specific gradable item and there read-only. Modifications to GradebookColumn items performed via the GradebokColumn endpoints will be reflected in the CalentarItems endoints.If you want to use the columnIds from Gradebook Column as a calendar Item id, you can get those from /learn/api/public/v2/courses/{courseId}/gradebook/columns/{columnId}You cannot read/create calendar items when there is no calendar. ","version":null,"tagName":"h2"},{"title":"Institutional​","type":1,"pageTitle":"Working with Calendar APIs","url":"/docs/blackboard/rest-apis/hands-on/calendar-apis#institutional","content":"Create​ Call the create endpoint specifying the Institutional Calendar Type. Read, Update, Delete​ Read: Call the read endpoint specifying the Institutional Calendar Item Type.Update: Call the patch endpoint specifying the Institutional Calendar Item Type and the calendar item Id you wish to update.Delete: Call the delete endpoint specifying the Institutional Calendar Item Type and the calendar item Id you wish to delete. ","version":null,"tagName":"h3"},{"title":"Course​","type":1,"pageTitle":"Working with Calendar APIs","url":"/docs/blackboard/rest-apis/hands-on/calendar-apis#course","content":"Create​ If using 3LO and using calendarItems of type OfficeHours, those will be assigned to the current user. Non-3LO created items may only be managed by the integration. Course Calendar Items​ The specified courseId must not be for an organization. GradebookColumn Calendar Items​ GradebookColumn items must be created using the Gradebook API endpoint: POST /learn/api/public/v2/courses/{courseId}/gradebook/columns OfficeHours Calendar Items​ Get the Id(s) of course(s) for which you need to manage the calendar(s).Call the create endpoint specifying the Course Calendar Item Type and the courseId of the course for which you wish to create the calendar item. Read, Update, Delete​ Read: a. Call the read endpoint specifying the Course Calendar Item Type and the courseId of the course for which you want the calendarItems (returns a collection of calendarItems). b. Call the read {calendarItemId} endpoint specifying the Course Calendar Item Type and the courseId of the course for which you want the calendarItem (returns a single of calendarItem).Update: Call the patch endpoint specifying the Course Calendar Item Type and the calendar item Id you wish to update.Delete: Call the delete endpoint specifying the Course Calendar Item Type and the calendar item Id you wish to delete. ","version":null,"tagName":"h3"},{"title":"Personal​","type":1,"pageTitle":"Working with Calendar APIs","url":"/docs/blackboard/rest-apis/hands-on/calendar-apis#personal","content":"Only 3LO applications may create Personal calendarItems. Personal calendars are personal and as such we do not offer Public APIs for external management of Personal calendar Items. If your use case calls for providing individuals with calendar items – e.g. a meeting scheduler – then you should utilize email and the ICS calendar format* for providing individuals with calendar data. The individual may then add the item to their calendar of choice, optionally sharing their external calendar with their Learn calendar. https://www.ietf.org/rfc/rfc2445.txt; https://icalendar.org/RFC-Specifications/iCalendar-RFC-5545/ iCalendar Libraries Python: https://pypi.org/project/icalendar/Javascript: https://www.npmjs.com/package/ical-generatorJava: https://www.ical4j.orgC#: https://www.nuget.org/packages/Ical.Net/ The below sections further elaborate on each of the above steps. ","version":null,"tagName":"h3"},{"title":"General Use Examples​","type":1,"pageTitle":"Working with Calendar APIs","url":"/docs/blackboard/rest-apis/hands-on/calendar-apis#general-use-examples","content":"The differentiator between using any calendar is to replace the calendarType with your target calendar. Supported calendarTypes are: CourseGradebookColumn (READ ONLY)InstitutionOfficeHoursPersonal (only available via 3LO) ","version":null,"tagName":"h2"},{"title":"CREATE a calendarItem​","type":1,"pageTitle":"Working with Calendar APIs","url":"/docs/blackboard/rest-apis/hands-on/calendar-apis#create-a-calendaritem","content":"POST /learn/api/public/v1/calendars/itemsrequires a payload with calendarItem settings Create Example​ POST /learn/api/public/v1/calendars/items { &quot;type&quot;: &quot;Course&quot;, &quot;calendarId&quot;: &quot;string&quot;, &quot;title&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;location&quot;: &quot;string&quot;, &quot;start&quot;: &quot;2022-09-29T20:30:04.346Z&quot;, &quot;end&quot;: &quot;2022-09-29T20:30:04.346Z&quot;, &quot;disableResizing&quot;: true, &quot;recurrence&quot;: { &quot;count&quot;: 0, &quot;frequency&quot;: &quot;Monthly&quot;, &quot;interval&quot;: 0, &quot;monthRepeatDay&quot;: 0, &quot;monthPosition&quot;: 0, &quot;originalStart&quot;: &quot;2022-09-29T20:30:04.346Z&quot;, &quot;originalEnd&quot;: &quot;2022-09-29T20:30:04.346Z&quot;, &quot;repeatBroken&quot;: true, &quot;repeatDay&quot;: &quot;Sunday&quot;, &quot;until&quot;: &quot;2022-09-29T20:30:04.346Z&quot;, &quot;weekDays&quot;: [&quot;Sunday&quot;] } }  READ calendarItems​ (For a course with an id of _12594_1) GET /learn/api/public/v1/calendars/items Read Examples​ Get all calendarItems for a given course (including Course, OfficeHours, GradebookColumn types): GET /learn/api/public/v1/calendars/items?since=2023-10-15T00:00:00.000Z&amp;until=2023-11-15T00:00:00.000Z&amp;courseId=_12594_1 Results: { &quot;results&quot;: [ { &quot;id&quot;: &quot;_91571_1&quot;, &quot;type&quot;: &quot;OfficeHours&quot;, &quot;calendarId&quot;: &quot;_12594_1&quot;, &quot;calendarName&quot;: &quot;Calendar Demo: My Calendar Course&quot;, &quot;title&quot;: &quot;Office Hours - Mark O'Neil&quot;, &quot;description&quot;: &quot;Use the signup sheet on my door for office hours.&quot;, &quot;start&quot;: &quot;2023-10-25T19:00:00.000Z&quot;, &quot;end&quot;: &quot;2023-10-25T19:30:00.000Z&quot;, &quot;modified&quot;: &quot;2023-10-10T19:07:39.334Z&quot;, &quot;color&quot;: &quot;#670033&quot;, &quot;disableResizing&quot;: false, &quot;createdByUserId&quot;: &quot;_1354_1&quot;, &quot;recurrence&quot;: { &quot;count&quot;: 10, &quot;frequency&quot;: &quot;Weekly&quot;, &quot;interval&quot;: 1, &quot;originalStart&quot;: &quot;2023-10-25T19:00:00.000Z&quot;, &quot;originalEnd&quot;: &quot;2023-10-25T19:30:00.000Z&quot;, &quot;repeatBroken&quot;: false, &quot;weekDays&quot;: [&quot;Wednesday&quot;] } }, { &quot;id&quot;: &quot;_91572_1&quot;, &quot;type&quot;: &quot;OfficeHours&quot;, &quot;calendarId&quot;: &quot;_12594_1&quot;, &quot;calendarName&quot;: &quot;Calendar Demo: My Calendar Course&quot;, &quot;title&quot;: &quot;Office Hours - Mark O'Neil&quot;, &quot;description&quot;: &quot;Use the signup sheet on my door for office hours.&quot;, &quot;start&quot;: &quot;2023-11-01T19:00:00.000Z&quot;, &quot;end&quot;: &quot;2023-11-01T19:30:00.000Z&quot;, &quot;modified&quot;: &quot;2023-10-10T19:07:39.353Z&quot;, &quot;color&quot;: &quot;#670033&quot;, &quot;disableResizing&quot;: false, &quot;createdByUserId&quot;: &quot;_1354_1&quot;, &quot;recurrence&quot;: { &quot;count&quot;: 10, &quot;frequency&quot;: &quot;Weekly&quot;, &quot;interval&quot;: 1, &quot;originalStart&quot;: &quot;2023-10-25T19:00:00.000Z&quot;, &quot;originalEnd&quot;: &quot;2023-10-25T19:30:00.000Z&quot;, &quot;repeatBroken&quot;: false, &quot;weekDays&quot;: [&quot;Wednesday&quot;] } }, { &quot;id&quot;: &quot;_91573_1&quot;, &quot;type&quot;: &quot;OfficeHours&quot;, &quot;calendarId&quot;: &quot;_12594_1&quot;, &quot;calendarName&quot;: &quot;Calendar Demo: My Calendar Course&quot;, &quot;title&quot;: &quot;Office Hours - Mark O'Neil&quot;, &quot;description&quot;: &quot;Use the signup sheet on my door for office hours.&quot;, &quot;start&quot;: &quot;2023-11-08T20:00:00.000Z&quot;, &quot;end&quot;: &quot;2023-11-08T20:30:00.000Z&quot;, &quot;modified&quot;: &quot;2023-10-10T19:07:39.382Z&quot;, &quot;color&quot;: &quot;#670033&quot;, &quot;disableResizing&quot;: false, &quot;createdByUserId&quot;: &quot;_1354_1&quot;, &quot;recurrence&quot;: { &quot;count&quot;: 10, &quot;frequency&quot;: &quot;Weekly&quot;, &quot;interval&quot;: 1, &quot;originalStart&quot;: &quot;2023-10-25T19:00:00.000Z&quot;, &quot;originalEnd&quot;: &quot;2023-10-25T19:30:00.000Z&quot;, &quot;repeatBroken&quot;: false, &quot;weekDays&quot;: [&quot;Wednesday&quot;] } }, { &quot;id&quot;: &quot;_91583_1&quot;, &quot;type&quot;: &quot;Course&quot;, &quot;calendarId&quot;: &quot;_12594_1&quot;, &quot;calendarName&quot;: &quot;Calendar Demo: My Calendar Course&quot;, &quot;title&quot;: &quot;Calendar Demo: My Calendar Course&quot;, &quot;start&quot;: &quot;2023-10-20T20:00:00.000Z&quot;, &quot;end&quot;: &quot;2023-10-20T21:00:00.000Z&quot;, &quot;modified&quot;: &quot;2023-10-10T19:08:12.224Z&quot;, &quot;color&quot;: &quot;#670033&quot;, &quot;disableResizing&quot;: false, &quot;createdByUserId&quot;: &quot;_1354_1&quot;, &quot;recurrence&quot;: { &quot;count&quot;: 10, &quot;frequency&quot;: &quot;Weekly&quot;, &quot;interval&quot;: 1, &quot;originalStart&quot;: &quot;2023-10-06T20:00:00.000Z&quot;, &quot;originalEnd&quot;: &quot;2023-10-06T21:00:00.000Z&quot;, &quot;repeatBroken&quot;: false, &quot;weekDays&quot;: [&quot;Friday&quot;] } }, { &quot;id&quot;: &quot;_91584_1&quot;, &quot;type&quot;: &quot;Course&quot;, &quot;calendarId&quot;: &quot;_12594_1&quot;, &quot;calendarName&quot;: &quot;Calendar Demo: My Calendar Course&quot;, &quot;title&quot;: &quot;Calendar Demo: My Calendar Course&quot;, &quot;start&quot;: &quot;2023-10-27T20:00:00.000Z&quot;, &quot;end&quot;: &quot;2023-10-27T21:00:00.000Z&quot;, &quot;modified&quot;: &quot;2023-10-10T19:08:12.230Z&quot;, &quot;color&quot;: &quot;#670033&quot;, &quot;disableResizing&quot;: false, &quot;createdByUserId&quot;: &quot;_1354_1&quot;, &quot;recurrence&quot;: { &quot;count&quot;: 10, &quot;frequency&quot;: &quot;Weekly&quot;, &quot;interval&quot;: 1, &quot;originalStart&quot;: &quot;2023-10-06T20:00:00.000Z&quot;, &quot;originalEnd&quot;: &quot;2023-10-06T21:00:00.000Z&quot;, &quot;repeatBroken&quot;: false, &quot;weekDays&quot;: [&quot;Friday&quot;] } }, { &quot;id&quot;: &quot;_91585_1&quot;, &quot;type&quot;: &quot;Course&quot;, &quot;calendarId&quot;: &quot;_12594_1&quot;, &quot;calendarName&quot;: &quot;Calendar Demo: My Calendar Course&quot;, &quot;title&quot;: &quot;Calendar Demo: My Calendar Course&quot;, &quot;start&quot;: &quot;2023-11-03T20:00:00.000Z&quot;, &quot;end&quot;: &quot;2023-11-03T21:00:00.000Z&quot;, &quot;modified&quot;: &quot;2023-10-10T19:08:12.238Z&quot;, &quot;color&quot;: &quot;#670033&quot;, &quot;disableResizing&quot;: false, &quot;createdByUserId&quot;: &quot;_1354_1&quot;, &quot;recurrence&quot;: { &quot;count&quot;: 10, &quot;frequency&quot;: &quot;Weekly&quot;, &quot;interval&quot;: 1, &quot;originalStart&quot;: &quot;2023-10-06T20:00:00.000Z&quot;, &quot;originalEnd&quot;: &quot;2023-10-06T21:00:00.000Z&quot;, &quot;repeatBroken&quot;: false, &quot;weekDays&quot;: [&quot;Friday&quot;] } }, { &quot;id&quot;: &quot;_91586_1&quot;, &quot;type&quot;: &quot;Course&quot;, &quot;calendarId&quot;: &quot;_12594_1&quot;, &quot;calendarName&quot;: &quot;Calendar Demo: My Calendar Course&quot;, &quot;title&quot;: &quot;Calendar Demo: My Calendar Course&quot;, &quot;start&quot;: &quot;2023-11-10T21:00:00.000Z&quot;, &quot;end&quot;: &quot;2023-11-10T22:00:00.000Z&quot;, &quot;modified&quot;: &quot;2023-10-10T19:08:12.247Z&quot;, &quot;color&quot;: &quot;#670033&quot;, &quot;disableResizing&quot;: false, &quot;createdByUserId&quot;: &quot;_1354_1&quot;, &quot;recurrence&quot;: { &quot;count&quot;: 10, &quot;frequency&quot;: &quot;Weekly&quot;, &quot;interval&quot;: 1, &quot;originalStart&quot;: &quot;2023-10-06T20:00:00.000Z&quot;, &quot;originalEnd&quot;: &quot;2023-10-06T21:00:00.000Z&quot;, &quot;repeatBroken&quot;: false, &quot;weekDays&quot;: [&quot;Friday&quot;] } }, { &quot;id&quot;: &quot;_120127_1&quot;, &quot;type&quot;: &quot;GradebookColumn&quot;, &quot;calendarId&quot;: &quot;_12594_1&quot;, &quot;calendarName&quot;: &quot;Calendar Demo: My Calendar Course&quot;, &quot;title&quot;: &quot;Sample Assignment [rubric] (Learning Module)&quot;, &quot;start&quot;: &quot;2023-10-31T04:00:00.000Z&quot;, &quot;end&quot;: &quot;2023-10-31T04:00:00.000Z&quot;, &quot;modified&quot;: null, &quot;color&quot;: &quot;#670033&quot;, &quot;disableResizing&quot;: true, &quot;createdByUserId&quot;: null, &quot;dynamicCalendarItemProps&quot;: { &quot;attemptable&quot;: true, &quot;categoryId&quot;: &quot;_172683_1&quot;, &quot;dateRangeLimited&quot;: false, &quot;eventType&quot;: &quot;Test&quot;, &quot;gradable&quot;: true } }, { &quot;id&quot;: &quot;_120129_1&quot;, &quot;type&quot;: &quot;GradebookColumn&quot;, &quot;calendarId&quot;: &quot;_12594_1&quot;, &quot;calendarName&quot;: &quot;Calendar Demo: My Calendar Course&quot;, &quot;title&quot;: &quot;Test (Learning Module)&quot;, &quot;start&quot;: &quot;2023-10-31T04:00:00.000Z&quot;, &quot;end&quot;: &quot;2023-10-31T04:00:00.000Z&quot;, &quot;modified&quot;: null, &quot;color&quot;: &quot;#670033&quot;, &quot;disableResizing&quot;: true, &quot;createdByUserId&quot;: null, &quot;dynamicCalendarItemProps&quot;: { &quot;attemptable&quot;: true, &quot;categoryId&quot;: &quot;_172685_1&quot;, &quot;dateRangeLimited&quot;: false, &quot;eventType&quot;: &quot;Test&quot;, &quot;gradable&quot;: true } } ] }  Get all OfficeHours calendarItems for a course: GET /learn/api/public/v1/calendars/items?since=2023-10-15T00:00:00.000Z&amp;until=2023-11-15T00:00:00.000Z&amp;courseId=_12594_1 &amp;type=OfficeHours Results: { &quot;results&quot;: [ { &quot;id&quot;: &quot;_91571_1&quot;, &quot;type&quot;: &quot;OfficeHours&quot;, &quot;calendarId&quot;: &quot;_12594_1&quot;, &quot;calendarName&quot;: &quot;Calendar Demo: My Calendar Course&quot;, &quot;title&quot;: &quot;Office Hours - Mark O'Neil&quot;, &quot;description&quot;: &quot;Use the signup sheet on my door for office hours.&quot;, &quot;start&quot;: &quot;2023-10-25T19:00:00.000Z&quot;, &quot;end&quot;: &quot;2023-10-25T19:30:00.000Z&quot;, &quot;modified&quot;: &quot;2023-10-10T19:07:39.334Z&quot;, &quot;color&quot;: &quot;#670033&quot;, &quot;disableResizing&quot;: false, &quot;createdByUserId&quot;: &quot;_1354_1&quot;, &quot;recurrence&quot;: { &quot;count&quot;: 10, &quot;frequency&quot;: &quot;Weekly&quot;, &quot;interval&quot;: 1, &quot;originalStart&quot;: &quot;2023-10-25T19:00:00.000Z&quot;, &quot;originalEnd&quot;: &quot;2023-10-25T19:30:00.000Z&quot;, &quot;repeatBroken&quot;: false, &quot;weekDays&quot;: [&quot;Wednesday&quot;] } }, { &quot;id&quot;: &quot;_91572_1&quot;, &quot;type&quot;: &quot;OfficeHours&quot;, &quot;calendarId&quot;: &quot;_12594_1&quot;, &quot;calendarName&quot;: &quot;Calendar Demo: My Calendar Course&quot;, &quot;title&quot;: &quot;Office Hours - Mark O'Neil&quot;, &quot;description&quot;: &quot;Use the signup sheet on my door for office hours.&quot;, &quot;start&quot;: &quot;2023-11-01T19:00:00.000Z&quot;, &quot;end&quot;: &quot;2023-11-01T19:30:00.000Z&quot;, &quot;modified&quot;: &quot;2023-10-10T19:07:39.353Z&quot;, &quot;color&quot;: &quot;#670033&quot;, &quot;disableResizing&quot;: false, &quot;createdByUserId&quot;: &quot;_1354_1&quot;, &quot;recurrence&quot;: { &quot;count&quot;: 10, &quot;frequency&quot;: &quot;Weekly&quot;, &quot;interval&quot;: 1, &quot;originalStart&quot;: &quot;2023-10-25T19:00:00.000Z&quot;, &quot;originalEnd&quot;: &quot;2023-10-25T19:30:00.000Z&quot;, &quot;repeatBroken&quot;: false, &quot;weekDays&quot;: [&quot;Wednesday&quot;] } }, { &quot;id&quot;: &quot;_91573_1&quot;, &quot;type&quot;: &quot;OfficeHours&quot;, &quot;calendarId&quot;: &quot;_12594_1&quot;, &quot;calendarName&quot;: &quot;Calendar Demo: My Calendar Course&quot;, &quot;title&quot;: &quot;Office Hours - Mark O'Neil&quot;, &quot;description&quot;: &quot;Use the signup sheet on my door for office hours.&quot;, &quot;start&quot;: &quot;2023-11-08T20:00:00.000Z&quot;, &quot;end&quot;: &quot;2023-11-08T20:30:00.000Z&quot;, &quot;modified&quot;: &quot;2023-10-10T19:07:39.382Z&quot;, &quot;color&quot;: &quot;#670033&quot;, &quot;disableResizing&quot;: false, &quot;createdByUserId&quot;: &quot;_1354_1&quot;, &quot;recurrence&quot;: { &quot;count&quot;: 10, &quot;frequency&quot;: &quot;Weekly&quot;, &quot;interval&quot;: 1, &quot;originalStart&quot;: &quot;2023-10-25T19:00:00.000Z&quot;, &quot;originalEnd&quot;: &quot;2023-10-25T19:30:00.000Z&quot;, &quot;repeatBroken&quot;: false, &quot;weekDays&quot;: [&quot;Wednesday&quot;] } } ] }  Get all gradebook columns due within the given timeframe: GET /learn/api/public/v1/calendars/items?since=2023-10-15T00:00:00.000Z&amp;until=2023-11-15T00:00:00.000Z&amp;courseId=_12594_1&amp;type=GradebookColumn Results: { &quot;results&quot;: [ { &quot;id&quot;: &quot;_120127_1&quot;, &quot;type&quot;: &quot;GradebookColumn&quot;, &quot;calendarId&quot;: &quot;_12594_1&quot;, &quot;calendarName&quot;: &quot;Calendar Demo: My Calendar Course&quot;, &quot;title&quot;: &quot;Sample Assignment [rubric] (Learning Module)&quot;, &quot;start&quot;: &quot;2023-10-31T04:00:00.000Z&quot;, &quot;end&quot;: &quot;2023-10-31T04:00:00.000Z&quot;, &quot;modified&quot;: null, &quot;color&quot;: &quot;#670033&quot;, &quot;disableResizing&quot;: true, &quot;createdByUserId&quot;: null, &quot;dynamicCalendarItemProps&quot;: { &quot;attemptable&quot;: true, &quot;categoryId&quot;: &quot;_172683_1&quot;, &quot;dateRangeLimited&quot;: false, &quot;eventType&quot;: &quot;Test&quot;, &quot;gradable&quot;: true } }, { &quot;id&quot;: &quot;_120129_1&quot;, &quot;type&quot;: &quot;GradebookColumn&quot;, &quot;calendarId&quot;: &quot;_12594_1&quot;, &quot;calendarName&quot;: &quot;Calendar Demo: My Calendar Course&quot;, &quot;title&quot;: &quot;Test (Learning Module)&quot;, &quot;start&quot;: &quot;2023-10-31T04:00:00.000Z&quot;, &quot;end&quot;: &quot;2023-10-31T04:00:00.000Z&quot;, &quot;modified&quot;: null, &quot;color&quot;: &quot;#670033&quot;, &quot;disableResizing&quot;: true, &quot;createdByUserId&quot;: null, &quot;dynamicCalendarItemProps&quot;: { &quot;attemptable&quot;: true, &quot;categoryId&quot;: &quot;_172685_1&quot;, &quot;dateRangeLimited&quot;: false, &quot;eventType&quot;: &quot;Test&quot;, &quot;gradable&quot;: true } }, { &quot;id&quot;: &quot;_120130_1&quot;, &quot;type&quot;: &quot;GradebookColumn&quot;, &quot;calendarId&quot;: &quot;_12594_1&quot;, &quot;calendarName&quot;: &quot;Calendar Demo: My Calendar Course&quot;, &quot;title&quot;: &quot;Assignment [rubrics] (Conditional Release)&quot;, &quot;start&quot;: &quot;2023-10-31T04:00:00.000Z&quot;, &quot;end&quot;: &quot;2023-10-31T04:00:00.000Z&quot;, &quot;modified&quot;: null, &quot;color&quot;: &quot;#670033&quot;, &quot;disableResizing&quot;: true, &quot;createdByUserId&quot;: null, &quot;dynamicCalendarItemProps&quot;: { &quot;attemptable&quot;: true, &quot;categoryId&quot;: &quot;_172683_1&quot;, &quot;dateRangeLimited&quot;: false, &quot;eventType&quot;: &quot;Test&quot;, &quot;gradable&quot;: true } } ] }  Note in this demo the gradebook column related grades are due on 2023-10-31 so requesting the range as shown previously will return the data. If we changed the until date to 2023-10-25 the results would be an empty set: {&quot;results&quot; : []} For the Institution calendarType exclude the courseId and add/change the type to Institution in the request. E.g. Get all Institution calendarItems within the given timeframe: GET /learn/api/public/v1/calendars/items?since=2023-10-15T00:00:00.000Z&amp;until=2023-11-15T00:00:00.000Z&amp;type=Institution  Results: { &quot;results&quot;: [ { &quot;id&quot;: &quot;_84428_1&quot;, &quot;type&quot;: &quot;Institution&quot;, &quot;calendarId&quot;: &quot;INSTITUTION&quot;, &quot;calendarName&quot;: &quot;Institution&quot;, &quot;title&quot;: &quot;Holiday Celebration - Stevens Commons &quot;, &quot;description&quot;: &quot;Come celebrate with your fellow Monument students as we have a holiday celebration. Student groups will be present and will host different fun-filled activities. Food and drink will be provided! Wear your best ugly Christmas sweater and compete for a prize!&quot;, &quot;location&quot;: &quot;Stevens Commons&quot;, &quot;start&quot;: &quot;2022-12-15T19:00:00.000Z&quot;, &quot;end&quot;: &quot;2022-12-15T22:00:00.000Z&quot;, &quot;modified&quot;: &quot;2022-12-08T19:12:06.160Z&quot;, &quot;color&quot;: &quot;#b65151&quot;, &quot;disableResizing&quot;: false, &quot;createdByUserId&quot;: &quot;_30005_1&quot; } ] }  ","version":null,"tagName":"h3"},{"title":"UPDATE a calendarItem​","type":1,"pageTitle":"Working with Calendar APIs","url":"/docs/blackboard/rest-apis/hands-on/calendar-apis#update-a-calendaritem","content":"To update a calendarItem you must know the calendarItem Id. This may be found by calling the appropriate READ endpoint as outlined above. Once you have a collection of calendarItems you may then update using the Update endpoint: PATCH /learn/api/public/v1/calendars/items/{calendarItemType}/{calendarItemId} Payload example​ { &quot;type&quot;: &quot;Course&quot;, &quot;calendarId&quot;: &quot;_12594_1&quot;, &quot;title&quot;: &quot;Study Group 2 Session&quot;, &quot;description&quot;: &quot;Meeting for Study Group 3&quot;, &quot;location&quot;: &quot;Castle Room 2-202&quot;, &quot;start&quot;: &quot;2022-09-30T16:36:40.313Z&quot;, &quot;end&quot;: &quot;2022-09-30T16:36:40.313Z&quot;, &quot;modified&quot;: &quot;2022-09-30T16:36:40.313Z&quot;, &quot;disableResizing&quot;: true, &quot;dynamicCalendarItemProps&quot;: { &quot;attemptable&quot;: true, &quot;categoryId&quot;: &quot;string&quot;, &quot;dateRangeLimited&quot;: true, &quot;eventType&quot;: &quot;string&quot;, &quot;gradable&quot;: true }, &quot;recurrence&quot;: { &quot;count&quot;: 0, &quot;frequency&quot;: &quot;Monthly&quot;, &quot;interval&quot;: 0, &quot;monthRepeatDay&quot;: 0, &quot;monthPosition&quot;: 0, &quot;originalStart&quot;: &quot;2022-09-30T16:36:40.313Z&quot;, &quot;originalEnd&quot;: &quot;2022-09-30T16:36:40.313Z&quot;, &quot;repeatBroken&quot;: true, &quot;repeatDay&quot;: &quot;Sunday&quot;, &quot;until&quot;: &quot;2022-09-30T16:36:40.313Z&quot;, &quot;weekDays&quot;: [&quot;Sunday&quot;] } }  Success 200 - results match above payload if calendarType were Course with the additional data of &quot;id&quot;: &quot;string&quot;, &quot;calendarName&quot;: &quot;string&quot;, &quot;color&quot;: &quot;string&quot;, &quot;createdByUserId&quot;: &quot;string&quot;. ","version":null,"tagName":"h3"},{"title":"DELETE a calendarItem​","type":1,"pageTitle":"Working with Calendar APIs","url":"/docs/blackboard/rest-apis/hands-on/calendar-apis#delete-a-calendaritem","content":"As with Update you must know the calendarItem Id of the calendarItem you wish to delete. This may be found by calling the appropriate READ endpoint as outlined above. Once you have a collection of calendarItems you may then delete one using the delete endpoint: DELETE /learn/api/public/v1/calendars/items/{calendarItemType}/{calendarItemId} Delete Example​ DELETE /learn/api/public/v1/calendars/items/{calendarItemType}/{calendarItemId} Success204 No content ","version":null,"tagName":"h3"},{"title":"A Sidebar on ISO-8601, UTC, and REST APIs​","type":1,"pageTitle":"Working with Calendar APIs","url":"/docs/blackboard/rest-apis/hands-on/calendar-apis#a-sidebar-on-iso-8601-utc-and-rest-apis","content":"Public REST APIs always return ISO 8601 UTC Zulu time zone formatted date/time data. To properly manage conversion to your time zone to display and use dates in your requests it is important to understand the relationship between UTC and the ISO 8601 date-time format and how the REST APIs handle date/times. ","version":null,"tagName":"h2"},{"title":"In brief:​","type":1,"pageTitle":"Working with Calendar APIs","url":"/docs/blackboard/rest-apis/hands-on/calendar-apis#in-brief","content":"All Learn instances store date-times in the database as localized server time – which may or may not be the consumers time zone – this is why…All REST APIs return date-times in UTC Zulu format and as such developers need to adjust to the appropriate time zone for their UI.UTC stands for Coordinated Universal Time, a standard used to set all time zones around the world.All REST API requests intake ISO 8601 date-time format allowing for specifying the UTC offset for time zone adjustment (see below).ISO 8601 provides a standardized way of presenting dates and times: DateTime of dayCoordinated Universal Time (UTC)Local time with offset to UTCDate and timeTime intervalsRecurring time intervals UTC could be considered a subset of the ISO 8601 standard – a date without a specified time zone is referred to as UTC time and may use the optional ‘Z’ (Zulu) time zone indicator. Zulu date-times are what are returned by the REST APIs. 2023-10-15T13:15:30Z represents 1:15:30 PM in Greenwich England (previously called Greenwich Mean Time) ISO 8601 may be used with an optional offset to designate the time zone. Following the above example: 2023-10-15T13:15:30Z represents 1:15:30 PM in Greenwich England2023-10-15T13:15:30Z-05:00 corresponds to October 10, 2023, 8:15:30 am, US Eastern Standard Time. The ISO 8601 standard provides the following format for a date-time: [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh:mm]] Following the above formatting these are all the same date and time (October 10, 2023, 1:15:30 pm): 2023-10-15T13:15:30Z &lt;&lt; this is the format returned in REST API results20231015T15T13:15:30Z20231015T15T131530Z2023-10-15T13:15:3020231015T15T13:15:3020231015T15T13153020231015T15T13:15:302023-10-15T18:15:30-5:0020231015T15T18:15:30Z-5:0020231015T15T181530Z-5:002023-10-15T18:15:30 -5:0020231015T15T18:15:30-5:0020231015T15T181530-5:0020231015T15T18:15:30-5:00 Some useful URLs to help with better understanding dates: ISO 8601 standard: https://www.rfc-editor.org/rfc/rfc3339, https://www.w3.org/TR/NOTE-datetime and https://en.wikipedia.org/wiki/ISO_8601Time zones:A useful conversion tool: https://www.calculator.net/time-zone-calculator.html ","version":null,"tagName":"h3"},{"title":"Entitlements and System Role Privileges​","type":1,"pageTitle":"Working with Calendar APIs","url":"/docs/blackboard/rest-apis/hands-on/calendar-apis#entitlements-and-system-role-privileges","content":"","version":null,"tagName":"h2"},{"title":"Three-Legged-OAuth (3LO)​","type":1,"pageTitle":"Working with Calendar APIs","url":"/docs/blackboard/rest-apis/hands-on/calendar-apis#three-legged-oauth-3lo","content":"Calling Calendar APIs in a 3LO context enables access based on the privileges of the 3LO authenticated user. You do not need to do anything privileges specific to enable your application when using 3LO. ","version":null,"tagName":"h3"},{"title":"Non-3LO​","type":1,"pageTitle":"Working with Calendar APIs","url":"/docs/blackboard/rest-apis/hands-on/calendar-apis#non-3lo","content":"Calling Calendar APIs when not using 3LO requires that you have a REST Application user configured in Learn with the necessary privileges assigned to that user’s role. These privileges are derived from the entitlements required. For mapping entitlements to privileges see: How to map entitlements to privileges. Necessary Entitlements​ Calendar entitlements required per endpoint are listed in the calendar API documentation. To create a calendar event in Course, course.calendar-entry.CREATE To edit a calendar event in Course, course.calendar-entry.MODIFY To delete a calendar event in Course course.calendar-entry.DELETE To create/edit/delete calendar event in Institution system.calendar-item.EXECUTE Necessary System Role Privileges​ Note: You must share these System Role Privileges with Learn System Admins via documentation for deployment of your application on their Learn server. To create a calendar event in Course, Course/Organization Control Panel (Tools) &gt; Calendar &gt; Create Entry To edit a calendar event in Course, Course/Organization Control Panel (Tools) &gt; Calendar &gt; Edit Entry To delete a calendar event in Course Course/Organization Control Panel (Tools) &gt; Calendar &gt; Delete Entry To create/edit/delete calendar event in Institution Administrator Panel (Tools and Utilities) &gt; Calendar ","version":null,"tagName":"h3"},{"title":"Calendar API Best Practices​","type":1,"pageTitle":"Working with Calendar APIs","url":"/docs/blackboard/rest-apis/hands-on/calendar-apis#calendar-api-best-practices","content":"Note: Please review our General REST API Best Practices which are outlined in our REST API Best Practices guide. Never, use GET /learn/api/public/v1/calendars/items in a non-3LO capacity! 3LO always limits calendar data to what a specific user may view. Non-3LO use of the calendar endpoints is more data inclusive. While safe to use as a 3LO authenticated user, using the /calendars/items endpoint as a non-3LO user will attempt to dump the entire calendar db for the the specified timebox (maximum of 14 week’s worth for every course). THIS WILL POTENTIALLY IMPAIR SYSTEM PERFORMANCE. DO NOT DO THIS! Target your requests based on calendarType and Ids Always target your requests based on the Id of the target course and use calendarTypes to limit the scope of the request. Failure to do so may have negative performance impact. Use calendarType, calendarItem, or courseId as required to manage the impacted data set. Timebox your requests Always timebox your requests. Failure to do so may have negative performance impact. By default all requests are timeboxed to 14 weeks ahead of the date/time of the request. Use the since and until parameters to timebox your requests: since Query parameter: string($date-time)\tSpecifies only calendar items after the 'since' date (inclusive) are to be returned. Maximum of 16 weeks after the 'since' date will be returned. ISO-8601 date-time format is expected: `[yyyy-MM-dd\tyyyyMMdd][T(hh:mm[:ss[.sss]]\thhmm[ss[.sss]])]?[Z\t[+-]hh:mm]]` until Query parameter: string($date-time)\tSpecifies only calendar items before the 'until' date (inclusive) are to be returned. Maximum of 16 weeks prior to the 'until' date will be returned. ISO-8601 date-time format is expected: `[yyyy-MM-dd\tyyyyMMdd][T(hh:mm[:ss[.sss]]\thhmm[ss[.sss]])]?[Z\t[+-]hh:mm]]` Contributors on this article: Davey Herrera Software EngineerIntegrations, Developer Relations and Standards Mark O'Neil Former DirectorPlatform and APIs ","version":null,"tagName":"h2"},{"title":"Managing content with REST API in ULTRA (C.R.U.D)","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/hands-on/creating-content-with-rest-apis","content":"","keywords":"","version":null},{"title":"Returning content​","type":1,"pageTitle":"Managing content with REST API in ULTRA (C.R.U.D)","url":"/docs/blackboard/rest-apis/hands-on/creating-content-with-rest-apis#returning-content","content":"Let's first get the available content available in the root of the course, this is how it looks like in the GUI:  The ROOT is where content such &quot;This is a folder&quot;, &quot;This is a test&quot; and &quot;This is another folder&quot; lives. GET {{baseUrl}}/learn/api/public/v1/courses/:courseId/contents Returns when 200: { &quot;results&quot;: [ { &quot;id&quot;: &quot;_121047_1&quot;, &quot;parentId&quot;: &quot;_120893_1&quot;, &quot;title&quot;: &quot;This is a folder&quot;, &quot;body&quot;: &quot;content body&quot;, &quot;description&quot;: &quot;This is the folder description&quot;, &quot;created&quot;: &quot;2022-01-21T18:03:37.076Z&quot;, &quot;modified&quot;: &quot;2022-03-14T21:01:57.411Z&quot;, &quot;position&quot;: 0, &quot;hasChildren&quot;: true, &quot;launchInNewWindow&quot;: false, &quot;reviewable&quot;: false, &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot;, &quot;allowGuests&quot;: true, &quot;allowObservers&quot;: true, &quot;adaptiveRelease&quot;: {} }, &quot;contentHandler&quot;: { &quot;id&quot;: &quot;resource/x-bb-folder&quot; }, &quot;links&quot;: [ { &quot;href&quot;: &quot;/ultra/redirect?redirectType=nautilus&amp;courseId=_13969_1&amp;contentId=_121047_1&amp;parentId=_120893_1&quot;, &quot;rel&quot;: &quot;alternate&quot;, &quot;title&quot;: &quot;User Interface View&quot;, &quot;type&quot;: &quot;text/html&quot; } ] }, { &quot;id&quot;: &quot;_120905_1&quot;, &quot;parentId&quot;: &quot;_120893_1&quot;, &quot;title&quot;: &quot;This is a test&quot;, &quot;created&quot;: &quot;2022-01-19T20:22:03.605Z&quot;, &quot;modified&quot;: &quot;2022-03-14T20:56:15.194Z&quot;, &quot;position&quot;: 1, &quot;hasGradebookColumns&quot;: true, &quot;launchInNewWindow&quot;: true, &quot;reviewable&quot;: false, &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot;, &quot;allowGuests&quot;: true, &quot;allowObservers&quot;: true, &quot;adaptiveRelease&quot;: {} }, &quot;contentHandler&quot;: { &quot;id&quot;: &quot;resource/x-bb-asmt-test-link&quot;, &quot;assessmentId&quot;: &quot;_109303_1&quot;, &quot;gradeColumnId&quot;: &quot;_89584_1&quot;, &quot;proctoring&quot;: { &quot;secureBrowserRequiredToTake&quot;: false, &quot;secureBrowserRequiredToReview&quot;: false, &quot;webcamRequired&quot;: false }, &quot;originalityReportingTool&quot;: { &quot;id&quot;: &quot;safeAssign&quot;, &quot;checkSubmission&quot;: false, &quot;studentViewReports&quot;: false, &quot;excludeSubmissionsFromDatabases&quot;: false } }, &quot;links&quot;: [ { &quot;href&quot;: &quot;/ultra/redirect?redirectType=nautilus&amp;courseId=_13969_1&amp;contentId=_120905_1&amp;parentId=_120893_1&quot;, &quot;rel&quot;: &quot;alternate&quot;, &quot;title&quot;: &quot;User Interface View&quot;, &quot;type&quot;: &quot;text/html&quot; } ] }, { &quot;id&quot;: &quot;_120902_1&quot;, &quot;parentId&quot;: &quot;_120893_1&quot;, &quot;title&quot;: &quot;This is another folder&quot;, &quot;description&quot;: &quot;This is the folder description&quot;, &quot;created&quot;: &quot;2022-01-19T20:20:27.429Z&quot;, &quot;modified&quot;: &quot;2022-03-14T21:02:03.619Z&quot;, &quot;position&quot;: 2, &quot;hasChildren&quot;: true, &quot;launchInNewWindow&quot;: true, &quot;reviewable&quot;: false, &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot;, &quot;allowGuests&quot;: true, &quot;allowObservers&quot;: true, &quot;adaptiveRelease&quot;: {} }, &quot;contentHandler&quot;: { &quot;id&quot;: &quot;resource/x-bb-folder&quot; }, &quot;links&quot;: [ { &quot;href&quot;: &quot;/ultra/redirect?redirectType=nautilus&amp;courseId=_13969_1&amp;contentId=_120902_1&amp;parentId=_120893_1&quot;, &quot;rel&quot;: &quot;alternate&quot;, &quot;title&quot;: &quot;User Interface View&quot;, &quot;type&quot;: &quot;text/html&quot; } ] } ] }  We can also get content of one specific content_id: GET {{baseUrl}}/learn/api/public/v1/courses/:courseId/contents/:contentId Returns: { &quot;id&quot;: &quot;_121047_1&quot;, &quot;parentId&quot;: &quot;_120893_1&quot;, &quot;title&quot;: &quot;This is a folder&quot;, &quot;body&quot;: &quot;content body&quot;, &quot;description&quot;: &quot;This is the folder description&quot;, &quot;created&quot;: &quot;2022-01-21T18:03:37.076Z&quot;, &quot;modified&quot;: &quot;2022-03-14T21:01:57.411Z&quot;, &quot;position&quot;: 0, &quot;hasChildren&quot;: true, &quot;launchInNewWindow&quot;: false, &quot;reviewable&quot;: false, &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot;, &quot;allowGuests&quot;: true, &quot;allowObservers&quot;: true, &quot;adaptiveRelease&quot;: {} }, &quot;contentHandler&quot;: { &quot;id&quot;: &quot;resource/x-bb-folder&quot; }, &quot;links&quot;: [ { &quot;href&quot;: &quot;/ultra/redirect?redirectType=nautilus&amp;courseId=_13969_1&amp;contentId=_121047_1&amp;parentId=_120893_1&quot;, &quot;rel&quot;: &quot;alternate&quot;, &quot;title&quot;: &quot;User Interface View&quot;, &quot;type&quot;: &quot;text/html&quot; } ] }  ","version":null,"tagName":"h2"},{"title":"Creating and Updating content​","type":1,"pageTitle":"Managing content with REST API in ULTRA (C.R.U.D)","url":"/docs/blackboard/rest-apis/hands-on/creating-content-with-rest-apis#creating-and-updating-content","content":"We can create new content or update existing content in the ROOT of the course using: POST {{baseUrl}}/learn/api/public/v1/courses/:courseId/contentsPATCH {{baseUrl}}/learn/api/public/v1/courses/:courseId/contents/:contentId And in the body: { &quot;title&quot;: &quot;This is a new folder for content created using REST API&quot;, &quot;body&quot;: &quot;Body can be created using BBML, please review developers.blackboard.com for more information and docs.anthology.com https://docs.anthology.com/docs/rest-apis/learn/advanced/rest_apis-learn-advanced-bbml&quot;, &quot;description&quot;: &quot;Content description&quot;, &quot;position&quot;: 1, &quot;launchInNewWindow&quot;: false, &quot;reviewable&quot;: true, &quot;availability&quot;: { &quot;available&quot;: &quot;PartiallyVisible&quot;, &quot;allowGuests&quot;: true, &quot;allowObservers&quot;: true, &quot;adaptiveRelease&quot;: { &quot;start&quot;: &quot;2003-06-12T02:12:48.505Z&quot;, &quot;end&quot;: &quot;2011-01-04T06:08:38.119Z&quot; } }, &quot;contentHandler&quot;: { &quot;id&quot;: &quot;resource/x-bb-folder&quot; } }  It returns when 201: { &quot;id&quot;: &quot;_126266_1&quot;, &quot;parentId&quot;: &quot;_120893_1&quot;, &quot;title&quot;: &quot;This is a new folder for content created using REST API&quot;, &quot;body&quot;: &quot;Body can be created using BBML, please review developers.blackboard.com for more information and docs.anthology.com https://docs.anthology.com/docs/rest-apis/learn/advanced/rest_apis-learn-advanced-bbml&quot;, &quot;description&quot;: &quot;Content description&quot;, &quot;created&quot;: &quot;2022-03-14T21:31:32.552Z&quot;, &quot;modified&quot;: &quot;2022-03-14T21:31:32.611Z&quot;, &quot;position&quot;: 1, &quot;hasChildren&quot;: true, &quot;launchInNewWindow&quot;: false, &quot;reviewable&quot;: false, &quot;availability&quot;: { &quot;available&quot;: &quot;PartiallyVisible&quot;, &quot;allowGuests&quot;: true, &quot;allowObservers&quot;: true, &quot;adaptiveRelease&quot;: { &quot;start&quot;: &quot;2003-06-12T02:12:48.505Z&quot;, &quot;end&quot;: &quot;2011-01-04T06:08:38.119Z&quot; } }, &quot;contentHandler&quot;: { &quot;id&quot;: &quot;resource/x-bb-folder&quot; }, &quot;links&quot;: [ { &quot;href&quot;: &quot;/ultra/redirect?redirectType=nautilus&amp;courseId=_13969_1&amp;contentId=_126266_1&amp;parentId=_120893_1&quot;, &quot;rel&quot;: &quot;alternate&quot;, &quot;title&quot;: &quot;User Interface View&quot;, &quot;type&quot;: &quot;text/html&quot; } ] }  And it looks in the gui, It has adaptive release, however, you can set it like this to avoid any type of adaptive release: You can Learn more about adaptive release here.  { &quot;title&quot;: &quot;This is a new folder for content created using REST API, without adaptive release&quot;, &quot;body&quot;: &quot;Body can be created using BBML, please review developers.blackboard.com for more information and docs.anthology.com https://docs.anthology.com/docs/rest-apis/learn/advanced/rest_apis-learn-advanced-bbml&quot;, &quot;description&quot;: &quot;Content description&quot;, &quot;position&quot;: 1, &quot;launchInNewWindow&quot;: false, &quot;reviewable&quot;: true, &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot;, &quot;allowGuests&quot;: true, &quot;allowObservers&quot;: true }, &quot;contentHandler&quot;: { &quot;id&quot;: &quot;resource/x-bb-folder&quot; } }  Looks like this:  ","version":null,"tagName":"h2"},{"title":"Deleting content​","type":1,"pageTitle":"Managing content with REST API in ULTRA (C.R.U.D)","url":"/docs/blackboard/rest-apis/hands-on/creating-content-with-rest-apis#deleting-content","content":"DELETE {{baseUrl}}/learn/api/public/v1/courses/:courseId/contents/:contentId Returns 204 - No content  ","version":null,"tagName":"h3"},{"title":"Children content (C.R.U.D)​","type":1,"pageTitle":"Managing content with REST API in ULTRA (C.R.U.D)","url":"/docs/blackboard/rest-apis/hands-on/creating-content-with-rest-apis#children-content-crud","content":"","version":null,"tagName":"h2"},{"title":"Returning children content​","type":1,"pageTitle":"Managing content with REST API in ULTRA (C.R.U.D)","url":"/docs/blackboard/rest-apis/hands-on/creating-content-with-rest-apis#returning-children-content","content":"Let's say I want to check the content within my folder:  GET {{baseUrl}}/learn/api/public/v1/courses/:courseId/contents/:contentId/children Returns when 200: { &quot;results&quot;: [ { &quot;id&quot;: &quot;_121048_1&quot;, &quot;parentId&quot;: &quot;_121047_1&quot;, &quot;title&quot;: &quot;ut dolor ipsum labore&quot;, &quot;body&quot;: &quot;CONTENT&quot;, &quot;created&quot;: &quot;2022-01-21T18:08:56.086Z&quot;, &quot;modified&quot;: &quot;2022-01-21T18:08:56.138Z&quot;, &quot;position&quot;: 0, &quot;hasChildren&quot;: true, &quot;launchInNewWindow&quot;: true, &quot;reviewable&quot;: false, &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot;, &quot;allowGuests&quot;: true, &quot;allowObservers&quot;: true, &quot;adaptiveRelease&quot;: {} }, &quot;contentHandler&quot;: { &quot;id&quot;: &quot;resource/x-bb-folder&quot;, &quot;isBbPage&quot;: true }, &quot;links&quot;: [ { &quot;href&quot;: &quot;/ultra/redirect?redirectType=nautilus&amp;courseId=_13969_1&amp;contentId=_121048_1&amp;parentId=_121047_1&quot;, &quot;rel&quot;: &quot;alternate&quot;, &quot;title&quot;: &quot;User Interface View&quot;, &quot;type&quot;: &quot;text/html&quot; } ] } ] }  ","version":null,"tagName":"h3"},{"title":"Creating Children content​","type":1,"pageTitle":"Managing content with REST API in ULTRA (C.R.U.D)","url":"/docs/blackboard/rest-apis/hands-on/creating-content-with-rest-apis#creating-children-content","content":"Please review the types of content you can create based on the contentHandler, please review: https://docs.anthology.com/rest-apis/learn/advanced/contenthandler-datatypes ","version":null,"tagName":"h2"},{"title":"Creating a folder within a folder​","type":1,"pageTitle":"Managing content with REST API in ULTRA (C.R.U.D)","url":"/docs/blackboard/rest-apis/hands-on/creating-content-with-rest-apis#creating-a-folder-within-a-folder","content":"POST {{baseUrl}}/learn/api/public/v1/courses/:courseId/contents/:contentId/children And in the body (Please notice the parentId attribute AND contentHandler): { &quot;title&quot;: &quot;This is a child of a folder, a folder within a folder&quot;, &quot;parentId&quot;: &quot;_121047_1&quot;, &quot;body&quot;: &quot;Body can be created using BBML, please review developers.blackboard.com for more information and docs.anthology.com https://docs.anthology.com/docs/rest-apis/learn/advanced/rest_apis-learn-advanced-bbml&quot;, &quot;description&quot;: &quot;Content description&quot;, &quot;position&quot;: 1, &quot;launchInNewWindow&quot;: false, &quot;reviewable&quot;: true, &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot;, &quot;allowGuests&quot;: true, &quot;allowObservers&quot;: true }, &quot;contentHandler&quot;: { &quot;id&quot;: &quot;resource/x-bb-folder&quot; } }  Returns with 201: { &quot;id&quot;: &quot;_127321_1&quot;, &quot;parentId&quot;: &quot;_121047_1&quot;, &quot;title&quot;: &quot;This is a child of a folder, a folder within a folder&quot;, &quot;body&quot;: &quot;Body can be created using BBML, please review developers.blackboard.com for more information and docs.anthology.com https://docs.anthology.com/docs/rest-apis/learn/advanced/rest_apis-learn-advanced-bbml&quot;, &quot;description&quot;: &quot;Content description&quot;, &quot;created&quot;: &quot;2022-03-17T17:03:13.686Z&quot;, &quot;modified&quot;: &quot;2022-03-17T17:03:13.761Z&quot;, &quot;position&quot;: 1, &quot;hasChildren&quot;: true, &quot;launchInNewWindow&quot;: false, &quot;reviewable&quot;: false, &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot;, &quot;allowGuests&quot;: true, &quot;allowObservers&quot;: true, &quot;adaptiveRelease&quot;: {} }, &quot;contentHandler&quot;: { &quot;id&quot;: &quot;resource/x-bb-folder&quot; }, &quot;links&quot;: [ { &quot;href&quot;: &quot;/ultra/redirect?redirectType=nautilus&amp;courseId=_13969_1&amp;contentId=_127321_1&amp;parentId=_121047_1&quot;, &quot;rel&quot;: &quot;alternate&quot;, &quot;title&quot;: &quot;User Interface View&quot;, &quot;type&quot;: &quot;text/html&quot; } ] }  And looks:  ","version":null,"tagName":"h3"},{"title":"Creating content within a folder​","type":1,"pageTitle":"Managing content with REST API in ULTRA (C.R.U.D)","url":"/docs/blackboard/rest-apis/hands-on/creating-content-with-rest-apis#creating-content-within-a-folder","content":"POST {{baseUrl}}/learn/api/public/v1/courses/:courseId/contents/:contentId/children And in the body (Please notice the parentId attribute AND contentHandler): { &quot;title&quot;: &quot;This is a child of a folder, This is content&quot;, &quot;parentId&quot;: &quot;_121047_1&quot;, &quot;body&quot;: &quot;Body can be created using BBML, please review developers.blackboard.com for more information and docs.anthology.com https://docs.anthology.com/docs/rest-apis/learn/advanced/rest_apis-learn-advanced-bbml&quot;, &quot;description&quot;: &quot;Content description&quot;, &quot;position&quot;: 1, &quot;launchInNewWindow&quot;: false, &quot;reviewable&quot;: true, &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot;, &quot;allowGuests&quot;: true, &quot;allowObservers&quot;: true }, &quot;contentHandler&quot;: { &quot;id&quot;: &quot;resource/x-bb-folder&quot;, &quot;isBbPage&quot;: true } }  When 201 returns: { &quot;id&quot;: &quot;_127322_1&quot;, &quot;parentId&quot;: &quot;_121047_1&quot;, &quot;title&quot;: &quot;This is a child of a folder, This is content&quot;, &quot;body&quot;: &quot;Body can be created using BBML, please review developers.blackboard.com for more information and docs.anthology.com https://docs.anthology.com/docs/rest-apis/learn/advanced/rest_apis-learn-advanced-bbml&quot;, &quot;description&quot;: &quot;Content description&quot;, &quot;created&quot;: &quot;2022-03-17T17:28:29.688Z&quot;, &quot;modified&quot;: &quot;2022-03-17T17:28:29.796Z&quot;, &quot;position&quot;: 1, &quot;hasChildren&quot;: true, &quot;launchInNewWindow&quot;: false, &quot;reviewable&quot;: false, &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot;, &quot;allowGuests&quot;: true, &quot;allowObservers&quot;: true, &quot;adaptiveRelease&quot;: {} }, &quot;contentHandler&quot;: { &quot;id&quot;: &quot;resource/x-bb-folder&quot;, &quot;isBbPage&quot;: true }, &quot;links&quot;: [ { &quot;href&quot;: &quot;/ultra/redirect?redirectType=nautilus&amp;courseId=_13969_1&amp;contentId=_127322_1&amp;parentId=_121047_1&quot;, &quot;rel&quot;: &quot;alternate&quot;, &quot;title&quot;: &quot;User Interface View&quot;, &quot;type&quot;: &quot;text/html&quot; } ] }  And it looks:  ","version":null,"tagName":"h3"},{"title":"Updating children content​","type":1,"pageTitle":"Managing content with REST API in ULTRA (C.R.U.D)","url":"/docs/blackboard/rest-apis/hands-on/creating-content-with-rest-apis#updating-children-content","content":"This is the same as: PATCH {{baseUrl}}/learn/api/public/v1/courses/:courseId/contents/:contentId Which was reviewed (and is the same) in the previous segment. ","version":null,"tagName":"h3"},{"title":"Deleting children content​","type":1,"pageTitle":"Managing content with REST API in ULTRA (C.R.U.D)","url":"/docs/blackboard/rest-apis/hands-on/creating-content-with-rest-apis#deleting-children-content","content":"This is the same as: DELETE {{baseUrl}}/learn/api/public/v1/courses/:courseId/contents/:contentId Returns 204 - No content  ","version":null,"tagName":"h3"},{"title":"Some notes on Original​","type":1,"pageTitle":"Managing content with REST API in ULTRA (C.R.U.D)","url":"/docs/blackboard/rest-apis/hands-on/creating-content-with-rest-apis#some-notes-on-original","content":"The main difference about managing content in original is that you will always find two specific items created by default on toc: Information and content, those become the parents of content and you may create children content under those, you may create new parents and those should be reflected under the TOC, however those items cannot display information but contain it: Contributors on this article: Anthology Inc Integrations, Developer Relations and Standards TeamAnthology Inc ","version":null,"tagName":"h2"},{"title":"Using Learn Public REST APIs to Pull Gradebook Data and Assessment Grades","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/hands-on/pulling-gradebook-data-and-assessment-grades","content":"","keywords":"","version":null},{"title":"Topic​","type":1,"pageTitle":"Using Learn Public REST APIs to Pull Gradebook Data and Assessment Grades","url":"/docs/blackboard/rest-apis/hands-on/pulling-gradebook-data-and-assessment-grades#topic","content":"This document covers General API Use and Best Practices to meet use cases for using the Learn REST APIs for Gradebook and Assessment grades. Specifically pulling data from Learn, though in general setting data follows similar patterns. In both cases it is strongly recommended to follow the Best Practices outlined below. General API Use Details follow below but in general, the workflow for accessing and processing course grades consists of: Get a list of courses from which you wish to pull grades. Get a list of course memberships. Get the gradebook columns of interest. if desired get list of course Gradebook Categories andmap column to category. Get the column grades Process grades taking note of Parent/Child relationships if present. The below sections further elaborate on each of the above steps. ","version":null,"tagName":"h2"},{"title":"1. Get Target Courses​","type":1,"pageTitle":"Using Learn Public REST APIs to Pull Gradebook Data and Assessment Grades","url":"/docs/blackboard/rest-apis/hands-on/pulling-gradebook-data-and-assessment-grades#1-get-target-courses","content":"GET /learn/api/public/v3/courses ","version":null,"tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Using Learn Public REST APIs to Pull Gradebook Data and Assessment Grades","url":"/docs/blackboard/rest-apis/hands-on/pulling-gradebook-data-and-assessment-grades#example","content":"GET /learn/api/public/v3/courses?availability.available=Yes&amp;fields=”id, created, availability.available, hasChildren” will return all ‘active courses’ and the results will have only the id, created date, availability.available (which will always be yes in this case due to the availability search), and whether the course hasChildren. You may then programmatically remove courses based on the date created if out of scope. To get courses for a specific year you may use ?created=2022-08-07T21:17:40.626Z&amp;createdCompare=greaterOrEqual which will return all courses created after August 7, 2022 OR You may search using a specific dataSourceId. ?dataSourceId=_123_4 Note that the dataSourceId may optionally be the data source's externalId using the syntax externalId:Courses-Year-2023-2024. E.g.: ?dataSourceId= externalId:Courses-Year-2023-2024 You may also further reduce the target set by removing courses that are disabled or unavailable based on availability.available. In all cases the hasChildren element may be significant for correctly aligning grade information with SIS systems pending your use case. NOTE: Cache this data because in the queries below you will iterate over the results from your courses request and use each course item’s id in place of {courseId} (with one exception which will be called out). ","version":null,"tagName":"h3"},{"title":"2. Get Target Course Memberships​","type":1,"pageTitle":"Using Learn Public REST APIs to Pull Gradebook Data and Assessment Grades","url":"/docs/blackboard/rest-apis/hands-on/pulling-gradebook-data-and-assessment-grades#2-get-target-course-memberships","content":"GET /learn/api/public/v1/courses/{courseId}/users  ","version":null,"tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Using Learn Public REST APIs to Pull Gradebook Data and Assessment Grades","url":"/docs/blackboard/rest-apis/hands-on/pulling-gradebook-data-and-assessment-grades#example-1","content":"To optimize the number of requests used we will pull the course memberships along with a limited user data set using the expand and fields parameters: GET /learn/api/public/v1/courses/{courseId}/users?expand=users&amp;fields=”id, user.id, childCourseId”  We use fields here because we want some specific information from our memberships so that we can ensure we process the grades correctly and because the user data is rather large and, in this case, mostly not pertinent to our needs. Notably we only need the userId to link the grade back to the correct membership childCourseId if present. NOTE: Cache this data because it will be used in processing the retrieved grades. ","version":null,"tagName":"h3"},{"title":"3. Get Gradebook Columns​","type":1,"pageTitle":"Using Learn Public REST APIs to Pull Gradebook Data and Assessment Grades","url":"/docs/blackboard/rest-apis/hands-on/pulling-gradebook-data-and-assessment-grades#3-get-gradebook-columns","content":"GET /learn/api/public/v2/courses/{courseId}/gradebook/columns  You may use the fields parameter to return specific elements e.g.: ?fields=”id, externalId, name, displayName, gradebookCategoryId, score.possible, grading.due, availability.available” Where: id == the columnId,externalId == as referenced by external systems,externalGrade == whether the column is an external gradename or displayName (original only) == Title,score.possible == Points Possible,grading.due == Due Date,gradebookCategoryId == Gradebook Category id (used to lookup Category details),availability.available == whether the column is visible to students. E.g. using the above request: { &quot;results&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;externalId&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;displayName&quot;: &quot;string&quot;, &quot;externalGrade&quot;: true, &quot;created&quot;: &quot;2023-09-08T15:35:05.817Z&quot;, &quot;score&quot;: { &quot;possible&quot;: 0 }, &quot;availability&quot;: { &quot;available&quot;: &quot;Yes&quot; }, &quot;grading&quot;: { &quot;due&quot;: &quot;2023-09-08T15:35:05.817Z&quot;, }, &quot;gradebookCategoryId&quot;: &quot;string&quot;, } ], ...  You may further reduce whether a column should be included in the target set based on its availability, due date, or whether there are any lastChanged results (see Best Practices). ","version":null,"tagName":"h2"},{"title":"4. (optional) Get Course Gradebook Categories​","type":1,"pageTitle":"Using Learn Public REST APIs to Pull Gradebook Data and Assessment Grades","url":"/docs/blackboard/rest-apis/hands-on/pulling-gradebook-data-and-assessment-grades#4-optional-get-course-gradebook-categories","content":"To work with gradebook categories, you must get the list of categories used in the course and then map the gradebookCategoryId on gradebook column results back to that list as shown below. Aligning gradebook categories with assessments (columns) is a four-step process: 4.1 GET /learn/api/public/v1/courses/{courseId}/gradebook/categories  { &quot;results&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;title&quot;: &quot;string&quot; } ], ...  Then you may map an assessment (gradebook column) to a category by: Getting the column or columns (which has already been done in the above step 3): 4.2 GET /learn/api/public/v2/courses/{courseId}/gradebook/columns?fields=”id, gradebookCategoryId” (this is recommended) or GET /learn/api/public/v2/courses/{courseId}/gradebook/columns/{columnId}? fields=”id, gradebookCategoryId”  and inspecting the results: { &quot;results&quot;: [ { &quot;id&quot;: &quot;string&quot;, ... &quot;gradebookCategoryId&quot;: &quot;string&quot;, ... } ], ...  Finally, for the category details, you must map gradebookCategoryId back to an id in the category results obtained in step 4.1 above. Now you know to which gradebook category a column is associated and may add this detail to your integration logic. ","version":null,"tagName":"h2"},{"title":"5. Get Column (Assessment) Grades​","type":1,"pageTitle":"Using Learn Public REST APIs to Pull Gradebook Data and Assessment Grades","url":"/docs/blackboard/rest-apis/hands-on/pulling-gradebook-data-and-assessment-grades#5-get-column-assessment-grades","content":"PLEASE: Read the Best Practices section below, noting specifically identifying whether a column requires posting of grades or not. Grades are stored at the course level on a per assessment (column basis) so you access them by getting the course columns and then by getting the grades on the column(s) of interest. GET /learn/api/public/v2/courses/{courseId}/gradebook/columns/{columnId}/users This returns all the grades ready on this column for all the users in the course: { &quot;results&quot;: [ { &quot;userId&quot;: &quot;string&quot;, &quot;columnId&quot;: &quot;string&quot;, &quot;status&quot;: &quot;Graded&quot;, &quot;displayGrade&quot;: { &quot;scaleType&quot;: &quot;Percent&quot;, &quot;score&quot;: 0, &quot;possible&quot;: 0, &quot;text&quot;: &quot;string&quot; }, &quot;text&quot;: &quot;string&quot;, &quot;score&quot;: 0, &quot;overridden&quot;: &quot;2023-09-07T20:24:04.778Z&quot;, &quot;notes&quot;: &quot;string&quot;, &quot;feedback&quot;: &quot;string&quot;, &quot;exempt&quot;: true, &quot;corrupt&quot;: true, &quot;gradeNotationId&quot;: &quot;string&quot;, &quot;changeIndex&quot;: 0 } ], &quot;paging&quot;: { &quot;nextPage&quot;: &quot;string&quot; } }  Note: By default, membership results do not include disabled memberships. If those are of interest, then you must use the includeDisabledMemberships=true parameter. Once you have acquired the grades for the column your application may then, based on the results, take appropriate action. ","version":null,"tagName":"h2"},{"title":"Parent/Child Courses and Grades​","type":1,"pageTitle":"Using Learn Public REST APIs to Pull Gradebook Data and Assessment Grades","url":"/docs/blackboard/rest-apis/hands-on/pulling-gradebook-data-and-assessment-grades#parentchild-courses-and-grades","content":"Details on Parent Child course relationships and how they work may be found here: Merge and Separate Courses All grades are presented at the parent course view but are collected on the child course in which the student is enrolled, thus when pulling grades if the course has childred, you likely (based on your use case) must disambiguate the grade from the Parent courseId to the Child courseId when processing to store it against the correct child course identifier. Failure to do so may push the grade to the wrong course in your records system. ","version":null,"tagName":"h3"},{"title":"6. Process Grades​","type":1,"pageTitle":"Using Learn Public REST APIs to Pull Gradebook Data and Assessment Grades","url":"/docs/blackboard/rest-apis/hands-on/pulling-gradebook-data-and-assessment-grades#6-process-grades","content":"Process grade information considering whether the user is a child course member. Check whether the Course consists of a Parent/Child relationship using the above requested course information. If the course hasChildren then you must use the childCourseId presented on the above membership record for the user to correctly handle the setting of the courseId for the grade. Thus if ”hasChildren”:false you will use the courseId as used for accessing the grades. If ”hasChildren”:true you will use the membership information gotten above to find the child courseId by the presence of the childCourseId element. E.g.: { &quot;results&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;userId&quot;: &quot;string&quot;, &quot;user&quot;: { &quot;id&quot;: &quot;string&quot;, . . . &quot;courseId&quot;: &quot;string&quot;, &quot;childCourseId&quot;: &quot;string&quot;, . . .  If membership has childCourseId then that user is a member of a child course, and this is the id which should be used for processing not the parent courseId as returned in courseId. You now may handle the remaining processing workflow for this user’s assignment grade. ","version":null,"tagName":"h2"},{"title":"Calulating API Use​","type":1,"pageTitle":"Using Learn Public REST APIs to Pull Gradebook Data and Assessment Grades","url":"/docs/blackboard/rest-apis/hands-on/pulling-gradebook-data-and-assessment-grades#calulating-api-use","content":"Using the above we can calculate API usage. Let’s keep the math simple by assuming we have 10 courses, 10 columns per course, 10 students per course and every time we check there are grades to pull for every column*: 1 to get all Courses (nCourses = 10)3 requests per course to get all Courses Memberships and User data, Gradebook Categories, and Gradebook ColumnsSum of gradebook column counts *2 = nColumns@two requests/column = 200 (note if not using Categories this would be nColumns). The number of requests to access all the grades is calculable via: Total Requests = 1+(nCourses3)+(nColumns) or 1=(103)+(100) for a total of 231 requests each time you pull all the grades per the above example. *This would be the largest requests needed, but pulling all the grades all the time is rarely the case – as in many cases columns may not have any grades posted, it may be past due and grades already collected, or it may not have been released or graded at all. In each of these cases the number of requests has dropped. Always try to logically bound your requests – don’t make requests “just because you can”. ","version":null,"tagName":"h2"},{"title":"Gradebook API Best Practices​","type":1,"pageTitle":"Using Learn Public REST APIs to Pull Gradebook Data and Assessment Grades","url":"/docs/blackboard/rest-apis/hands-on/pulling-gradebook-data-and-assessment-grades#gradebook-api-best-practices","content":"","version":null,"tagName":"h2"},{"title":"General Best Practices​","type":1,"pageTitle":"Using Learn Public REST APIs to Pull Gradebook Data and Assessment Grades","url":"/docs/blackboard/rest-apis/hands-on/pulling-gradebook-data-and-assessment-grades#general-best-practices","content":"Limit the number of courses in your list of target courses via our search parameters. E.g.: ?created=2023-09-07T21:17:40.626Z&amp;createdCompare=greaterOrEqual or ?availability.available=Yes Use Fields parameter to limit the data per course in your list to that which is needed. E.g.: ?...&amp;fields=”id, created, availability.available, hasChildren”Pulling grades as can be seen by the above Calculating API Usage section can be costly from a rate limit perspective. You can limit the number of requests by targeting specific courses and columns, and pulling grades only when there are new grade changes on existing columns. Meeting this efficiency requires caching of previous request results. You will always have to establish a baseline which will require iterating across all courses, after which your total requests for maintaining your data will be less. Reduce target range. Reducing the number of targets is important with all API requests, but even more so with Gradebook requests – this is due to the potential for a large volume of requests. Target reduction may be done by dropping gradebook columns based on due date information: don’t pull data on columns that are well past the due or graded window, as it is unlikely those grades will have changed.don’t pull data on columns that are not yet due – pull data only on columns that are within a due/gradable window based on your understanding of your use case. ","version":null,"tagName":"h3"},{"title":"Use changeIndex and lastChanged as Grade change indicators​","type":1,"pageTitle":"Using Learn Public REST APIs to Pull Gradebook Data and Assessment Grades","url":"/docs/blackboard/rest-apis/hands-on/pulling-gradebook-data-and-assessment-grades#use-changeindex-and-lastchanged-as-grade-change-indicators","content":"The changeIndex element for user grades is contained in the result set from: GET /learn/api/public/v2/courses/{courseId}/gradebook/columns/{columnId}/users and supplies an indicator of whether the grade presented for a specific user has changed. GET /learn/api/public/v2/courses/{courseId}/gradebook/columns/{columnId}/users/lastChanged  Supplies the highest index indicator of whether the grades in a column have changed and the information for that grade. Note that you should not assume this is the only grade that changed – only that there has been a change. Important Note: Columns of type &quot;Calculated&quot; will always return a changeIndex of zero and an empty lastChanged index. Therefore it is not useful to check for these on a calculated column. See GET column results for the column type: &quot;Attempt&quot;, &quot;Calculated&quot;, or &quot;Manual&quot; ... &quot;grading&quot;: { &quot;type&quot;: &quot;Calculated&quot;, ... and when a column is of &quot;type&quot;: &quot;Calculated&quot; you should process that column's grades as if they had all changed. If you cache your first changeIndex value when requesting column grades, then on future grading cycles, you call lastChanged and only pull grades if your cached value is less than the most recent lastChanged value you will find you save a substantial number of requests and also reduce system load. ","version":null,"tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"Using Learn Public REST APIs to Pull Gradebook Data and Assessment Grades","url":"/docs/blackboard/rest-apis/hands-on/pulling-gradebook-data-and-assessment-grades#example-2","content":"When a course grade book column is created it will have no change index – calling the lastChanged endpoint on that new column will return an empty result. After a while when you check if any grades have been submitted on that column you may still get back an empty result. But, if you get back something similar to this: { &quot;userId&quot;:&quot;_28626_1&quot;, &quot;columnId&quot;:&quot;_86244_1&quot;, &quot;status&quot;:&quot;Graded&quot;, &quot;displayGrade&quot;:{ &quot;scaleType&quot;:&quot;Score&quot;, &quot;score&quot;:3.33333, &quot;possible&quot;:10.000000000000000 }, &quot;exempt&quot;:false, &quot;changeIndex&quot;:7904733} }  You would cache the changeIndex of 7904733 and process the grades on that column using: GET /learn/api/public/v2/courses/{courseId}/gradebook/columns/{columnId}/users Then later when you want to check grades again, first make a lastChanged request on the column – if it comes back the same as your cached value then just skip to the next target column. If it is higher, then cache the new value and fetch the column grades. Note that each grade will have a changedIndex – you may further perfect your application to act only on user records which have a differing per column per user changedIndex value from your cache. Remember, in the event there is a new changedIndex returned by lastChanged there may be other grade changes; the lastChanged index result reflects the most recent change and you should inspect the whole column as shown above. Contributors on this article: Mark O'Neil Former DirectorPlatform and APIs ","version":null,"tagName":"h3"},{"title":"Welcome to Learn REST APIs!","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/learn-intro","content":"","keywords":"","version":null},{"title":"RESTful APIs​","type":1,"pageTitle":"Welcome to Learn REST APIs!","url":"/docs/blackboard/rest-apis/learn-intro#restful-apis","content":"Blackboard Learn's support of RESTful web services, provides institutions and developers with a broad choice of integration development and architecural options, allowing them to choose the approach that best fits their needs and technical expertise. ","version":null,"tagName":"h2"},{"title":"What can be Built with Learn's RESTful APIs?​","type":1,"pageTitle":"Welcome to Learn REST APIs!","url":"/docs/blackboard/rest-apis/learn-intro#what-can-be-built-with-learns-restful-apis","content":"Blackboard Learn REST APIs support a wide range of functionality for integrating with the Blackboard Learn environment. REST (Representational State Transfer) is an architectural style that defines a set of constraints for creating web services, and RESTful APIs provide a flexible and lightweight approach to integration that has become increasingly popular in recent years. User and course management: REST APIs can be used to create, read, update, and delete information about users, courses, and enrollments in the Blackboard Learn environment. Content management: REST APIs can be used to manage content in Blackboard Learn, including uploading, updating, and deleting files and other course resources. Gradebook management: REST APIs can be used to manage the Blackboard Learn Gradebook, including creating and editing grade columns, submitting and retrieving grades, and exporting grade data. Course tools and extensions: REST APIs can be used to integrate with external tools and extensions that have been added to Blackboard Learn through RESTful or LTI integrations. ","version":null,"tagName":"h2"},{"title":"API Documentation and Examples​","type":1,"pageTitle":"Welcome to Learn REST APIs!","url":"/docs/blackboard/rest-apis/learn-intro#api-documentation-and-examples","content":"Anthology provides comprehensive REST API documentation that describes the various endpoints, request and response formats, and authentication methods that are available. The documentation on this site includes examples and code snippets to help you get started with using the REST APIs in your integrations. Also provided is a github repo containing useful application code for getting started. Contributors on this article: Mark Kauffman Sr. Software EngineerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h2"},{"title":"Welcome to our REST APIs!","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/start-here","content":"","keywords":"","version":null},{"title":"What are RESTful APIs?​","type":1,"pageTitle":"Welcome to our REST APIs!","url":"/docs/blackboard/rest-apis/start-here#what-are-restful-apis","content":"RESTful APIs (REpresentational State Transfer Application Programming Interface) are a type of web service API that follow a set of architectural principles, known as the REST architecture. These APIs use HTTP verbs - GET, POST, PUT, DELETE - to access and manipulate resources, such as data or files, on a server. RESTful APIs have become the most common type of web service API, used by many companies and applications to enable communication between different systems or applications. ","version":null,"tagName":"h2"},{"title":"Why are RESTful APIs important?​","type":1,"pageTitle":"Welcome to our REST APIs!","url":"/docs/blackboard/rest-apis/start-here#why-are-restful-apis-important","content":"There are several reasons why RESTful APIs are important: Interoperability: RESTful APIs enable interoperability between different systems and programming languages. This means that applications built on different platforms or programming languages can communicate with each other easily using a common protocol. Ease of development: Applications using RESTful APIs are easy to develop because REST APIs use standard HTTP methods and have a well-defined structure. This makes them easy to understand and implement, reducing the time and cost of development. Scalability: RESTful APIs are highly scalable because they use HTTP as their underlying protocol, which is a widely adopted protocol for web communication. This allows for easy load balancing and horizontal scaling of services. Security: RESTful APIs can be secured using various authentication mechanisms such as OAuth and SSL/TLS. This ensures that the data being transmitted is secure and only accessible to authorized users. Overall, RESTful APIs provide a simple and effective way to expose data and services over the web, making them an important tool for modern software development. Contributors on this article: Mark O'Neil Former DirectorPlatform and APIs ","version":null,"tagName":"h2"},{"title":"Best Practices","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/rest-api-best-practices","content":"","keywords":"","version":null},{"title":"General Best Practices​","type":1,"pageTitle":"Best Practices","url":"/docs/blackboard/rest-apis/rest-api-best-practices#general-best-practices","content":"Learn System Administrators should be enrolled in courses only using a non-Admin enabled user. System Administrator information is generally only available to 3LO Administrator requests. Always monitor your API usage using the x-header information returned on non-oauth requests Details on rate_limits and x-headers are available here. Not all data operations are best done Just-In-Time (JIT). Some operations, such as backfilling data warehouses or refreshing caches are best done during off-peak Learn hours. JIT calling or repeatedly calling for the same &quot;static&quot; data is inefficient.Checking whether a student is still in a course or getting their course grades are reasonable JIT activities as that is data that may change between now and their last access. Cache infrequently changed or “static” data and refresh periodically. This reduces repetitive calls.This reduces integration performance impact.Don’t JIT retrieve ALL Courses for example as that data changes infrequently. Instead do this once and then periodically retrieve course data created or modified since you last request. Always &quot;optimize&quot; your requests. reduce your “search” criteria to as small a set of data as possible. This limits the number of pages of returned data set.E.g. use ?dataSourceId= to reduce your search to objects created using a specific DSK and follow caching practices. Use the fields parameter to reduce the returned data set to only data points you require. This limits the data transmitted and system load Always try to logically bound your requests or before acting on request results: Check if dates are within boundsCheck if attempts exist of if items are gradedCheck availability Do not use Collection Gets to test for a specific object. E.g.: don't use GET /learn/api/public/v1/courses/{courseId}/users to get all the course memberships to test if a student is enrolled. Instead use: GET /learn/api/public/v1/courses/{courseId}/users/{userId} and branch your code based on the result. ","version":null,"tagName":"h2"},{"title":"Best Practices per Product and API​","type":1,"pageTitle":"Best Practices","url":"/docs/blackboard/rest-apis/rest-api-best-practices#best-practices-per-product-and-api","content":"Learn* Calendar * Gradebook Contributors on this article: Davey Herrera Software EngineerIntegrations, Developer Relations and Standards Mark O'Neil Former DirectorPlatform and APIs ","version":null,"tagName":"h2"},{"title":"Welcome to the World of Standards!","type":0,"sectionRef":"#","url":"/docs/blackboard/standards-intro","content":"","keywords":"","version":null},{"title":"What are Standards?​","type":1,"pageTitle":"Welcome to the World of Standards!","url":"/docs/blackboard/standards-intro#what-are-standards","content":"Standards are published documents that establish technical specifications and procedures designed to maximize the reliability of the materials, products, methods, and/or services people use every day. Technology standards can also provide a framework that enables devices from different manufacturers to communicate with one another. That’s why, for example, your EV automatically connects to your home Wi-Fi network as soon as you pull into the garage. You didn’t have to think about connecting. It all happened automatically, behind the scenes, ensuring that your maps and playlists are always up to date. In the process, standards provide a stable but continually evolving foundation that enables entire industries to develop and thrive. Think of standards as recipes. By following them, developers get highly detailed information about how devices identify one another, how data flows between them, and how it’s kept secure, to name just a few examples. ","version":null,"tagName":"h2"},{"title":"Why are Standards Important?​","type":1,"pageTitle":"Welcome to the World of Standards!","url":"/docs/blackboard/standards-intro#why-are-standards-important","content":"Standards are important for a number of reasons, including: Standards Improve interoperability and compatibility: Standards provide a common language and technical framework that enable different products, systems, and services to work together seamlessly. This promotes interoperability, compatibility, and integration, which are essential for many industries and domains.Enhancing efficiency and productivity: Standards can help to streamline processes, reduce waste, and improve efficiency and productivity. Standards can also help to reduce costs, increase profitability, and promote sustainable development.Fostering innovation and competitiveness: Standards can promote innovation by establishing common benchmarks, enabling collaboration and knowledge-sharing, and encouraging experimentation and creativity. Standards can also help to improve competitiveness by leveling the playing field and promoting fair competition. Without standards, it would be difficult to ensure consistency, reliability, and interoperability across different products, services, and systems. Additionally, standards-based interoperability gives consumers the freedom to mix and match different manufacturers’ products. ","version":null,"tagName":"h2"},{"title":"What Standards does Anthology Support?​","type":1,"pageTitle":"Welcome to the World of Standards!","url":"/docs/blackboard/standards-intro#what-standards-does-anthology-support","content":"Anthology supports many standards across our our product portfolio. Some of the key supported e-learning and educational technology standards include: Caliper: Caliper is a standard from 1EduTech and is a specification for collecting learning analytics data. The Caliper standard provides a common language and technical framework for capturing and sharing data related to student engagement, performance, and outcomes across different learning platforms and systems. In addition to defining a set of data elements and metrics the standard also defines a set of technical requirements for implementing the standard. Common Cartridge: Common Cartridge is a standard from 1EduTech for packaging and sharing e-learning content across different platforms and systems. Blackboard Learn™ supports Common Cartridge 1.0, 1.1, and 1.2, which enables users to import and export content packages that conform to the Common Cartridge standard. LIS: Learning Information Services is a standard from 1EduTech. Blackboard Learn's integration with LIS allows institutions to automate the exchange of academic and enrollment data between Blackboard Learn (LMS) and the institution's student information system (SIS). This integration can help to streamline administrative processes, reduce errors, and improve data accuracy and consistency. LTI: Learning Tools Interoperability is a standard from 1EduTech for integrating third-party learning tools and applications into the LMS. Blackboard Learn supports LTI 1.1 and 1.3, which enables users to access and use external learning tools and resources from within the Blackboard Learn environment. SCORM: Sharable Content Object Reference Model is a widely used standard for e-learning content interoperability. SCORM 1.2 and 2004, enable users to create, import, and deliver SCORM-compliant content within the Blackboard Learn LMS. Details are available at SCORM.com and Rustici Software QTI: Question and Test Interoperability is a standard from 1EduTech for creating and sharing assessment items and tests. Blackboard Learn supports QTI 1.2 and 2.1, which enables users to create and import QTI-compliant assessment content and deliver it within Blackboard Learn. Anthology also supports other standards related to accessibility, security, data privacy, and other aspects of e-learning and educational technology. Contributors on this article: Mark O'Neil Former DirectorPlatform and APIs ","version":null,"tagName":"h2"},{"title":"Welcome to the Anthology Developer Community!","type":0,"sectionRef":"#","url":"/docs/community/community-intro","content":"","keywords":"","version":null},{"title":"Events​","type":1,"pageTitle":"Welcome to the Anthology Developer Community!","url":"/docs/community/community-intro#events","content":"","version":null,"tagName":"h2"},{"title":"JULY 17-20, 2023​","type":1,"pageTitle":"Welcome to the Anthology Developer Community!","url":"/docs/community/community-intro#july-17-20-2023","content":"Join us for Anthology Together '23! Live and in person in Music City, Nashville, Tennessee at the Gaylord Opryland Resort Information and Registration Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Working with groups and the API","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/hands-on/groups-in-rest-api","content":"","keywords":"","version":null},{"title":"Group sets​","type":1,"pageTitle":"Working with groups and the API","url":"/docs/blackboard/rest-apis/hands-on/groups-in-rest-api#group-sets","content":"","version":null,"tagName":"h2"},{"title":"Creating Group sets​","type":1,"pageTitle":"Working with groups and the API","url":"/docs/blackboard/rest-apis/hands-on/groups-in-rest-api#creating-group-sets","content":"It is possible to create a new set sending: POST {{baseUrl}}/learn/api/public/v2/courses/:courseId/groups/sets And using body (You can use BBML, more about it here: Returns when 200: { &quot;name&quot;: &quot;GroupSetFromAPI&quot;, &quot;externalId&quot;: &quot;enim Duis ea non exercitation&quot;, &quot;description&quot;: &quot;A description that can use BBML&quot;, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: 6, &quot;signupSheet&quot;: { &quot;name&quot;: &quot;SignUpSheet Name&quot;, &quot;description&quot;: &quot;signUpSheet description that can use BBML&quot;, &quot;showMembers&quot;: true } } }  Returns when 201 - Created: { &quot;id&quot;: &quot;_875_1&quot;, &quot;externalId&quot;: &quot;enim Duis ea non exercitation&quot;, &quot;name&quot;: &quot;GroupSetFromAPI&quot;, &quot;description&quot;: &quot;A description that can use BBML&quot;, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: 6 }, &quot;uuid&quot;: &quot;c2a6b04e187646e79c64e740a32d8c5a&quot;, &quot;created&quot;: &quot;2022-03-01T19:31:27.840Z&quot;, &quot;modified&quot;: &quot;2022-03-01T19:31:27.840Z&quot; }  ","version":null,"tagName":"h3"},{"title":"Reading group sets​","type":1,"pageTitle":"Working with groups and the API","url":"/docs/blackboard/rest-apis/hands-on/groups-in-rest-api#reading-group-sets","content":"You can read them by sending: GET {{baseUrl}}/learn/api/public/v2/courses/:courseId/groups/sets And, since we already have 3 sets it returns when 200: { &quot;results&quot;: [ { &quot;id&quot;: &quot;_875_1&quot;, &quot;externalId&quot;: &quot;enim Duis ea non exercitation&quot;, &quot;name&quot;: &quot;GroupSetFromAPI&quot;, &quot;description&quot;: &quot;A description that can use BBML&quot;, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: 6 }, &quot;uuid&quot;: &quot;c2a6b04e187646e79c64e740a32d8c5a&quot;, &quot;created&quot;: &quot;2022-03-01T19:31:27.840Z&quot;, &quot;modified&quot;: &quot;2022-03-01T19:31:27.840Z&quot; }, { &quot;id&quot;: &quot;_866_1&quot;, &quot;externalId&quot;: &quot;7af727199eb941daa96d75f1163b2a89&quot;, &quot;name&quot;: &quot;New Group Set 2/18/22&quot;, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: 0 }, &quot;uuid&quot;: &quot;b5ff482694114dd7b81df921b9a7ff90&quot;, &quot;created&quot;: &quot;2022-02-18T20:29:41.965Z&quot;, &quot;modified&quot;: &quot;2022-02-18T20:29:41.965Z&quot; }, { &quot;id&quot;: &quot;_870_1&quot;, &quot;externalId&quot;: &quot;89d999d600814e6db5df26214843b405&quot;, &quot;name&quot;: &quot;New Group Set 2/28/22&quot;, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: 0 }, &quot;uuid&quot;: &quot;958d29cc470045709dd3bacdacb55ae6&quot;, &quot;created&quot;: &quot;2022-02-28T20:51:06.986Z&quot;, &quot;modified&quot;: &quot;2022-02-28T20:51:06.986Z&quot; } ] }  It is also possible to get all the groups, including sets using (check the parents to know which one is a set and which one is a child of that parent, if parentId is null, is because the group is a set.): GET {{baseUrl}}/learn/api/public/v1/courses/:courseId/groups Returns when 200: { &quot;results&quot;: [ { &quot;id&quot;: &quot;_875_1&quot;, &quot;externalId&quot;: &quot;enim Duis ea non exercitation&quot;, &quot;parentId&quot;: null, &quot;name&quot;: &quot;GroupSetFromAPI&quot;, &quot;description&quot;: &quot;A description that can use BBML&quot;, &quot;isGroupSet&quot;: true, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: 6 }, &quot;uuid&quot;: &quot;c2a6b04e187646e79c64e740a32d8c5a&quot; }, { &quot;id&quot;: &quot;_867_1&quot;, &quot;externalId&quot;: &quot;2f77cf366064488a94d6778a133c2ba6&quot;, &quot;parentId&quot;: &quot;_866_1&quot;, &quot;name&quot;: &quot;New Group 1&quot;, &quot;isGroupSet&quot;: false, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: 0 }, &quot;uuid&quot;: &quot;de138f580ef34edb8531d48d04e2b0e7&quot; }, { &quot;id&quot;: &quot;_871_1&quot;, &quot;externalId&quot;: &quot;fa87d1ca21ae4eee92a1b1a73db9c189&quot;, &quot;parentId&quot;: &quot;_870_1&quot;, &quot;name&quot;: &quot;New Group 1&quot;, &quot;isGroupSet&quot;: false, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: 0 }, &quot;uuid&quot;: &quot;e546b01898f34d1aad8a05d615e9e53f&quot; }, { &quot;id&quot;: &quot;_868_1&quot;, &quot;externalId&quot;: &quot;3fec1b86660541d2982c93fe5b51c24f&quot;, &quot;parentId&quot;: &quot;_866_1&quot;, &quot;name&quot;: &quot;New Group 2&quot;, &quot;isGroupSet&quot;: false, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: 0 }, &quot;uuid&quot;: &quot;6e311e235d474e0abd82284a61c5c3f1&quot; }, { &quot;id&quot;: &quot;_872_1&quot;, &quot;externalId&quot;: &quot;169b1d4ede8343f6b7ed2e2c93646013&quot;, &quot;parentId&quot;: &quot;_870_1&quot;, &quot;name&quot;: &quot;New Group 2&quot;, &quot;isGroupSet&quot;: false, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: 0 }, &quot;uuid&quot;: &quot;ac3e3617a1a84d1ab7dcb8803d0b671c&quot; }, { &quot;id&quot;: &quot;_873_1&quot;, &quot;externalId&quot;: &quot;0ee40767726a4c87875ee7243205dd32&quot;, &quot;parentId&quot;: &quot;_870_1&quot;, &quot;name&quot;: &quot;New Group 3&quot;, &quot;isGroupSet&quot;: false, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: 0 }, &quot;uuid&quot;: &quot;8fb901da7cac4f04a19c6721790d7ec1&quot; }, { &quot;id&quot;: &quot;_866_1&quot;, &quot;externalId&quot;: &quot;7af727199eb941daa96d75f1163b2a89&quot;, &quot;parentId&quot;: null, &quot;name&quot;: &quot;New Group Set 2/18/22&quot;, &quot;isGroupSet&quot;: true, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: 0 }, &quot;uuid&quot;: &quot;b5ff482694114dd7b81df921b9a7ff90&quot; }, { &quot;id&quot;: &quot;_870_1&quot;, &quot;externalId&quot;: &quot;89d999d600814e6db5df26214843b405&quot;, &quot;parentId&quot;: null, &quot;name&quot;: &quot;New Group Set 2/28/22&quot;, &quot;isGroupSet&quot;: true, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: 0 }, &quot;uuid&quot;: &quot;958d29cc470045709dd3bacdacb55ae6&quot; } ] }  In the GUI it looks like this:  To add groups to a set: POST {{baseUrl}}/learn/api/public/v2/courses/:courseId/groups/sets/:groupId/groups And in the body: { &quot;name&quot;: &quot;GroupSetFromAPI First Child&quot;, &quot;externalId&quot;: &quot;&quot;, &quot;description&quot;: &quot;BBML CAPABLE&quot;, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: -11076931, &quot;signupSheet&quot;: { &quot;name&quot;: &quot;SignupSheet name&quot;, &quot;description&quot;: &quot;SignUpSheet description&quot;, &quot;showMembers&quot;: true } } }  Returns when 201: { &quot;id&quot;: &quot;_876_1&quot;, &quot;externalId&quot;: &quot;b8c68679be084e1581ff3c3f9490f473&quot;, &quot;groupSetId&quot;: &quot;_875_1&quot;, &quot;name&quot;: &quot;GroupSetFromAPI First Child&quot;, &quot;description&quot;: &quot;BBML CAPABLE&quot;, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: -11076931 }, &quot;uuid&quot;: &quot;a30a62775ae749a884022f2ffc1bf0b5&quot;, &quot;created&quot;: &quot;2022-03-02T20:34:46.308Z&quot;, &quot;modified&quot;: &quot;2022-03-02T20:34:46.500Z&quot; }  To get the group set children of a specific parent: GET {{baseUrl}}/learn/api/public/v2/courses/:courseId/groups/sets/:groupId/groups Returns when 200: { &quot;results&quot;: [ { &quot;id&quot;: &quot;_876_1&quot;, &quot;externalId&quot;: &quot;b8c68679be084e1581ff3c3f9490f473&quot;, &quot;groupSetId&quot;: &quot;_875_1&quot;, &quot;name&quot;: &quot;GroupSetFromAPI First Child&quot;, &quot;description&quot;: &quot;BBML CAPABLE&quot;, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: -11076931 }, &quot;uuid&quot;: &quot;a30a62775ae749a884022f2ffc1bf0b5&quot;, &quot;created&quot;: &quot;2022-03-02T20:34:46.308Z&quot;, &quot;modified&quot;: &quot;2022-03-02T20:34:46.500Z&quot; } ] }  ","version":null,"tagName":"h2"},{"title":"Update groups and group sets​","type":1,"pageTitle":"Working with groups and the API","url":"/docs/blackboard/rest-apis/hands-on/groups-in-rest-api#update-groups-and-group-sets","content":"","version":null,"tagName":"h2"},{"title":"Group Sets​","type":1,"pageTitle":"Working with groups and the API","url":"/docs/blackboard/rest-apis/hands-on/groups-in-rest-api#group-sets-1","content":"You can update the group set using: PATCH {{baseUrl}}/learn/api/public/v2/courses/:courseId/groups/sets/:groupId And in the body: { &quot;name&quot;: &quot;GroupSetFromAPI First Child updated&quot;, &quot;externalId&quot;: &quot;&quot;, &quot;description&quot;: &quot;BBML CAPABLE patched&quot;, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: -11076931, &quot;signupSheet&quot;: { &quot;name&quot;: &quot;SignupSheet name patched&quot;, &quot;description&quot;: &quot;SignUpSheet description patched&quot;, &quot;showMembers&quot;: true } } }  Returns when 200 { &quot;id&quot;: &quot;_875_1&quot;, &quot;name&quot;: &quot;GroupSetFromAPI First Child updated&quot;, &quot;description&quot;: &quot;BBML CAPABLE patched&quot;, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: -11076931 }, &quot;uuid&quot;: &quot;c2a6b04e187646e79c64e740a32d8c5a&quot;, &quot;created&quot;: &quot;2022-03-01T19:31:27.840Z&quot;, &quot;modified&quot;: &quot;2022-03-02T21:24:14.198Z&quot; }  ","version":null,"tagName":"h3"},{"title":"Update Groups​","type":1,"pageTitle":"Working with groups and the API","url":"/docs/blackboard/rest-apis/hands-on/groups-in-rest-api#update-groups","content":"You can update a group by using: PATCH {{baseUrl}}/learn/api/public/v2/courses/:courseId/groups/:groupId Body: { &quot;name&quot;: &quot;previous name was New Group 3&quot;, &quot;description&quot;: &quot;A description that can use BBML updated&quot;, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: 6, &quot;signupSheet&quot;: { &quot;name&quot;: &quot;SignUpSheet Name&quot;, &quot;description&quot;: &quot;signUpSheet description that can use BBML updated&quot;, &quot;showMembers&quot;: true } } }  Returns when 200: { &quot;id&quot;: &quot;_873_1&quot;, &quot;externalId&quot;: &quot;0ee40767726a4c87875ee7243205dd32&quot;, &quot;groupSetId&quot;: &quot;_870_1&quot;, &quot;name&quot;: &quot;previous name was New Group 3&quot;, &quot;description&quot;: &quot;A description that can use BBML updated&quot;, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: 6 }, &quot;uuid&quot;: &quot;8fb901da7cac4f04a19c6721790d7ec1&quot;, &quot;created&quot;: &quot;2022-02-28T20:51:07.710Z&quot;, &quot;modified&quot;: &quot;2022-03-02T22:01:01.813Z&quot; }  ","version":null,"tagName":"h3"},{"title":"Deleting groups and group sets​","type":1,"pageTitle":"Working with groups and the API","url":"/docs/blackboard/rest-apis/hands-on/groups-in-rest-api#deleting-groups-and-group-sets","content":"","version":null,"tagName":"h2"},{"title":"Deleting group sets​","type":1,"pageTitle":"Working with groups and the API","url":"/docs/blackboard/rest-apis/hands-on/groups-in-rest-api#deleting-group-sets","content":"You can remove group sets by using: DELETE {{baseUrl}}/learn/api/public/v2/courses/:courseId/groups/sets/:groupId Returns 204 No content  ","version":null,"tagName":"h3"},{"title":"Deleting groups​","type":1,"pageTitle":"Working with groups and the API","url":"/docs/blackboard/rest-apis/hands-on/groups-in-rest-api#deleting-groups","content":"You can remove groups by using: DELETE {{baseUrl}}/learn/api/public/v2/courses/:courseId/groups/:groupId Returns 204 No content  ","version":null,"tagName":"h3"},{"title":"Group Memberships (C.R.U.D)​","type":1,"pageTitle":"Working with groups and the API","url":"/docs/blackboard/rest-apis/hands-on/groups-in-rest-api#group-memberships-crud","content":"Fortunately this is pretty simple to use, there is no post method, but there is PUT: ","version":null,"tagName":"h2"},{"title":"Creating Memberships​","type":1,"pageTitle":"Working with groups and the API","url":"/docs/blackboard/rest-apis/hands-on/groups-in-rest-api#creating-memberships","content":"To Create a group membership you can use: (The group id needs to be the group within a set, not the set itself) PUT {{baseUrl}}/learn/api/public/v2/courses/:courseId/groups/:groupId/users/:userId Returns (it just returns the uer id) when 201: { &quot;userId&quot;: &quot;_43755_1&quot; }  ","version":null,"tagName":"h3"},{"title":"Reading Memberships​","type":1,"pageTitle":"Working with groups and the API","url":"/docs/blackboard/rest-apis/hands-on/groups-in-rest-api#reading-memberships","content":"This endooint returns only the userId, is useful if you only need to know if the user is part of the group: GET {{baseUrl}}/learn/api/public/v2/courses/:courseId/groups/:groupId/users/:userId Returns when 200: { &quot;userId&quot;: &quot;_43755_1&quot; }  ","version":null,"tagName":"h3"},{"title":"Deleting Membership​","type":1,"pageTitle":"Working with groups and the API","url":"/docs/blackboard/rest-apis/hands-on/groups-in-rest-api#deleting-membership","content":"You can Use: DELETE {{baseUrl}}/learn/api/public/v2/courses/:courseId/groups/:groupId/users/:userId Returns 204 No Content  Groups in Original Experience (C.R.U.D) Groups in original experience work in a very similar way as in Ultra, You can also use Group sets in original experience, the endpoints should be the same and should work in the same way as well, the main difference would be in the way they are displayed. Now, you cannot create stand alone groups in Ultra, meaning, groups cannot be created if there is no group set created first, but in original, you can. ","version":null,"tagName":"h3"},{"title":"Creating Groups​","type":1,"pageTitle":"Working with groups and the API","url":"/docs/blackboard/rest-apis/hands-on/groups-in-rest-api#creating-groups","content":"You can create a group using: POST {{baseUrl}}/learn/api/public/v2/courses/:courseId/groups And the body: { &quot;name&quot;: &quot;Stand Alone Group in Original&quot;, &quot;description&quot;: &quot;BBML Group description in original&quot;, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: 1, &quot;signupSheet&quot;: { &quot;name&quot;: &quot;SignUp Sheet name for a standalone group in original&quot;, &quot;description&quot;: &quot;SignUp sheet description for a standalone group in original&quot;, &quot;showMembers&quot;: true } } }  Returns when 200: { &quot;id&quot;: &quot;_882_1&quot;, &quot;externalId&quot;: &quot;ea9a2336e6444d4b8bdeffb0aa5ce058&quot;, &quot;groupSetId&quot;: null, &quot;name&quot;: &quot;Stand Alone Group in Original&quot;, &quot;description&quot;: &quot;BBML Group description in original&quot;, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: 1 }, &quot;uuid&quot;: &quot;71e7f81fb6de4c92b873f04108d51df0&quot;, &quot;created&quot;: &quot;2022-03-03T15:32:04.410Z&quot;, &quot;modified&quot;: &quot;2022-03-03T15:32:04.487Z&quot; }  Reading Groups You can either get all groups within a course: GET {{baseUrl}}/learn/api/public/v2/courses/:courseId/groups Returns when 200: { &quot;results&quot;: [ { &quot;id&quot;: &quot;_882_1&quot;, &quot;externalId&quot;: &quot;ea9a2336e6444d4b8bdeffb0aa5ce058&quot;, &quot;groupSetId&quot;: null, &quot;name&quot;: &quot;Stand Alone Group in Original&quot;, &quot;description&quot;: &quot;BBML Group description in original&quot;, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: 1 }, &quot;uuid&quot;: &quot;71e7f81fb6de4c92b873f04108d51df0&quot;, &quot;created&quot;: &quot;2022-03-03T15:32:04.410Z&quot;, &quot;modified&quot;: &quot;2022-03-03T15:32:04.487Z&quot; } ] }  Or get data about only one group: GET {{baseUrl}}/learn/api/public/v2/courses/:courseId/groups/:groupId Returns when 200: { &quot;id&quot;: &quot;_882_1&quot;, &quot;externalId&quot;: &quot;ea9a2336e6444d4b8bdeffb0aa5ce058&quot;, &quot;groupSetId&quot;: null, &quot;name&quot;: &quot;Stand Alone Group in Original&quot;, &quot;description&quot;: &quot;BBML Group description in original&quot;, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: 1 }, &quot;uuid&quot;: &quot;71e7f81fb6de4c92b873f04108d51df0&quot;, &quot;created&quot;: &quot;2022-03-03T15:32:04.410Z&quot;, &quot;modified&quot;: &quot;2022-03-03T15:32:04.487Z&quot; }  This is basically the same but more specific and one less level. ","version":null,"tagName":"h3"},{"title":"Updating Groups​","type":1,"pageTitle":"Working with groups and the API","url":"/docs/blackboard/rest-apis/hands-on/groups-in-rest-api#updating-groups","content":"To update a group, you can use: PATCH {{baseUrl}}/learn/api/public/v2/courses/:courseId/groups/:groupId And on the body: { &quot;name&quot;: &quot;previous name was New Group 3&quot;, &quot;description&quot;: &quot;A description that can use BBML updated&quot;, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: 6, &quot;signupSheet&quot;: { &quot;name&quot;: &quot;SignUpSheet Name&quot;, &quot;description&quot;: &quot;signUpSheet description that can use BBML updated&quot;, &quot;showMembers&quot;: true } } }  Returns when 200: { &quot;id&quot;: &quot;_882_1&quot;, &quot;externalId&quot;: &quot;ea9a2336e6444d4b8bdeffb0aa5ce058&quot;, &quot;groupSetId&quot;: null, &quot;name&quot;: &quot;previous name was New Group 3&quot;, &quot;description&quot;: &quot;A description that can use BBML updated&quot;, &quot;availability&quot;: { &quot;available&quot;: &quot;No&quot; }, &quot;enrollment&quot;: { &quot;type&quot;: &quot;InstructorOnly&quot;, &quot;limit&quot;: 6 }, &quot;uuid&quot;: &quot;71e7f81fb6de4c92b873f04108d51df0&quot;, &quot;created&quot;: &quot;2022-03-03T15:32:04.410Z&quot;, &quot;modified&quot;: &quot;2022-03-03T16:59:25.107Z&quot; }  ","version":null,"tagName":"h3"},{"title":"Delete groups​","type":1,"pageTitle":"Working with groups and the API","url":"/docs/blackboard/rest-apis/hands-on/groups-in-rest-api#delete-groups","content":"You can delete groups using: DELETE {{baseUrl}}/learn/api/public/v2/courses/:courseId/groups/:groupId It returns 204: No content  Contributors on this article: Anthology Inc Integrations, Developer Relations and Standards TeamAnthology Inc ","version":null,"tagName":"h3"},{"title":"How to contact us!","type":0,"sectionRef":"#","url":"/docs/community/contact-us","content":"How to contact us! Published: May 09, 2023 Last Update: May 09, 2023 There are many ways to get in touch with us: E-mail the Anthology Developers Network Team: developers@anthology.comE-mail the Anthology Partner Team: bbpartnerteam@blackboard.comPost to our discussion spaceJoin the Anthology Techies Slack channel.Tell us in person at a conferenceProvide your feedback through one of our many users groups Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards","keywords":"","version":null},{"title":"Working with Rubrics APIs","type":0,"sectionRef":"#","url":"/docs/blackboard/rest-apis/hands-on/rubrics-apis","content":"","keywords":"","version":null},{"title":"Topic​","type":1,"pageTitle":"Working with Rubrics APIs","url":"/docs/blackboard/rest-apis/hands-on/rubrics-apis#topic","content":"Learn supports the use of Rubrics to provide consistency in grading which enhances the consistency, transparency, and fairness for assessing student work. Our Public APIs support the reading of Rubric information and enables the development of analytic tooling for validating rubrics use and fine-tuning the adoption of rubrics. ","version":null,"tagName":"h2"},{"title":"General API Use​","type":1,"pageTitle":"Working with Rubrics APIs","url":"/docs/blackboard/rest-apis/hands-on/rubrics-apis#general-api-use","content":"There are several use cases supported by our Rubrics APIs and they share a common workflow. Some use cases are determining: which, if any, Rubric(s) a course is using.the details of a specific Rubric.the selected Rubric cells used for a grade.the feedback provided on the rubric selection and graded item. The general workflow for using rubrics is based on the goal of the use case, but goes something like this: Get the courseId Use appropriate Get /courses API Get the rubricId Use appropriate Get /courses/rubric API Get the rubric to gradebookColumnId association(s) Use appropriate get /courses/rubric/associations api Get the attempt rubric evaluation: Use /courses/gradebook/attempt APIUse /courses/gradebook/attempts/rubric/evaluations or /courses/rubric/associations/evaluations API The API you use in the above steps is largely determined by data previously collected. In all cases you will need the courseId - additional Ids are discovered as part of the work flow supporting the use case. Let's look at each of the steps assuming you have already completed step 1 and identified the course of interest. ","version":null,"tagName":"h2"},{"title":"Rubrics used by a course​","type":1,"pageTitle":"Working with Rubrics APIs","url":"/docs/blackboard/rest-apis/hands-on/rubrics-apis#rubrics-used-by-a-course","content":"Not all courses may be using rubrics as part of their grading process. Identifying whether a course is using rubrics is straight forward. You may discover rubrics use either via the courseId alone or via a gradebookColumnId. 1. Starting with an identified course​ Assuming a courseId of _12345_1 you would call the Get Rubrics endpoint GET /learn/api/public/v1/courses/{courseId}/rubrics: GET /learn/api/public/v1/courses/_12345_1/rubrics which would either return Rubric(s) information or an empty set: { &quot;results&quot;: [ { &quot;id&quot;: &quot;_11964_1&quot;, &quot;courseId&quot;: &quot;_12345_1&quot;, &quot;title&quot;: &quot;DEMO-RUBRIC&quot;, &quot;created&quot;: &quot;2023-10-03T18:55:23.332Z&quot;, &quot;modified&quot;: &quot;2023-10-03T18:55:23.332Z&quot;, &quot;rubricType&quot;: &quot;Percentage&quot;, &quot;readOnly&quot;: false } ] }  or { &quot;results&quot;: [] }  In the above results id is the rubricId - this should be noted as it and the courseId are used in nearly every rubrics API request. A course may be using multiple rubrics and the rubicId is used to differentiate between them. For example once you know the rubricId for a rubric used by a course you may call GET /learn/api/public/v1/courses/{courseId}/rubrics/{rubricId} to request a specific rubric. 2. Starting with an identified gradebook column​ Step 1 helps identify whether a course is potentially using rubrics, but it does not tell us if the instructor has a gradeable item using a rubric. The next step is to determine if the rubric has been applied to a gradeable item or gradeColumn. There are a couple ways of determining this. You may get get a course's grade columns and inspect the following elements which will exist if a rubric is being used, the gradebookColumnId associated, and whether it is currently being usedForGrading: { &quot;results&quot;: [ { ... &quot;rubricAssociations&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;rubricId&quot;: &quot;string&quot;, &quot;associationEntity&quot;: { &quot;gradebookColumnId&quot;: &quot;string&quot;, &quot;questionId&quot;: &quot;string&quot; }, &quot;usedForGrading&quot;: true, ... } ] } ] }  You may also use the Rubric associations APIs to determine the columns in the course which have rubrics applied as shown below. A known column:​ GET /learn/api/public/v1/courses/{courseId}/gradebook/columns/{columnId}/rubrics/associations/learn/api/public/v1/courses/_12594_1/gradebook/columns/_120127_1/rubrics/associations { &quot;results&quot; : [ { &quot;id&quot; : &quot;_15388_1&quot;, &quot;rubricId&quot; : &quot;_11964_1&quot;, &quot;associationEntity&quot; : { &quot;gradebookColumnId&quot; : &quot;_120127_1&quot; }, &quot;usedForGrading&quot; : true, &quot;rubricVisibility&quot; : &quot;Enabled&quot;, ... } ] }  A known rubricId​ GET /learn/api/public/v1/courses/{courseId}/rubrics/{rubricId}/associations /learn/api/public/v1/courses/_12594_1/rubrics/_11964_1/associations { &quot;results&quot; : [ { &quot;id&quot; : &quot;_15388_1&quot;, &quot;rubricId&quot; : &quot;_11964_1&quot;, &quot;associationEntity&quot; : { &quot;gradebookColumnId&quot; : &quot;_120127_1&quot; }, &quot;usedForGrading&quot; : true, &quot;rubricVisibility&quot; : &quot;Enabled&quot;, ... } ] }  Notice the same data is returned regardless of the endpoint used - the difference is the data which you had on hand to make the request. Of note in each of the above results examples is the &quot;gradebookColumnId&quot;: &quot;string&quot;, and &quot;rubricId&quot; : &quot;_11964_1&quot;, which will be required for further investigation into rubrics use and most importantly the applied evaluations which used the rubric. Additionally the associationId or id in the get /associations results is used in evaluations requests. The pertinent data we have collected thus far on our rubric quest is: &quot;courseId&quot;:&quot;_1234_1&quot;rubricId&quot;: &quot;_11964_1&quot;&quot;gradebookColumnId&quot;: &quot;_120127_1&quot;and &quot;associationId&quot;: &quot;_15388_1&quot; With the above derived information you now know which rubric(s) a course is using and which columns are using which rubric. ","version":null,"tagName":"h3"},{"title":"Rubric Details​","type":1,"pageTitle":"Working with Rubrics APIs","url":"/docs/blackboard/rest-apis/hands-on/rubrics-apis#rubric-details","content":"Using the above information you may also pull the full rubric details by expanding the GET /learn/api/public/v1/courses/{courseId}/rubrics/{rubricId} to include the cells, columns, and rows. /learn/api/public/v1/courses/_12594_1/rubrics/_11964_1?expand=cells,columns,rows Results: { &quot;id&quot;: &quot;_11964_1&quot;, &quot;courseId&quot;: &quot;_12594_1&quot;, &quot;title&quot;: &quot;Demo-Rubric&quot;, &quot;description&quot;: &quot;Created via the Original Rubric UI&quot;, &quot;created&quot;: &quot;2023-10-13T12:24:10.696Z&quot;, &quot;modified&quot;: &quot;2023-10-13T12:27:18.899Z&quot;, &quot;rubricType&quot;: &quot;Percentage&quot;, &quot;readOnly&quot;: false, &quot;columns&quot;: [ { &quot;id&quot;: &quot;_43512_1&quot;, &quot;header&quot;: &quot;Novice 1&quot;, &quot;position&quot;: 0 }, { &quot;id&quot;: &quot;_43513_1&quot;, &quot;header&quot;: &quot;Competent 2&quot;, &quot;position&quot;: 1 }, { &quot;id&quot;: &quot;_43514_1&quot;, &quot;header&quot;: &quot;Proficient 3&quot;, &quot;position&quot;: 2 } ], &quot;rows&quot;: [ { &quot;id&quot;: &quot;_45496_1&quot;, &quot;header&quot;: &quot;Formatting A&quot;, &quot;position&quot;: 0, &quot;percentage&quot;: 33.0 }, { &quot;id&quot;: &quot;_45497_1&quot;, &quot;header&quot;: &quot;Organization B&quot;, &quot;position&quot;: 1, &quot;percentage&quot;: 34.0 }, { &quot;id&quot;: &quot;_45498_1&quot;, &quot;header&quot;: &quot;Grammar C&quot;, &quot;position&quot;: 2, &quot;percentage&quot;: 33.0 } ], &quot;cells&quot;: [ { &quot;id&quot;: &quot;_168718_1&quot;, &quot;rowId&quot;: &quot;_45496_1&quot;, &quot;columnId&quot;: &quot;_43512_1&quot;, &quot;description&quot;: &quot;&quot;, &quot;rowPosition&quot;: 0, &quot;columnPosition&quot;: 0, &quot;percentage&quot;: { &quot;value&quot;: 0.0 } }, { &quot;id&quot;: &quot;_168719_1&quot;, &quot;rowId&quot;: &quot;_45496_1&quot;, &quot;columnId&quot;: &quot;_43513_1&quot;, &quot;description&quot;: &quot;&quot;, &quot;rowPosition&quot;: 0, &quot;columnPosition&quot;: 1, &quot;percentage&quot;: { &quot;value&quot;: 50.0 } }, { &quot;id&quot;: &quot;_168720_1&quot;, &quot;rowId&quot;: &quot;_45496_1&quot;, &quot;columnId&quot;: &quot;_43514_1&quot;, &quot;description&quot;: &quot;&quot;, &quot;rowPosition&quot;: 0, &quot;columnPosition&quot;: 2, &quot;percentage&quot;: { &quot;value&quot;: 100.0 } }, { &quot;id&quot;: &quot;_168721_1&quot;, &quot;rowId&quot;: &quot;_45497_1&quot;, &quot;columnId&quot;: &quot;_43512_1&quot;, &quot;description&quot;: &quot;&quot;, &quot;rowPosition&quot;: 1, &quot;columnPosition&quot;: 0, &quot;percentage&quot;: { &quot;value&quot;: 0.0 } }, { &quot;id&quot;: &quot;_168722_1&quot;, &quot;rowId&quot;: &quot;_45497_1&quot;, &quot;columnId&quot;: &quot;_43513_1&quot;, &quot;description&quot;: &quot;&quot;, &quot;rowPosition&quot;: 1, &quot;columnPosition&quot;: 1, &quot;percentage&quot;: { &quot;value&quot;: 50.0 } }, { &quot;id&quot;: &quot;_168723_1&quot;, &quot;rowId&quot;: &quot;_45497_1&quot;, &quot;columnId&quot;: &quot;_43514_1&quot;, &quot;description&quot;: &quot;&quot;, &quot;rowPosition&quot;: 1, &quot;columnPosition&quot;: 2, &quot;percentage&quot;: { &quot;value&quot;: 100.0 } }, { &quot;id&quot;: &quot;_168724_1&quot;, &quot;rowId&quot;: &quot;_45498_1&quot;, &quot;columnId&quot;: &quot;_43512_1&quot;, &quot;description&quot;: &quot;&quot;, &quot;rowPosition&quot;: 2, &quot;columnPosition&quot;: 0, &quot;percentage&quot;: { &quot;value&quot;: 0.0 } }, { &quot;id&quot;: &quot;_168725_1&quot;, &quot;rowId&quot;: &quot;_45498_1&quot;, &quot;columnId&quot;: &quot;_43513_1&quot;, &quot;description&quot;: &quot;&quot;, &quot;rowPosition&quot;: 2, &quot;columnPosition&quot;: 1, &quot;percentage&quot;: { &quot;value&quot;: 50.0 } }, { &quot;id&quot;: &quot;_168726_1&quot;, &quot;rowId&quot;: &quot;_45498_1&quot;, &quot;columnId&quot;: &quot;_43514_1&quot;, &quot;description&quot;: &quot;&quot;, &quot;rowPosition&quot;: 2, &quot;columnPosition&quot;: 2, &quot;percentage&quot;: { &quot;value&quot;: 100.0 } } ] }  ","version":null,"tagName":"h3"},{"title":"Rubrics Evaluations​","type":1,"pageTitle":"Working with Rubrics APIs","url":"/docs/blackboard/rest-apis/hands-on/rubrics-apis#rubrics-evaluations","content":"Evaluations are part of the grading workflow and as such require accessing gradebook data - specifically attempts. Attempts​ GET /learn/api/public/v2/courses/{courseId}/gradebook/columns/gradebookColumnId/attempts /learn/api/public/v2/courses/_12594_1/gradebook/columns/_120127_1/attempts Results: { &quot;results&quot;: [ { &quot;id&quot;: &quot;_844981_1&quot;, &quot;userId&quot;: &quot;_28497_1&quot;, &quot;status&quot;: &quot;Completed&quot;, &quot;displayGrade&quot;: { &quot;scaleType&quot;: &quot;Score&quot;, &quot;score&quot;: 62.5 }, &quot;text&quot;: &quot;62.50000&quot;, &quot;score&quot;: 62.5, &quot;feedback&quot;: &quot;&lt;h5&gt;Overall Feedback&lt;/h5&gt;&quot;, &quot;studentSubmission&quot;: &quot;&lt;p&gt;your 200 word story&lt;/p&gt;&quot;, &quot;exempt&quot;: false, &quot;created&quot;: &quot;2023-10-09T18:40:34.278Z&quot;, &quot;attemptDate&quot;: &quot;2023-10-09T18:41:00.562Z&quot;, &quot;modified&quot;: &quot;2023-10-12T13:03:14.372Z&quot;, &quot;attemptReceipt&quot;: { &quot;receiptId&quot;: &quot;eec942431d4f4266b5571ecade1fe4c1&quot;, &quot;submissionDate&quot;: &quot;2023-10-09T18:41:00.562Z&quot;, &quot;submissionTotalSize&quot;: 26 } } ] }  The pertinent data we have collected thus far on our rubric quest is: &quot;courseId&quot;:&quot;_1234_1&quot;rubricId&quot;: &quot;_11964_1&quot;&quot;gradebookColumnId&quot;: &quot;_120127_1&quot;&quot;associationId&quot;: &quot;_15388_1&quot;&quot;attemptId&quot; : &quot;_844981_1&quot;and &quot;userId&quot; : &quot;_28497_1&quot; Note: You may leverage the grade status to determine whether to proceed with pulling any evaluation data. There is really no point in making the evaluation requests if the status is not &quot;Completed&quot;. Evaluations​ You may use the attempt information, notably the attemptId and the gradebookColumnId to find the instructor entered evaluation data:GET /learn/api/public/v1/courses/{courseId}/gradebook/columns/{columnId}/attempts/{attemptId}/rubric/evaluations /learn/api/public/v1/courses/_12594_1/gradebook/columns/_120127_1/attempts/_844981_1/rubric/evaluations Results: { &quot;results&quot;: [ { &quot;id&quot;: &quot;_47213_1&quot;, &quot;rubricAssociationId&quot;: &quot;_15388_1&quot;, &quot;evaluationEntity&quot;: { &quot;attemptId&quot;: &quot;_844981_1&quot; }, &quot;possibleScore&quot;: { &quot;numerator&quot;: 100, &quot;denominator&quot;: 1 }, &quot;totalScore&quot;: { &quot;numerator&quot;: 125, &quot;denominator&quot;: 2 }, &quot;submitted&quot;: &quot;2023-10-11T19:56:19.483Z&quot; } ] }  The pertinent data we have collected thus far on our rubric quest is: &quot;courseId&quot;:&quot;_1234_1&quot;rubricId&quot;: &quot;_11964_1&quot;&quot;gradebookColumnId&quot;: &quot;_120127_1&quot;&quot;associationId&quot;: &quot;_15388_1&quot;&quot;attemptId&quot; : &quot;_844981_1&quot;&quot;userId&quot; : &quot;_28497_1&quot;and &quot;evaluationId&quot;: &quot;_47213_1&quot; To access the actual rubric criteria applied for the evaluation and any feedback provided by the grader you need to expand the evaluation cells: GET /learn/api/public/v1/courses/{courseId}/rubrics/{rubricId}/associations/{associationId}/evaluations/{evaluationId}?expand=cells /learn/api/public/v1/courses/_12594_1/rubrics/_11964_1/associations/_15388_1/evaluations/_47213_1?expand=cells Results: { &quot;id&quot;: &quot;_47213_1&quot;, &quot;rubricAssociationId&quot;: &quot;_15388_1&quot;, &quot;evaluationEntity&quot;: { &quot;attemptId&quot;: &quot;_844981_1&quot; }, &quot;possibleScore&quot;: { &quot;numerator&quot;: 100, &quot;denominator&quot;: 1 }, &quot;totalScore&quot;: { &quot;numerator&quot;: 125, &quot;denominator&quot;: 2 }, &quot;submitted&quot;: &quot;2023-10-11T19:56:19.483Z&quot;, &quot;cells&quot;: [ { &quot;id&quot;: &quot;_95594_1&quot;, &quot;rubricCellId&quot;: &quot;_167078_1&quot;, &quot;rubricRowId&quot;: &quot;_45050_1&quot;, &quot;selectedScore&quot;: { &quot;numerator&quot;: 100, &quot;denominator&quot;: 1 }, &quot;feedback&quot;: &quot;&lt;p&gt;comment 1&lt;/p&gt;&quot; }, { &quot;id&quot;: &quot;_95596_1&quot;, &quot;rubricCellId&quot;: &quot;_167083_1&quot;, &quot;rubricRowId&quot;: &quot;_45051_1&quot;, &quot;selectedScore&quot;: { &quot;numerator&quot;: 75, &quot;denominator&quot;: 1 }, &quot;feedback&quot;: &quot;&lt;p&gt;comment 2&lt;/p&gt;&quot; }, { &quot;id&quot;: &quot;_95599_1&quot;, &quot;rubricCellId&quot;: &quot;_167088_1&quot;, &quot;rubricRowId&quot;: &quot;_45052_1&quot;, &quot;selectedScore&quot;: { &quot;numerator&quot;: 50, &quot;denominator&quot;: 1 }, &quot;feedback&quot;: &quot;&lt;p&gt;comment 3&lt;/p&gt;&quot; }, { &quot;id&quot;: &quot;_95603_1&quot;, &quot;rubricCellId&quot;: &quot;_167093_1&quot;, &quot;rubricRowId&quot;: &quot;_45053_1&quot;, &quot;selectedScore&quot;: { &quot;numerator&quot;: 25, &quot;denominator&quot;: 1 }, &quot;feedback&quot;: &quot;&lt;p&gt;comment 4&lt;/p&gt;&quot; } ] }  Now that you know the rubricCellId and rubricRowId you may inspect the original rubric data acquired above and pull details for each cell and headers for use in display or mapping to additional processes supporting evaluation workflows. Also, by this point you have collected sufficient information (course, user, grade column, grade, rubric, etc) to inform any additional logic such as passing data to your SIS, Reporting, or User facing interfaces! ","version":null,"tagName":"h3"},{"title":"Entitlements and System Role Privileges​","type":1,"pageTitle":"Working with Rubrics APIs","url":"/docs/blackboard/rest-apis/hands-on/rubrics-apis#entitlements-and-system-role-privileges","content":"","version":null,"tagName":"h2"},{"title":"Necessary Entitlements​","type":1,"pageTitle":"Working with Rubrics APIs","url":"/docs/blackboard/rest-apis/hands-on/rubrics-apis#necessary-entitlements","content":"Rubrics entitlements required per endpoint are listed in the rubrics API documentation. Read Rubrics​ course.rubrics.VIEW Read Associations​ course.rubrics.VIEWcourse.gradebook-metadata.VIEWcourse.gradebook.MODIFY Read Evaluations, and Columns and Attempts​ course.gradebook.MODIFY ","version":null,"tagName":"h3"},{"title":"Necessary Role Privileges​","type":1,"pageTitle":"Working with Rubrics APIs","url":"/docs/blackboard/rest-apis/hands-on/rubrics-apis#necessary-role-privileges","content":"Note: You must share these System Role Privileges with Learn System Admins via your documentation for successful deployment of your application on their Learn server. Read Rubrics​ Course/Organization Control Panel (Tools) &gt; Rubrics &gt; View Rubric Read Associations​ Course/Organization Control Panel (Tools) &gt; Rubrics &gt; View RubricCourse/Organization Control Panel (Grade Center) &gt; View Grade Center Items and SettingsCourse/Organization Control Panel (Grade Center) &gt; Full Control Read Evaluations, and Columns and Attempts​ Course/Organization Control Panel (Grade Center) &gt; Full Control ","version":null,"tagName":"h3"},{"title":"Rubrics APIs Best Practices​","type":1,"pageTitle":"Working with Rubrics APIs","url":"/docs/blackboard/rest-apis/hands-on/rubrics-apis#rubrics-apis-best-practices","content":"Note: Please review our General REST API Best Practices which are outlined in our REST API Best Practices guide. Cache rubrics and gradebook data when working within a specific course and gradebook to reduce the number of requests required. Contributors on this article: Mark O'Neil Former DirectorPlatform and APIs ","version":null,"tagName":"h2"},{"title":"Be a part of the Community!","type":0,"sectionRef":"#","url":"/docs/community/getting-involved","content":"","keywords":"","version":null},{"title":"Tech office hours call​","type":1,"pageTitle":"Be a part of the Community!","url":"/docs/community/getting-involved#tech-office-hours-call","content":"Join our call, every wednesday at 10:00 AM Central on Microsoft Teams! please follow -&gt;this link Contributors on this article: Scott Hurrey Former DirectorIntegrations, Developer Relations and Standards ","version":null,"tagName":"h3"},{"title":"Best practices","type":0,"sectionRef":"#","url":"/docs/developer-portal/best-practices","content":"","keywords":"","version":null},{"title":"How to name your groups​","type":1,"pageTitle":"Best practices","url":"/docs/developer-portal/best-practices#how-to-name-your-groups","content":"Your group name is displayed in the Blackboard Learn system associated with the application ID once the Blackboard Learn Administrator configures the integration. You want the group name to include at minimum: The name of the company/vendor that owns the application.The name of the application or product (optional). Below is an example for one application ID group name. Included are the company name, product name, and group associated with it: SuperSoftware - Sudoku For Learners - Development Team 1SuperSoftware - Sudoku For Learners - Development Team 2 Your production group name could be the following: SuperSoftware - Sudoku For Learners If your company has a different product, it will have a different application ID. You will associate it with different groups: SuperSoftware - Multinote - Development Team 1SuperSoftware - Multinote - Development Team 2SuperSoftware - Multinote If your company name indicates your product, and your product name is trademarked, then you have several choices for a production group name. For example if your company is Mark's Software and your trademarked application is Multinote then you can have your production group name be one of the following: Mark's SoftwareMultinoteMark's Software - Multinote Do not add unnecessary information to a production group name. For example, including text indicating that the group name is associated with Blackboard REST APIs is not necessary, nor is an indication of server type such as '-test', '-stage', or '-production'. It doesn't matter if you have a SOAP Web Service proxy of the same name as that shows up on a different page. We will only assign site and rate limits higher than the defaults to Production Groups that meet these naming requirements. Contributors on this article: Davey Herrera Software EngineerIntegrations, Developer Relations and Standards Daniel Magers Sr. Technical WriterProduct Development Blackboard Learn ","version":null,"tagName":"h2"},{"title":"Blackboard Learn Sandbox environment","type":0,"sectionRef":"#","url":"/docs/developer-ami","content":"","keywords":"","version":null},{"title":"Overview​","type":1,"pageTitle":"Blackboard Learn Sandbox environment","url":"/docs/developer-ami#overview","content":"The Learn REST and LTI Developer Amazon Machine Image (“AMI”) is an image of a Learn server available in the Amazon Marketplace. The AMI allows a developer to spin up a copy of Learn for building applications that use the REST APIs and/or Learning Tool Interoperability (“LTI”) to integrate with Learn. This image is a standalone copy of the SaaS deployment of Learn that allows development and testing against the Ultra user experience. Once the developer spins up the copy of Learn, it lives in his or her AWS account and the developer has full control over the instance of Learn. All instances are pre-licensed with a developer license. New developer AMIs will be made available in the same cadence as SaaS releases. Please note that there is a potential delay of 1-2 days before the AMI is available due to AMI and AWS processing time. This program allows a developer to build an integration for Learn without a formal paid partnership. Anyone who wants to test the Ultra experience can create copy. Note that you cannot deploy a custom building block to this AMI. It is meant only for REST and LTI development. NOTE: Building Block installation is NOT supported on the AMIs. ","version":null,"tagName":"h2"},{"title":"Get the Blackboard REST and LTI Developer AMI​","type":1,"pageTitle":"Blackboard Learn Sandbox environment","url":"/docs/developer-ami#get-the-blackboard-rest-and-lti-developer-ami","content":"The easiest way to find the Developer AMI is by using the link above or searching the Amazon Marketplace for Learn. The results show all of the currently available AMIs. Given the cadence or releases, you should locate the Learn instance you want. ","version":null,"tagName":"h3"},{"title":"Use the Blackboard REST and LTI Developer AMI​","type":1,"pageTitle":"Blackboard Learn Sandbox environment","url":"/docs/developer-ami#use-the-blackboard-rest-and-lti-developer-ami","content":"Before you begin, you must have an Amazon AWS account. If you do not have an AWS account you will need to create one. The steps to set up an AMI are typically as follows. Subscribe to the AMIConfigure the specific instanceSpin it up and code!When configuring the instance, it is completely up to you how you set up the server. We do have a few recommendations, however. Note: The default SSL cert generated on first startup is not a trusted certificate. Please follow the instructions below for full SSL support. We recommend using the Large Tier instance type. This gives you enough storage and power to run Learn effectively and build your integration. If you see 502 Gateway errors, you may need to increase the size of your AMI. We recommend you adjust the security settings to allow: SSH from your IP onlyEnable HTTPS access You must configure VPC for the EC2 to properly function. You do this by going to the VPC Console from the AWS Console:Under Services open VPC under Networking and Content DeliveryOpen Your VPCsselect the VPC connected to your EC2 andselect Actions =&gt; Edit DNS Hostnames —&gt; Change DNS hostnames: to YESStartup time: The startup time for your EC2 will vary and may take as long as 15 minutes before you may access the site via your browser. SSH access may be available in 3 minutes or less.On initial startup the Original UX login screen appears. Note the messaging on the initial startup page, as it informs you when the license expires. You will need to subscribe to a new AMI release prior to license expiration if you wish to migrate data from the old EC2 to the new. Licenses on AMIs are not extendible. ","version":null,"tagName":"h3"},{"title":"Discovering License Expiration Date​","type":1,"pageTitle":"Blackboard Learn Sandbox environment","url":"/docs/developer-ami#discovering-license-expiration-date","content":"Should you switch to Ultra or have misplaced your license expiration date, you may find it using one of three approaches. 1. using the EC2 Console​ In your EC2 console select your EC2 and from the Actions dropdown select Monitor and troubleshoot&gt;Get system log. In the displayed system log scroll up until you see something similar to the following: [ 152.707540] cloud-init[1070]: ########################################################################################### [ 152.729516] cloud-init[1070]: # [ 152.748988] cloud-init[1070]: # Blackboard Learn administrator login is: [ 152.760195] cloud-init[1070]: # Username: administrator [ 152.780283] cloud-init[1070]: # Password: i-0c0b00e8b5232274f [ 152.789873] cloud-init[1070]: # https://ec2-100-27-14-64.compute-1.amazonaws.com, [ 152.789873] cloud-init[1070]: # with an instance-id of i-0c0b00e8b5232274f [ 152.807936] cloud-init[1070]: # [ 152.842645] cloud-init[1070]: # NOTE: this Learn license expires on 2024-01-14 17:18:36 GMT [ 152.855459] cloud-init[1070]: # [ 152.858880] cloud-init[1070]: # It may take as long as 10 minutes from 14:35:31 to start with a new configuration. [ 152.869085] cloud-init[1070]: # [ 152.871837] cloud-init[1070]: ###########################################################################################  2. using tail in a terminal​ ssh to your instance and $ tail -14 start.log ########################################################################################### # # Blackboard Learn administrator login is: # Username: administrator # Password: i-0c0b00e8b5232274f # for https://ec2-100-27-14-64.compute-1.amazonaws.com, # with an instance-id of i-0c0b00e8b5232274f # # NOTE: this Learn license expires on 2024-01-14 17:18:36 GMT # # It may take as long as 10 minutes from 08:38:16 to start with a new configuration. # ########################################################################################### (startup time: 0hrs 3min 53sec)  3. using grep in a terminal​ ssh to your instance and $ grep &quot;CHECK LICENSE:&quot; start.log Tue Sep 12 08:34:37 EDT 2023: CHECK LICENSE: License is current Tue Sep 12 08:34:37 EDT 2023: CHECK LICENSE: License expires on 2024-01-14 17:18:36 GMT  ","version":null,"tagName":"h3"},{"title":"Support for Let’s Encrypt SSL Certificates​","type":1,"pageTitle":"Blackboard Learn Sandbox environment","url":"/docs/developer-ami#support-for-lets-encrypt-ssl-certificates","content":"Starting with version 3300.6.0 the Learn for REST and LTI Developers AMI supports free Let’s Encrypt SSL Certificates. At this time we do not support alternative SSL certificate processes. Here's a video walkthrough of setting up with Let's Encrypt. NOTE: Per the Let’s Encrypt FAQ certificates are valid for only 90 days. In order to update your Let’s Encrypt certificate you must perform a server reboot per below instructions. You may read about Let’s Encrypt at Let’s Encrypt - Free SSL/TLS Certificates You may read about certbot at Certbot You may read about how to get a free DNS at Free Dynamic DNS - No-IP.com - Managed DNS Services Setup​ After starting your AMI there are a few steps to installing and using Let’s Encrypt Certificates. After installing the certificate, management of the Let’s Encrypt SSL certificate is automatic. Register the AWS provided EC2 public IP to your DNS as an A-record. The best practice as an introduction is to use a free DNS service such as freeddns.no-ip.com to provide the FQDN used for your Learn EC2. Use the EC2 Security controls to open HTTP as an inbound security rule - you should have HTTP, HTTPS, and SSH (from your console IP) enabled at this point. SSH to your EC2 instance and create a file containing your FQDN from freeddns.no-ip.com and your email address and save to /home/ubuntu/my_ssl_config. The format of this file is important and should follow the example below. The file contains only two lines specifying the domain and email used to configure the Let’s Encrypt process, e.g.: ssldomain: devmen.hopto.org sslemail: developers@anthology.com  SSH to your EC2 instance and from the command line reboot the instance using the command: $ sudo reboot now  On reboot the server will generate your Let’s Encrypt SSL certificate, on future reboots or restarts the server will check whether the certificate requires renewal. If renewal is required reboot the server to renew the Let’s Encrypt certificate. If your certificate is past expiration, because you ignored the renewal notices, sudo mv the /etc/letsencrypt directory to your home directory for safe keeping and reboot. Warning: When you stop and start an existing EC2 instance, AWS resets the public domain name and IP - you must update your DNS entry to reflect the new IP. Warning: Let’s Encrypt has a limit of 20 certificate requests on a domain per week. Repeated stop and starts of an AMI using the same domain may exceed the Let’s Encrypt request limit, requiring you to provide a new domain name. ** Warning: Timing is important. If you attempt to access your EC2 before the Let's Encrypt cert installation is complete you will need to rebuild. If you are having issues, watch this video walkthrough of settup and getting a Let's Encrypt certificate working. What does the Learn REST and LTI Developer AMI cost?​ The Open Innovation Initiative was created to lower the cost of entry for developing software solutions on the Learn platform. This is accomplished by removing the previous Partner program costs and replacing those partner program costs with low hourly AMI usage costs. This enables you the developer to control your costs for prototyping your applications and entering the education software market. Use of the Developer AMI will result in two charges being made to your account: An AWS Infrastructure charge This charge is based on the EC2 instance type selected to run the AMI and varies based on the instance type size and region. An example is $0.0464/hr for a t2.medium instance served from Software charge A Software charge of $0.05/hr (US dollars) is added to the AWS infrastructure charge. If you have any questions, feel free to ask in this space or email us at developers@anthology.com. Log into the Learn Application on the AMI​ The username is administrator. The password is the instance ID, e.g., i-234234234234. If you look at the log created when you spin it up it is also printed there. You can find the log from the EC2 console. The first time you go to login, you will see text on the page like the following. NOTE: There is no way to upgrade an AMI. You will need to get the latest AMI, and transfer any necessary data, BEFORE the expiration date shown on the page you see. Landing page seen the first time you login to the developer AMI ","version":null,"tagName":"h3"},{"title":"Configure Your AMI-based Learn Instance​","type":1,"pageTitle":"Blackboard Learn Sandbox environment","url":"/docs/developer-ami#configure-your-ami-based-learn-instance","content":"When you set up your instance of Learn, you can configure different options. These options are discussed in Enable Learn Tool Interoperability (LTI) Links and Text. Triage Your AMI-based Learn Instance​ Note that not stopping your EC2 when you encounter an error will continue to incur EC2 charges and we do not issue refunds. Always stop your EC2 if you encounter an error or do not require a 24x7 development instance. For General Learn System Administration you may visit: Learn SaaS Deployments 504 Gateway Error Visiting https:// displays a 504 error in your browser: 1. Shutdown the instance to stop accumulating charges and try again 2. Or reboot the instance: Ssh into the instance Issue this command: $ sudo reboot now Issue a reboot from the AWS console The above restarts the instance and will typically correct the 504 error. ","version":null,"tagName":"h3"},{"title":"Migration Cookbook - Recreating Data between AMIs​","type":1,"pageTitle":"Blackboard Learn Sandbox environment","url":"/docs/developer-ami#migration-cookbook---recreating-data-between-amis","content":"Prior to the expiration of an AMI license (which is not upgradable) if you wish, you may migrate existing Learn data to your new subscription. Currently, there is no formal migration/transfer tool to port Learn data between AMI (EC2) instances. However, there are several existing administrative tools that can be leveraged to capture the bulk of T&amp;L (teaching/learning data) like courses, users, institutional roles, and enrollments, etc. from an existing (source) EC2 and reinstate/recreate the data onto a (new) EC2. The resources linked below will guide you through this data transfer process: Bb Learn EC2 Data Transfer.docx: A Word doc outlining a comprehensive step-by-step overview of the migration/transfer process between a source and destination EC2.EC2 Migration SQL Scripts and Feed Files.zip: A zip file containing all the SQL scripts (PostgreSQL format) and example feed files referenced in the Data Transfer overview document (above). Notice - AVG on Windows Systems​ While using the AVG antivirus product on a Windows system and attempting to create a course using Learn, AVG may manifest what we believe is a false positive dialog regarding CVE-2014-0286-A. This can occur while using any browser, though the error message is specific to now unsupported versions of Microsoft Internet Explorer 6 through 11. Our security team has indicated that this is an issue with the AVG software. See the AVG website for questions about configuring the AVG software, and for their contact information. Contributors on this article: Mark O'Neil Former DirectorPlatform and APIs ","version":null,"tagName":"h3"},{"title":"Developer Portal Maintenance and Releases","type":0,"sectionRef":"#","url":"/docs/developer-portal/devportal-maintenance","content":"","keywords":"","version":null},{"title":"Maintenance and Update Window​","type":1,"pageTitle":"Developer Portal Maintenance and Releases","url":"/docs/developer-portal/devportal-maintenance#maintenance-and-update-window","content":"The Developer Portal has an optional maintenance window scheduled every month on the Tuesday of the second week (after SaaS updates). The exception to this monthly maintenance schedule is when critical patches are required. You may monitor the Portal maintenance schedule and progress at https://status.blackboard.com and review any update release notes below. NOTE: Should a critical outage* take place, we will release a detailed post-mortem on Behind the Blackboard as soon as possible - typically within four days post event. Any non-critical outage** will be covered using our in-Portal announcements feature only. * critical outage: service is unavailable or operating outside of usable performance or functional parameters. ** non-critical outage: service is available, but operating at reduced performance. Usually, when maintenance is executed or we set a release date/time which usually happens on a maintenance window, our production system will not be able to take requests and any calls that rely on developer portal. Those will fail for about 30 minutes. ","version":null,"tagName":"h3"},{"title":"Release Notes​","type":1,"pageTitle":"Developer Portal Maintenance and Releases","url":"/docs/developer-portal/devportal-maintenance#release-notes","content":" May 28th 2024 - 02:30 AM EST​ The Developer Portal will undergo a maintenance update at this time. There is no downtime involved. Release Name: DP2024.3Release Date : 05/28Release Time : 02:30 AM EST (6:30 AM UTC) (12:00 PM IST)Downtime : 0 Mins Purpose: Rate Limiting: A more effective method for managing rate limits of API usage with enhanced control. Enjoy the flexibility to adjust from a 24-hour cycle to any time interval that better fits developer's requirements. Performance issue fix:SQL Query optimization to address the Performance issue  25 February 2024 @ 1:30 am EST​ We moved this maintenance and feature release due to questions and requests from different sources to Feb 20th 2024. Maintenance release. Admin to create groups: Enable Portal Administrators to create/view/edit Portal Account Groups and to manage the created groups. Audit Trail: Admin to track events and actions done by both the registered developers and admins. This feature also includes downloadable log as a spreadsheet(csv) over a specified timeframe.  17 October 2023​ Maintenance only. In order to improve performance during peak usage periods and mitigate the risk of database connection failures due to over utilization we are upgrading our database instance type. The Developer Portal will remain available during this time. Though some database related features such as creating new accounts or applications will be unavailable during the maintenance period. The actual expected duration of the maintenance period is 2 minutes or less. Maintenance Date : 10/17/2023 Maintenance Time : 06:30 AM UTC (2023-10-17T06:30:00Z) Maintenance window : 10 Mins You may follow status and updates at https://status.blackboard.com.  11 July 2023​ Release Name: 2023.3 ❗ The length of this maintenance window, 12:30 am - 02:30 am EST, is due to the Redis Upgrade, but may complete in ~45 minutes. We apologize in advance for the short notice. Features: Redis Upgrade: For security and performance purposes we are upgrading to the latest version of Redis. This will have no impact on current Developer-facing functionality.LTI Dynamic Registration: For performance and forward looking enhancements we are improving the backend which supports the dynamic registration of LTI integrations with Learn. This will have no impact on current Developer-facing functionality.  6 June 2023​ Release Name: 2023.2 Features: Announcement Panel: The Announcement Panel provides Developer facing Portal, APIs, and Event information. When a new announcement is available it will be indicated via a red dot on the Announcements icon in the Portal task bar. Clicking on the Announcements icon displays active announcements - latest at the top. Contributors on this article: Mark O'Neil Former DirectorPlatform and APIs Davey Herrera Software EngineerIntegrations, Developer Relations and Standards Daniel Magers Sr. Technical WriterProduct Development Blackboard Learn Camilo Dominguez Product ManagerDeveloper Portal and REST APIs ","version":null,"tagName":"h3"},{"title":"Creating and Managing groups","type":0,"sectionRef":"#","url":"/docs/developer-portal/creating-and-managing-groups","content":"","keywords":"","version":null},{"title":"What are Groups?​","type":1,"pageTitle":"Creating and Managing groups","url":"/docs/developer-portal/creating-and-managing-groups#what-are-groups","content":"Groups allow you to manage application releases and associate developers with specific applications. This page explains how to create and manage your groups. You can create groups for individual and team development. You can target a specific group for a production application release (this is your Production Group). This allows you to manage your applications and the developer teams behind them, enabling access to application references by team members. Here are some rules governing groups: A Group always has at least one member. That member has administrator rights and cannot be removed from the group. You can add developers to a group. Developers added to a group can be given administrator privileges.A Group can have one or more applications associated with it. This association allows for granular management of applications and teams' access to application information.Groups enable you to manage the developers associated with your projects and the release level of your applications.Groups allow for a higher contracted rate_limit and site quota over those set for default developer accounts. These settings are based on your Blackboard Learn license or Business Development contract. If you do not have a Blackboard Learn product license or do not have a Business Development contract, your groups will all have default developer account settings.Groups cannot be deleted or removed by you or Anthology. ","version":null,"tagName":"h2"},{"title":"Creating a group​","type":1,"pageTitle":"Creating and Managing groups","url":"/docs/developer-portal/creating-and-managing-groups#creating-a-group","content":" Create a group. You can create a group by selecting Create. Rename a group. You can rename an existing group by selecting Rename. Select a new group. This dropdown menu allows you to select a Group between the ones you have created. Add a new developer to the group. Add a developer to a group using the developer's email address. Change the administrator status. You can give administrator privileges to exisiting group members. An administrator is empowered to: Add new developers to the groupEdit, Delete or manage keys of the application.Manage placements and see which schools have the application deployed. Contributors on this article: Davey Herrera Software EngineerIntegrations, Developer Relations and Standards Daniel Magers Sr. Technical WriterProduct Development Blackboard Learn ","version":null,"tagName":"h2"},{"title":"Registering and Managing a REST or LTI Application","type":0,"sectionRef":"#","url":"/docs/developer-portal/creating-new-rest-or-lti-application","content":"","keywords":"","version":null},{"title":"Register a REST or LTI application​","type":1,"pageTitle":"Registering and Managing a REST or LTI Application","url":"/docs/developer-portal/creating-new-rest-or-lti-application#register-a-rest-or-lti-application","content":"Select Register a REST or LTI application to manually register a new REST API or LTI application. ","version":null,"tagName":"h2"},{"title":"Manual Registration of a REST API Integration​","type":1,"pageTitle":"Registering and Managing a REST or LTI Application","url":"/docs/developer-portal/creating-new-rest-or-lti-application#manual-registration-of-a-rest-api-integration","content":"In the application form, enter your application information. Fields with a red asterisk (*) are required. Application Name. Enter your application's name. Description. Describe your application. Address who your application is intended for and what its main goal is. For example, &quot;Grade Sync allows students and instructors to sync grades with our system and centralize them in the institution's system.&quot; Limit 450 characters. Domain(s). Enter the domain address(es) you want to use without the http or //. You can enter several domains separated by commas (for example, devcon.blackboard.com, trial.anthology.com). Group. Add the group that this application is to be part of. A default group is added when you create an application. If you want to add your own group, read more about Groups. My integration Supports LTI 1.3. By default, this option is switched off. Turn on if you need your application to support LTI 1.3. Anthology only supports LTI 1.3. Register Application. Once all information has been entered, select Register Application. ","version":null,"tagName":"h3"},{"title":"Manual registration of an LTI integration​","type":1,"pageTitle":"Registering and Managing a REST or LTI Application","url":"/docs/developer-portal/creating-new-rest-or-lti-application#manual-registration-of-an-lti-integration","content":"To register an LTI integration, enter your application's information in the form as described in Manual registration of a REST API integration. Switch My integreaton supports LTI 1.3 to ON. This enables a second part of the form. Enter information required for the integration to communicate with your application on your end. These fields are explained in LTI 1.3 Fields. Login Initiation URLTool Redirect URL(s)Tool JWKS URLSigning AlgorithmCustom Parameters Once complete, select Register Application. ","version":null,"tagName":"h3"},{"title":"Register Application​","type":1,"pageTitle":"Registering and Managing a REST or LTI Application","url":"/docs/developer-portal/creating-new-rest-or-lti-application#register-application","content":"Once you have filled out and submitted the form, add the following information depending on the type of application you are registering. Register REST API application​ When you register a REST API application, you see three values that the developer portal returns. These are shown only once, and Anthology cannot retrieve them. Make sure to document them for your records: Application KeySecretApplication ID  Once you record and verify this information, select Done to be redirected to My Applications. Register an LTI application​ When you register a LTI application, you will see seven values that the developer portal returns, These are shown only once, and Anthology cannot retrieve them. Make sure to document them for your records: Application KeySecretApplication IDIssuerPublic Keyset URLAuth token endpointOIDC auth request endpoint  Once you record and verify this information, select Done to be redirected to My Applications. ","version":null,"tagName":"h3"},{"title":"My Applications​","type":1,"pageTitle":"Registering and Managing a REST or LTI Application","url":"/docs/developer-portal/creating-new-rest-or-lti-application#my-applications","content":"On this application mangagement page, you can view and manage your REST API or LTI applications on your account.  Here you will be able to: Register a new application manually. For instructions to register a new application, see Manual registration of a REST API application or Manual registration of a LTI application See the name, description, Application ID and group of the application. This data can be edited, except for Application ID. Edit your application (General data including LTI endpoints). This returns you to the manual registration form where you can edit: Application NameDescriptionDomainsLogin initiation URLTool redirect URLsTool JWKS URLSigning AlgorithmCustom parameters The following data cannot be edited: Data as IssuerPublic keyset URLAuth token endpointOIDC auth request endpoint Delete your application. This removes your application. This is a one-way operation and cannot be undone. Manage your keys. You can create new keys (keys and secrets), but the application keeps the same application ID. This can be used when you want to rotate your keys or make an old key and secret unusuable. You may never need to create additional keys. When you select +, it will generate new values that will be shown only once. Document and store them in a safe place because Anthology is unable to retrieve this data. Manage your application's placements. Register a placement (LTI) that is applied whenever a new client adds this placement to their own Blackboard Learn instance and switches it ON. Enter the following data: Placement nameDescriptionType (Course Tool, Course content tool, deep linking content tool, System tool, administrator, ultra extension)Allow student access and/or Launch in new window target link URIIcon URLCustom parameters Review the schools that have integrated your application. At the top right of the page, view a list of sites that are registered and using your application. this is how it looks by default: This is how it looks like when you have already registered an application: ","version":null,"tagName":"h2"},{"title":"My Site Registrations​","type":1,"pageTitle":"Registering and Managing a REST or LTI Application","url":"/docs/developer-portal/creating-new-rest-or-lti-application#my-site-registrations","content":"On this tab, can delete the registrations for sites that are no longer using your application. You can also block access to a particular site on a specific group, which makes it default to All groups. You will not see any registrations for a newly registered application. When a site is registered it will be displayed here and it will look like this:  Contributors on this article: Davey Herrera Software EngineerIntegrations, Developer Relations and Standards Daniel Magers Sr. Technical WriterProduct Development Blackboard Learn ","version":null,"tagName":"h2"},{"title":"FAQ","type":0,"sectionRef":"#","url":"/docs/developer-portal/faq","content":"","keywords":"","version":null},{"title":"How do I change the ownership of my application?​","type":1,"pageTitle":"FAQ","url":"/docs/developer-portal/faq#how-do-i-change-the-ownership-of-my-application","content":"Sometimes the owner of an application is a person and not a group. When that person leaves the company, the application continues under that person's email address. You can follow this video to change ownership. Anthology is unable to make changes to ownership of any application.  Contributors on this article: Davey Herrera Software EngineerIntegrations, Developer Relations and Standards Daniel Magers Sr. Technical WriterProduct Development Blackboard Learn ","version":null,"tagName":"h2"},{"title":"Production groups, REST API and site registrations limits","type":0,"sectionRef":"#","url":"/docs/developer-portal/production-groups-rest-api-and-site-registration-limits","content":"","keywords":"","version":null},{"title":"Production groups​","type":1,"pageTitle":"Production groups, REST API and site registrations limits","url":"/docs/developer-portal/production-groups-rest-api-and-site-registration-limits#production-groups","content":"Your production group allows you to increase the number of site registrations and rest API calls according to your contract or partnership level. This increase can only be applied to one group per application. ","version":null,"tagName":"h2"},{"title":"Requesting production groups​","type":1,"pageTitle":"Production groups, REST API and site registrations limits","url":"/docs/developer-portal/production-groups-rest-api-and-site-registration-limits#requesting-production-groups","content":"Use our best practices to properly name groups. If you are an Anthology Client or Partner. Create a Behind the Blackboard ticket requesting an increase of the number of rest API calls and/or site registrations. You need to provide: The email used to register your application.The name of the production group. If you haven't created one yet, the limits are applied to any existing production. If you are a third party with no partnership level. Send an email about your application, company, integration, and whether you are interested in a partnership. You can review our documentation to become a partner. ","version":null,"tagName":"h3"},{"title":"Site Registration Limits​","type":1,"pageTitle":"Production groups, REST API and site registrations limits","url":"/docs/developer-portal/production-groups-rest-api-and-site-registration-limits#site-registration-limits","content":"We provide a default of six sites to be registered in total. Each developer group has a quota of the maximum number of Blackboard Learn sites that can access the group's applications, regardless of number of applications. You are responsible for keeping track of the sites where your Learn REST Application is installed. The client receives an error message if they install your REST application, and the site quota is exceeded for the developer group that manages it. The error message typically reads something like: Failure: Application developer has exceeded maximum number of client installations. Please contact the developer. ","version":null,"tagName":"h2"},{"title":"REST API calls limit​","type":1,"pageTitle":"Production groups, REST API and site registrations limits","url":"/docs/developer-portal/production-groups-rest-api-and-site-registration-limits#rest-api-calls-limit","content":"We provide by default 10,000 calls every 24 hours. A rate limit is the number of API requests that can be called each day from applications that are registered to your developer group. For example, if you have a 100,000 request limit and three applications, each application will use a portion of that limit. Your application should monitor the number of requests used at an application level using the http headers provided in each request response. Inform your user when your application stops or is about to stop working because of the rate limit. HTTP Header\tDescriptionX-Rate-Limit-Limit\tThe rate limit ceiling for the given development group. X-Rate-Limit-Remaining\tThe number of requests left for the 24-hour period for the development group. X-Rate-Limit-Reset\tThe remaining time before the rate limit resets, given in UTC epoch seconds. Contributors on this article: Davey Herrera Software EngineerIntegrations, Developer Relations and Standards Daniel Magers Sr. Technical WriterProduct Development Blackboard Learn ","version":null,"tagName":"h2"},{"title":"Rate Limit Migration","type":0,"sectionRef":"#","url":"/docs/developer-portal/rate-limit-migration","content":"","keywords":"","version":null},{"title":"Background​","type":1,"pageTitle":"Rate Limit Migration","url":"/docs/developer-portal/rate-limit-migration#background","content":"The Anthology Developer Portal plays a crucial role in the integrations with the Anthology product portfolio, as such it handles millions of requests each day, making the implementation of a rate limit mechanism essential. Rate limiting is a mechanism used in the web applications to control the traffic flow and the resources utilization. The limit is set by a default value, which is the number of API requests that can be made each day from applications that are registered to your developer group by default, this is set to 10.000 calls every 24 hours. If you need a higher rate limit, please review our guide. ","version":null,"tagName":"h2"},{"title":"Migration​","type":1,"pageTitle":"Rate Limit Migration","url":"/docs/developer-portal/rate-limit-migration#migration","content":"In our ongoing effort to optimize and enhance our system's performance, we are transitioning our rate limit algorithm. This change aims to improve scalability, better manage of burst traffic and enhance the control over our system resources, all while providing a consistent and reliable experience for our users. ","version":null,"tagName":"h3"},{"title":"FAQ​","type":1,"pageTitle":"Rate Limit Migration","url":"/docs/developer-portal/rate-limit-migration#faq","content":"Is this change going to impact any of my applications? No, the refresh frame will remain at 24 hours and the default rate limit will continue to be 10.000 calls. Any existing rate limit variations requested by clients and partners will also be maintained. When is this change going to be applied? This change is planned to be deployed in the June release on 06/04/2024. What is the new rate limit algorithm that is going to be implemented? We are now using the token bucket algorithm, wich allows applications to have a better control over burst trafic. This will also enable us to improve the refresh rate in the future. What is a token? You can think of a token as a coin that allows you to make a request. Once you run out of tokens, you won't be able to make any more requests and a 429 HTTP error will be returned. Will there be any changes to the headers of the request? There won't be many significant changes in the returned headers. The only major change is that X-Rate-Limit-Reset will be replaced with Retry-After, but it will function in the same way returning in how many seconds you will have more tokens to make a request. HTTP Header\tDescriptionRetry-After\tThe remaining time in seconds before the bucket is filled with new tokens to make a request X-Rate-Limit-Limit\tThe rate limit ceiling for the given development group X-Rate-Limit-Remaining\tThe number of requests left for the 24-hour period for the development group Please note that the current 24 hours refresh period may be shortened in the future. Contributors on this article: Daniel Nieto Software Engineer in TestDeveloper Relations and Standards/Devportal ","version":null,"tagName":"h3"},{"title":"Service Maintenances and Releases","type":0,"sectionRef":"#","url":"/docs/maintenance-page","content":"","keywords":"","version":null},{"title":"Developer Portal​","type":1,"pageTitle":"Service Maintenances and Releases","url":"/docs/maintenance-page#developer-portal","content":"The Developer Portal has an optional maintenance window scheduled every month on the Tuesday of the second week (after SaaS updates). The exception to this monthly maintenance schedule is when critical patches are required. You may monitor the Portal maintenance schedule and progress at https://status.blackboard.com and review any update release notes below. When maintenance is executed or we set a release date/time (which usually happens on a maintenance window) our production system will not be able to take requests and any calls that rely on the Developer Portal. During this time, any request will fail. Outages Should a critical outage* take place, we will release a detailed post-mortem on Behind the Blackboard as soon as possible (typically within four days post event). Any non-critical outage** will be covered using our in-Portal announcements feature only. Release Notes May 28th 2024 - 02:30 AM EST​ The Developer Portal will undergo a maintenance update at this time. There is no downtime involved. Release Name: DP2024.3Release Date : 05/28Release Time : 02:30 AM EST (6:30 AM UTC) (12:00 PM IST)Downtime : 0 Mins Purpose: Rate Limiting: A more effective method for managing rate limits of API usage with enhanced control. Enjoy the flexibility to adjust from a 24-hour cycle to any time interval that better fits developer's requirements. Performance issue fix:SQL Query optimization to address the Performance issue 25 February 2024 @ 1:30 am EST​ We moved this maintenance and feature release due to questions and requests from different sources to Feb 20th 2024. Maintenance release. Admin to create groups: Enable Portal Administrators to create/view/edit Portal Account Groups and to manage the created groups. Audit Trail: Admin to track events and actions done by both the registered developers and admins. This feature also includes downloadable log as a spreadsheet(csv) over a specified timeframe. 17 October 2023​ Maintenance only. In order to improve performance during peak usage periods and mitigate the risk of database connection failures due to over utilization we are upgrading our database instance type. The Developer Portal will remain available during this time. Though some database related features such as creating new accounts or applications will be unavailable during the maintenance period. The actual expected duration of the maintenance period is 2 minutes or less. Maintenance Date : 10/17/2023 Maintenance Time : 06:30 AM UTC (2023-10-17T06:30:00Z) Maintenance window : 10 Mins You may follow status and updates at https://status.blackboard.com. 11 July 2023​ Release Name: 2023.3 ❗ The length of this maintenance window, 12:30 am - 02:30 am EST, is due to the Redis Upgrade, but may complete in ~45 minutes. We apologize in advance for the short notice. Features: Redis Upgrade: For security and performance purposes we are upgrading to the latest version of Redis. This will have no impact on current Developer-facing functionality.LTI Dynamic Registration: For performance and forward looking enhancements we are improving the backend which supports the dynamic registration of LTI integrations with Learn. This will have no impact on current Developer-facing functionality. 6 June 2023​ Release Name: 2023.2 Features: Announcement Panel: The Announcement Panel provides Developer facing Portal, APIs, and Event information. When a new announcement is available it will be indicated via a red dot on the Announcements icon in the Portal task bar. Clicking on the Announcements icon displays active announcements - latest at the top.  ","version":null,"tagName":"h2"},{"title":"Blackboard Learn​","type":1,"pageTitle":"Service Maintenances and Releases","url":"/docs/maintenance-page#blackboard-learn","content":"Learn release dates and release notes can be found through Behind the Blackboard or through our Help Documentation: Release schedules for Blackboard Learn: Release ScheduleRelease Notes: Release Notes  ","version":null,"tagName":"h2"},{"title":"Student​","type":1,"pageTitle":"Service Maintenances and Releases","url":"/docs/maintenance-page#student","content":"Anthology Student releases and docs are published through the Student Suite here: Anthology Student Suite  ","version":null,"tagName":"h2"},{"title":"Reach​","type":1,"pageTitle":"Service Maintenances and Releases","url":"/docs/maintenance-page#reach","content":"Anthology Release releases and docs are published through the Reach Suite here: Anthology Reach Suite  Annotations * critical outage: service is unavailable or operating outside of usable performance or functional parameters. ** non-critical outage: service is available, but operating at reduced performance. Contributors on this article: Mark O'Neil Former DirectorPlatform and APIs Davey Herrera Software EngineerIntegrations, Developer Relations and Standards Daniel Magers Sr. Technical WriterProduct Development Blackboard Learn Camilo Dominguez Product ManagerDeveloper Portal and REST APIs Sebastian Silva Software EngineerIntegrations, Developer Relations and Standards ","version":null,"tagName":"h2"},{"title":"Blackboard App Catalog - FAQ","type":0,"sectionRef":"#","url":"/docs/partners/blackboard-app-catalog-faq","content":"","keywords":"","version":null},{"title":"What is the Blackboard App Catalog?​","type":1,"pageTitle":"Blackboard App Catalog - FAQ","url":"/docs/partners/blackboard-app-catalog-faq#what-is-the-blackboard-app-catalog","content":"Partner integrations continue to play a critical and vital role within the Learn ecosystem, and we’ve always strived to maintain a current and detailed inventory of our partners and their available integrations. The new App Catalog directly enables our partner community to manage their own App listings—ultimately providing our clients with a current, comprehensive, and detailed list of available integrations across all flavors of Learn. As our partner community continues to expand, and our clients navigate their transitions from the Original to Ultra experience of Learn, partner integrations are more important than ever before. Our partners and clients deserved a scalable, dynamic, and comprehensive resource for partner integrations – and we’ve delivered. ","version":null,"tagName":"h2"},{"title":"How does the Blackboard App Catalog Work?​","type":1,"pageTitle":"Blackboard App Catalog - FAQ","url":"/docs/partners/blackboard-app-catalog-faq#how-does-the-blackboard-app-catalog-work","content":"All Partners in the Blackboard Partnerships Program are listed on the App Catalog Partners page and are able to submit detailed information for each of their &quot;Apps&quot; (integrations) to the App Catalog. Submitted Apps are reviewed by the Blackboard App Catalog team and appear in the App Catalog upon approval.The App Catalog enables anyone to browse, search, or filter the Apps by integration type (LTI + REST, Building Block, Partner Cloud) or Category (Accessibility, Admin/Support Tool, Assessment, Classroom Tool, Consulting/Dev Services, Content, Data Insights, Multimedia, Safety/Security, SIS/System Integrator).The new Blackboard App Catalog uses OpenChannel - an experienced provider of LMS integration marketplace solutions in the educational space. ","version":null,"tagName":"h2"},{"title":"What does \"ULTRA READY\" mean?​","type":1,"pageTitle":"Blackboard App Catalog - FAQ","url":"/docs/partners/blackboard-app-catalog-faq#what-does-ultra-ready-mean","content":"Any integration listed as &quot;Ultra Ready&quot; is labeled as such to indicate it was built leveraging only Blackboard integration frameworks specifically supported in Ultra (i.e. Partner Cloud, LTI 1.1+ and/or Learn REST APIs). The term &quot;Ultra Ready&quot; is not equivalent to a Blackboard certification status for the Ultra experience.††  ","version":null,"tagName":"h2"},{"title":"What's the difference between the 3 App types (LTI + REST, Building Blocks, & Partner Cloud)?​","type":1,"pageTitle":"Blackboard App Catalog - FAQ","url":"/docs/partners/blackboard-app-catalog-faq#whats-the-difference-between-the-3-app-types-lti--rest-building-blocks--partner-cloud","content":"LTI + REST: LTI + REST apps are those integrations that rely on and utilize LTI Tool Placements and/or Learn REST APIs. LTI + REST apps are compatible across all flavors and delivery methods of Learn (Original and Ultra experiences) and have no association with legacy Blackboard Building Blocks.Building Block: While only fully functional in the Original Experience of Learn, for any Building Blocks that are installed on a Learn environment with the Ultra Experience enabled, the functionality of the integration will only be available in courses using the Original course view. Building Block functionality is not compatible with the Ultra experience of Learn including anywhere within the Ultra base navigation (outside of the course context) or within Ultra view courses. Please see updated Building Block support details here.Partner Cloud: Natively available in all flavors and delivery methods of Learn (Original and Ultra experiences), Partner Cloud Apps and have no association with a legacy Blackboard Building Block. The Blackboard Partner Cloud streamlines our inventory of content integrations into a single registration and activation process, eliminates Building Block version control issues, and accelerates the delivery of new partner features and product updates. Via the course-embedded Content Market tool, instructors and course builders can access ready-made material from textbook publishers to enhance their curriculum and provide students with supplementary materials that aid in learning. At the same time, sensitive student data remains private and secure. ","version":null,"tagName":"h2"},{"title":"How can I tell which integrations work for Original vs. Ultra?​","type":1,"pageTitle":"Blackboard App Catalog - FAQ","url":"/docs/partners/blackboard-app-catalog-faq#how-can-i-tell-which-integrations-work-for-original-vs-ultra","content":"It can be a bit tricky, but this Ultra Compatibility Matrix provides a bit of clarity:  ","version":null,"tagName":"h2"},{"title":"Why can't I find the App(s) I'm looking for?​","type":1,"pageTitle":"Blackboard App Catalog - FAQ","url":"/docs/partners/blackboard-app-catalog-faq#why-cant-i-find-the-apps-im-looking-for","content":"The majority of LTI+REST integrations and Building Blocks are developed, maintained, and supported by our developer community of partners and clients. It is up to the integration owner to submit their apps the the Blackboard App Catalog. If you know of an App that you'd like to see in the App Catalog, please fill out the Suggest an Integration form and we will work with the partner/vendor to get the App listed. ","version":null,"tagName":"h2"},{"title":"Will more Apps be added to the App Catalog?​","type":1,"pageTitle":"Blackboard App Catalog - FAQ","url":"/docs/partners/blackboard-app-catalog-faq#will-more-apps-be-added-to-the-app-catalog","content":"Most definitely! The new Blackboard App Catalog confirms our continued investment in the expansion of our partner integration ecosystem, commitment to client transparency, and ongoing support of our transition to Learn Ultra. With an updated FAQ page coming soon and new Partners and Apps being added weekly, the Blackboard App Catalog is a valuable resource that will only improve as it grows. ","version":null,"tagName":"h2"},{"title":"How can I list my App(s) in the App Catalog?​","type":1,"pageTitle":"Blackboard App Catalog - FAQ","url":"/docs/partners/blackboard-app-catalog-faq#how-can-i-list-my-apps-in-the-app-catalog","content":"Any Blackboard Partner can submit Apps to the Blackboard App Catalog - join the Blackboard Partnerships Program to get started! ","version":null,"tagName":"h2"},{"title":"What are the various LTI Placement Type(s) available in Learn?​","type":1,"pageTitle":"Blackboard App Catalog - FAQ","url":"/docs/partners/blackboard-app-catalog-faq#what-are-the-various-lti-placement-types-available-in-learn","content":"Deep Linking Content Tool: Allows instructors to launch the tool and add content directly from the tool provider.Course Content Tool: Allows instructors to add the tool to their course content.Course Tool: Appears to instructors in the Course Management section (Original course) and the Books &amp; Tools menu (Ultra course).System Tool: Can be opened without accessing a course. Appears in My Institution tab -&gt; Tools menu (Original experience) and Tools base navigation section (Ultra experience).Administrator Tool: Allows admins to add the tool to the Tools &amp; Utilities menu on the Admin Panel.Ultra Extension: Advanced UEF optionProctoring Tool: Proctoring Framework optionBase Navigation Tool: Advanced UEF optionCourse Navigation Tool: Advanced UEF option ","version":null,"tagName":"h2"},{"title":"What if I have additional questions?​","type":1,"pageTitle":"Blackboard App Catalog - FAQ","url":"/docs/partners/blackboard-app-catalog-faq#what-if-i-have-additional-questions","content":"Reach out to the Blackboard App Catalog Team (appcatalog@blackboard.com)  †† The 3rd party Ultra Ready integrations available through the Blackboard App Catalog allow you to use the named 3rd party service with the Ultra experience in Learn. By enabling any 3rd party integrations you agree that any use of the a 3rd party service is governed solely by the terms of use by the named 3rd party (and you shall comply with all such terms of use). Any contract entered into, services provided, or any transaction completed via the named 3rd party is between you and that party, and not Blackboard. Blackboard makes no representation with respect to the named 3rd parties and shall have no liability or obligation whatsoever in relation to the content provided to or available at, use of, or correspondence with, the named 3rd party or any transactions completed and any contract entered into by you with any named 3rd party. Further, by authorizing a 3rd party integration, you authorize Blackboard to provide limited personal information required for the named 3rd party (&quot;Integration Information&quot;). You agree that Blackboard is not responsible for the data privacy and security practices of named 3rd party and Blackboard is not liable for any unauthorized access to the Integration Information. You accept that you are solely responsible for meeting any applicable requirements and the consequences of authorizing named 3rd party to access the Integration Information. Contributors on this article: Darek Sady Former DirectorTeaching and Learning ","version":null,"tagName":"h2"},{"title":"Become a Partner!","type":0,"sectionRef":"#","url":"/docs/partners/partners-become_a_partner","content":"Become a Partner! Published: Not Available Last Update: Not Available Our Community partnership level is FREE to developers and provides access to the Learn AMI (Amazon Machine Images) for developers to build REST and LTI applications*, API limits apply and Behind the Blackboard support is not included. Community support is available. Consider investing in one of our other partnership levels to receive added benefits that help partners deepen integrations, promote solutions, and connect with Blackboard clients. The Blackboard Developers Network (BbDN) is Blackboard’s standard partnership and is available for $3,000 annually. BbDN Partnerships include the following benefits: One (1) Learn Developer License (for a self-hosted instance)Access to Shared SaaS sitesAccess to Behind the Blackboard Support portal for technical supportCustom listing in our Partner DirectoryListing in our Blackboard App CatalogUse of Blackboard Licensed Marks in marketing materials (subject to approval)Eligible to sponsor exhibit at Anthology Together and other Blackboard events. BbDN Partners also have the option to add-on of a “Learn SaaS Starter site” for $2,000 annually. Through a BbDN Learn SaaS Starter Site, you receive: A dedicated Learn instanceThe ability to test in Learn Original and Ultra for client demonstrationsLicensed for 20 active users and 20 GB StorageUpdated automatically against the Learn SaaS Test Release scheduleFor more info, see our help details About the Learn SaaS Deployment Purchase your BbDN partnership here for US Companies or, for Non-US companies, sign up on our registration page. Visit our Partnerships Program page to learn about additional opportunities to work together. Blackboard Partnerships Team *REST is an acronym for REpresentational State Transfer and an architectural style for distributed hypermedia systems. Learn has a complete suite of APIs based on this standard. See developer.anthology.com. LTI is an industry standard developed by the IMS. Learn supports LTI 1.1 and LTI 1.3 Advantage. See www.imsglobal.org/activity/learning-tools-interoperability Contributors on this article: Mark Kauffman Sr. Software EngineerIntegrations, Developer Relations and Standards","keywords":"","version":null},{"title":"Start here","type":0,"sectionRef":"#","url":"/docs/developer-portal/start-here","content":"","keywords":"","version":null},{"title":"What is the Anthology Developer Portal?​","type":1,"pageTitle":"Start here","url":"/docs/developer-portal/start-here#what-is-the-anthology-developer-portal","content":"The Anthology Developer Portal is for anyone interested in developing integrations with the Anthology product portfolio. Find information about our REST APIs, our developer-facing documentation, and Portal-related announcements. Create an account to register an application. Registration is a required step for testing and releasing your integration. Contact us at developers@anthology.com for any issues related to integrations. ","version":null,"tagName":"h2"},{"title":"Navigating the Anthology Developer Portal​","type":1,"pageTitle":"Start here","url":"/docs/developer-portal/start-here#navigating-the-anthology-developer-portal","content":"When you enter our developer portal, you will find several links starting from the top left. Select an item in this list for more details and instructions. Developer Documentation. Directs you to docs.anthology.com.Explore APIs. Directs you to our Learn, Ally, or student Swagger for up-to-date lists of APIs.Sign up. Create a brand-new Developer Portal account.Log in. Log in to your existing Developer Portal account.Explore (Browser APIs). Another way to navigate to our Learn, Ally, or student Swagger.Sign up to manage your applications. Another way to create a brand-new Developer Portal account.  ","version":null,"tagName":"h2"},{"title":"Developer Documentation​","type":1,"pageTitle":"Start here","url":"/docs/developer-portal/start-here#developer-documentation","content":"Anthology’s Developer Documentation (which includes this page) helps you explore Anthology’s product resources. It includes tutorials, sample code, articles, and API references. For an overview, visit https://docs.anthology.com/docs/site-intro. ","version":null,"tagName":"h3"},{"title":"Explore APIs​","type":1,"pageTitle":"Start here","url":"/docs/developer-portal/start-here#explore-apis","content":"Explore Public APIs for: AllyLearnStudent Each link directs you to a Swagger that displays all available APIs and their endpoints. Swagger is a suite of open-source tools for API developers from SmartBear Software. To learn more about how Swaggers work, visit Swagger’s documentation. ","version":null,"tagName":"h3"},{"title":"Sign up for a new account​","type":1,"pageTitle":"Start here","url":"/docs/developer-portal/start-here#sign-up-for-a-new-account","content":"If you do not already have a Developer Portal Account, select Sign up. A modal window is displayed that contains our Terms and Conditions. Please note that sometimes tracking blockers or ad blockers will disable this window. Turn off these blockers before signing up for a Developer Portal account. Once you review the Terms &amp; Conditions, select I Agree. Selecting I Decline will close out the window, and you will not move forward with account set up.  when you select I Agree, a form appears for user data input. Add the following data: Email addressPasswordFirst name/Company NameLast name/Company Name For your password, use the following rules: Use between 12-32 charactersUse at least 1 uppercase letter [A, B, C, ...Z]Use at least 1 lowercase letter [a, b, c, ...z]Use at least 1 number [0, 1, 2, ...9]Use 1 special character (!, $, #, %...) Check your password strength This widget will allow you to check if your password is strong enough. This widget doesn't save any information, everything runs locally Enter your tentative password: Password is between 12 and 32 charactersContains at least 1 uppercase letterContains at least 1 lowercase letterContains at least 1 numberContains at least 1 special character What you enter into the First Name and Last name fields is what is displayed on Blackboard Learn to identify your integration. Entering a company name in the name fields can be done in this way: First name: AnthologyLast name: Inc. Confirm your identity in the CAPTCHA box. Then select Create Account. If you are encountering issues when you select Create Account, make sure you have disabled tracking and ad blockers on your device. If this is a company account, We suggest you use an email everyone on your team has access to.  Once you have successfully created your account, you will receive an email that gives information about our Documentation, Community, Partnerships, GitHub, and about our Amazon Machine Images AMIs. Once you have created your account, you will be presented with a page that looks like this:  ","version":null,"tagName":"h3"},{"title":"Log in on your account​","type":1,"pageTitle":"Start here","url":"/docs/developer-portal/start-here#log-in-on-your-account","content":"If you have an existing account, select Log In. A modal window is displayed to enter your email and password. If you have forgotten your password, select Reset password. Enter your email address, and you will receive an email with a link to reset it. Please note that you will be automatically signed out of your account after 60 minutes of inactivity. If this happens, simply log in again.  Managing your Developer Portal account​ When your account is created and you have logged in, you will notice that the top menu contains several new items. My Applications. Manage your registered applications here. My Groups. Manage your groups here. Bell Icon (🔔). View Notifications in the Developer Portal. Select 🔔 to see your notifications. My Account. Select My Account to review or edit your information. You are not able to edit your email (Anthology also cannot change this email). Your password can be reset by selecting Change password. ","version":null,"tagName":"h3"},{"title":"Browse APIs​","type":1,"pageTitle":"Start here","url":"/docs/developer-portal/start-here#browse-apis","content":"When you click the Browse APIs you will be redirected to our Swagger for APIs: https://developer.anthology.com/portal/displayApi Overall Swagger API structure​ This applies to our Learn, Ally and Student APIs that user Swagger for documentation. Version Selector. This defaults to the the latest supported version. The dropdown menu also contains older versions and newer, not-yet-supported versions.Link to JSON version. This is a JSON version of the Swagger page. The JSON version can be used to import all endpoints in a program such as Postman.Topic Title. Group of APIs related to that specific topic. You will find APIs divided by group with different methods.API method. Learn more about API methodsAPI endpoint. Read about endpoint structure further down the page.Endpoint name. This is also known as Summary. Endpoint structure​ Select the arrow to expand details about the API endpoint.The field below the endpoint listing gives a short description of what each endpoint returns.The field below the short descriptions lists entitlements that the endpoint requires. For more information, visit Mapping entitlements to enrollments.The field in the middle of the page lists limitations on the endpoint.The bottom lists the version of Learn when this endpoint became available.  Endpoint parameter structure​ Beneath the Name is the name of the query parameter. The query parameter must be used in the same way it is written here. Beneath the query parameter describes three things: Type of valueCharacter limitType of parameter (either query parameter or path parameter). Beneath Description is a description of the parameter. The label next to Since lists the version of Blackboard Learn when the parameter was made available. Beneath the version indicator is a field that lists Available values when the parameter allows specific values.  Endpoint response structure​ Beneath Code lists the HTTP response code.Beneath Description lists the message result of the HTTP code.You can toggle between Example Value and Model. Selecting Example Value displays an example of the JSON object (shown as item 4 in the screenshot). Selecting Model displays a data dictionary of the response.Example of the result as application/json  Endpoint response model structure​ When you select Model you are shown a data dictionary.Data dictionary of the result, which is available for all http codes. The data dictionary contains: Attribute value, value type, and description of the value of the attribute.Attribute valueType of value it returns and boolean of readOnly.Description of the value of the attribute.  Contributors on this article: Davey Herrera Software EngineerIntegrations, Developer Relations and Standards Daniel Magers Sr. Technical WriterProduct Development Blackboard Learn ","version":null,"tagName":"h3"},{"title":"Student query model metadata","type":0,"sectionRef":"#","url":"/docs/student/best-practices/studentapi-querymodel-metadata","content":"","keywords":"","version":null},{"title":"Metadata endpoint​","type":1,"pageTitle":"Student query model metadata","url":"/docs/student/best-practices/studentapi-querymodel-metadata#metadata-endpoint","content":"In order to retrieve the metadata for the query model, append 'ds/odata/$metadata' to the base URL that is used to load the web client application. The output from this will be the metadata for the entire query model. Since a large amount of data is being returned, the execution time for returning the metadata output can be lengthy. Occasionally, you may get a timeout error. If this occurs, then just try issuing the URL again. Example URL: https://sisclientweb-900065.campusnexus.cloud/ds/odata/$metadata ","version":null,"tagName":"h2"},{"title":"Metadata sample output​","type":1,"pageTitle":"Student query model metadata","url":"/docs/student/best-practices/studentapi-querymodel-metadata#metadata-sample-output","content":"The first page of the metadata endpoint response is below.  To locate the metadata for a given entity in the model, use the Find operation  F and then enter &quot;EntityType Name=#####&quot; in the search box replacing ##### with the name of the entity you are searching for.  The screen shots below show the metadata for the StudentEnrollmentPeriod entity. This is one of the larger entities in the data model. Notice that there is a section that lists the name and type of every property defined for the entity.  The next area of the output lists all of the navigation properties defined for the entity. There are dozens of navigation properties defined for the StudentEnrollmentPeriod entity. The Name attribute is the navigation property name. This is the name that would be specified for the $expand argument in the OData query. The Type attribute on each Navigation Property element defines the entity in the model that this navigation property will expand to when it is referenced within the odata query being written. If the multiplicity is one to many, the type will be specified as Collection(entity name). Otherwise the multiplicity is one to one.  In conclusion, the Data Views feature in the web client UI can be utilized as a starting point for building custom odata queries and visually seeing available properties and relationships between entities. However, it is important to always review the output from the $metadata endpoint to ensure you are seeing the complete model metadata including ALL available navigation properties for a given entity. Contributors on this article: Jim Burns Senior Application ArchitectAnthology Student ","version":null,"tagName":"h2"},{"title":"Tips for using the Get and Save API operations","type":0,"sectionRef":"#","url":"/docs/student/best-practices/get-save-bestpractices","content":"","keywords":"","version":null},{"title":"Swagger documentation​","type":1,"pageTitle":"Tips for using the Get and Save API operations","url":"/docs/student/best-practices/get-save-bestpractices#swagger-documentation","content":"The use case that will be used as an example in this document will be to update an existing record in the Student entity. The list of available API endpoints that can be used for the Student entity are shown below. Using the Get and Save endpoints will be covered in this document.  ","version":null,"tagName":"h2"},{"title":"Get Operation​","type":1,"pageTitle":"Tips for using the Get and Save API operations","url":"/docs/student/best-practices/get-save-bestpractices#get-operation","content":"The first step will be to execute this operation for the entity you are updating an existing record record for. The request for this operation is the Id value of the entity row you want to update. The response from this operation will be the fully populated entity. The request payload for ALL Save endpoints is the entity itself. The execution logic of the Save endpoints in most cases align with a PUT verb in REST as opposed to a PATCH. Thus, you want to make sure that the entity is fully populated with existing data in order to prevent any data being unintentionally overwritten when the Save operation is executed. Below is the response received when executing the Get endpoint. Copy/Paste the section of the response below that is inside the “data” element. This will be your starting payload for the Save endpoint. { &quot;payload&quot;: { &quot;data&quot;: { &quot;isExcludedCrmIntegration&quot;: false, &quot;addressTypeId&quot;: 0, &quot;studentInquiryRequired&quot;: true, &quot;extraCurricularsList&quot;: [], &quot;programsList&quot;: [ 10 ], &quot;enrolledProgramIdList&quot;: [], &quot;ethnicitiesList&quot;: [ 6 ], &quot;leadSourcesList&quot;: [ 691 ], &quot;deleteVeteranDetails&quot;: false, &quot;vendors&quot;: [], &quot;studentAddressAssociation&quot;: 0, &quot;newAssignedAdmissionsRepId&quot;: 0, &quot;assignedAdmissionsRepReassignedDate&quot;: &quot;0001/01/01 00:00:00&quot;, &quot;studentRelationshipAddress&quot;: null, &quot;lastFourSsn&quot;: &quot;9023&quot;, &quot;customProperties&quot;: {}, &quot;multiValueCustomProperties&quot;: {}, &quot;originalCustomPropertiesValues&quot;: null, &quot;originalMultiValueCustomPropertiesValues&quot;: null, &quot;genderPronounList&quot;: [], &quot;overridePrevEducAltPellValidation&quot;: false, &quot;id&quot;: 50508, &quot;acgEligReasonCode&quot;: null, &quot;agencyId&quot;: 0, &quot;alienNumber&quot;: &quot;&quot;, &quot;arAccountStatus&quot;: &quot;X&quot;, &quot;arBalance&quot;: 217039.25, &quot;arNextTransactionNumber&quot;: 47, &quot;assignedAdmissionsRepId&quot;: 66, &quot;athleticIdentifier&quot;: null, &quot;bestTimeToContact&quot;: &quot;Anytime&quot;, &quot;campusId&quot;: 5, &quot;citizenId&quot;: 2, &quot;city&quot;: &quot;Appleburg &quot;, &quot;collegeId&quot;: null, &quot;countryId&quot;: 1, &quot;countyId&quot;: 0, &quot;createdDateTime&quot;: &quot;2022/08/10 12:46:03&quot;, &quot;cumulativeGpa&quot;: 4, &quot;cumulativeGpaPoints&quot;: 12, &quot;currencyCodeId&quot;: null, &quot;currentLda&quot;: &quot;2024/01/12 00:00:00&quot;, &quot;dataBlockIndicator&quot;: false, &quot;dateOfBirth&quot;: &quot;1990/03/10 00:00:00&quot;, &quot;dbiModifiedDate&quot;: null, &quot;defaultAddressCode&quot;: null, &quot;defaultMasterStudentAddressId&quot;: null, &quot;defaultStudentAddressId&quot;: null, &quot;disabled&quot;: &quot;&quot;, &quot;driverLicenseNumber&quot;: &quot;&quot;, &quot;driverLicenseState&quot;: &quot;&quot;, &quot;emailAddress&quot;: &quot;chase@pathify.com&quot;, &quot;employabilityAboutInfo&quot;: null, &quot;employerId&quot;: 0, &quot;employmentStatusId&quot;: 0, &quot;externalStudentIdentifier&quot;: null, &quot;extraCurricularActivityId&quot;: 0, &quot;facebookUrl&quot;: null, &quot;faGradPlusCounselingDate&quot;: null, &quot;faRigorousHighSchoolProgramCodeId&quot;: null, &quot;firstName&quot;: &quot;Chase&quot;, &quot;genderId&quot;: 6, &quot;gpaCredits&quot;: 3, &quot;hispanicLatino&quot;: &quot;N&quot;, &quot;hsAcademicGpa&quot;: null, &quot;instagramUrl&quot;: null, &quot;isActive&quot;: true, &quot;isAllowedBulkRegistrationByTrack&quot;: null, &quot;isBadAddress&quot;: false, &quot;isBadPhone&quot;: false, &quot;isClearinghouseDataBlockIndicator&quot;: false, &quot;isDdVeteran&quot;: false, &quot;isEftDefaultForStipends&quot;: false, &quot;isInDistrict&quot;: false, &quot;isSscrError11Received&quot;: false, &quot;lastActivityDate&quot;: null, &quot;lastInterestDate&quot;: null, &quot;lastModifiedDateTime&quot;: &quot;2024/04/03 06:56:56&quot;, &quot;lastModifiedUserId&quot;: 3186, &quot;lastName&quot;: &quot;Williams&quot;, &quot;lastNameFirstFour&quot;: &quot;Will&quot;, &quot;lastStatementBeginDate&quot;: null, &quot;lastStatementCloseDate&quot;: null, &quot;lastStatementDate&quot;: null, &quot;leadDate&quot;: &quot;2022/08/10 12:46:00&quot;, &quot;leadSourceId&quot;: 691, &quot;leadTypeId&quot;: 3, &quot;linkedInUrl&quot;: null, &quot;maidenName&quot;: &quot;&quot;, &quot;maritalStatusId&quot;: 1, &quot;mi&quot;: &quot;E&quot;, &quot;middleName&quot;: &quot;Eratosthenes&quot;, &quot;mobilePhoneNumber&quot;: &quot; &quot;, &quot;nationalityId&quot;: 15, &quot;nickName&quot;: &quot;&quot;, &quot;niStudent&quot;: false, &quot;note&quot;: &quot; &quot;, &quot;originalAssignedAdmissionsRepId&quot;: 66, &quot;originalExpectedStartDate&quot;: null, &quot;originalStartDate&quot;: &quot;2023/08/29 13:44:30&quot;, &quot;otherEmailAddress&quot;: &quot;&quot;, &quot;otherLanguageFirstName&quot;: null, &quot;otherLanguageLastName&quot;: null, &quot;otherLanguageMiddleName&quot;: null, &quot;otherLanguageStudentFullName&quot;: null, &quot;otherPhoneNumber&quot;: &quot;&quot;, &quot;personId&quot;: 853, &quot;phoneNumber&quot;: &quot;(112) 323-4345&quot;, &quot;pin&quot;: 9023, &quot;postalCode&quot;: &quot;75053&quot;, &quot;postalCodeFirstThree&quot;: &quot;750&quot;, &quot;preferredContactType&quot;: &quot;Ph&quot;, &quot;preferredName&quot;: null, &quot;previousEducationGpa&quot;: null, &quot;previousEducationId&quot;: 7, &quot;programGroupId&quot;: 6, &quot;programId&quot;: 10, &quot;rawFirstName&quot;: &quot;Chase&quot;, &quot;rawLastName&quot;: &quot;Williams&quot;, &quot;rawPhoneNumber&quot;: &quot;1123234345&quot;, &quot;rowVersion&quot;: &quot;AAAAAAMotC4=&quot;, &quot;schoolStatusId&quot;: 14, &quot;shiftId&quot;: 2, &quot;smsServiceProviderId&quot;: null, &quot;sourceSystem&quot;: &quot;C&quot;, &quot;ssn&quot;: &quot;343-27-9023&quot;, &quot;startDate&quot;: &quot;2022/08/22 00:00:00&quot;, &quot;state&quot;: &quot;TX&quot;, &quot;statementComment&quot;: &quot; &quot;, &quot;streetAddress&quot;: &quot;46 Applewood Street&quot;, &quot;streetAddress2&quot;: null, &quot;studentFullName&quot;: null, &quot;studentIdentifier&quot;: null, &quot;studentNumber&quot;: &quot;749&quot;, &quot;subscribeToSms&quot;: false, &quot;suffix&quot;: null, &quot;suffixId&quot;: null, &quot;titleId&quot;: 1, &quot;twitterUrl&quot;: null, &quot;veteran&quot;: &quot;&quot;, &quot;workPhoneNumber&quot;: &quot;&quot;, &quot;workPhoneNumberExtension&quot;: &quot;&quot;, &quot;originalState&quot;: &quot;H4sIAAAAAAAEAM1bW2/iOBT+K1Wfdh+AJKQ31KIFSjtoCkWFnZlXkxzgaBwb2U4p8+vXTuns7LTpqvikBUW9KODzxT6X71w47yjFNrfzz7D5wngOt3NtFIoFE5vpZgUHDxkX+uJwacyq1WjoZAkZ0/UMEyW1nJt6IrNGFATNRhg0JqCQcfzBDErRKBbWh48rtPDnGuv1ur5u1qVauA+GjW/Dm0mxbA2FNkwkcNg+L4FT3GgP0vOG+31evOUAW8beujhkLRTmSR77f3mH7aPgKDg9bxTLtIs1S4WWo7lh2lzJXE20KIH1+KE3ITsLoqYvsE6y6HNc3AHTUvRkCr/BE8gvDo3K4bCxu4wFiGRDdiCB9zNzBDHKsxkossPw2B3VSRKZCzMxzOSaTj2+ee+T6jLubK0EUwoJZoy/CVQUngTNs3p0FPgfoxrBg5kqJjRLnDd5/UiXUr1Nz+ITb4Ra40JA2kkztH9Koe9gRWYHx8fe+MySg8FkkIIwOMdnm0dh/V3QZooZTGVPCmNPik7DO2Jj7Mq+29Bj2SrXdAHDGw8a/AGCDFBEAGhDeGqrFYdZrhYHv728YUrOYQHP9o1Ci3vOQyu6IBb6P6wFtEdBtaeAGUgv7Y9pYZMvh4zt7bfpbxBFteC0FgbTMGrFx63Am/b08iznloLew/WKEYa3uB4UL1J8Y2lPs4wY7IIyjOo0IJWygeMmLd3BHU87rgVhLYymQdAqLl+gVilZl8vk+0CkmDAjy0jCTEoOTLwJ75xx7R2CnNnczruozJJyL8Ozs6AWNJ3lkO3lDIcydWShsPUKXO0lzFnOTSdNFWhdUU6yFTK0eRmoickdA9pKrCR+bOW9hyTUbMahLDC8Z2pzqawDUzeYgNCwNwnXf1C5pKssWL0nqH7GkG/Vgo5qJUum4a8VM0ucb1wZxtf6+9mKyw2o/eEdj4gyeMqf9wjZg3UtgvGtzVeaZFlZirl4jInlDapj8+F73Cd6eMWuFUvHPNeOuGrg9g0VxY8rdocLqWSuP+FiaZ/ABvWxkgvFMhdMKnG6V6i0GbFS3ruD7fac7fpu+zWIlNBavSsOls3aRCFFUjrbJGGzn1CvmMDkxtJuIenOceQNTHcSlkKGyfNchUJ3B7pwF2Wquwsndoh8H3uguyx9PSJ+GF0vsI2XUlBuGhGyy/QL2MDDyhoNHwitPzdbHnwlLenGlfVOe3i2A2E5tL1RWqr8QGwTnai+UlKF4R0kYM22zLd/GEjX63oiIBWFeCdiIKyWgzYVivg10a2gqBXXAns1p8Fx68hd9Sj2Lmz9CvtvTRj6m+Gpd/R34GhJ0lfkHFmmqZAVPM41amkhUsArMlWX53RhgaJCrf8pqMelhvcQVJUMYC/VqIhr0d7E08GcWJVLnqcmO/P0M+/+gkPl/qNzIL6IhgxtCk3qP3bXrSFTaFxuT1pz8D61IdI5rr4/mDTlQOvw+4oZqc0SBHg7/aGcIYeCxhMXJ9vUrc1RMS7FOGVNJ/RuVI8w+b4n9jjCbZlt39jwSBLWl9veinSr0LIHxvd9NOUJZ/9hBYmB1DpaVRVPeJJVJsOXMDQdYYjOpmGzFcetpjdhuLXuT1XSMPDYQ4epCle6O6QxKC3ppmhOj7wZTCWh5o8wjP48aFoti5uxt0sfY1ndaJfKLMWE6tiGe8ZfaAN77NnJUUBwmj+BFVnjdKmAFqI3QAVzUArS7eCdu0MHcLwkw/cCh6Dw63b9e5S57qd5UvCnaurnz8SQuRzvAdRt2+tayZwwuBOhoiOy3pZyx9b72sGz0Pa3bGbBVRLTbEizAY0int3J9RfLA6xVliUG9oyO467lf2rztjHW4jWUphdf+KJ8bFJTFxNib1hLnJv9GUOeZHoC6h4TsB7kHl9qbFP488da3GSjDWSEzsD76Sm/OmRtqxad1Cj4WVVZU1FmjeiGQGknvdpT76/X/Ftnl1lWXrn4iCrBxFgua8jH0eLjg2L4fy1levAogxRpVIU3eIfpra0M6ih6Ep95b28+04nCGUzlJNu7Vv0kn8/xoYoDKRauJLpM0XC6pop3w+D1WZH3LNd8ler7fhWQfkPk5jnFK0ySGFrj9S9dt/8BOHl4s5U9AAA=&quot;, &quot;secureState&quot;: &quot;H4sIAAAAAAAEAD3MQQrCMBAAwK9I7mZTeysqeFbpoSJel5C0C01Ssisxvl6s4ANm9qecsfb+7Ood56frPUumOGKst7q4zSvMkQ9qElk6ALaTC8g6kM2JkxdtU4CdMS00BgaXCWd6o1CKsMasfkNH/6OUokurUx6/sIHH9TKs7ZYiC0brFBw/juQnSpcAAAA=&quot;, &quot;extendedProperties&quot;: [], &quot;entityState&quot;: 3 }, &quot;count&quot;: 1 }, &quot;notifications&quot;: [], &quot;hasError&quot;: false, &quot;hasFault&quot;: false, &quot;hasWarning&quot;: false, &quot;hasValidationError&quot;: false, &quot;hasValidationWarning&quot;: false, &quot;hasValidationInformation&quot;: false, &quot;hasSecurityError&quot;: false }  ","version":null,"tagName":"h2"},{"title":"Save Operation​","type":1,"pageTitle":"Tips for using the Get and Save API operations","url":"/docs/student/best-practices/get-save-bestpractices#save-operation","content":"This is the operation that is used to update an instance of the entity. Using the object returned from the call to the Get endpoint above, update the applicable properties with the desired values. Below is an example of a payload for updating an existing instance of the Student entity. A couple of notes. If you are updating any portion of the address or changing the phone number, make sure the studentAddressAssociation property is set to 2. If this is not done, then a validation error message will be returned in the response. Additionally, the entityState property should be set to 2 indicating that the record is being modified. { &quot;payload&quot;: { &quot;isExcludedCrmIntegration&quot;: false, &quot;addressTypeId&quot;: 0, &quot;studentInquiryRequired&quot;: true, &quot;extraCurricularsList&quot;: [], &quot;programsList&quot;: [ 10 ], &quot;enrolledProgramIdList&quot;: [], &quot;ethnicitiesList&quot;: [ 6 ], &quot;leadSourcesList&quot;: [ 691 ], &quot;deleteVeteranDetails&quot;: false, &quot;vendors&quot;: [], &quot;studentAddressAssociation&quot;: 0, &quot;newAssignedAdmissionsRepId&quot;: 0, &quot;assignedAdmissionsRepReassignedDate&quot;: &quot;0001/01/01 00:00:00&quot;, &quot;studentRelationshipAddress&quot;: null, &quot;lastFourSsn&quot;: &quot;9023&quot;, &quot;customProperties&quot;: {}, &quot;multiValueCustomProperties&quot;: {}, &quot;originalCustomPropertiesValues&quot;: null, &quot;originalMultiValueCustomPropertiesValues&quot;: null, &quot;genderPronounList&quot;: [], &quot;overridePrevEducAltPellValidation&quot;: false, &quot;id&quot;: 50508, &quot;acgEligReasonCode&quot;: null, &quot;agencyId&quot;: 0, &quot;alienNumber&quot;: &quot;&quot;, &quot;arAccountStatus&quot;: &quot;X&quot;, &quot;arBalance&quot;: 217039.25, &quot;arNextTransactionNumber&quot;: 47, &quot;assignedAdmissionsRepId&quot;: 66, &quot;athleticIdentifier&quot;: null, &quot;bestTimeToContact&quot;: &quot;Anytime&quot;, &quot;campusId&quot;: 5, &quot;citizenId&quot;: 2, &quot;city&quot;: &quot;Appleburg &quot;, &quot;collegeId&quot;: null, &quot;countryId&quot;: 1, &quot;countyId&quot;: 0, &quot;createdDateTime&quot;: &quot;2022/08/10 12:46:03&quot;, &quot;cumulativeGpa&quot;: 4, &quot;cumulativeGpaPoints&quot;: 12, &quot;currencyCodeId&quot;: null, &quot;currentLda&quot;: &quot;2024/01/12 00:00:00&quot;, &quot;dataBlockIndicator&quot;: false, &quot;dateOfBirth&quot;: &quot;1990/03/10 00:00:00&quot;, &quot;dbiModifiedDate&quot;: null, &quot;defaultAddressCode&quot;: null, &quot;defaultMasterStudentAddressId&quot;: null, &quot;defaultStudentAddressId&quot;: null, &quot;disabled&quot;: &quot;&quot;, &quot;driverLicenseNumber&quot;: &quot;&quot;, &quot;driverLicenseState&quot;: &quot;&quot;, &quot;emailAddress&quot;: &quot;chase@pathify.com&quot;, &quot;employabilityAboutInfo&quot;: null, &quot;employerId&quot;: 0, &quot;employmentStatusId&quot;: 0, &quot;externalStudentIdentifier&quot;: null, &quot;extraCurricularActivityId&quot;: 0, &quot;facebookUrl&quot;: null, &quot;faGradPlusCounselingDate&quot;: null, &quot;faRigorousHighSchoolProgramCodeId&quot;: null, &quot;firstName&quot;: &quot;Chase&quot;, &quot;genderId&quot;: 6, &quot;gpaCredits&quot;: 3, &quot;hispanicLatino&quot;: &quot;N&quot;, &quot;hsAcademicGpa&quot;: null, &quot;instagramUrl&quot;: null, &quot;isActive&quot;: true, &quot;isAllowedBulkRegistrationByTrack&quot;: null, &quot;isBadAddress&quot;: false, &quot;isBadPhone&quot;: false, &quot;isClearinghouseDataBlockIndicator&quot;: false, &quot;isDdVeteran&quot;: false, &quot;isEftDefaultForStipends&quot;: false, &quot;isInDistrict&quot;: false, &quot;isSscrError11Received&quot;: false, &quot;lastActivityDate&quot;: null, &quot;lastInterestDate&quot;: null, &quot;lastModifiedDateTime&quot;: &quot;2024/04/03 06:56:56&quot;, &quot;lastModifiedUserId&quot;: 3186, &quot;lastName&quot;: &quot;Williams&quot;, &quot;lastNameFirstFour&quot;: &quot;Will&quot;, &quot;lastStatementBeginDate&quot;: null, &quot;lastStatementCloseDate&quot;: null, &quot;lastStatementDate&quot;: null, &quot;leadDate&quot;: &quot;2022/08/10 12:46:00&quot;, &quot;leadSourceId&quot;: 691, &quot;leadTypeId&quot;: 3, &quot;linkedInUrl&quot;: null, &quot;maidenName&quot;: &quot;&quot;, &quot;maritalStatusId&quot;: 1, &quot;mi&quot;: &quot;E&quot;, &quot;middleName&quot;: &quot;Eratosthenes&quot;, &quot;mobilePhoneNumber&quot;: &quot; &quot;, &quot;nationalityId&quot;: 15, &quot;nickName&quot;: &quot;&quot;, &quot;niStudent&quot;: false, &quot;note&quot;: &quot; &quot;, &quot;originalAssignedAdmissionsRepId&quot;: 66, &quot;originalExpectedStartDate&quot;: null, &quot;originalStartDate&quot;: &quot;2023/08/29 13:44:30&quot;, &quot;otherEmailAddress&quot;: &quot;&quot;, &quot;otherLanguageFirstName&quot;: null, &quot;otherLanguageLastName&quot;: null, &quot;otherLanguageMiddleName&quot;: null, &quot;otherLanguageStudentFullName&quot;: null, &quot;otherPhoneNumber&quot;: &quot;&quot;, &quot;personId&quot;: 853, &quot;phoneNumber&quot;: &quot;(112) 323-4345&quot;, &quot;pin&quot;: 9023, &quot;postalCode&quot;: &quot;75053&quot;, &quot;postalCodeFirstThree&quot;: &quot;750&quot;, &quot;preferredContactType&quot;: &quot;Ph&quot;, &quot;preferredName&quot;: null, &quot;previousEducationGpa&quot;: null, &quot;previousEducationId&quot;: 7, &quot;programGroupId&quot;: 6, &quot;programId&quot;: 10, &quot;rawFirstName&quot;: &quot;Chase&quot;, &quot;rawLastName&quot;: &quot;Williams&quot;, &quot;rawPhoneNumber&quot;: &quot;1123234345&quot;, &quot;rowVersion&quot;: &quot;AAAAAAMotC4=&quot;, &quot;schoolStatusId&quot;: 14, &quot;shiftId&quot;: 2, &quot;smsServiceProviderId&quot;: null, &quot;sourceSystem&quot;: &quot;C&quot;, &quot;ssn&quot;: &quot;343-27-9023&quot;, &quot;startDate&quot;: &quot;2022/08/22 00:00:00&quot;, &quot;state&quot;: &quot;TX&quot;, &quot;statementComment&quot;: &quot; &quot;, &quot;streetAddress&quot;: &quot;46 Applewood Street&quot;, &quot;streetAddress2&quot;: null, &quot;studentFullName&quot;: null, &quot;studentIdentifier&quot;: null, &quot;studentNumber&quot;: &quot;749&quot;, &quot;subscribeToSms&quot;: false, &quot;suffix&quot;: null, &quot;suffixId&quot;: null, &quot;titleId&quot;: 1, &quot;twitterUrl&quot;: null, &quot;veteran&quot;: &quot;&quot;, &quot;workPhoneNumber&quot;: &quot;&quot;, &quot;workPhoneNumberExtension&quot;: &quot;&quot;, &quot;originalState&quot;: &quot;H4sIAAAAAAAEAM1bW2/iOBT+K1Wfdh+AJKQ31KIFSjtoCkWFnZlXkxzgaBwb2U4p8+vXTuns7LTpqvikBUW9KODzxT6X71w47yjFNrfzz7D5wngOt3NtFIoFE5vpZgUHDxkX+uJwacyq1WjoZAkZ0/UMEyW1nJt6IrNGFATNRhg0JqCQcfzBDErRKBbWh48rtPDnGuv1ur5u1qVauA+GjW/Dm0mxbA2FNkwkcNg+L4FT3GgP0vOG+31evOUAW8beujhkLRTmSR77f3mH7aPgKDg9bxTLtIs1S4WWo7lh2lzJXE20KIH1+KE3ITsLoqYvsE6y6HNc3AHTUvRkCr/BE8gvDo3K4bCxu4wFiGRDdiCB9zNzBDHKsxkossPw2B3VSRKZCzMxzOSaTj2+ee+T6jLubK0EUwoJZoy/CVQUngTNs3p0FPgfoxrBg5kqJjRLnDd5/UiXUr1Nz+ITb4Ra40JA2kkztH9Koe9gRWYHx8fe+MySg8FkkIIwOMdnm0dh/V3QZooZTGVPCmNPik7DO2Jj7Mq+29Bj2SrXdAHDGw8a/AGCDFBEAGhDeGqrFYdZrhYHv728YUrOYQHP9o1Ci3vOQyu6IBb6P6wFtEdBtaeAGUgv7Y9pYZMvh4zt7bfpbxBFteC0FgbTMGrFx63Am/b08iznloLew/WKEYa3uB4UL1J8Y2lPs4wY7IIyjOo0IJWygeMmLd3BHU87rgVhLYymQdAqLl+gVilZl8vk+0CkmDAjy0jCTEoOTLwJ75xx7R2CnNnczruozJJyL8Ozs6AWNJ3lkO3lDIcydWShsPUKXO0lzFnOTSdNFWhdUU6yFTK0eRmoickdA9pKrCR+bOW9hyTUbMahLDC8Z2pzqawDUzeYgNCwNwnXf1C5pKssWL0nqH7GkG/Vgo5qJUum4a8VM0ucb1wZxtf6+9mKyw2o/eEdj4gyeMqf9wjZg3UtgvGtzVeaZFlZirl4jInlDapj8+F73Cd6eMWuFUvHPNeOuGrg9g0VxY8rdocLqWSuP+FiaZ/ABvWxkgvFMhdMKnG6V6i0GbFS3ruD7fac7fpu+zWIlNBavSsOls3aRCFFUjrbJGGzn1CvmMDkxtJuIenOceQNTHcSlkKGyfNchUJ3B7pwF2Wquwsndoh8H3uguyx9PSJ+GF0vsI2XUlBuGhGyy/QL2MDDyhoNHwitPzdbHnwlLenGlfVOe3i2A2E5tL1RWqr8QGwTnai+UlKF4R0kYM22zLd/GEjX63oiIBWFeCdiIKyWgzYVivg10a2gqBXXAns1p8Fx68hd9Sj2Lmz9CvtvTRj6m+Gpd/R34GhJ0lfkHFmmqZAVPM41amkhUsArMlWX53RhgaJCrf8pqMelhvcQVJUMYC/VqIhr0d7E08GcWJVLnqcmO/P0M+/+gkPl/qNzIL6IhgxtCk3qP3bXrSFTaFxuT1pz8D61IdI5rr4/mDTlQOvw+4oZqc0SBHg7/aGcIYeCxhMXJ9vUrc1RMS7FOGVNJ/RuVI8w+b4n9jjCbZlt39jwSBLWl9veinSr0LIHxvd9NOUJZ/9hBYmB1DpaVRVPeJJVJsOXMDQdYYjOpmGzFcetpjdhuLXuT1XSMPDYQ4epCle6O6QxKC3ppmhOj7wZTCWh5o8wjP48aFoti5uxt0sfY1ndaJfKLMWE6tiGe8ZfaAN77NnJUUBwmj+BFVnjdKmAFqI3QAVzUArS7eCdu0MHcLwkw/cCh6Dw63b9e5S57qd5UvCnaurnz8SQuRzvAdRt2+tayZwwuBOhoiOy3pZyx9b72sGz0Pa3bGbBVRLTbEizAY0int3J9RfLA6xVliUG9oyO467lf2rztjHW4jWUphdf+KJ8bFJTFxNib1hLnJv9GUOeZHoC6h4TsB7kHl9qbFP488da3GSjDWSEzsD76Sm/OmRtqxad1Cj4WVVZU1FmjeiGQGknvdpT76/X/Ftnl1lWXrn4iCrBxFgua8jH0eLjg2L4fy1levAogxRpVIU3eIfpra0M6ih6Ep95b28+04nCGUzlJNu7Vv0kn8/xoYoDKRauJLpM0XC6pop3w+D1WZH3LNd8ler7fhWQfkPk5jnFK0ySGFrj9S9dt/8BOHl4s5U9AAA=&quot;, &quot;secureState&quot;: &quot;H4sIAAAAAAAEAD3MQQrCMBAAwK9I7mZTeysqeFbpoSJel5C0C01Ssisxvl6s4ANm9qecsfb+7Ood56frPUumOGKst7q4zSvMkQ9qElk6ALaTC8g6kM2JkxdtU4CdMS00BgaXCWd6o1CKsMasfkNH/6OUokurUx6/sIHH9TKs7ZYiC0brFBw/juQnSpcAAAA=&quot;, &quot;extendedProperties&quot;: [], &quot;entityState&quot;: 3 } }  ","version":null,"tagName":"h2"},{"title":"Additional notes:​","type":1,"pageTitle":"Tips for using the Get and Save API operations","url":"/docs/student/best-practices/get-save-bestpractices#additional-notes","content":"","version":null,"tagName":"h2"},{"title":"Implementation of Save operation​","type":1,"pageTitle":"Tips for using the Get and Save API operations","url":"/docs/student/best-practices/get-save-bestpractices#implementation-of-save-operation","content":"Not every entity has the Save operation implemented. As a general rule you can use to determine if the Save operation is implemented is to look at the other operations for that entity in the Swagger documentation. If there is another operation listed that has a summary description related to updating existing records then the Save operation should not be utilized. If you have any doubts, please send an email to Developers@anthology.com requesting clarification on which endpoint to use for updating an existing record for an entity. ","version":null,"tagName":"h3"},{"title":"EntityState property​","type":1,"pageTitle":"Tips for using the Get and Save API operations","url":"/docs/student/best-practices/get-save-bestpractices#entitystate-property","content":"EntityState is a property that exists on the base entity class that every entity inherits from. This is an enum property with the following valid values: 0= Record is being added 1= Record is being deleted 2= Record is being modified 3= Record is unchanged  The value provided in this property may or may not impact the execution logic of the API you are calling. The use of this property in the API execution logic is not consistent across all of the Delete, Save and SaveNew operations. It is recommended that this property be populated correctly to align with the action that is occurring to ensure expected behavior in the API if there is dependent execution logic on this property. Contributors on this article: Jim Burns Senior Application ArchitectAnthology Student ","version":null,"tagName":"h3"},{"title":"Payment Partner Overview","type":0,"sectionRef":"#","url":"/docs/student/best-practices/studentapi-paymentpartner-overview","content":"","keywords":"","version":null},{"title":"Common Payment vendor use cases​","type":1,"pageTitle":"Payment Partner Overview","url":"/docs/student/best-practices/studentapi-paymentpartner-overview#common-payment-vendor-use-cases","content":"Common integration use cases between a payment vendor and Anthology Student are: Post PaymentsPost Charges and AdjustmentsApply posted paymentsProcess/post scheduled refundsCreate a payment planUpdate an existing payment planPost misc cash receipt transactions that are not associated to a student ledger card in the SIS. This section will outline the API endpoint(s) that can be used to satisfy each of these use cases. Additional details relevant to the execution logic for each API will be included. To see additional details for the APIs within Student, access the Swagger output. This can be done while logged into the Student web application. Append 'swagger' to the base URI used to launch the Student application. For purposes of this document, all of the APIs that will be referenced can be found in the Swagger output by using the Type filter. Choose &quot;Integration&quot; from this drop down and click Refresh. All of the APIs referenced in this document will be documented in the Student Accounting and Student Payment Plan sections.   ","version":null,"tagName":"h2"},{"title":"Post Payment​","type":1,"pageTitle":"Payment Partner Overview","url":"/docs/student/best-practices/studentapi-paymentpartner-overview#post-payment","content":"The most basic use case for an integration between a payment provider and Anthology Student is to be able to process a payment within the payment vendor application and then post that payment to the student's ledger card within Anthology Student. At a high level, there are two different kinds of payments within the Student application. The first is a payment that is not associated with expected funding and the second is a payment that is associated to an expected disbursement. One of the features in Student is the ability to package a student for Financial Aid which results in a list of scheduled disbursements being created. Included in this are Student payment plans. A student payment plan will have 1 or more expected payments/installments created as part of the payment plan data. When posting a payment that is made against a payment plan, the payment will be &quot;associated&quot; with the expected disbursement record. Regardless of whether the payment being posted is for an expected disbursement or is not associated to an expected disbursement, the same API endpoint will be used. There are properies in the request payload that inform the API execution logic as to if the payment being posted is associated to an expected disbursement record or is not associated to an expected disbursement record. The API to use for posting payments is POST api/student-accounting/ledger-payment-transactions  Installment on Payment Plan​ If a payment is being posted for an expected installment on a payment plan, then the request payload will include this information either by providing the Id of the expected installment record the payment is for (ScheduledDisbursementId property) or setting the UseNextScheduledPayment property to true. If this is not done in the request, then the API execution logic will assume that the payment being posted is NOT for an expected disbursement. If UseNextScheduledPayment property is true, then the payment being posted will be associated to the expected disbursement record for the payment plan that has a status of scheduled and the earliest expected payment date. If the amount of the payment being posted does not match the amount of the expected disbursement it is being associated to, then the expected payment schedule will be auto adjusted accordingly. If the amount of payment is less than the amount of the expected disbursement, then a new expected disbursement record with a status of scheduled will be created with an amount that is the difference between the amount that was expected and the payment amount. If the amount of the payment being posted is greater than the the amount of the expected payment it is being associated to, then the difference will be applied to the next expected payment. See examples below: Expected payment schedule: Payment # Expected Amount Expected Date Paid Amount Status 1 $100 04/01/2024 $0 Scheduled 2 $100 05/01/2024 $0 Scheduled 3 $100 06/01/2024 $0 Scheduled Payment is posted and is associated to Expected payment # 1 above. Payment amount is $125. Payment schedule after API execution completes is as follows: Payment # Expected Amount Expected Date Paid Amount Status 1 $100 04/01/2024 $100 Paid 2 $25 05/01/2024 $25 Paid 2 $75 05/01/2024 $0 Scheduled 3 $100 06/01/2024 $0 Scheduled Payment is posted and is associated to Expected payment # 1 above. Payment amount is $75. Payment schedule after API execution completes is as follows: Payment # Expected Amount Expected Date Paid Amount Status 1 $75 04/01/2024 $75 Paid 1 $25 04/01/2024 $0 Scheduled 2 $75 05/01/2024 $0 Scheduled 3 $100 06/01/2024 $0 Scheduled The above auto adjust logic will execute as part of the post payment transaction unit of work. If the Payment vendor application creates and manages payment plans for students and is considered the system of record for payment plans, then the Payment Plan APIs will be utilized to push the payment plan data into Student. These APIs are designed to allow for data to be pushed into Student and replace the expected payment plan data that is auto adjusted per logic explained above keeping the payment plan data in Student synchronized with the payment plan data in the Payment provider data store. Cashiering​ If the school is using the Cashiering feature in Anthology Student, then a couple of additional properties in the request payload will be required. The Cashiering feature is enabled by campus. To see if cashiering is enabled for a given campus, navigate to Settings - System - Campuses. Select the campus you want to check. Choose the Student Accounts tile. The setting will be on the General tab.  As a best practice, it is recommended that a cash drawer be created for exclusive use by the payment provider. After creating the cash drawer, create a cash drawer session and associate it to the user that the payment provider will be authenticating under. This user needs to be configured as a cashier user within the Staff configuration. Once the Cash Drawer is created then the Id of the Cash Drawer is the value that will be used for the CashDrawerId property in the post payment request payload. There is also the option to just create the Cash Drawer record without creating the cash drawer session. For this to work, a CashierUserId must also be specified when executing the post payment API. This Id would be the Id of the Staff user the API call is being authenticated under. ","version":null,"tagName":"h3"},{"title":"Post Charges or Adjustments​","type":1,"pageTitle":"Payment Partner Overview","url":"/docs/student/best-practices/studentapi-paymentpartner-overview#post-charges-or-adjustments","content":"Another common use case is to be able to post charges and/or adjustments to a student's ledger card. Many times a student will be making a payment for a fee that is charged via the Payment Vendor application. There also may be some instances where a credit adjustment will need to be posted to a student's ledger card as well. The API to use for posting charges and credit adustments is POST api/student-accounting/ledger-chargeoradjustment-transactions  The minimum required properties for this payload are StudentId, BillingTransactionCodeId, Type, TransactionAmount, TransactionDate and Description. Other properties are conditionally required dependent on Student configuration settings. For example, TermId may be required if the setting to require term when posting charges is set to true. Other time period based properties (StudentAcademcYearId, StudentAcademicYearPaymentPeriodId) may or may not need to be provided depending on the time frame(s) that the school bases revenue/refund calculations on. Clarifying if/how to populate these properties in the payload will likely need to be worked out on a case by case basis via collaboration with the institution being worked with. ","version":null,"tagName":"h3"},{"title":"Apply Posted Payments​","type":1,"pageTitle":"Payment Partner Overview","url":"/docs/student/best-practices/studentapi-paymentpartner-overview#apply-posted-payments","content":"The apply payments endpoint is used when there is a need to explicitly specify which charge/adjustment transactions a given payment transaction will be applied to. Anthology has a feature that allows for payments to be automatically applied to charge and adjustment transactions using the auto apply configuration. If all of the institutions requrements for how payments should be applied to charges are satisfied via the configuration, then this endpoint is not needed. However, if there are cases, where the rules for how to apply payments are not fully covered via the auto payment apply configuration OR the setting to auto apply payments is turned off, then there may be a need to utilize this endpoint. If/how this endpoint is utilized will need to be clarified with the institution being worked with. The API to use for applying payments is POST api/student-accounting/ledger-transactions-applypayments  The request payload for this API is pretty straight forward. The payment or credit adjustment transaction you are applying is specified along with the charge/debit adjustment transaction ids you are applying the payment/credit adjustment transaction to. There is built in validation logic that will not allow you to apply an amount that is greater than the amount left to apply for a given charge/debit adjustment transaction. IMPORTANT: If the institution has the setting to auto apply payments on, and a payment is applied using this API, a flag will be set on the payment and charge transactions specifying that manual applyment was done. This will prevent the applied transaction data from being overwritten by subsequent auto applyment processes that execute. The only way to edit this information will be via the manual apply page within the Student web client UI. ","version":null,"tagName":"h3"},{"title":"Process and Post Scheduled Refunds​","type":1,"pageTitle":"Payment Partner Overview","url":"/docs/student/best-practices/studentapi-paymentpartner-overview#process-and-post-scheduled-refunds","content":"Many Payment providers have a capability for processing refunds that are scheduled. The concept is similar to the payment plan installment payments discussed above. A refund is owed to a student, the refund is scheduled in the Student application and then that refund is paid on or before the refund due date. The high level flow of this use case for Payment providers who process refunds is as follows: Retrieve batch of refunds that are due to be paid and need to be processedFlag the scheduled refund records that were retrieved indicating that these refunds have been selected for processingProcess the refunds in the Payment provider softwarePost the refunds as processed back into the Student application Retrieve scheduled refunds​ The first step is to retrieve the scheduled refunds that need to be processed. The best way to do this is to constuct an odata query to retrieve the needed information. The scheduled refunds will reside in the Refunds entity. One of the filters needed in the query will be on the Status property. A value of 'N' in the Status property indicates that the refund is scheduled but has not yet been processed/paid. Other valid values for this property are P= Processed/Paid, V= Was paid but has since been Voided and S= Selected for Processing. The other key filters needed in the OData query will be on the DueDate property which indicates the date that the refund is due. Also, there will likely need to be filtering based on the fund source the refund is for. In many cases, refunds that are being returned to Title IV fund sources are not processed by Payment providers. The StudentAward navigation property on the Refunds entity will need to be utilized to construct the filtering condition needed to filter on the fund source(s) that should be included. Flag the selected refund records​ The next step after selecting the refunds to be processed is to utilize an API to mark these refunds as selected for processing. This is critical to ensure the refunds retrieved in the prior step are not eligible to be processed within the Student application and/or included in a subsequent query for retrieving refunds to be processed. There is an API that allows for manipulation of the Status property on the Refunds entity. The API to use for setting the Status value on the Refund entity is PATCH api/student-accounting/scheduled-refunds-status  This API is very easy to use. There are only two units of work that occur. Change the Status on the Refund entity row from N to S or change the Status on the Refund row from S to N. There may be some times where for whatever reason the processing of the refund in the Payment provider application was not successful. For these cases, where the refund is not able to be processed in the Payment provider software, the Status on that scheduled refund record will need to be changed from Selected for processing back to Not Processed. Post the Processed/Paid Refunds​ After the refunds have been processed in the Payment Provider application, these refunds need to be posted in Student utilizing an API. The API to use for posting these scheduled refunds is POST api/student-accounting/ledger-scheduled-refund-transactions  It is important to note that there is another API that allows for posting refunds. However, this API is used when posting a refund to a student's ledger card that is NOT scheduled. If there is a need to post a refund that is not scheduled and has no row in the Refunds entity then use the POST api/student-accounting/ledger-refund-transactions endpoint. The request payload for posting scheduled refunds is a collection allowing for all refunds that have been processed in the Payment provider application to be posted via a single API call. The key property that must be specified in the request for each refund posted is the RefundId value which identifies the row in the Refund entity that has been paid/posted. The high level unit of work that will occur within the execution of this API will be to post a refund transaction on the student's ledger card AND also update the Status on the Refund entity row from Selected for processing to P= Processed/Paid. The response returned will be a collection having one element for each element that was provided in the request. The success/failure for each individual refund record provided in the request will be articulated in the response. ","version":null,"tagName":"h3"},{"title":"Create a payment plan​","type":1,"pageTitle":"Payment Partner Overview","url":"/docs/student/best-practices/studentapi-paymentpartner-overview#create-a-payment-plan","content":"Another common use case for Payment providers is to create and manage payment plans for Students. If the payment plan data is persisted in the Payment provider data store, then the Payment Provider application will be considered the system of record for student payment plan data. Because there are numerous reports and other processes in Student that have a dependency on ALL expected funding to be represented for a student, it is imperative that the payment plan data stored in Anthology Student is kept in synch with the payment plan data in the Payment Provider software. The create payment plan and update existing payment plan APIs will be used for this purpose. The API to use for creating a new payment plan in Anthology Student is POST api/student-accounting/student-payment-plan  Payment Plans can be interest bearing or non-interest bearing plans in Anthology Student. Several properties in the request payload can be ignored for non-interest bearing payment plans. The request payload needed should be able to be created fairly easily by using the property level documentation found in the swagger output. ","version":null,"tagName":"h3"},{"title":"Update an existing payment plan​","type":1,"pageTitle":"Payment Partner Overview","url":"/docs/student/best-practices/studentapi-paymentpartner-overview#update-an-existing-payment-plan","content":"This API will be used to ensure existing payment plans are kept in sync between the Payment provider application and Anthology Student. A very common use case is when a student makes an installment payment but the amount of the payment does not match the amount of the expected installment. In these cases, the remainder of the expected payment schedule needs to be adjusted. Assuming the Payment Provider application is the system of record, this adjustment would occur in the Payment provider application. The resulting data would then be pushed into Anthology Student using the API to update an existing payment plan. The API to use for updating an existing payment plan in Anthology Student is PATCH api/student-accounting/student-payment-plan  One of the key capabilities with this API is to be able to remove ALL expected payments for a payment plan and replace them with the scheduled payments that are specified in the request. The IsScheduledPaymentsRemoved property in the request is used for this purpose. It is important to note that ONLY rows with a Status of S or C in the payment plan expected payments entity (ScheduledDisbursements) can be removed. Any expected disbursement record that has been marked as Paid will not be touched. The request payload has property level documentation and should be reviewed carefully as a guide for constructing the desired request payload for this API. ","version":null,"tagName":"h3"},{"title":"Post misc cash receipts​","type":1,"pageTitle":"Payment Partner Overview","url":"/docs/student/best-practices/studentapi-paymentpartner-overview#post-misc-cash-receipts","content":"Another common use case is the need to post transactions in Anthology Student that will not appear on an individual student's ledger card. These transactions are labeled in Anthology Student as miscellaneous cash receipts. The API to use for posting a miscellaneous cash receipt is POST api/student-accounting/misc-cash-receipts  One of the required properties for the request is to specify the transaction billing code that the misc cash receipt will be applied to. This controls how the transaction will ultimately be posted to the general ledger. Not all transaction billing codes are eligible to be used when posting miscellaneous cash receipts. Validation logic in this API requires that the transaction billing code specified in the request has been configured in Student to be able to be used for miscellaneous cash receipt posting. An OData query can be used to retrieve the transaction billing codes that are able to be used for miscellaneous cash receipt posting. The entity to query is BillingTransactionCodes. All rows from this entity where Usage is equal to M or A can be used. There is also a PATCH endpoint that allows for updating a previously posted miscellaneous cash receipt transaction. Validation is in place that will not allow any updates to a miscellaneous cash receipt transaction that has already been release to the general ledger. ","version":null,"tagName":"h3"},{"title":"Authorization​","type":1,"pageTitle":"Payment Partner Overview","url":"/docs/student/best-practices/studentapi-paymentpartner-overview#authorization","content":"In order to execute the APIs that have been discussed above, proper authorization needs to be configured. Whether using Basic Auth or OAuth with application key to authenticate, the user context the APIs are executing under will be a user record from the Staff entity. This is the user that authorization needs to be configured for. Access to the security console application is needed in order to set the needed permissions. Unlike the Anthology Student command APIs, the API endpoints discussed above have separate explicit tasks that need to be authorized. The Anthology Student command APIs are coupled with UI tasks. In order to properly authorize an API user to execute a command API, the applicable UI task needs to be identified and added for that user. For the APIs discussed in this document that exercise is not needed. Details are outlined below. Within the Security console, the API - Student Accounting and API - Student Payment Plan tasks should be added for the user. These 2 tasks will authorize the user to execute every operation contained within the Student Accounting and Student Payment Plan sections within the swagger document. If more refined permissions are needed and you want to authorize the execution of specific operations with Student Accounting or Student Payment Plan, then the applicable individual operations will need to be authorized. Typically, this level of granularity is not needed and authorizing the two tasks mentioned above is all that is needed.  For any OData queries that will be executed, additional authorization is needed. The authorization model for the odata endpoint is to either grant permission to query all entities contained within the data model or to authorize each individual entity that data will be extracted from. Currently there are no tasks available for authorizing by business area of domain. Best practice is to NOT authorize access to the entire query data model so it will be necessary to create an inventoried list of each entity that data will be retrieved from and add the applicable operation for the user. In order to authorize at the operation level, select the role that the user is a member of. Then select Add Permissions. On the resulting page that is displayed, check the Show Operations checkbox. To make the resulting list easier to navigate, you may want to uncheck the Show Tasks, Show Built In Tasks and Show Roles check boxes. Click Apply.  All of the odata query model operations are named as follows: domain + entity name (singluar) + query. So to authorize the permission to retrieve data from the BillingCodeTransaction entity, the StudentAccounts.BillingTransactionCode.Query operation would need to be added for the user.  Once all query model operations for the list of entities are added for the user, then the authorization permissions should be complete for the user being authenticated when executing the APIs/OData queries. ","version":null,"tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"Payment Partner Overview","url":"/docs/student/best-practices/studentapi-paymentpartner-overview#conclusion","content":"The purpose of this document is to provide enough information to provide a Payment provider new to Anthology Student a jump start on building an integration that satisfy common integration requirements. This document is not intended to include all of the finer points and nuances for utilizing the APIs that have been covered. If there are questions after reviewing this document and the corresponding swagger documentation, you can submit any questions by sending an email to developers@anthology.com. Contributors on this article: Jim Burns Senior Application ArchitectAnthology Student ","version":null,"tagName":"h2"},{"title":"Using the SaveStudentTransferCredit command API","type":0,"sectionRef":"#","url":"/docs/student/best-practices/studentapi-savestudenttransfercredit-details","content":"","keywords":"","version":null},{"title":"Swagger documentation​","type":1,"pageTitle":"Using the SaveStudentTransferCredit command API","url":"/docs/student/best-practices/studentapi-savestudenttransfercredit-details#swagger-documentation","content":"To access the Swagger documentation, append 'swagger' to the end of the base URI that is used to launch the Anthology Student web client application. Once the Swagger landing page is loaded, use the Domain and Functional Area drop down filters at the top of the swagger page to access the documentation for the save transfer credit endpoint. Select 'Admissions' for Domain and 'Student Transfer Credit' for Functional Area and then select Refresh. Then click the lightning bolt icon to see the command API endpoints for the StudentTransferCredit entity.  When the list of available operations is displayed, select the SaveStudentTransferCredit operation. NOTE: Do not use the SaveAdvanceStudentTransferCredit endpoint. This API is not fully implemented and will not provide the desired result of saving student transfer credit data.  ","version":null,"tagName":"h2"},{"title":"Request payload​","type":1,"pageTitle":"Using the SaveStudentTransferCredit command API","url":"/docs/student/best-practices/studentapi-savestudenttransfercredit-details#request-payload","content":"The high level data model for persisting transfer credit data consists of 3 main entities. The StudentTransferCredit entity is the header record for the transfer credit information. This entity will store the summary of the transfer credit record such as College or High School the external courses were completed at, overall status of the transfer credit record and the transfer credit type. This entity also includes 2 child entities as part of its definition. StudentTransferCreditMultipleExternalCourse is the entity that contains 1 or more rows for each course the student completed at the external institution. The StudentTransferCreditMultipleInternalCourse entity will contain 1 or more rows for the instiitution courses that the external courses are satisfying. You will see that these are defined as collection properties within the request payload. -- StudentTransferCreditExternalCourseList and StudentTransferCreditInternalCourseList. You will see properties on the StudentTransferCredit entity that are deprecated and no longer used. The original implementation of the Student Transfer Credit feature in Anthology Student did not have child tables defined for recording external course work and the internal courses that the external course work was satisfying. Instead a row would exist in the StudentTransferCredit entity for each external course that was taken. For this reason, the following properties on the StudentTransferCredit entity can be ignored as they are no longer used: - CollegeCourseId - CollegeId - LetterGrade - CourseId - CreditHoursEarned - CollegeCourseLetterGrade - CollegeCourseCreditHoursAttempted - CollegeCourseClockHoursAttempted - CollegeCourseGradePoints - CollegeCourseCreditHoursEarned - CollegeCourseClockHoursEarned - CollegeCourseStartDate - ClockHours - ClockHoursEarned - HighSchoolCourseId - HighSchoolId  All of the details for the external course work taken will reside on the ExternalCourses child entity collection property. All of the details for the internal courses that that the external course work is satisfying will reside on the InternalCourses child entity collection property. IMPORTANT NOTE: When looking at the request payload documentation in Swagger, you will see the StudentTransferCreditEntity defined as a property in the StudentTransferCreditExternalCourseList property AND the StudentTransferCreditInternalCourseList property. This should be completely ignored and not populated as part of the request. Anything populated in the StudentTransferCreditEntity properties is ignored in the API execution logic. An example payload for this API is below. approvedDate: null isApproved: false rowVersion: null studentEnrollmentPeriodId: 961 studentId: 50873 studentTransferCreditExternalCourseList: 0: { collegeCourseClockHours: null collegeCourseClockHoursAttempted: null collegeCourseClockHoursEarned: null collegeCourseCreditHoursAttempted: 0 collegeCourseCreditHoursEarned: 0 collegeCourseCredits: 0 collegeCourseGrade: &quot;A&quot; collegeCourseGradePoints: 0 collegeCourseId: 8 collegeCourseStartDate: &quot;2023/12/01 00:00:00&quot; collegeId: 4 completionDate: &quot;2023/12/31 00:00:00&quot; entityState: 0 highSchoolCourseId: null highSchoolId: null id: -1} 1: { collegeCourseClockHours: 0 collegeCourseClockHoursAttempted: 0 collegeCourseClockHoursEarned: 0 collegeCourseCreditHoursAttempted: 3 collegeCourseCreditHoursEarned: 3 collegeCourseCredits: 3 collegeCourseGrade: &quot;B&quot; collegeCourseGradePoints: 0 collegeCourseId: 7 collegeCourseStartDate: &quot;2022/09/01 00:00:00&quot; collegeId: 3 completionDate: &quot;2022/10/31 00:00:00&quot; entityState: 0 highSchoolCourseId: null highSchoolId: null id: -1} studentTransferCreditId: -1 studentTransferCreditInternalCourseList: 0: { courseId: 10 credits: 3 entityState: 0 hours: 0 id: -1} termId: null transferCreditStatusId: &quot;1&quot; transferCreditTypeId: &quot;4&quot; In the example, there are 2 external courses taken that are satisfying the requirements for 1 internal course. The TransferCreditStatusId property value will determine if the student's degree progress audit and transcript data will be updated when the API executes. The Transfer Credit Status table is reference data that is configured by the instituion. Any number of statuses can be configured that can be used to track the transfer credit process (i.e. Transfer credits are submitted, transfer credits are being reviewed, transfer credit is approved etc.). Each row in the Transfer Credit Status reference data entity has a boolean property called IsApproved. If the IsApproved attribute is true for the TransferCreditStatusId property value specified in the request, then the execution logic will perform the needed updates so that there is a Transfer grade recorded for the internal course Id provided and also update the degree progress audit data so that the requirement of taking the internal course Id shows as Fulfilled when generating the students Degree Progress Audit. ","version":null,"tagName":"h2"},{"title":"Additional notes:​","type":1,"pageTitle":"Using the SaveStudentTransferCredit command API","url":"/docs/student/best-practices/studentapi-savestudenttransfercredit-details#additional-notes","content":"","version":null,"tagName":"h2"},{"title":"Authorization required for this API endpoint​","type":1,"pageTitle":"Using the SaveStudentTransferCredit command API","url":"/docs/student/best-practices/studentapi-savestudenttransfercredit-details#authorization-required-for-this-api-endpoint","content":"In order to be able to execute this API endpoint, the user that the API call is authenticating under must have the Academics - Student Transfer Credit - New task included in the list of tasks/operations that the user is authorized to. This is done from the security console application.  ","version":null,"tagName":"h3"},{"title":"Optional properties in request payload​","type":1,"pageTitle":"Using the SaveStudentTransferCredit command API","url":"/docs/student/best-practices/studentapi-savestudenttransfercredit-details#optional-properties-in-request-payload","content":"There are a number of properties in the request payload that are optional. The nuances of if/how to populate these will need to be determine via iterative testing and validation with the client. The sample request payload provided above can be used as a starting point but will likely need to be fine tuned in order to satisfy all requirements for recording student transfer credit data. If there are questions after reviewing this document and the corresponding swagger documentation, you can submit them by sending an email to developers@anthology.com. Contributors on this article: Jim Burns Senior Application ArchitectAnthology Student ","version":null,"tagName":"h3"},{"title":"Tips for using the Create and SaveNew API operations","type":0,"sectionRef":"#","url":"/docs/student/best-practices/create-savenew-bestpractices","content":"","keywords":"","version":null},{"title":"Swagger documentation​","type":1,"pageTitle":"Tips for using the Create and SaveNew API operations","url":"/docs/student/best-practices/create-savenew-bestpractices#swagger-documentation","content":"The use case that will be used as an example in this document will be to insert a new record into the Student entity. The list of available API endpoints that can be used for the Student entity are shown below. Using the Create and SaveNew endpoints will be covered in this document.   ","version":null,"tagName":"h2"},{"title":"Create Operation​","type":1,"pageTitle":"Tips for using the Create and SaveNew API operations","url":"/docs/student/best-practices/create-savenew-bestpractices#create-operation","content":"The first step will be to execute this operation for the entity you are adding a new record for. There is no request payload to provide. The sole purpose of this operation is to return an instance of the entity. Additionally, if there is a constructor method implemented for this entity, then some of the properties will be assigned default values. Since the request payload for ALL SaveNew endpoints is the entity itself, the use of this endpoint provides a simple way to obtain an instantiated instance of the entity object that you will use as the request when calling the SaveNew endpoint for the entity. Additionally, any default values specified in the constructor method for the entity will be assigned to the applicable properties of the entity. Even if no constructor method is implemented, you will still benefit from using this to instantiate an empty instance of the entity you are adding a record for. Below is the response received when executing the Create endpoint. Copy/Paste the section of the response below that is inside the “data” element. This will be your starting payload for the SaveNew endpoint. { &quot;payload&quot;: { &quot;data&quot;: { &quot;isExcludedCrmIntegration&quot;: false, &quot;addressTypeId&quot;: 0, &quot;studentInquiryRequired&quot;: true, &quot;extraCurricularsList&quot;: [], &quot;programsList&quot;: [], &quot;enrolledProgramIdList&quot;: [], &quot;ethnicitiesList&quot;: [], &quot;leadSourcesList&quot;: [], &quot;deleteVeteranDetails&quot;: false, &quot;vendors&quot;: [], &quot;studentAddressAssociation&quot;: 0, &quot;newAssignedAdmissionsRepId&quot;: 0, &quot;assignedAdmissionsRepReassignedDate&quot;: &quot;0001/01/01 00:00:00&quot;, &quot;studentRelationshipAddress&quot;: null, &quot;lastFourSsn&quot;: null, &quot;customProperties&quot;: {}, &quot;multiValueCustomProperties&quot;: {}, &quot;originalCustomPropertiesValues&quot;: null, &quot;originalMultiValueCustomPropertiesValues&quot;: null, &quot;genderPronounList&quot;: [], &quot;overridePrevEducAltPellValidation&quot;: false, &quot;id&quot;: -1, &quot;acgEligReasonCode&quot;: null, &quot;agencyId&quot;: 0, &quot;alienNumber&quot;: &quot;&quot;, &quot;arAccountStatus&quot;: &quot;X&quot;, &quot;arBalance&quot;: 0, &quot;arNextTransactionNumber&quot;: 0, &quot;assignedAdmissionsRepId&quot;: 0, &quot;athleticIdentifier&quot;: null, &quot;bestTimeToContact&quot;: &quot;Anytime&quot;, &quot;campusId&quot;: 0, &quot;citizenId&quot;: 0, &quot;city&quot;: &quot;&quot;, &quot;collegeId&quot;: null, &quot;countryId&quot;: 0, &quot;countyId&quot;: 0, &quot;createdDateTime&quot;: &quot;2024/03/13 14:17:21&quot;, &quot;cumulativeGpa&quot;: null, &quot;cumulativeGpaPoints&quot;: null, &quot;currencyCodeId&quot;: null, &quot;currentLda&quot;: null, &quot;dataBlockIndicator&quot;: false, &quot;dateOfBirth&quot;: null, &quot;dbiModifiedDate&quot;: null, &quot;defaultAddressCode&quot;: null, &quot;defaultMasterStudentAddressId&quot;: null, &quot;defaultStudentAddressId&quot;: null, &quot;disabled&quot;: &quot;X&quot;, &quot;driverLicenseNumber&quot;: &quot;&quot;, &quot;driverLicenseState&quot;: &quot;&quot;, &quot;emailAddress&quot;: &quot;&quot;, &quot;employabilityAboutInfo&quot;: null, &quot;employerId&quot;: 0, &quot;employmentStatusId&quot;: 0, &quot;externalStudentIdentifier&quot;: null, &quot;extraCurricularActivityId&quot;: 0, &quot;facebookUrl&quot;: null, &quot;faGradPlusCounselingDate&quot;: null, &quot;faRigorousHighSchoolProgramCodeId&quot;: null, &quot;firstName&quot;: null, &quot;genderId&quot;: 0, &quot;gpaCredits&quot;: null, &quot;hispanicLatino&quot;: null, &quot;hsAcademicGpa&quot;: null, &quot;instagramUrl&quot;: null, &quot;isActive&quot;: true, &quot;isAllowedBulkRegistrationByTrack&quot;: null, &quot;isBadAddress&quot;: false, &quot;isBadPhone&quot;: false, &quot;isClearinghouseDataBlockIndicator&quot;: false, &quot;isDdVeteran&quot;: false, &quot;isEftDefaultForStipends&quot;: false, &quot;isInDistrict&quot;: false, &quot;isSscrError11Received&quot;: false, &quot;lastActivityDate&quot;: null, &quot;lastInterestDate&quot;: null, &quot;lastModifiedDateTime&quot;: &quot;2024/03/13 14:17:21&quot;, &quot;lastModifiedUserId&quot;: 3050, &quot;lastName&quot;: null, &quot;lastNameFirstFour&quot;: null, &quot;lastStatementBeginDate&quot;: null, &quot;lastStatementCloseDate&quot;: null, &quot;lastStatementDate&quot;: null, &quot;leadDate&quot;: null, &quot;leadSourceId&quot;: 0, &quot;leadTypeId&quot;: 0, &quot;linkedInUrl&quot;: null, &quot;maidenName&quot;: &quot;&quot;, &quot;maritalStatusId&quot;: 0, &quot;mi&quot;: &quot;&quot;, &quot;middleName&quot;: &quot;&quot;, &quot;mobilePhoneNumber&quot;: &quot;&quot;, &quot;nationalityId&quot;: 0, &quot;nickName&quot;: &quot;&quot;, &quot;niStudent&quot;: false, &quot;note&quot;: &quot;&quot;, &quot;originalAssignedAdmissionsRepId&quot;: null, &quot;originalExpectedStartDate&quot;: null, &quot;originalStartDate&quot;: null, &quot;otherEmailAddress&quot;: &quot;&quot;, &quot;otherLanguageFirstName&quot;: null, &quot;otherLanguageLastName&quot;: null, &quot;otherLanguageMiddleName&quot;: null, &quot;otherLanguageStudentFullName&quot;: null, &quot;otherPhoneNumber&quot;: null, &quot;personId&quot;: null, &quot;phoneNumber&quot;: &quot;&quot;, &quot;pin&quot;: null, &quot;postalCode&quot;: &quot;&quot;, &quot;postalCodeFirstThree&quot;: null, &quot;preferredContactType&quot;: &quot;Ph&quot;, &quot;preferredName&quot;: null, &quot;previousEducationGpa&quot;: null, &quot;previousEducationId&quot;: 0, &quot;programGroupId&quot;: 0, &quot;programId&quot;: 0, &quot;rawFirstName&quot;: null, &quot;rawLastName&quot;: null, &quot;rawPhoneNumber&quot;: null, &quot;rowVersion&quot;: null, &quot;schoolStatusId&quot;: 0, &quot;shiftId&quot;: 0, &quot;smsServiceProviderId&quot;: null, &quot;sourceSystem&quot;: &quot;C&quot;, &quot;ssn&quot;: &quot;&quot;, &quot;startDate&quot;: null, &quot;state&quot;: &quot;&quot;, &quot;statementComment&quot;: &quot;&quot;, &quot;streetAddress&quot;: &quot;&quot;, &quot;streetAddress2&quot;: null, &quot;studentFullName&quot;: null, &quot;studentIdentifier&quot;: null, &quot;studentNumber&quot;: null, &quot;subscribeToSms&quot;: false, &quot;suffix&quot;: null, &quot;suffixId&quot;: null, &quot;titleId&quot;: 0, &quot;twitterUrl&quot;: null, &quot;veteran&quot;: &quot;X&quot;, &quot;workPhoneNumber&quot;: &quot;&quot;, &quot;workPhoneNumberExtension&quot;: &quot;&quot;, &quot;originalState&quot;: &quot;H4sIAAAAAAAEAL1Yy27bMBD8lcD3Wk5zMxwDqmIERf1C5aa90uTKXoQijSVpR/n6UnJQoIcURYHpSZAIzg60u7NDzkoR1W2aL9Q9KZto04Qo7A7KdbvuRDcvrXXhfnSM8TQtiqCP1KowblmLD76JY+3b4uNkclfcToqahJXlVxXZu2IADqMrwpR/YVwul/Hlbuzl0G+8LX6slvUA+4FdiMppGs1n79AZFuZLFeLKG26YzLdA8tnMiv77bNhyw1PH9n4UJdGomA9L72L9XZAHFWnHLQHCQLhXQpkxkvaOoyUI9zXr57WCkF4pNuRA4HUUolgaIxQCIqccOwjtXCQA3K3PvWwrbxDglU8udpDy2x69o3Vq9yQA9O9env9rhMVLJBeyHCMUkpTp3yB5eCRnQMq+HuZTHlSgElop4Vz7fWelAInwIHwmWbLOuSVUB/8WBFavpeUsyTD0AzmNyXLWY34lB8FetIotbpSUIfDBkSlNy6EXh/CVThgTlSWi9kk0RiS24g+i2kfxCcP/LQAEuz5yE0Gs6cw+hYVJetA6SJRSSq37QXwVOpQ3acnFyrf9A9JpJ+s70KC5gvfMgbNg7THqz0HtLSEYP1EkUQhH8olC7A88O195F5VGVMxVzuou5NJEmAdGcA6Iv529pagqibBOVmU1iHxGeapNPGYzix2LKzbGEurs6fdsCev9h2ORgM5FQg2JkHnrrH4FcR0ShjL6R+jiz5dZ85/9wSrH7RIAAA==&quot;, &quot;secureState&quot;: &quot;H4sIAAAAAAAEAD3MQQrCMBAAwK9I7mZTeysqeFbpoSJel5C0C01Ssisxvl6s4ANm9qecsfb+7Ood56frPUumOGKst7q4zSvMkQ9qElk6ALaTC8g6kM2JkxdtU4CdMS00BgaXCWd6o1CKsMasfkNH/6OUokurUx6/sIHH9TKs7ZYiC0brFBw/juQnSpcAAAA=&quot;, &quot;extendedProperties&quot;: [], &quot;entityState&quot;: 0 } }, &quot;notifications&quot;: [], &quot;hasError&quot;: false, &quot;hasFault&quot;: false, &quot;hasWarning&quot;: false, &quot;hasValidationError&quot;: false, &quot;hasValidationWarning&quot;: false, &quot;hasValidationInformation&quot;: false, &quot;hasSecurityError&quot;: false }  ","version":null,"tagName":"h2"},{"title":"SaveNew Operation​","type":1,"pageTitle":"Tips for using the Create and SaveNew API operations","url":"/docs/student/best-practices/create-savenew-bestpractices#savenew-operation","content":"This is the operation that is used to insert an instance of the entity. Using the object returned from the call to the Create endpoint, update the applicable properties with the desired values. Below is an example of a payload for inserting a new instance into the Student entity. Properties where values were assigned are highlighted. { &quot;payload&quot;: { &quot;isExcludedCrmIntegration&quot;: false, &quot;addressTypeId&quot;: 0, &quot;studentInquiryRequired&quot;: true, &quot;extraCurricularsList&quot;: [], &quot;programsList&quot;: [], &quot;enrolledProgramIdList&quot;: [], &quot;ethnicitiesList&quot;: [], &quot;leadSourcesList&quot;: [], &quot;deleteVeteranDetails&quot;: false, &quot;vendors&quot;: [], &quot;studentAddressAssociation&quot;: 0, &quot;newAssignedAdmissionsRepId&quot;: 0, &quot;assignedAdmissionsRepReassignedDate&quot;: &quot;0001/01/01 00:00:00&quot;, &quot;studentRelationshipAddress&quot;: null, &quot;lastFourSsn&quot;: null, &quot;customProperties&quot;: {}, &quot;multiValueCustomProperties&quot;: {}, &quot;originalCustomPropertiesValues&quot;: null, &quot;originalMultiValueCustomPropertiesValues&quot;: null, &quot;genderPronounList&quot;: [], &quot;overridePrevEducAltPellValidation&quot;: false, &quot;id&quot;: -1, &quot;acgEligReasonCode&quot;: null, &quot;agencyId&quot;: 0, &quot;alienNumber&quot;: &quot;&quot;, &quot;arAccountStatus&quot;: &quot;X&quot;, &quot;arBalance&quot;: 0, &quot;arNextTransactionNumber&quot;: 0, ==&quot;assignedAdmissionsRepId&quot;: 53,== &quot;athleticIdentifier&quot;: null, &quot;bestTimeToContact&quot;: &quot;Anytime&quot;, ==&quot;campusId&quot;: 5,== &quot;citizenId&quot;: 0, ==&quot;city&quot;: &quot;Englewood&quot;,== &quot;collegeId&quot;: null, ==&quot;countryId&quot;: 1,== &quot;countyId&quot;: 0, &quot;createdDateTime&quot;: &quot;2024/03/13 22:47:27&quot;, &quot;cumulativeGpa&quot;: null, &quot;cumulativeGpaPoints&quot;: null, &quot;currencyCodeId&quot;: null, &quot;currentLda&quot;: null, &quot;dataBlockIndicator&quot;: false, &quot;dateOfBirth&quot;: null, &quot;dbiModifiedDate&quot;: null, &quot;defaultAddressCode&quot;: null, &quot;defaultMasterStudentAddressId&quot;: null, &quot;defaultStudentAddressId&quot;: null, &quot;disabled&quot;: &quot;X&quot;, &quot;driverLicenseNumber&quot;: &quot;&quot;, &quot;driverLicenseState&quot;: &quot;&quot;, ==&quot;emailAddress&quot;: &quot;jparker8765@gmail.com&quot;,== &quot;employabilityAboutInfo&quot;: null, &quot;employerId&quot;: 0, &quot;employmentStatusId&quot;: 0, &quot;externalStudentIdentifier&quot;: null, &quot;extraCurricularActivityId&quot;: 0, &quot;facebookUrl&quot;: null, &quot;faGradPlusCounselingDate&quot;: null, &quot;faRigorousHighSchoolProgramCodeId&quot;: null, ==&quot;firstName&quot;: &quot;Joseph&quot;,== &quot;genderId&quot;: 0, &quot;gpaCredits&quot;: null, &quot;hispanicLatino&quot;: null, &quot;hsAcademicGpa&quot;: null, &quot;instagramUrl&quot;: null, &quot;isActive&quot;: true, &quot;isAllowedBulkRegistrationByTrack&quot;: null, &quot;isBadAddress&quot;: false, &quot;isBadPhone&quot;: false, &quot;isClearinghouseDataBlockIndicator&quot;: false, &quot;isDdVeteran&quot;: false, &quot;isEftDefaultForStipends&quot;: false, &quot;isInDistrict&quot;: false, &quot;isSscrError11Received&quot;: false, &quot;lastActivityDate&quot;: null, &quot;lastInterestDate&quot;: null, &quot;lastModifiedDateTime&quot;: &quot;2024/03/13 22:47:27&quot;, &quot;lastModifiedUserId&quot;: 3050, ==&quot;lastName&quot;: &quot;Parker&quot;,== &quot;lastNameFirstFour&quot;: null, &quot;lastStatementBeginDate&quot;: null, &quot;lastStatementCloseDate&quot;: null, &quot;lastStatementDate&quot;: null, ==&quot;leadDate&quot;: &quot;2024/03/12 00:00:00&quot;,== ==&quot;leadSourceId&quot;: 689,== &quot;leadTypeId&quot;: 0, &quot;linkedInUrl&quot;: null, &quot;maidenName&quot;: &quot;&quot;, &quot;maritalStatusId&quot;: 0, &quot;mi&quot;: &quot;&quot;, &quot;middleName&quot;: &quot;&quot;, &quot;mobilePhoneNumber&quot;: &quot;&quot;, &quot;nationalityId&quot;: 0, &quot;nickName&quot;: &quot;&quot;, &quot;niStudent&quot;: false, &quot;note&quot;: &quot;&quot;, &quot;originalAssignedAdmissionsRepId&quot;: null, &quot;originalExpectedStartDate&quot;: null, &quot;originalStartDate&quot;: null, &quot;otherEmailAddress&quot;: &quot;&quot;, &quot;otherLanguageFirstName&quot;: null, &quot;otherLanguageLastName&quot;: null, &quot;otherLanguageMiddleName&quot;: null, &quot;otherLanguageStudentFullName&quot;: null, &quot;otherPhoneNumber&quot;: null, &quot;personId&quot;: null, &quot;phoneNumber&quot;: &quot;&quot;, &quot;pin&quot;: null, ==&quot;postalCode&quot;: &quot;80113&quot;,== &quot;postalCodeFirstThree&quot;: null, &quot;preferredContactType&quot;: &quot;Ph&quot;, &quot;preferredName&quot;: null, &quot;previousEducationGpa&quot;: null, &quot;previousEducationId&quot;: 0, &quot;programGroupId&quot;: 0, &quot;programId&quot;: 0, &quot;rawFirstName&quot;: null, &quot;rawLastName&quot;: null, &quot;rawPhoneNumber&quot;: null, &quot;rowVersion&quot;: null, ==&quot;schoolStatusId&quot;: 1,== &quot;shiftId&quot;: 0, &quot;smsServiceProviderId&quot;: null, &quot;sourceSystem&quot;: &quot;C&quot;, &quot;ssn&quot;: &quot;&quot;, &quot;startDate&quot;: null, &quot;state&quot;: &quot;CO&quot;, &quot;statementComment&quot;: &quot;&quot;, ==&quot;streetAddress&quot;: &quot;1234 Maple St.&quot;,== &quot;streetAddress2&quot;: null, &quot;studentFullName&quot;: null, &quot;studentIdentifier&quot;: null, &quot;studentNumber&quot;: null, &quot;subscribeToSms&quot;: false, &quot;suffix&quot;: null, &quot;suffixId&quot;: null, &quot;titleId&quot;: 0, &quot;twitterUrl&quot;: null, &quot;veteran&quot;: &quot;X&quot;, &quot;workPhoneNumber&quot;: &quot;&quot;, &quot;workPhoneNumberExtension&quot;: &quot;&quot;, &quot;originalState&quot;: &quot;H4sIAAAAAAAEAL1Yy27bMBD8lcD3Wk5zMxwDqmIERf1C5aa90uTKXoQijSVpR/n6UnJQoIcURYHpSZAIzg60u7NDzkoR1W2aL9Q9KZto04Qo7A7KdbvuRDcvrXXhfnSM8TQtiqCP1KowblmLD76JY+3b4uNkclfcToqahJXlVxXZu2IADqMrwpR/YVwul/Hlbuzl0G+8LX6slvUA+4FdiMppGs1n79AZFuZLFeLKG26YzLdA8tnMiv77bNhyw1PH9n4UJdGomA9L72L9XZAHFWnHLQHCQLhXQpkxkvaOoyUI9zXr57WCkF4pNuRA4HUUolgaIxQCIqccOwjtXCQA3K3PvWwrbxDglU8udpDy2x69o3Vq9yQA9O9env9rhMVLJBeyHCMUkpTp3yB5eCRnQMq+HuZTHlSgElop4Vz7fWelAInwIHwmWbLOuSVUB/8WBFavpeUsyTD0AzmNyXLWY34lB8FetIotbpSUIfDBkSlNy6EXh/CVThgTlSWi9kk0RiS24g+i2kfxCcP/LQAEuz5yE0Gs6cw+hYVJetA6SJRSSq37QXwVOpQ3acnFyrf9A9JpJ+s70KC5gvfMgbNg7THqz0HtLSEYP1EkUQhH8olC7A88O195F5VGVMxVzuou5NJEmAdGcA6Iv529pagqibBOVmU1iHxGeapNPGYzix2LKzbGEurs6fdsCev9h2ORgM5FQg2JkHnrrH4FcR0ShjL6R+jiz5dZ85/9wSrH7RIAAA==&quot;, &quot;secureState&quot;: &quot;H4sIAAAAAAAEAD3MQQrCMBAAwK9I7mZTeysqeFbpoSJel5C0C01Ssisxvl6s4ANm9qecsfb+7Ood56frPUumOGKst7q4zSvMkQ9qElk6ALaTC8g6kM2JkxdtU4CdMS00BgaXCWd6o1CKsMasfkNH/6OUokurUx6/sIHH9TKs7ZYiC0brFBw/juQnSpcAAAA=&quot;, &quot;extendedProperties&quot;: [], &quot;entityState&quot;: 0 } }  The response received when executing the SaveNew operation for the Student entity using the payload above is shown below. { &quot;payload&quot;: { &quot;data&quot;: { &quot;isExcludedCrmIntegration&quot;: false, &quot;addressTypeId&quot;: 0, &quot;studentInquiryRequired&quot;: true, &quot;extraCurricularsList&quot;: [], &quot;programsList&quot;: [], &quot;enrolledProgramIdList&quot;: [], &quot;ethnicitiesList&quot;: [], &quot;leadSourcesList&quot;: [ 689 ], &quot;deleteVeteranDetails&quot;: false, &quot;vendors&quot;: [], &quot;studentAddressAssociation&quot;: 0, &quot;newAssignedAdmissionsRepId&quot;: 0, &quot;assignedAdmissionsRepReassignedDate&quot;: &quot;0001/01/01 00:00:00&quot;, &quot;studentRelationshipAddress&quot;: null, &quot;lastFourSsn&quot;: &quot;&quot;, &quot;customProperties&quot;: {}, &quot;multiValueCustomProperties&quot;: {}, &quot;originalCustomPropertiesValues&quot;: null, &quot;originalMultiValueCustomPropertiesValues&quot;: null, &quot;genderPronounList&quot;: [], &quot;overridePrevEducAltPellValidation&quot;: false, &quot;id&quot;: 50908, &quot;acgEligReasonCode&quot;: null, &quot;agencyId&quot;: 0, &quot;alienNumber&quot;: &quot;&quot;, &quot;arAccountStatus&quot;: &quot;X&quot;, &quot;arBalance&quot;: 0, &quot;arNextTransactionNumber&quot;: 0, &quot;assignedAdmissionsRepId&quot;: 53, &quot;athleticIdentifier&quot;: null, &quot;bestTimeToContact&quot;: &quot;Anytime&quot;, &quot;campusId&quot;: 5, &quot;citizenId&quot;: 0, &quot;city&quot;: &quot;Englewood&quot;, &quot;collegeId&quot;: null, &quot;countryId&quot;: 1, &quot;countyId&quot;: 0, &quot;createdDateTime&quot;: &quot;2024/03/13 23:02:40&quot;, &quot;cumulativeGpa&quot;: null, &quot;cumulativeGpaPoints&quot;: null, &quot;currencyCodeId&quot;: null, &quot;currentLda&quot;: null, &quot;dataBlockIndicator&quot;: false, &quot;dateOfBirth&quot;: null, &quot;dbiModifiedDate&quot;: null, &quot;defaultAddressCode&quot;: null, &quot;defaultMasterStudentAddressId&quot;: null, &quot;defaultStudentAddressId&quot;: null, &quot;disabled&quot;: &quot;X&quot;, &quot;driverLicenseNumber&quot;: &quot;&quot;, &quot;driverLicenseState&quot;: &quot;&quot;, &quot;emailAddress&quot;: &quot;jparker8765@gmail.com&quot;, &quot;employabilityAboutInfo&quot;: null, &quot;employerId&quot;: 0, &quot;employmentStatusId&quot;: 0, &quot;externalStudentIdentifier&quot;: null, &quot;extraCurricularActivityId&quot;: 0, &quot;facebookUrl&quot;: null, &quot;faGradPlusCounselingDate&quot;: null, &quot;faRigorousHighSchoolProgramCodeId&quot;: null, &quot;firstName&quot;: &quot;Joseph&quot;, &quot;genderId&quot;: 0, &quot;gpaCredits&quot;: null, &quot;hispanicLatino&quot;: null, &quot;hsAcademicGpa&quot;: null, &quot;instagramUrl&quot;: null, &quot;isActive&quot;: true, &quot;isAllowedBulkRegistrationByTrack&quot;: null, &quot;isBadAddress&quot;: false, &quot;isBadPhone&quot;: false, &quot;isClearinghouseDataBlockIndicator&quot;: false, &quot;isDdVeteran&quot;: false, &quot;isEftDefaultForStipends&quot;: false, &quot;isInDistrict&quot;: false, &quot;isSscrError11Received&quot;: false, &quot;lastActivityDate&quot;: null, &quot;lastInterestDate&quot;: null, &quot;lastModifiedDateTime&quot;: &quot;2024/03/13 23:02:40&quot;, &quot;lastModifiedUserId&quot;: 3050, &quot;lastName&quot;: &quot;Parker&quot;, &quot;lastNameFirstFour&quot;: null, &quot;lastStatementBeginDate&quot;: null, &quot;lastStatementCloseDate&quot;: null, &quot;lastStatementDate&quot;: null, &quot;leadDate&quot;: &quot;2024/03/12 00:00:00&quot;, &quot;leadSourceId&quot;: 689, &quot;leadTypeId&quot;: 0, &quot;linkedInUrl&quot;: null, &quot;maidenName&quot;: &quot;&quot;, &quot;maritalStatusId&quot;: 0, &quot;mi&quot;: &quot;&quot;, &quot;middleName&quot;: &quot;&quot;, &quot;mobilePhoneNumber&quot;: &quot;&quot;, &quot;nationalityId&quot;: 0, &quot;nickName&quot;: &quot;&quot;, &quot;niStudent&quot;: false, &quot;note&quot;: &quot;&quot;, &quot;originalAssignedAdmissionsRepId&quot;: null, &quot;originalExpectedStartDate&quot;: null, &quot;originalStartDate&quot;: null, &quot;otherEmailAddress&quot;: &quot;&quot;, &quot;otherLanguageFirstName&quot;: null, &quot;otherLanguageLastName&quot;: null, &quot;otherLanguageMiddleName&quot;: null, &quot;otherLanguageStudentFullName&quot;: null, &quot;otherPhoneNumber&quot;: null, &quot;personId&quot;: null, &quot;phoneNumber&quot;: &quot;&quot;, &quot;pin&quot;: null, &quot;postalCode&quot;: &quot;80113&quot;, &quot;postalCodeFirstThree&quot;: null, &quot;preferredContactType&quot;: &quot;Ph&quot;, &quot;preferredName&quot;: null, &quot;previousEducationGpa&quot;: null, &quot;previousEducationId&quot;: 0, &quot;programGroupId&quot;: 0, &quot;programId&quot;: 0, &quot;rawFirstName&quot;: null, &quot;rawLastName&quot;: null, &quot;rawPhoneNumber&quot;: null, &quot;rowVersion&quot;: &quot;AAAAAAMbrUk=&quot;, &quot;schoolStatusId&quot;: 1, &quot;shiftId&quot;: 0, &quot;smsServiceProviderId&quot;: null, &quot;sourceSystem&quot;: &quot;C&quot;, &quot;ssn&quot;: &quot;&quot;, &quot;startDate&quot;: null, &quot;state&quot;: &quot;CO&quot;, &quot;statementComment&quot;: &quot;&quot;, &quot;streetAddress&quot;: &quot;1234 Maple St.&quot;, &quot;streetAddress2&quot;: null, &quot;studentFullName&quot;: null, &quot;studentIdentifier&quot;: null, &quot;studentNumber&quot;: &quot;1149&quot;, &quot;subscribeToSms&quot;: false, &quot;suffix&quot;: null, &quot;suffixId&quot;: null, &quot;titleId&quot;: 0, &quot;twitterUrl&quot;: null, &quot;veteran&quot;: &quot;X&quot;, &quot;workPhoneNumber&quot;: &quot;&quot;, &quot;workPhoneNumberExtension&quot;: &quot;&quot;, &quot;originalState&quot;: &quot;H4sIAAAAAAAEANVbbVMiORD+K5bflQFcz6WUOkB0uVOkAPf2a0iaoY9MQnUyIvvrLzOi56njnU6ic5ZlqTDpJ+lO99MvHHeI2OZq/jtsvjOZwtXcWEIVM7WZblawc5tIZU52F9auWrWa4QtImNlPkJM2em73uU5qjShq1upRbQKETOJPZlGrWr6w2b1boYUPa6zX6/11c19TnD1Yr/24vJjky+6hMpYpDrvt4wI4+QvtgenfcpkKED1KBspCTLnI41r26nH+4A62rHvgZJe1ZlpLYOoeCft3JLvtOZMGjmv5Uu183UI4xTgvmLFnOqWJKYJ299BbkNXejWYgCkCgsm86my/R1+io7Nl0eNyXGI+BGa16WsATcArlya6lFErsuBOD4htv+45K71kiqGGazIAqYA8d6nCuU2UnltnUeEPU/lH6nKjLZOYICjAJ4Jgw+cHKoyHc2ikxZRjPvM3rilxo+mjrMgZjBaIjEnS/amXGsPJ36Zul8dmFBIt8IEBZnOOzs/Nx5btg7BQTmOqeVtYpyp9Zd9TGupXLHkOPJavU+NNLaTxo8Seo6nhJB2jjT2t9FUtYay1Kw9JSQgzPzsmH1fYyN0z+IlW9/GYdoApFzh4BsyBO3Y9pfgdfjgvbl9+ErRE1Dvai5l69OW00W1GjdRDtf21GjaPDo73ooBWVx54mqXT89AbOVyyE8Txef6Sdbp7Gcj9SiDI2lVG1MHcgF2AvRIgzcobDulLz5UAJ5Mzqorj9ablCZtpX8y6SXYTY/wwvtciCbn6HQkiAOUul7QhBYEwgQr8VcunyKqCJTTMmsZUYxCa38j5CEho2k1DkcD+DhZ+Scyl0gRyUgcpkLf9AlWUuRcHgI0H1E4Zyax7+NPjnitES6OiXwy+/xpmErNhSVqv9ZCX1hs1QOprVmenUDtRcB7DoO0FA1SERd4gSuM94K4Ts1vkzxeTW0QTNkJwsYlmwRe5oA3VcLnuDVeJ6Z4yDC8PLa5IBtn/GzomJkUxNxnENSPeGQCHxjI0x1qRT8w3jhTsfxy1GpGNiSTAWdYZk7JAVUuR3uKHftIHVoqxWz0GJKjkDx5VdUiEwCFn+hmbFFPILR8tVCOf6zXQ4E5AgD5NTDLJKfGaoYS7hwORup8hI30PCM0RlbcLBklKvQXRTuRxDjO49eWOhu5kS48sgJ9Fl4nXm8GkpSY5ttNDKp548Ies5wdm/F867QvWzu4E5Fd/BBXlWuSbVwPTndpvonGmXVeHKueoKGuNAnWYXEgtrup+IbWI49Yk01etj4OBcW1Gg+9Rm5D3ZC0R4MhFZO9Y5MxtQxONKxv+uGvh4A9fGIyNqRl+8gPNLHkd5CusLV85us456IMvK6wlZgth1wV8FNOEHQT2p8/gVXFAoGcBeqij6uYONaRS18u/SBuRgTpzd8OdZ13vv2+HRVx+osr+qkxVdoFqCGKgwtP+SoQDl1cGUAUNos5JLtUpBl1iFs0EhJFRFUXqGEvI8pDJV6GGeFjJZqcLZEPmyIjob4raUWTUWPNSVaBhcETqCweR/m9nx4XvvJfZvV8AtCOf3KBQpuJcVVIZdAAXpu5TEdMFUnLIYiiqx3jZ/L6iAtHuXUxgUvEva+o6zVMqQ4opDig8RIyCjn49VeVm6UrFwhE9rWl72qI1jZy/MEZRIRo+ier30GOPfwPIbPl0QhLDQEcEciEBs5xizVzym5aX7OQ/4At1Qt/4N6tT0RcpzshWm0fFMTHXo3LZVeE469TfG6wtVdQCN2TpkqHXLBwywbvWwUWis199dIHrlwzHMwOFB19E12rxtHDr/upzR9fKkrA7veuOeU/HSQ7CTBc5tdQx9kpgJ0A1ycHfwBl/qpvuwmLsy2WRjLCT+Ak6v9O4r8RmqkBmN32G2du+q9JE/FKl1khTn8h97/o5tWe+TdvVG82Dnkq0k7EzsfvlzewSyEcRSQudHHzGItpXhOY9p1+sHpQvzk3RmOOEMptp53arVsCbpfI63ITSSLxwkqkzRygr1OaZrtBYoTJvj9UGPd5h06VHuPzQtq1U0eIIoG4BVr7BUz9Bqr3/ovf0XA0njYRU/AAA=&quot;, &quot;secureState&quot;: &quot;H4sIAAAAAAAEAD3MQQrCMBAAwK9I7mZTeysqeFbpoSJel5C0C01Ssisxvl6s4ANm9qecsfb+7Ood56frPUumOGKst7q4zSvMkQ9qElk6ALaTC8g6kM2JkxdtU4CdMS00BgaXCWd6o1CKsMasfkNH/6OUokurUx6/sIHH9TKs7ZYiC0brFBw/juQnSpcAAAA=&quot;, &quot;extendedProperties&quot;: [], &quot;entityState&quot;: 3 } }, &quot;notifications&quot;: [], &quot;hasError&quot;: false, &quot;hasFault&quot;: false, &quot;hasWarning&quot;: false, &quot;hasValidationError&quot;: false, &quot;hasValidationWarning&quot;: false, &quot;hasValidationInformation&quot;: false, &quot;hasSecurityError&quot;: false }  ","version":null,"tagName":"h2"},{"title":"Additional notes:​","type":1,"pageTitle":"Tips for using the Create and SaveNew API operations","url":"/docs/student/best-practices/create-savenew-bestpractices#additional-notes","content":"","version":null,"tagName":"h2"},{"title":"Implementation of SaveNew operation​","type":1,"pageTitle":"Tips for using the Create and SaveNew API operations","url":"/docs/student/best-practices/create-savenew-bestpractices#implementation-of-savenew-operation","content":"Not every entity has the SaveNew operation implemented. As a general rule you can use to determine if the SaveNew operation is implemented is to look at the other operations for that entity in the Swagger documentation. If there is another operation listed that has a summary description related to adding new records then the SaveNew operation should not be utilized. If you have any doubts, please send an email to Developers@anthology.com requesting clarification on which endpoint to use for inserting a new record into an entity. ","version":null,"tagName":"h3"},{"title":"EntityState property​","type":1,"pageTitle":"Tips for using the Create and SaveNew API operations","url":"/docs/student/best-practices/create-savenew-bestpractices#entitystate-property","content":"EntityState is a property that exists on the base entity class that every entity inherits from. This is an enum property with the following valid values: 0= Record is being added 1= Record is being deleted 2= Record is being modified 3= Record is unchanged  The value provided in this property may or may not impact the execution logic of the API you are calling. The use of this property in the API execution logic is not consistent across all of the Delete, Save and SaveNew operations. It is recommended that this property be populated correctly to align with the action that is occurring to ensure expected behavior in the API if there is dependent execution logic on this property. ","version":null,"tagName":"h3"},{"title":"Id property​","type":1,"pageTitle":"Tips for using the Create and SaveNew API operations","url":"/docs/student/best-practices/create-savenew-bestpractices#id-property","content":"The primary key for every entity in the Student data model is called Id. In most cases, this property will be populated with -1 in the response returned from the Create operation. If not, it is recommended that you set the value for this property to -1 prior to calling the SaveNew operation. Contributors on this article: Jim Burns Senior Application ArchitectAnthology Student ","version":null,"tagName":"h3"},{"title":"Student REST API: First Steps","type":0,"sectionRef":"#","url":"/docs/student/getting-started/first-steps","content":"","keywords":"","version":null},{"title":"Before You Get Started​","type":1,"pageTitle":"Student REST API: First Steps","url":"/docs/student/getting-started/first-steps#before-you-get-started","content":"Availability​ Student APIs are made available exclusively to licensed Anthology member campuses. Third-party or public use of Student APIs is prohibited without the consent of Anthology. API Access​ Campus developers who wish to access the API must be pre-approved by Anthology. Developers may be added to the approved list by having the official campus contact, who is responsible for your license, send the following information for each developer to the Support Team (support@campuslabs.com): Full nameUnique identifierCampus email address Once approved, developers may manage their own access keys at: https://{campusdomain}.campuslabs.com/keymanagementwhere {campusdomain} is the name/host of your institution's Anthology installation. Authorization​ In order to maintain data security, an authorization token is required to make calls to the API. How you handle retrieving an authorization token is dependent on your Student configuration. You may read about authorization tokens and Student configuration in detail at https://help.campusmanagement.com/IM/Content/CNS/CNSAPI.htm More Information​ We will continue to add new examples, tutorials, and code samples so make sure to check these links regularly. Student Developer Docs (navigate to REST APIs&gt;Student)Developer PortalREST Documentation Contributors on this article: Mark O'Neil Former DirectorPlatform and APIs ","version":null,"tagName":"h2"},{"title":"Anthology Student Service Catalog","type":0,"sectionRef":"#","url":"/docs/student/service-catalog/service-catalog","content":"Anthology Student Service Catalog Published: Not Available Last Update: Not Available The Service Catalog is a collection of Web Services made available to customers who license Anthology® products. Note: An Anthology MyCampusInsight account is required to access. https://www.mycampusinsight.com/Documentation-Center/Help/Help_Home/Content/helphome.htm The Service Catalog system contains the Application Programming Intertace (API) documentation for SOAP-based web services and Windows Communication Foundation (WCF) services. Ihe documentation is intended to be used by programmers familiar with consuming SOAP and WCF services. For Anthology Student, this help system supports the current CampusLink API version and two prior versions. Topics that have been added or modified during the release cycle display a version selector at the top of the topic pane. Use the version selector to reveal content for prior versions. Contributors on this article: Mark O'Neil Former DirectorPlatform and APIs","keywords":"","version":null},{"title":"Student Training Videos","type":0,"sectionRef":"#","url":"/docs/student/tutorials/student-training-videos","content":"Student Training Videos Published: Not Available Last Update: Not Available This page contains a list of Student training videos. Contributors on this article: Anthology Inc Integrations, Developer Relations and Standards TeamAnthology Inc","keywords":"","version":null}],"options":{"languages":["en"],"disableVersioning":true,"id":"default"}}